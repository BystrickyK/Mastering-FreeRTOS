
002LED_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008014  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008454  08008454  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008454  08008454  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008454  08008454  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800845c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a8  20000078  080084d4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014520  080084d4  00024520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd69  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a03  00000000  00000000  0003de11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b8  00000000  00000000  00041818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  00042dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002da18  00000000  00000000  000441d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fc9  00000000  00000000  00071be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011349c  00000000  00000000  00089bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019d04d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006170  00000000  00000000  0019d0a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080081bc 	.word	0x080081bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	080081bc 	.word	0x080081bc

08000200 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000200:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000202:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000206:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000290 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800020a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800020e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000212:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000214:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000216:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000218:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800021a:	d332      	bcc.n	8000282 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800021c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800021e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000220:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000222:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000224:	d314      	bcc.n	8000250 <_CheckCase2>

08000226 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000226:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000228:	19d0      	adds	r0, r2, r7
 800022a:	bf00      	nop

0800022c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000230:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000234:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000236:	d005      	beq.n	8000244 <_CSDone>
        LDRB     R3,[R1], #+1
 8000238:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000240:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000242:	d1f3      	bne.n	800022c <_LoopCopyStraight>

08000244 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000244:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000248:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800024a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800024e:	4770      	bx	lr

08000250 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000250:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000252:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000254:	d319      	bcc.n	800028a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000256:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000258:	1b12      	subs	r2, r2, r4

0800025a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800025e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000262:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000266:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000268:	d005      	beq.n	8000276 <_No2ChunkNeeded>

0800026a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800026e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000272:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyAfterWrapAround>

08000276 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000276:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800027a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800027c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800027e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000280:	4770      	bx	lr

08000282 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000282:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000284:	3801      	subs	r0, #1
        CMP      R0,R2
 8000286:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000288:	d2cd      	bcs.n	8000226 <_Case4>

0800028a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800028a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800028e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000290:	20014468 	.word	0x20014468
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b08a      	sub	sp, #40	; 0x28
 8000344:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f000 fae6 	bl	8000916 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f875 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f000 f8b9 	bl	80004c4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 8000352:	f004 fdc5 	bl	8004ee0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000356:	f006 f9ad 	bl	80066b4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(handler_LED_green, "Task-Green", 200, NULL,
 800035a:	f107 030c 	add.w	r3, r7, #12
 800035e:	9301      	str	r3, [sp, #4]
 8000360:	2302      	movs	r3, #2
 8000362:	9300      	str	r3, [sp, #0]
 8000364:	2300      	movs	r3, #0
 8000366:	22c8      	movs	r2, #200	; 0xc8
 8000368:	492a      	ldr	r1, [pc, #168]	; (8000414 <main+0xd4>)
 800036a:	482b      	ldr	r0, [pc, #172]	; (8000418 <main+0xd8>)
 800036c:	f002 fe4a 	bl	8003004 <xTaskCreate>
 8000370:	61f8      	str	r0, [r7, #28]
              2, &handle_LED_green);
  printf("Task Green status: %ld", status);
 8000372:	69f9      	ldr	r1, [r7, #28]
 8000374:	4829      	ldr	r0, [pc, #164]	; (800041c <main+0xdc>)
 8000376:	f006 ffdd 	bl	8007334 <iprintf>
  configASSERT(status == pdPASS);
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d00a      	beq.n	8000396 <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000384:	f383 8811 	msr	BASEPRI, r3
 8000388:	f3bf 8f6f 	isb	sy
 800038c:	f3bf 8f4f 	dsb	sy
 8000390:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000392:	bf00      	nop
 8000394:	e7fe      	b.n	8000394 <main+0x54>

  status = xTaskCreate(handler_LED_red, "Task-Red", 200, NULL,
 8000396:	f107 0308 	add.w	r3, r7, #8
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	2302      	movs	r3, #2
 800039e:	9300      	str	r3, [sp, #0]
 80003a0:	2300      	movs	r3, #0
 80003a2:	22c8      	movs	r2, #200	; 0xc8
 80003a4:	491e      	ldr	r1, [pc, #120]	; (8000420 <main+0xe0>)
 80003a6:	481f      	ldr	r0, [pc, #124]	; (8000424 <main+0xe4>)
 80003a8:	f002 fe2c 	bl	8003004 <xTaskCreate>
 80003ac:	61f8      	str	r0, [r7, #28]
              2, &handle_LED_red);
  printf("Task Red status: %ld", status);
 80003ae:	69f9      	ldr	r1, [r7, #28]
 80003b0:	481d      	ldr	r0, [pc, #116]	; (8000428 <main+0xe8>)
 80003b2:	f006 ffbf 	bl	8007334 <iprintf>
  configASSERT(status == pdPASS);
 80003b6:	69fb      	ldr	r3, [r7, #28]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d00a      	beq.n	80003d2 <main+0x92>
        __asm volatile
 80003bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c0:	f383 8811 	msr	BASEPRI, r3
 80003c4:	f3bf 8f6f 	isb	sy
 80003c8:	f3bf 8f4f 	dsb	sy
 80003cc:	617b      	str	r3, [r7, #20]
    }
 80003ce:	bf00      	nop
 80003d0:	e7fe      	b.n	80003d0 <main+0x90>

  status = xTaskCreate(handler_LED_blue, "Task-Blue", 200, NULL,
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	9301      	str	r3, [sp, #4]
 80003d6:	2302      	movs	r3, #2
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2300      	movs	r3, #0
 80003dc:	22c8      	movs	r2, #200	; 0xc8
 80003de:	4913      	ldr	r1, [pc, #76]	; (800042c <main+0xec>)
 80003e0:	4813      	ldr	r0, [pc, #76]	; (8000430 <main+0xf0>)
 80003e2:	f002 fe0f 	bl	8003004 <xTaskCreate>
 80003e6:	61f8      	str	r0, [r7, #28]
              2, &handle_LED_blue);
  printf("Task Blue status: %ld", status);
 80003e8:	69f9      	ldr	r1, [r7, #28]
 80003ea:	4812      	ldr	r0, [pc, #72]	; (8000434 <main+0xf4>)
 80003ec:	f006 ffa2 	bl	8007334 <iprintf>
  configASSERT(status == pdPASS);
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d00a      	beq.n	800040c <main+0xcc>
        __asm volatile
 80003f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003fa:	f383 8811 	msr	BASEPRI, r3
 80003fe:	f3bf 8f6f 	isb	sy
 8000402:	f3bf 8f4f 	dsb	sy
 8000406:	613b      	str	r3, [r7, #16]
    }
 8000408:	bf00      	nop
 800040a:	e7fe      	b.n	800040a <main+0xca>

  vTaskStartScheduler();
 800040c:	f003 f818 	bl	8003440 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000410:	e7fe      	b.n	8000410 <main+0xd0>
 8000412:	bf00      	nop
 8000414:	080081d4 	.word	0x080081d4
 8000418:	080005ed 	.word	0x080005ed
 800041c:	080081e0 	.word	0x080081e0
 8000420:	080081f8 	.word	0x080081f8
 8000424:	08000571 	.word	0x08000571
 8000428:	08008204 	.word	0x08008204
 800042c:	0800821c 	.word	0x0800821c
 8000430:	080005ad 	.word	0x080005ad
 8000434:	08008228 	.word	0x08008228

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b096      	sub	sp, #88	; 0x58
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0314 	add.w	r3, r7, #20
 8000442:	2244      	movs	r2, #68	; 0x44
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f006 ff6c 	bl	8007324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	463b      	mov	r3, r7
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800045a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800045e:	f000 fd59 	bl	8000f14 <HAL_PWREx_ControlVoltageScaling>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000468:	f000 f8f2 	bl	8000650 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800046c:	2310      	movs	r3, #16
 800046e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000470:	2301      	movs	r3, #1
 8000472:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000478:	2370      	movs	r3, #112	; 0x70
 800047a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800047c:	2300      	movs	r3, #0
 800047e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fde9 	bl	800105c <HAL_RCC_OscConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000490:	f000 f8de 	bl	8000650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000494:	230f      	movs	r3, #15
 8000496:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000498:	2300      	movs	r3, #0
 800049a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004a0:	2300      	movs	r3, #0
 80004a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a4:	2300      	movs	r3, #0
 80004a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a8:	463b      	mov	r3, r7
 80004aa:	2100      	movs	r1, #0
 80004ac:	4618      	mov	r0, r3
 80004ae:	f001 f9fb 	bl	80018a8 <HAL_RCC_ClockConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004b8:	f000 f8ca 	bl	8000650 <Error_Handler>
  }
}
 80004bc:	bf00      	nop
 80004be:	3758      	adds	r7, #88	; 0x58
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b22      	ldr	r3, [pc, #136]	; (8000564 <MX_GPIO_Init+0xa0>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a21      	ldr	r2, [pc, #132]	; (8000564 <MX_GPIO_Init+0xa0>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <MX_GPIO_Init+0xa0>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	4b1c      	ldr	r3, [pc, #112]	; (8000564 <MX_GPIO_Init+0xa0>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a1b      	ldr	r2, [pc, #108]	; (8000564 <MX_GPIO_Init+0xa0>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b19      	ldr	r3, [pc, #100]	; (8000564 <MX_GPIO_Init+0xa0>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0304 	and.w	r3, r3, #4
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000510:	4815      	ldr	r0, [pc, #84]	; (8000568 <MX_GPIO_Init+0xa4>)
 8000512:	f000 fcad 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8000516:	2200      	movs	r2, #0
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	4814      	ldr	r0, [pc, #80]	; (800056c <MX_GPIO_Init+0xa8>)
 800051c:	f000 fca8 	bl	8000e70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000520:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	2301      	movs	r3, #1
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4619      	mov	r1, r3
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <MX_GPIO_Init+0xa4>)
 800053a:	f000 fb07 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	4805      	ldr	r0, [pc, #20]	; (800056c <MX_GPIO_Init+0xa8>)
 8000556:	f000 faf9 	bl	8000b4c <HAL_GPIO_Init>

}
 800055a:	bf00      	nop
 800055c:	3720      	adds	r7, #32
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40021000 	.word	0x40021000
 8000568:	48000400 	.word	0x48000400
 800056c:	48000800 	.word	0x48000800

08000570 <handler_LED_red>:

/* USER CODE BEGIN 4 */
static void handler_LED_red(void* parameters)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
//  const TickType_t xDelay = pdMS_TO_TICKS(125);
	const TickType_t xPeriod = pdMS_TO_TICKS(750);
 8000578:	23bb      	movs	r3, #187	; 0xbb
 800057a:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800057c:	f003 f870 	bl	8003660 <xTaskGetTickCount>
 8000580:	4603      	mov	r3, r0
 8000582:	60bb      	str	r3, [r7, #8]
  while(1)
  {
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	68f9      	ldr	r1, [r7, #12]
 800058a:	4618      	mov	r0, r3
 800058c:	f002 fe9e 	bl	80032cc <xTaskDelayUntil>
    SEGGER_SYSVIEW_PrintfTarget("Toggling RED");
 8000590:	4804      	ldr	r0, [pc, #16]	; (80005a4 <handler_LED_red+0x34>)
 8000592:	f006 fdff 	bl	8007194 <SEGGER_SYSVIEW_PrintfTarget>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <handler_LED_red+0x38>)
 800059c:	f000 fc80 	bl	8000ea0 <HAL_GPIO_TogglePin>
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005a0:	e7f0      	b.n	8000584 <handler_LED_red+0x14>
 80005a2:	bf00      	nop
 80005a4:	08008240 	.word	0x08008240
 80005a8:	48000400 	.word	0x48000400

080005ac <handler_LED_blue>:

  }
}

static void handler_LED_blue(void* parameters)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
//  const TickType_t xDelay = pdMS_TO_TICKS(250);
  const TickType_t xPeriod = pdMS_TO_TICKS(750);
 80005b4:	23bb      	movs	r3, #187	; 0xbb
 80005b6:	60fb      	str	r3, [r7, #12]
  vTaskDelay(pdMS_TO_TICKS(250));
 80005b8:	203e      	movs	r0, #62	; 0x3e
 80005ba:	f002 ff09 	bl	80033d0 <vTaskDelay>
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80005be:	f003 f84f 	bl	8003660 <xTaskGetTickCount>
 80005c2:	4603      	mov	r3, r0
 80005c4:	60bb      	str	r3, [r7, #8]

  while(1)
  {
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	68f9      	ldr	r1, [r7, #12]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fe7d 	bl	80032cc <xTaskDelayUntil>
    SEGGER_SYSVIEW_PrintfTarget("Toggling BLUE");
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <handler_LED_blue+0x38>)
 80005d4:	f006 fdde 	bl	8007194 <SEGGER_SYSVIEW_PrintfTarget>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005d8:	2180      	movs	r1, #128	; 0x80
 80005da:	4803      	ldr	r0, [pc, #12]	; (80005e8 <handler_LED_blue+0x3c>)
 80005dc:	f000 fc60 	bl	8000ea0 <HAL_GPIO_TogglePin>
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005e0:	e7f1      	b.n	80005c6 <handler_LED_blue+0x1a>
 80005e2:	bf00      	nop
 80005e4:	08008250 	.word	0x08008250
 80005e8:	48000400 	.word	0x48000400

080005ec <handler_LED_green>:
  }
}


static void handler_LED_green(void* parameters)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
//  const TickType_t xDelay = pdMS_TO_TICKS(375);
  const TickType_t xPeriod = pdMS_TO_TICKS(750);
 80005f4:	23bb      	movs	r3, #187	; 0xbb
 80005f6:	60fb      	str	r3, [r7, #12]
  vTaskDelay(pdMS_TO_TICKS(500));
 80005f8:	207d      	movs	r0, #125	; 0x7d
 80005fa:	f002 fee9 	bl	80033d0 <vTaskDelay>
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80005fe:	f003 f82f 	bl	8003660 <xTaskGetTickCount>
 8000602:	4603      	mov	r3, r0
 8000604:	60bb      	str	r3, [r7, #8]
  while(1)
  {
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000606:	f107 0308 	add.w	r3, r7, #8
 800060a:	68f9      	ldr	r1, [r7, #12]
 800060c:	4618      	mov	r0, r3
 800060e:	f002 fe5d 	bl	80032cc <xTaskDelayUntil>
    SEGGER_SYSVIEW_PrintfTarget("Toggling GREEN");
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <handler_LED_green+0x38>)
 8000614:	f006 fdbe 	bl	8007194 <SEGGER_SYSVIEW_PrintfTarget>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <handler_LED_green+0x3c>)
 800061c:	f000 fc40 	bl	8000ea0 <HAL_GPIO_TogglePin>
	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000620:	e7f1      	b.n	8000606 <handler_LED_green+0x1a>
 8000622:	bf00      	nop
 8000624:	08008260 	.word	0x08008260
 8000628:	48000800 	.word	0x48000800

0800062c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a04      	ldr	r2, [pc, #16]	; (800064c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d101      	bne.n	8000642 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800063e:	f000 f983 	bl	8000948 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40012c00 	.word	0x40012c00

08000650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000658:	e7fe      	b.n	8000658 <Error_Handler+0x8>
	...

0800065c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <HAL_MspInit+0x44>)
 8000664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000666:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <HAL_MspInit+0x44>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6613      	str	r3, [r2, #96]	; 0x60
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <HAL_MspInit+0x44>)
 8000670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <HAL_MspInit+0x44>)
 800067c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800067e:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <HAL_MspInit+0x44>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6593      	str	r3, [r2, #88]	; 0x58
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <HAL_MspInit+0x44>)
 8000688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000692:	f004 f879 	bl	8004788 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40021000 	.word	0x40021000

080006a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	6879      	ldr	r1, [r7, #4]
 80006b8:	2019      	movs	r0, #25
 80006ba:	f000 fa1d 	bl	8000af8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80006be:	2019      	movs	r0, #25
 80006c0:	f000 fa36 	bl	8000b30 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <HAL_InitTick+0x9c>)
 80006c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c8:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <HAL_InitTick+0x9c>)
 80006ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006ce:	6613      	str	r3, [r2, #96]	; 0x60
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_InitTick+0x9c>)
 80006d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80006d8:	60fb      	str	r3, [r7, #12]
 80006da:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006dc:	f107 0210 	add.w	r2, r7, #16
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fab8 	bl	8001c5c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006ec:	f001 faa0 	bl	8001c30 <HAL_RCC_GetPCLK2Freq>
 80006f0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006f4:	4a13      	ldr	r2, [pc, #76]	; (8000744 <HAL_InitTick+0xa0>)
 80006f6:	fba2 2303 	umull	r2, r3, r2, r3
 80006fa:	0c9b      	lsrs	r3, r3, #18
 80006fc:	3b01      	subs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <HAL_InitTick+0xa4>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <HAL_InitTick+0xa8>)
 8000704:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <HAL_InitTick+0xa4>)
 8000708:	f240 32e7 	movw	r2, #999	; 0x3e7
 800070c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <HAL_InitTick+0xa4>)
 8000710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000712:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <HAL_InitTick+0xa4>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <HAL_InitTick+0xa4>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <HAL_InitTick+0xa4>)
 8000722:	f001 fb8f 	bl	8001e44 <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d104      	bne.n	8000736 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800072c:	4806      	ldr	r0, [pc, #24]	; (8000748 <HAL_InitTick+0xa4>)
 800072e:	f001 fbeb 	bl	8001f08 <HAL_TIM_Base_Start_IT>
 8000732:	4603      	mov	r3, r0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3730      	adds	r7, #48	; 0x30
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	431bde83 	.word	0x431bde83
 8000748:	200143d8 	.word	0x200143d8
 800074c:	40012c00 	.word	0x40012c00

08000750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000754:	e7fe      	b.n	8000754 <NMI_Handler+0x4>

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <MemManage_Handler+0x4>

08000762 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <UsageFault_Handler+0x4>

0800076e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000782:	f001 fc31 	bl	8001fe8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200143d8 	.word	0x200143d8

08000790 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e00a      	b.n	80007b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007a2:	f3af 8000 	nop.w
 80007a6:	4601      	mov	r1, r0
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf0      	blt.n	80007a2 <_read+0x12>
	}

return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80007ca:	b480      	push	{r7}
 80007cc:	b083      	sub	sp, #12
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
	return -1;
 80007d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007f2:	605a      	str	r2, [r3, #4]
	return 0;
 80007f4:	2300      	movs	r3, #0
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <_isatty>:

int _isatty(int file)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	return 1;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
	return 0;
 8000824:	2300      	movs	r3, #0
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800083c:	4a14      	ldr	r2, [pc, #80]	; (8000890 <_sbrk+0x5c>)
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <_sbrk+0x60>)
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000850:	4b11      	ldr	r3, [pc, #68]	; (8000898 <_sbrk+0x64>)
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <_sbrk+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000856:	4b10      	ldr	r3, [pc, #64]	; (8000898 <_sbrk+0x64>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4413      	add	r3, r2
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	429a      	cmp	r2, r3
 8000862:	d207      	bcs.n	8000874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000864:	f006 fd18 	bl	8007298 <__errno>
 8000868:	4603      	mov	r3, r0
 800086a:	220c      	movs	r2, #12
 800086c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	e009      	b.n	8000888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <_sbrk+0x64>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800087a:	4b07      	ldr	r3, [pc, #28]	; (8000898 <_sbrk+0x64>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4413      	add	r3, r2
 8000882:	4a05      	ldr	r2, [pc, #20]	; (8000898 <_sbrk+0x64>)
 8000884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000886:	68fb      	ldr	r3, [r7, #12]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200a0000 	.word	0x200a0000
 8000894:	00000400 	.word	0x00000400
 8000898:	20000094 	.word	0x20000094
 800089c:	20014520 	.word	0x20014520

080008a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <SystemInit+0x20>)
 80008a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <SystemInit+0x20>)
 80008ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c8:	f7ff ffea 	bl	80008a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d0:	4a0d      	ldr	r2, [pc, #52]	; (8000908 <LoopForever+0xe>)
  movs r3, #0
 80008d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d4:	e002      	b.n	80008dc <LoopCopyDataInit>

080008d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008da:	3304      	adds	r3, #4

080008dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e0:	d3f9      	bcc.n	80008d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <LoopForever+0x12>)
  ldr r4, =_ebss
 80008e4:	4c0a      	ldr	r4, [pc, #40]	; (8000910 <LoopForever+0x16>)
  movs r3, #0
 80008e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e8:	e001      	b.n	80008ee <LoopFillZerobss>

080008ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ec:	3204      	adds	r2, #4

080008ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f0:	d3fb      	bcc.n	80008ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008f2:	f006 fcd7 	bl	80072a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008f6:	f7ff fd23 	bl	8000340 <main>

080008fa <LoopForever>:

LoopForever:
    b LoopForever
 80008fa:	e7fe      	b.n	80008fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008fc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000904:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000908:	0800845c 	.word	0x0800845c
  ldr r2, =_sbss
 800090c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000910:	20014520 	.word	0x20014520

08000914 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000914:	e7fe      	b.n	8000914 <ADC1_IRQHandler>

08000916 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000920:	2003      	movs	r0, #3
 8000922:	f000 f8de 	bl	8000ae2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000926:	200f      	movs	r0, #15
 8000928:	f7ff febc 	bl	80006a4 <HAL_InitTick>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d002      	beq.n	8000938 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	71fb      	strb	r3, [r7, #7]
 8000936:	e001      	b.n	800093c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000938:	f7ff fe90 	bl	800065c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800093c:	79fb      	ldrb	r3, [r7, #7]
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x20>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x24>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_IncTick+0x24>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008
 800096c:	20014424 	.word	0x20014424

08000970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetTick+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20014424 	.word	0x20014424

08000988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000998:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a4:	4013      	ands	r3, r2
 80009a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ba:	4a04      	ldr	r2, [pc, #16]	; (80009cc <__NVIC_SetPriorityGrouping+0x44>)
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	60d3      	str	r3, [r2, #12]
}
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d4:	4b04      	ldr	r3, [pc, #16]	; (80009e8 <__NVIC_GetPriorityGrouping+0x18>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	0a1b      	lsrs	r3, r3, #8
 80009da:	f003 0307 	and.w	r3, r3, #7
}
 80009de:	4618      	mov	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	db0b      	blt.n	8000a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	f003 021f 	and.w	r2, r3, #31
 8000a04:	4907      	ldr	r1, [pc, #28]	; (8000a24 <__NVIC_EnableIRQ+0x38>)
 8000a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0a:	095b      	lsrs	r3, r3, #5
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	6039      	str	r1, [r7, #0]
 8000a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	db0a      	blt.n	8000a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	490c      	ldr	r1, [pc, #48]	; (8000a74 <__NVIC_SetPriority+0x4c>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	0112      	lsls	r2, r2, #4
 8000a48:	b2d2      	uxtb	r2, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a50:	e00a      	b.n	8000a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	b2da      	uxtb	r2, r3
 8000a56:	4908      	ldr	r1, [pc, #32]	; (8000a78 <__NVIC_SetPriority+0x50>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	f003 030f 	and.w	r3, r3, #15
 8000a5e:	3b04      	subs	r3, #4
 8000a60:	0112      	lsls	r2, r2, #4
 8000a62:	b2d2      	uxtb	r2, r2
 8000a64:	440b      	add	r3, r1
 8000a66:	761a      	strb	r2, [r3, #24]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000e100 	.word	0xe000e100
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	f1c3 0307 	rsb	r3, r3, #7
 8000a96:	2b04      	cmp	r3, #4
 8000a98:	bf28      	it	cs
 8000a9a:	2304      	movcs	r3, #4
 8000a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	2b06      	cmp	r3, #6
 8000aa4:	d902      	bls.n	8000aac <NVIC_EncodePriority+0x30>
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3b03      	subs	r3, #3
 8000aaa:	e000      	b.n	8000aae <NVIC_EncodePriority+0x32>
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab4:	69bb      	ldr	r3, [r7, #24]
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43da      	mvns	r2, r3
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	401a      	ands	r2, r3
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ace:	43d9      	mvns	r1, r3
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	4313      	orrs	r3, r2
         );
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3724      	adds	r7, #36	; 0x24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	b082      	sub	sp, #8
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ff4c 	bl	8000988 <__NVIC_SetPriorityGrouping>
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
 8000b04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0a:	f7ff ff61 	bl	80009d0 <__NVIC_GetPriorityGrouping>
 8000b0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	68b9      	ldr	r1, [r7, #8]
 8000b14:	6978      	ldr	r0, [r7, #20]
 8000b16:	f7ff ffb1 	bl	8000a7c <NVIC_EncodePriority>
 8000b1a:	4602      	mov	r2, r0
 8000b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b20:	4611      	mov	r1, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff80 	bl	8000a28 <__NVIC_SetPriority>
}
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff54 	bl	80009ec <__NVIC_EnableIRQ>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5a:	e166      	b.n	8000e2a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	2101      	movs	r1, #1
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8158 	beq.w	8000e24 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d005      	beq.n	8000b8c <HAL_GPIO_Init+0x40>
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 0303 	and.w	r3, r3, #3
 8000b88:	2b02      	cmp	r3, #2
 8000b8a:	d130      	bne.n	8000bee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	689b      	ldr	r3, [r3, #8]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	2203      	movs	r2, #3
 8000b98:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9c:	43db      	mvns	r3, r3
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68da      	ldr	r2, [r3, #12]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	091b      	lsrs	r3, r3, #4
 8000bd8:	f003 0201 	and.w	r2, r3, #1
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d017      	beq.n	8000c2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	2203      	movs	r2, #3
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d123      	bne.n	8000c7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	08da      	lsrs	r2, r3, #3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3208      	adds	r2, #8
 8000c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	220f      	movs	r2, #15
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	691a      	ldr	r2, [r3, #16]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	08da      	lsrs	r2, r3, #3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3208      	adds	r2, #8
 8000c78:	6939      	ldr	r1, [r7, #16]
 8000c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0203 	and.w	r2, r3, #3
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80b2 	beq.w	8000e24 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc0:	4b61      	ldr	r3, [pc, #388]	; (8000e48 <HAL_GPIO_Init+0x2fc>)
 8000cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc4:	4a60      	ldr	r2, [pc, #384]	; (8000e48 <HAL_GPIO_Init+0x2fc>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6613      	str	r3, [r2, #96]	; 0x60
 8000ccc:	4b5e      	ldr	r3, [pc, #376]	; (8000e48 <HAL_GPIO_Init+0x2fc>)
 8000cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd8:	4a5c      	ldr	r2, [pc, #368]	; (8000e4c <HAL_GPIO_Init+0x300>)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	089b      	lsrs	r3, r3, #2
 8000cde:	3302      	adds	r3, #2
 8000ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f003 0303 	and.w	r3, r3, #3
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	220f      	movs	r2, #15
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d02:	d02b      	beq.n	8000d5c <HAL_GPIO_Init+0x210>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a52      	ldr	r2, [pc, #328]	; (8000e50 <HAL_GPIO_Init+0x304>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d025      	beq.n	8000d58 <HAL_GPIO_Init+0x20c>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a51      	ldr	r2, [pc, #324]	; (8000e54 <HAL_GPIO_Init+0x308>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d01f      	beq.n	8000d54 <HAL_GPIO_Init+0x208>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a50      	ldr	r2, [pc, #320]	; (8000e58 <HAL_GPIO_Init+0x30c>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d019      	beq.n	8000d50 <HAL_GPIO_Init+0x204>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a4f      	ldr	r2, [pc, #316]	; (8000e5c <HAL_GPIO_Init+0x310>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d013      	beq.n	8000d4c <HAL_GPIO_Init+0x200>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a4e      	ldr	r2, [pc, #312]	; (8000e60 <HAL_GPIO_Init+0x314>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d00d      	beq.n	8000d48 <HAL_GPIO_Init+0x1fc>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a4d      	ldr	r2, [pc, #308]	; (8000e64 <HAL_GPIO_Init+0x318>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d007      	beq.n	8000d44 <HAL_GPIO_Init+0x1f8>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a4c      	ldr	r2, [pc, #304]	; (8000e68 <HAL_GPIO_Init+0x31c>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d101      	bne.n	8000d40 <HAL_GPIO_Init+0x1f4>
 8000d3c:	2307      	movs	r3, #7
 8000d3e:	e00e      	b.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d40:	2308      	movs	r3, #8
 8000d42:	e00c      	b.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d44:	2306      	movs	r3, #6
 8000d46:	e00a      	b.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d48:	2305      	movs	r3, #5
 8000d4a:	e008      	b.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d50:	2303      	movs	r3, #3
 8000d52:	e004      	b.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <HAL_GPIO_Init+0x212>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	f002 0203 	and.w	r2, r2, #3
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	4093      	lsls	r3, r2
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6e:	4937      	ldr	r1, [pc, #220]	; (8000e4c <HAL_GPIO_Init+0x300>)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d7c:	4b3b      	ldr	r3, [pc, #236]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000da0:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000da6:	4b31      	ldr	r3, [pc, #196]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dca:	4a28      	ldr	r2, [pc, #160]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <HAL_GPIO_Init+0x320>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f47f ae91 	bne.w	8000b5c <HAL_GPIO_Init+0x10>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	48000400 	.word	0x48000400
 8000e54:	48000800 	.word	0x48000800
 8000e58:	48000c00 	.word	0x48000c00
 8000e5c:	48001000 	.word	0x48001000
 8000e60:	48001400 	.word	0x48001400
 8000e64:	48001800 	.word	0x48001800
 8000e68:	48001c00 	.word	0x48001c00
 8000e6c:	40010400 	.word	0x40010400

08000e70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e80:	787b      	ldrb	r3, [r7, #1]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eb2:	887a      	ldrh	r2, [r7, #2]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	041a      	lsls	r2, r3, #16
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43d9      	mvns	r1, r3
 8000ebe:	887b      	ldrh	r3, [r7, #2]
 8000ec0:	400b      	ands	r3, r1
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	; (8000f10 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee4:	d102      	bne.n	8000eec <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eea:	e00b      	b.n	8000f04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000efa:	d102      	bne.n	8000f02 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f00:	e000      	b.n	8000f04 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000f02:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40007000 	.word	0x40007000

08000f14 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d141      	bne.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f2e:	d131      	bne.n	8000f94 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f30:	4b47      	ldr	r3, [pc, #284]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f36:	4a46      	ldr	r2, [pc, #280]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f40:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f48:	4a41      	ldr	r2, [pc, #260]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f50:	4b40      	ldr	r3, [pc, #256]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2232      	movs	r2, #50	; 0x32
 8000f56:	fb02 f303 	mul.w	r3, r2, r3
 8000f5a:	4a3f      	ldr	r2, [pc, #252]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0c9b      	lsrs	r3, r3, #18
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f66:	e002      	b.n	8000f6e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7a:	d102      	bne.n	8000f82 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f2      	bne.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f82:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f8e:	d158      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f90:	2303      	movs	r3, #3
 8000f92:	e057      	b.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f9a:	4a2d      	ldr	r2, [pc, #180]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fa4:	e04d      	b.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fac:	d141      	bne.n	8001032 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fba:	d131      	bne.n	8001020 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fd4:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2232      	movs	r2, #50	; 0x32
 8000fe2:	fb02 f303 	mul.w	r3, r2, r3
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fec:	0c9b      	lsrs	r3, r3, #18
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ff2:	e002      	b.n	8000ffa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001006:	d102      	bne.n	800100e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f2      	bne.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001016:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800101a:	d112      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e011      	b.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001022:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001030:	e007      	b.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001032:	4b07      	ldr	r3, [pc, #28]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001040:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	40007000 	.word	0x40007000
 8001054:	20000000 	.word	0x20000000
 8001058:	431bde83 	.word	0x431bde83

0800105c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	f000 bc16 	b.w	800189c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001070:	4ba0      	ldr	r3, [pc, #640]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800107a:	4b9e      	ldr	r3, [pc, #632]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	f000 80e4 	beq.w	800125a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <HAL_RCC_OscConfig+0x4c>
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2b0c      	cmp	r3, #12
 800109c:	f040 808b 	bne.w	80011b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	f040 8087 	bne.w	80011b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010a8:	4b92      	ldr	r3, [pc, #584]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_RCC_OscConfig+0x64>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d101      	bne.n	80010c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e3ed      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1a      	ldr	r2, [r3, #32]
 80010c4:	4b8b      	ldr	r3, [pc, #556]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d004      	beq.n	80010da <HAL_RCC_OscConfig+0x7e>
 80010d0:	4b88      	ldr	r3, [pc, #544]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d8:	e005      	b.n	80010e6 <HAL_RCC_OscConfig+0x8a>
 80010da:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80010dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d223      	bcs.n	8001132 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a1b      	ldr	r3, [r3, #32]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fde6 	bl	8001cc0 <RCC_SetFlashLatencyFromMSIRange>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e3ce      	b.n	800189c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fe:	4b7d      	ldr	r3, [pc, #500]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7c      	ldr	r2, [pc, #496]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b7a      	ldr	r3, [pc, #488]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	4977      	ldr	r1, [pc, #476]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001118:	4313      	orrs	r3, r2
 800111a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800111c:	4b75      	ldr	r3, [pc, #468]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	4972      	ldr	r1, [pc, #456]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800112c:	4313      	orrs	r3, r2
 800112e:	604b      	str	r3, [r1, #4]
 8001130:	e025      	b.n	800117e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001132:	4b70      	ldr	r3, [pc, #448]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a6f      	ldr	r2, [pc, #444]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a1b      	ldr	r3, [r3, #32]
 800114a:	496a      	ldr	r1, [pc, #424]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800114c:	4313      	orrs	r3, r2
 800114e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001150:	4b68      	ldr	r3, [pc, #416]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69db      	ldr	r3, [r3, #28]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	4965      	ldr	r1, [pc, #404]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001160:	4313      	orrs	r3, r2
 8001162:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d109      	bne.n	800117e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fda6 	bl	8001cc0 <RCC_SetFlashLatencyFromMSIRange>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e38e      	b.n	800189c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800117e:	f000 fcbf 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001182:	4602      	mov	r2, r0
 8001184:	4b5b      	ldr	r3, [pc, #364]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	495a      	ldr	r1, [pc, #360]	; (80012f8 <HAL_RCC_OscConfig+0x29c>)
 8001190:	5ccb      	ldrb	r3, [r1, r3]
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	fa22 f303 	lsr.w	r3, r2, r3
 800119a:	4a58      	ldr	r2, [pc, #352]	; (80012fc <HAL_RCC_OscConfig+0x2a0>)
 800119c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800119e:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_RCC_OscConfig+0x2a4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff fa7e 	bl	80006a4 <HAL_InitTick>
 80011a8:	4603      	mov	r3, r0
 80011aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d052      	beq.n	8001258 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	e372      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d032      	beq.n	8001224 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011be:	4b4d      	ldr	r3, [pc, #308]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a4c      	ldr	r2, [pc, #304]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ca:	f7ff fbd1 	bl	8000970 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d2:	f7ff fbcd 	bl	8000970 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e35b      	b.n	800189c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0302 	and.w	r3, r3, #2
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011f0:	4b40      	ldr	r3, [pc, #256]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a3f      	ldr	r2, [pc, #252]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	493a      	ldr	r1, [pc, #232]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800120a:	4313      	orrs	r3, r2
 800120c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	4935      	ldr	r1, [pc, #212]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
 8001222:	e01a      	b.n	800125a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001224:	4b33      	ldr	r3, [pc, #204]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a32      	ldr	r2, [pc, #200]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001230:	f7ff fb9e 	bl	8000970 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001238:	f7ff fb9a 	bl	8000970 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e328      	b.n	800189c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0x1dc>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d073      	beq.n	800134e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b08      	cmp	r3, #8
 800126a:	d005      	beq.n	8001278 <HAL_RCC_OscConfig+0x21c>
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d10e      	bne.n	8001290 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	2b03      	cmp	r3, #3
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d063      	beq.n	800134c <HAL_RCC_OscConfig+0x2f0>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d15f      	bne.n	800134c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e305      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x24c>
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a15      	ldr	r2, [pc, #84]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0x288>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x270>
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a0f      	ldr	r2, [pc, #60]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a0c      	ldr	r2, [pc, #48]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0x288>
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <HAL_RCC_OscConfig+0x298>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d01b      	beq.n	8001324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fb40 	bl	8000970 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012f2:	e010      	b.n	8001316 <HAL_RCC_OscConfig+0x2ba>
 80012f4:	40021000 	.word	0x40021000
 80012f8:	08008350 	.word	0x08008350
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fb34 	bl	8000970 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e2c2      	b.n	800189c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001316:	4baf      	ldr	r3, [pc, #700]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x2a8>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fb24 	bl	8000970 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fb20 	bl	8000970 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e2ae      	b.n	800189c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800133e:	4ba5      	ldr	r3, [pc, #660]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0x2d0>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d060      	beq.n	800141c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b04      	cmp	r3, #4
 800135e:	d005      	beq.n	800136c <HAL_RCC_OscConfig+0x310>
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	2b0c      	cmp	r3, #12
 8001364:	d119      	bne.n	800139a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d116      	bne.n	800139a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136c:	4b99      	ldr	r3, [pc, #612]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <HAL_RCC_OscConfig+0x328>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e28b      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b93      	ldr	r3, [pc, #588]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	061b      	lsls	r3, r3, #24
 8001392:	4990      	ldr	r1, [pc, #576]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001398:	e040      	b.n	800141c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d023      	beq.n	80013ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a2:	4b8c      	ldr	r3, [pc, #560]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a8b      	ldr	r2, [pc, #556]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fadf 	bl	8000970 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fadb 	bl	8000970 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e269      	b.n	800189c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c8:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b7f      	ldr	r3, [pc, #508]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	497c      	ldr	r1, [pc, #496]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	604b      	str	r3, [r1, #4]
 80013e8:	e018      	b.n	800141c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b7a      	ldr	r3, [pc, #488]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a79      	ldr	r2, [pc, #484]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80013f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f6:	f7ff fabb 	bl	8000970 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fab7 	bl	8000970 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e245      	b.n	800189c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001410:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	2b00      	cmp	r3, #0
 8001426:	d03c      	beq.n	80014a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d01c      	beq.n	800146a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001430:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001436:	4a67      	ldr	r2, [pc, #412]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001440:	f7ff fa96 	bl	8000970 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001448:	f7ff fa92 	bl	8000970 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e220      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800145a:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 800145c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0ef      	beq.n	8001448 <HAL_RCC_OscConfig+0x3ec>
 8001468:	e01b      	b.n	80014a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146a:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 800146c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001470:	4a58      	ldr	r2, [pc, #352]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147a:	f7ff fa79 	bl	8000970 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fa75 	bl	8000970 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e203      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001494:	4b4f      	ldr	r3, [pc, #316]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ef      	bne.n	8001482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0304 	and.w	r3, r3, #4
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 80a6 	beq.w	80015fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10d      	bne.n	80014dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c0:	4b44      	ldr	r3, [pc, #272]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80014c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c4:	4a43      	ldr	r2, [pc, #268]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80014c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ca:	6593      	str	r3, [r2, #88]	; 0x58
 80014cc:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80014ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014dc:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <HAL_RCC_OscConfig+0x57c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d118      	bne.n	800151a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014e8:	4b3b      	ldr	r3, [pc, #236]	; (80015d8 <HAL_RCC_OscConfig+0x57c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a3a      	ldr	r2, [pc, #232]	; (80015d8 <HAL_RCC_OscConfig+0x57c>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f4:	f7ff fa3c 	bl	8000970 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fc:	f7ff fa38 	bl	8000970 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e1c6      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_RCC_OscConfig+0x57c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001516:	2b00      	cmp	r3, #0
 8001518:	d0f0      	beq.n	80014fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d108      	bne.n	8001534 <HAL_RCC_OscConfig+0x4d8>
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001528:	4a2a      	ldr	r2, [pc, #168]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001532:	e024      	b.n	800157e <HAL_RCC_OscConfig+0x522>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b05      	cmp	r3, #5
 800153a:	d110      	bne.n	800155e <HAL_RCC_OscConfig+0x502>
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 800153e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001542:	4a24      	ldr	r2, [pc, #144]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 800154e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001552:	4a20      	ldr	r2, [pc, #128]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800155c:	e00f      	b.n	800157e <HAL_RCC_OscConfig+0x522>
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001564:	4a1b      	ldr	r2, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001566:	f023 0301 	bic.w	r3, r3, #1
 800156a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800156e:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001574:	4a17      	ldr	r2, [pc, #92]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 8001576:	f023 0304 	bic.w	r3, r3, #4
 800157a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d016      	beq.n	80015b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff f9f3 	bl	8000970 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158e:	f7ff f9ef 	bl	8000970 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f241 3288 	movw	r2, #5000	; 0x1388
 800159c:	4293      	cmp	r3, r2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e17b      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_RCC_OscConfig+0x578>)
 80015a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0ed      	beq.n	800158e <HAL_RCC_OscConfig+0x532>
 80015b2:	e01a      	b.n	80015ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff f9dc 	bl	8000970 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ba:	e00f      	b.n	80015dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff f9d8 	bl	8000970 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d906      	bls.n	80015dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e164      	b.n	800189c <HAL_RCC_OscConfig+0x840>
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015dc:	4ba8      	ldr	r3, [pc, #672]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80015de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1e8      	bne.n	80015bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ea:	7ffb      	ldrb	r3, [r7, #31]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015f0:	4ba3      	ldr	r3, [pc, #652]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f4:	4aa2      	ldr	r2, [pc, #648]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80015f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	2b00      	cmp	r3, #0
 8001606:	d03c      	beq.n	8001682 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	2b00      	cmp	r3, #0
 800160e:	d01c      	beq.n	800164a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001610:	4b9b      	ldr	r3, [pc, #620]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001616:	4a9a      	ldr	r2, [pc, #616]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff f9a6 	bl	8000970 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001628:	f7ff f9a2 	bl	8000970 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e130      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800163a:	4b91      	ldr	r3, [pc, #580]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800163c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0ef      	beq.n	8001628 <HAL_RCC_OscConfig+0x5cc>
 8001648:	e01b      	b.n	8001682 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800164a:	4b8d      	ldr	r3, [pc, #564]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800164c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001650:	4a8b      	ldr	r2, [pc, #556]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800165a:	f7ff f989 	bl	8000970 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001662:	f7ff f985 	bl	8000970 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e113      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001674:	4b82      	ldr	r3, [pc, #520]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1ef      	bne.n	8001662 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 8107 	beq.w	800189a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	2b02      	cmp	r3, #2
 8001692:	f040 80cb 	bne.w	800182c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001696:	4b7a      	ldr	r3, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0203 	and.w	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d12c      	bne.n	8001704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	3b01      	subs	r3, #1
 80016b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d123      	bne.n	8001704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d11b      	bne.n	8001704 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d113      	bne.n	8001704 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	3b01      	subs	r3, #1
 80016ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d109      	bne.n	8001704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d06d      	beq.n	80017e0 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d068      	beq.n	80017dc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d105      	bne.n	8001722 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001716:	4b5a      	ldr	r3, [pc, #360]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0ba      	b.n	800189c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001726:	4b56      	ldr	r3, [pc, #344]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a55      	ldr	r2, [pc, #340]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800172c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001730:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001732:	f7ff f91d 	bl	8000970 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff f919 	bl	8000970 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e0a7      	b.n	800189c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800174c:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f0      	bne.n	800173a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001758:	4b49      	ldr	r3, [pc, #292]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	4b49      	ldr	r3, [pc, #292]	; (8001884 <HAL_RCC_OscConfig+0x828>)
 800175e:	4013      	ands	r3, r2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001768:	3a01      	subs	r2, #1
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	4311      	orrs	r1, r2
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001772:	0212      	lsls	r2, r2, #8
 8001774:	4311      	orrs	r1, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800177a:	0852      	lsrs	r2, r2, #1
 800177c:	3a01      	subs	r2, #1
 800177e:	0552      	lsls	r2, r2, #21
 8001780:	4311      	orrs	r1, r2
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001786:	0852      	lsrs	r2, r2, #1
 8001788:	3a01      	subs	r2, #1
 800178a:	0652      	lsls	r2, r2, #25
 800178c:	4311      	orrs	r1, r2
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001792:	06d2      	lsls	r2, r2, #27
 8001794:	430a      	orrs	r2, r1
 8001796:	493a      	ldr	r1, [pc, #232]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001798:	4313      	orrs	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a37      	ldr	r2, [pc, #220]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4a34      	ldr	r2, [pc, #208]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b4:	f7ff f8dc 	bl	8000970 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff f8d8 	bl	8000970 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e066      	b.n	800189c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ce:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017da:	e05e      	b.n	800189a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e05d      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d156      	bne.n	800189a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a23      	ldr	r2, [pc, #140]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017f8:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4a20      	ldr	r2, [pc, #128]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 80017fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001802:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001804:	f7ff f8b4 	bl	8000970 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f8b0 	bl	8000970 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e03e      	b.n	800189c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x7b0>
 800182a:	e036      	b.n	800189a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2b0c      	cmp	r3, #12
 8001830:	d031      	beq.n	8001896 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a12      	ldr	r2, [pc, #72]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800183c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800183e:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d105      	bne.n	8001856 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	4a0c      	ldr	r2, [pc, #48]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001850:	f023 0303 	bic.w	r3, r3, #3
 8001854:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <HAL_RCC_OscConfig+0x824>)
 800185c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001864:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001866:	f7ff f883 	bl	8000970 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186c:	e00c      	b.n	8001888 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff f87f 	bl	8000970 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d905      	bls.n	8001888 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e00d      	b.n	800189c <HAL_RCC_OscConfig+0x840>
 8001880:	40021000 	.word	0x40021000
 8001884:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_OscConfig+0x848>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1ec      	bne.n	800186e <HAL_RCC_OscConfig+0x812>
 8001894:	e001      	b.n	800189a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e000      	b.n	800189c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e10f      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b89      	ldr	r3, [pc, #548]	; (8001ae8 <HAL_RCC_ClockConfig+0x240>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d910      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b86      	ldr	r3, [pc, #536]	; (8001ae8 <HAL_RCC_ClockConfig+0x240>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 020f 	bic.w	r2, r3, #15
 80018d6:	4984      	ldr	r1, [pc, #528]	; (8001ae8 <HAL_RCC_ClockConfig+0x240>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b82      	ldr	r3, [pc, #520]	; (8001ae8 <HAL_RCC_ClockConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030f 	and.w	r3, r3, #15
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0f7      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8089 	beq.w	8001a10 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d133      	bne.n	800196e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	4b79      	ldr	r3, [pc, #484]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0e4      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001916:	f000 fa2d 	bl	8001d74 <RCC_GetSysClockFreqFromPLLSource>
 800191a:	4603      	mov	r3, r0
 800191c:	4a74      	ldr	r2, [pc, #464]	; (8001af0 <HAL_RCC_ClockConfig+0x248>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d955      	bls.n	80019ce <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001922:	4b72      	ldr	r3, [pc, #456]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10a      	bne.n	8001944 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800192e:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001936:	4a6d      	ldr	r2, [pc, #436]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800193c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	e044      	b.n	80019ce <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d03e      	beq.n	80019ce <HAL_RCC_ClockConfig+0x126>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d13a      	bne.n	80019ce <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001958:	4b64      	ldr	r3, [pc, #400]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001960:	4a62      	ldr	r2, [pc, #392]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001966:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e02f      	b.n	80019ce <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d107      	bne.n	8001986 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001976:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d115      	bne.n	80019ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e0ac      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800198e:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0a0      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800199e:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e098      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80019ae:	f000 f8a7 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4a4e      	ldr	r2, [pc, #312]	; (8001af0 <HAL_RCC_ClockConfig+0x248>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d909      	bls.n	80019ce <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ba:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019c2:	4a4a      	ldr	r2, [pc, #296]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019ca:	2380      	movs	r3, #128	; 0x80
 80019cc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ce:	4b47      	ldr	r3, [pc, #284]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f023 0203 	bic.w	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	4944      	ldr	r1, [pc, #272]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 80019dc:	4313      	orrs	r3, r2
 80019de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019e0:	f7fe ffc6 	bl	8000970 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e8:	f7fe ffc2 	bl	8000970 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e070      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 020c 	and.w	r2, r3, #12
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d1eb      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d009      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4930      	ldr	r1, [pc, #192]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b80      	cmp	r3, #128	; 0x80
 8001a34:	d105      	bne.n	8001a42 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a36:	4b2d      	ldr	r3, [pc, #180]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4a2c      	ldr	r2, [pc, #176]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a40:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a42:	4b29      	ldr	r3, [pc, #164]	; (8001ae8 <HAL_RCC_ClockConfig+0x240>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d210      	bcs.n	8001a72 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_RCC_ClockConfig+0x240>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 020f 	bic.w	r2, r3, #15
 8001a58:	4923      	ldr	r1, [pc, #140]	; (8001ae8 <HAL_RCC_ClockConfig+0x240>)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_ClockConfig+0x240>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 030f 	and.w	r3, r3, #15
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e036      	b.n	8001ae0 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d008      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	4918      	ldr	r1, [pc, #96]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d009      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4910      	ldr	r1, [pc, #64]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ab0:	f000 f826 	bl	8001b00 <HAL_RCC_GetSysClockFreq>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_ClockConfig+0x244>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	490c      	ldr	r1, [pc, #48]	; (8001af4 <HAL_RCC_ClockConfig+0x24c>)
 8001ac2:	5ccb      	ldrb	r3, [r1, r3]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8001acc:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_RCC_ClockConfig+0x250>)
 8001ace:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_RCC_ClockConfig+0x254>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fde5 	bl	80006a4 <HAL_InitTick>
 8001ada:	4603      	mov	r3, r0
 8001adc:	73fb      	strb	r3, [r7, #15]

  return status;
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40022000 	.word	0x40022000
 8001aec:	40021000 	.word	0x40021000
 8001af0:	04c4b400 	.word	0x04c4b400
 8001af4:	08008350 	.word	0x08008350
 8001af8:	20000000 	.word	0x20000000
 8001afc:	20000004 	.word	0x20000004

08001b00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0e:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b18:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x34>
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d121      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d11e      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b40:	4b31      	ldr	r3, [pc, #196]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e005      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	091b      	lsrs	r3, r3, #4
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b5c:	4a2b      	ldr	r2, [pc, #172]	; (8001c0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d10d      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b78:	4b25      	ldr	r3, [pc, #148]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	e004      	b.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b84:	4b23      	ldr	r3, [pc, #140]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	2b0c      	cmp	r3, #12
 8001b8c:	d134      	bne.n	8001bf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d003      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0xac>
 8001ba4:	e005      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ba8:	617b      	str	r3, [r7, #20]
      break;
 8001baa:	e005      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bac:	4b19      	ldr	r3, [pc, #100]	; (8001c14 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bae:	617b      	str	r3, [r7, #20]
      break;
 8001bb0:	e002      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	617b      	str	r3, [r7, #20]
      break;
 8001bb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	fb02 f203 	mul.w	r2, r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	0e5b      	lsrs	r3, r3, #25
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	3301      	adds	r3, #1
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08008368 	.word	0x08008368
 8001c10:	00f42400 	.word	0x00f42400
 8001c14:	007a1200 	.word	0x007a1200

08001c18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000000 	.word	0x20000000

08001c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c34:	f7ff fff0 	bl	8001c18 <HAL_RCC_GetHCLKFreq>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	0adb      	lsrs	r3, r3, #11
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	4904      	ldr	r1, [pc, #16]	; (8001c58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c46:	5ccb      	ldrb	r3, [r1, r3]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40021000 	.word	0x40021000
 8001c58:	08008360 	.word	0x08008360

08001c5c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	220f      	movs	r2, #15
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c9e:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <HAL_RCC_GetClockConfig+0x60>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 020f 	and.w	r2, r3, #15
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40022000 	.word	0x40022000

08001cc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ccc:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cd8:	f7ff f8fc 	bl	8000ed4 <HAL_PWREx_GetVoltageRange>
 8001cdc:	6178      	str	r0, [r7, #20]
 8001cde:	e014      	b.n	8001d0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	4a21      	ldr	r2, [pc, #132]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6593      	str	r3, [r2, #88]	; 0x58
 8001cec:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cf8:	f7ff f8ec 	bl	8000ed4 <HAL_PWREx_GetVoltageRange>
 8001cfc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a1a      	ldr	r2, [pc, #104]	; (8001d6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d10:	d10b      	bne.n	8001d2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b80      	cmp	r3, #128	; 0x80
 8001d16:	d913      	bls.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2ba0      	cmp	r3, #160	; 0xa0
 8001d1c:	d902      	bls.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d1e:	2302      	movs	r3, #2
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	e00d      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d24:	2301      	movs	r3, #1
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	e00a      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d2e:	d902      	bls.n	8001d36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001d30:	2302      	movs	r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	e004      	b.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b70      	cmp	r3, #112	; 0x70
 8001d3a:	d101      	bne.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d40:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 020f 	bic.w	r2, r3, #15
 8001d48:	4909      	ldr	r1, [pc, #36]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d50:	4b07      	ldr	r3, [pc, #28]	; (8001d70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40022000 	.word	0x40022000

08001d74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b087      	sub	sp, #28
 8001d78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d118      	bne.n	8001dbc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d96:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9c:	0a1b      	lsrs	r3, r3, #8
 8001d9e:	f003 030f 	and.w	r3, r3, #15
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	e005      	b.n	8001db2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001db2:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d003      	beq.n	8001dd4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d003      	beq.n	8001dda <RCC_GetSysClockFreqFromPLLSource+0x66>
 8001dd2:	e005      	b.n	8001de0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001dd6:	613b      	str	r3, [r7, #16]
    break;
 8001dd8:	e005      	b.n	8001de6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001ddc:	613b      	str	r3, [r7, #16]
    break;
 8001dde:	e002      	b.n	8001de6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]
    break;
 8001de4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	3301      	adds	r3, #1
 8001df2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	fb02 f203 	mul.w	r2, r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	0e5b      	lsrs	r3, r3, #25
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	3301      	adds	r3, #1
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001e26:	683b      	ldr	r3, [r7, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	371c      	adds	r7, #28
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40021000 	.word	0x40021000
 8001e38:	08008368 	.word	0x08008368
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e049      	b.n	8001eea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d106      	bne.n	8001e70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f841 	bl	8001ef2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3304      	adds	r3, #4
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f000 f9f8 	bl	8002278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
	...

08001f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d001      	beq.n	8001f20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e04f      	b.n	8001fc0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_TIM_Base_Start_IT+0xc4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d01d      	beq.n	8001f7e <HAL_TIM_Base_Start_IT+0x76>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f4a:	d018      	beq.n	8001f7e <HAL_TIM_Base_Start_IT+0x76>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a1f      	ldr	r2, [pc, #124]	; (8001fd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_TIM_Base_Start_IT+0x76>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a1e      	ldr	r2, [pc, #120]	; (8001fd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d00e      	beq.n	8001f7e <HAL_TIM_Base_Start_IT+0x76>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d009      	beq.n	8001f7e <HAL_TIM_Base_Start_IT+0x76>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_TIM_Base_Start_IT+0xd4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d004      	beq.n	8001f7e <HAL_TIM_Base_Start_IT+0x76>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d115      	bne.n	8001faa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	4b17      	ldr	r3, [pc, #92]	; (8001fe4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2b06      	cmp	r3, #6
 8001f8e:	d015      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0xb4>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f96:	d011      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa8:	e008      	b.n	8001fbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	e000      	b.n	8001fbe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40012c00 	.word	0x40012c00
 8001fd0:	40000400 	.word	0x40000400
 8001fd4:	40000800 	.word	0x40000800
 8001fd8:	40000c00 	.word	0x40000c00
 8001fdc:	40013400 	.word	0x40013400
 8001fe0:	40014000 	.word	0x40014000
 8001fe4:	00010007 	.word	0x00010007

08001fe8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d122      	bne.n	8002044 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b02      	cmp	r3, #2
 800200a:	d11b      	bne.n	8002044 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0202 	mvn.w	r2, #2
 8002014:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f905 	bl	800223a <HAL_TIM_IC_CaptureCallback>
 8002030:	e005      	b.n	800203e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8f7 	bl	8002226 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f908 	bl	800224e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b04      	cmp	r3, #4
 8002050:	d122      	bne.n	8002098 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b04      	cmp	r3, #4
 800205e:	d11b      	bne.n	8002098 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f06f 0204 	mvn.w	r2, #4
 8002068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2202      	movs	r2, #2
 800206e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8db 	bl	800223a <HAL_TIM_IC_CaptureCallback>
 8002084:	e005      	b.n	8002092 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f8cd 	bl	8002226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f8de 	bl	800224e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d122      	bne.n	80020ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d11b      	bne.n	80020ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0208 	mvn.w	r2, #8
 80020bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2204      	movs	r2, #4
 80020c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f8b1 	bl	800223a <HAL_TIM_IC_CaptureCallback>
 80020d8:	e005      	b.n	80020e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8a3 	bl	8002226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f8b4 	bl	800224e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b10      	cmp	r3, #16
 80020f8:	d122      	bne.n	8002140 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b10      	cmp	r3, #16
 8002106:	d11b      	bne.n	8002140 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0210 	mvn.w	r2, #16
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2208      	movs	r2, #8
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f887 	bl	800223a <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f879 	bl	8002226 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f88a 	bl	800224e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b01      	cmp	r3, #1
 800214c:	d10e      	bne.n	800216c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f06f 0201 	mvn.w	r2, #1
 8002164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7fe fa60 	bl	800062c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002176:	2b80      	cmp	r3, #128	; 0x80
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b80      	cmp	r3, #128	; 0x80
 8002186:	d107      	bne.n	8002198 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f914 	bl	80023c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021a6:	d10e      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b80      	cmp	r3, #128	; 0x80
 80021b4:	d107      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f907 	bl	80023d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d0:	2b40      	cmp	r3, #64	; 0x40
 80021d2:	d10e      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021de:	2b40      	cmp	r3, #64	; 0x40
 80021e0:	d107      	bne.n	80021f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f838 	bl	8002262 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b20      	cmp	r3, #32
 80021fe:	d10e      	bne.n	800221e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0320 	and.w	r3, r3, #32
 800220a:	2b20      	cmp	r3, #32
 800220c:	d107      	bne.n	800221e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f06f 0220 	mvn.w	r2, #32
 8002216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f8c7 	bl	80023ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a40      	ldr	r2, [pc, #256]	; (800238c <TIM_Base_SetConfig+0x114>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d013      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002296:	d00f      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a3d      	ldr	r2, [pc, #244]	; (8002390 <TIM_Base_SetConfig+0x118>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00b      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a3c      	ldr	r2, [pc, #240]	; (8002394 <TIM_Base_SetConfig+0x11c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d007      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a3b      	ldr	r2, [pc, #236]	; (8002398 <TIM_Base_SetConfig+0x120>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d003      	beq.n	80022b8 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3a      	ldr	r2, [pc, #232]	; (800239c <TIM_Base_SetConfig+0x124>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d108      	bne.n	80022ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a2f      	ldr	r2, [pc, #188]	; (800238c <TIM_Base_SetConfig+0x114>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d01f      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022d8:	d01b      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a2c      	ldr	r2, [pc, #176]	; (8002390 <TIM_Base_SetConfig+0x118>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d017      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2b      	ldr	r2, [pc, #172]	; (8002394 <TIM_Base_SetConfig+0x11c>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a2a      	ldr	r2, [pc, #168]	; (8002398 <TIM_Base_SetConfig+0x120>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00f      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a29      	ldr	r2, [pc, #164]	; (800239c <TIM_Base_SetConfig+0x124>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d00b      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <TIM_Base_SetConfig+0x128>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d007      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <TIM_Base_SetConfig+0x12c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d003      	beq.n	8002312 <TIM_Base_SetConfig+0x9a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <TIM_Base_SetConfig+0x130>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d108      	bne.n	8002324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	4313      	orrs	r3, r2
 8002322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <TIM_Base_SetConfig+0x114>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d00f      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a12      	ldr	r2, [pc, #72]	; (800239c <TIM_Base_SetConfig+0x124>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d00b      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a11      	ldr	r2, [pc, #68]	; (80023a0 <TIM_Base_SetConfig+0x128>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d007      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a10      	ldr	r2, [pc, #64]	; (80023a4 <TIM_Base_SetConfig+0x12c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d003      	beq.n	8002370 <TIM_Base_SetConfig+0xf8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a0f      	ldr	r2, [pc, #60]	; (80023a8 <TIM_Base_SetConfig+0x130>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d103      	bne.n	8002378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	615a      	str	r2, [r3, #20]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40012c00 	.word	0x40012c00
 8002390:	40000400 	.word	0x40000400
 8002394:	40000800 	.word	0x40000800
 8002398:	40000c00 	.word	0x40000c00
 800239c:	40013400 	.word	0x40013400
 80023a0:	40014000 	.word	0x40014000
 80023a4:	40014400 	.word	0x40014400
 80023a8:	40014800 	.word	0x40014800

080023ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f103 0208 	add.w	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f103 0208 	add.w	r2, r3, #8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f103 0208 	add.w	r2, r3, #8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002442:	b480      	push	{r7}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	601a      	str	r2, [r3, #0]
}
 800247e:	bf00      	nop
 8002480:	3714      	adds	r7, #20
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800248a:	b480      	push	{r7}
 800248c:	b085      	sub	sp, #20
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
 8002492:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a0:	d103      	bne.n	80024aa <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e00c      	b.n	80024c4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	3308      	adds	r3, #8
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e002      	b.n	80024b8 <vListInsert+0x2e>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d2f6      	bcs.n	80024b2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6892      	ldr	r2, [r2, #8]
 8002512:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	6852      	ldr	r2, [r2, #4]
 800251c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	429a      	cmp	r2, r3
 8002526:	d103      	bne.n	8002530 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <xQueueGenericReset+0x2a>
        __asm volatile
 8002564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002568:	f383 8811 	msr	BASEPRI, r3
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	60bb      	str	r3, [r7, #8]
    }
 8002576:	bf00      	nop
 8002578:	e7fe      	b.n	8002578 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800257a:	f002 f983 	bl	8004884 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002586:	68f9      	ldr	r1, [r7, #12]
 8002588:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800258a:	fb01 f303 	mul.w	r3, r1, r3
 800258e:	441a      	add	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025aa:	3b01      	subs	r3, #1
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	441a      	add	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	22ff      	movs	r2, #255	; 0xff
 80025be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	22ff      	movs	r2, #255	; 0xff
 80025c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d114      	bne.n	80025fa <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d01a      	beq.n	800260e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3310      	adds	r3, #16
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f9d9 	bl	8003994 <xTaskRemoveFromEventList>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d012      	beq.n	800260e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80025e8:	4b0c      	ldr	r3, [pc, #48]	; (800261c <xQueueGenericReset+0xcc>)
 80025ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	f3bf 8f6f 	isb	sy
 80025f8:	e009      	b.n	800260e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	3310      	adds	r3, #16
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fef2 	bl	80023e8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3324      	adds	r3, #36	; 0x24
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff feed 	bl	80023e8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800260e:	f002 f969 	bl	80048e4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	e000ed04 	.word	0xe000ed04

08002620 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002620:	b580      	push	{r7, lr}
 8002622:	b08c      	sub	sp, #48	; 0x30
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <xQueueGenericCreate+0x2a>
        __asm volatile
 8002634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002638:	f383 8811 	msr	BASEPRI, r3
 800263c:	f3bf 8f6f 	isb	sy
 8002640:	f3bf 8f4f 	dsb	sy
 8002644:	61bb      	str	r3, [r7, #24]
    }
 8002646:	bf00      	nop
 8002648:	e7fe      	b.n	8002648 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	fb02 f303 	mul.w	r3, r2, r3
 8002652:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <xQueueGenericCreate+0x48>
 800265a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d101      	bne.n	800266c <xQueueGenericCreate+0x4c>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <xQueueGenericCreate+0x4e>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <xQueueGenericCreate+0x68>
        __asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	617b      	str	r3, [r7, #20]
    }
 8002684:	bf00      	nop
 8002686:	e7fe      	b.n	8002686 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800268e:	d90a      	bls.n	80026a6 <xQueueGenericCreate+0x86>
        __asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	613b      	str	r3, [r7, #16]
    }
 80026a2:	bf00      	nop
 80026a4:	e7fe      	b.n	80026a4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	3350      	adds	r3, #80	; 0x50
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fa0c 	bl	8004ac8 <pvPortMalloc>
 80026b0:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026b8:	6a3b      	ldr	r3, [r7, #32]
 80026ba:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3350      	adds	r3, #80	; 0x50
 80026c0:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026c2:	79fa      	ldrb	r2, [r7, #7]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f805 	bl	80026de <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
    }
 80026d6:	4618      	mov	r0, r3
 80026d8:	3728      	adds	r7, #40	; 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d103      	bne.n	80026fa <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	e002      	b.n	8002700 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800270c:	2101      	movs	r1, #1
 800270e:	69b8      	ldr	r0, [r7, #24]
 8002710:	f7ff ff1e 	bl	8002550 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800271c:	78fb      	ldrb	r3, [r7, #3]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	68f9      	ldr	r1, [r7, #12]
 8002722:	2073      	movs	r0, #115	; 0x73
 8002724:	f003 febe 	bl	80064a4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b090      	sub	sp, #64	; 0x40
 8002734:	af02      	add	r7, sp, #8
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800273e:	2300      	movs	r3, #0
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10a      	bne.n	8002762 <xQueueGenericSend+0x32>
        __asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800275e:	bf00      	nop
 8002760:	e7fe      	b.n	8002760 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <xQueueGenericSend+0x40>
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <xQueueGenericSend+0x44>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <xQueueGenericSend+0x46>
 8002774:	2300      	movs	r3, #0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <xQueueGenericSend+0x60>
        __asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800278c:	bf00      	nop
 800278e:	e7fe      	b.n	800278e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d103      	bne.n	800279e <xQueueGenericSend+0x6e>
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <xQueueGenericSend+0x72>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <xQueueGenericSend+0x74>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <xQueueGenericSend+0x8e>
        __asm volatile
 80027a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ac:	f383 8811 	msr	BASEPRI, r3
 80027b0:	f3bf 8f6f 	isb	sy
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	623b      	str	r3, [r7, #32]
    }
 80027ba:	bf00      	nop
 80027bc:	e7fe      	b.n	80027bc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027be:	f001 fa89 	bl	8003cd4 <xTaskGetSchedulerState>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <xQueueGenericSend+0x9e>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <xQueueGenericSend+0xa2>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e000      	b.n	80027d4 <xQueueGenericSend+0xa4>
 80027d2:	2300      	movs	r3, #0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10a      	bne.n	80027ee <xQueueGenericSend+0xbe>
        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	61fb      	str	r3, [r7, #28]
    }
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027ee:	f002 f849 	bl	8004884 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d302      	bcc.n	8002804 <xQueueGenericSend+0xd4>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d136      	bne.n	8002872 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	4618      	mov	r0, r3
 8002808:	f004 fbd8 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	460b      	mov	r3, r1
 8002816:	4601      	mov	r1, r0
 8002818:	205a      	movs	r0, #90	; 0x5a
 800281a:	f003 feb9 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002824:	f000 fa78 	bl	8002d18 <prvCopyDataToQueue>
 8002828:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	2b00      	cmp	r3, #0
 8002830:	d010      	beq.n	8002854 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	3324      	adds	r3, #36	; 0x24
 8002836:	4618      	mov	r0, r3
 8002838:	f001 f8ac 	bl	8003994 <xTaskRemoveFromEventList>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002842:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <xQueueGenericSend+0x248>)
 8002844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	f3bf 8f4f 	dsb	sy
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	e00a      	b.n	800286a <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <xQueueGenericSend+0x248>)
 800285c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	f3bf 8f4f 	dsb	sy
 8002866:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800286a:	f002 f83b 	bl	80048e4 <vPortExitCritical>
                return pdPASS;
 800286e:	2301      	movs	r3, #1
 8002870:	e07d      	b.n	800296e <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d110      	bne.n	800289a <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002878:	f002 f834 	bl	80048e4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800287e:	4618      	mov	r0, r3
 8002880:	f004 fb9c 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	460b      	mov	r3, r1
 800288e:	4601      	mov	r1, r0
 8002890:	205a      	movs	r0, #90	; 0x5a
 8002892:	f003 fe7d 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002896:	2300      	movs	r3, #0
 8002898:	e069      	b.n	800296e <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f8db 	bl	8003a60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028aa:	2301      	movs	r3, #1
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028ae:	f002 f819 	bl	80048e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028b2:	f000 fe27 	bl	8003504 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028b6:	f001 ffe5 	bl	8004884 <vPortEnterCritical>
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c6:	d103      	bne.n	80028d0 <xQueueGenericSend+0x1a0>
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028dc:	d103      	bne.n	80028e6 <xQueueGenericSend+0x1b6>
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e6:	f001 fffd 	bl	80048e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ea:	1d3a      	adds	r2, r7, #4
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f001 f8ca 	bl	8003a8c <xTaskCheckForTimeOut>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d124      	bne.n	8002948 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002900:	f000 fb02 	bl	8002f08 <prvIsQueueFull>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	3310      	adds	r3, #16
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f000 ffec 	bl	80038f0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800291a:	f000 fa8d 	bl	8002e38 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800291e:	f000 fdff 	bl	8003520 <xTaskResumeAll>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f af62 	bne.w	80027ee <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <xQueueGenericSend+0x248>)
 800292c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	e758      	b.n	80027ee <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800293c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800293e:	f000 fa7b 	bl	8002e38 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002942:	f000 fded 	bl	8003520 <xTaskResumeAll>
 8002946:	e752      	b.n	80027ee <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800294a:	f000 fa75 	bl	8002e38 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800294e:	f000 fde7 	bl	8003520 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	4618      	mov	r0, r3
 8002956:	f004 fb31 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	460b      	mov	r3, r1
 8002964:	4601      	mov	r1, r0
 8002966:	205a      	movs	r0, #90	; 0x5a
 8002968:	f003 fe12 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800296c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800296e:	4618      	mov	r0, r3
 8002970:	3738      	adds	r7, #56	; 0x38
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000ed04 	.word	0xe000ed04

0800297c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b090      	sub	sp, #64	; 0x40
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d103      	bne.n	80029b8 <xQueueGenericSendFromISR+0x3c>
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <xQueueGenericSendFromISR+0x40>
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <xQueueGenericSendFromISR+0x42>
 80029bc:	2300      	movs	r3, #0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d103      	bne.n	80029e6 <xQueueGenericSendFromISR+0x6a>
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d101      	bne.n	80029ea <xQueueGenericSendFromISR+0x6e>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <xQueueGenericSendFromISR+0x70>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	623b      	str	r3, [r7, #32]
    }
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a06:	f002 f81f 	bl	8004a48 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8002a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a12:	f383 8811 	msr	BASEPRI, r3
 8002a16:	f3bf 8f6f 	isb	sy
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	61fa      	str	r2, [r7, #28]
 8002a20:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a22:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <xQueueGenericSendFromISR+0xbc>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d148      	bne.n	8002aca <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 fab6 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002a50:	4601      	mov	r1, r0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	461a      	mov	r2, r3
 8002a56:	2060      	movs	r0, #96	; 0x60
 8002a58:	f003 fcca 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a62:	f000 f959 	bl	8002d18 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a66:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d112      	bne.n	8002a96 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d025      	beq.n	8002ac4 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7a:	3324      	adds	r3, #36	; 0x24
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 ff89 	bl	8003994 <xTaskRemoveFromEventList>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01d      	beq.n	8002ac4 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01a      	beq.n	8002ac4 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	e016      	b.n	8002ac4 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002a96:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8002a9c:	d10a      	bne.n	8002ab4 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	f3bf 8f4f 	dsb	sy
 8002aae:	617b      	str	r3, [r7, #20]
    }
 8002ab0:	bf00      	nop
 8002ab2:	e7fe      	b.n	8002ab2 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ab4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	b25a      	sxtb	r2, r3
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002ac8:	e00b      	b.n	8002ae2 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002acc:	4618      	mov	r0, r3
 8002ace:	f004 fa75 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002ad2:	4601      	mov	r1, r0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2060      	movs	r0, #96	; 0x60
 8002ada:	f003 fc89 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002aec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3740      	adds	r7, #64	; 0x40
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b08f      	sub	sp, #60	; 0x3c
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10a      	bne.n	8002b28 <xQueueReceive+0x30>
        __asm volatile
 8002b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b16:	f383 8811 	msr	BASEPRI, r3
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	f3bf 8f4f 	dsb	sy
 8002b22:	623b      	str	r3, [r7, #32]
    }
 8002b24:	bf00      	nop
 8002b26:	e7fe      	b.n	8002b26 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d103      	bne.n	8002b36 <xQueueReceive+0x3e>
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <xQueueReceive+0x42>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <xQueueReceive+0x44>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <xQueueReceive+0x5e>
        __asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	61fb      	str	r3, [r7, #28]
    }
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b56:	f001 f8bd 	bl	8003cd4 <xTaskGetSchedulerState>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <xQueueReceive+0x6e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <xQueueReceive+0x72>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <xQueueReceive+0x74>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xQueueReceive+0x8e>
        __asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	61bb      	str	r3, [r7, #24]
    }
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b86:	f001 fe7d 	bl	8004884 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d02f      	beq.n	8002bf6 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b96:	68b9      	ldr	r1, [r7, #8]
 8002b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b9a:	f000 f927 	bl	8002dec <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f004 fa0b 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f004 fa07 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	9100      	str	r1, [sp, #0]
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	205c      	movs	r0, #92	; 0x5c
 8002bba:	f003 fce9 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	1e5a      	subs	r2, r3, #1
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00f      	beq.n	8002bee <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	3310      	adds	r3, #16
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 fede 	bl	8003994 <xTaskRemoveFromEventList>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d007      	beq.n	8002bee <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bde:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <xQueueReceive+0x21c>)
 8002be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	f3bf 8f4f 	dsb	sy
 8002bea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002bee:	f001 fe79 	bl	80048e4 <vPortExitCritical>
                return pdPASS;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e08a      	b.n	8002d0c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d113      	bne.n	8002c24 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002bfc:	f001 fe72 	bl	80048e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 f9da 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002c08:	4604      	mov	r4, r0
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f004 f9d6 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2101      	movs	r1, #1
 8002c16:	9100      	str	r1, [sp, #0]
 8002c18:	4621      	mov	r1, r4
 8002c1a:	205c      	movs	r0, #92	; 0x5c
 8002c1c:	f003 fcb8 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e073      	b.n	8002d0c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d106      	bne.n	8002c38 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c2a:	f107 0310 	add.w	r3, r7, #16
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 ff16 	bl	8003a60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c34:	2301      	movs	r3, #1
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c38:	f001 fe54 	bl	80048e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c3c:	f000 fc62 	bl	8003504 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c40:	f001 fe20 	bl	8004884 <vPortEnterCritical>
 8002c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c4a:	b25b      	sxtb	r3, r3
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d103      	bne.n	8002c5a <xQueueReceive+0x162>
 8002c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c54:	2200      	movs	r2, #0
 8002c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c60:	b25b      	sxtb	r3, r3
 8002c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c66:	d103      	bne.n	8002c70 <xQueueReceive+0x178>
 8002c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c70:	f001 fe38 	bl	80048e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c74:	1d3a      	adds	r2, r7, #4
 8002c76:	f107 0310 	add.w	r3, r7, #16
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 ff05 	bl	8003a8c <xTaskCheckForTimeOut>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d124      	bne.n	8002cd2 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c8a:	f000 f927 	bl	8002edc <prvIsQueueEmpty>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d018      	beq.n	8002cc6 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	3324      	adds	r3, #36	; 0x24
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fe27 	bl	80038f0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ca4:	f000 f8c8 	bl	8002e38 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ca8:	f000 fc3a 	bl	8003520 <xTaskResumeAll>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f47f af69 	bne.w	8002b86 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <xQueueReceive+0x21c>)
 8002cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	f3bf 8f4f 	dsb	sy
 8002cc0:	f3bf 8f6f 	isb	sy
 8002cc4:	e75f      	b.n	8002b86 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc8:	f000 f8b6 	bl	8002e38 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ccc:	f000 fc28 	bl	8003520 <xTaskResumeAll>
 8002cd0:	e759      	b.n	8002b86 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cd4:	f000 f8b0 	bl	8002e38 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cd8:	f000 fc22 	bl	8003520 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cde:	f000 f8fd 	bl	8002edc <prvIsQueueEmpty>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f43f af4e 	beq.w	8002b86 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 f965 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	f004 f961 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2101      	movs	r1, #1
 8002d00:	9100      	str	r1, [sp, #0]
 8002d02:	4621      	mov	r1, r4
 8002d04:	205c      	movs	r0, #92	; 0x5c
 8002d06:	f003 fc43 	bl	8006590 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d0a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3734      	adds	r7, #52	; 0x34
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	e000ed04 	.word	0xe000ed04

08002d18 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10d      	bne.n	8002d52 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d14d      	bne.n	8002dda <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 ffe4 	bl	8003d10 <xTaskPriorityDisinherit>
 8002d48:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	e043      	b.n	8002dda <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d119      	bne.n	8002d8c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6858      	ldr	r0, [r3, #4]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	461a      	mov	r2, r3
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	f004 fad0 	bl	8007308 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	441a      	add	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d32b      	bcc.n	8002dda <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	e026      	b.n	8002dda <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	68d8      	ldr	r0, [r3, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	461a      	mov	r2, r3
 8002d96:	68b9      	ldr	r1, [r7, #8]
 8002d98:	f004 fab6 	bl	8007308 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	425b      	negs	r3, r3
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d207      	bcs.n	8002dc8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	425b      	negs	r3, r3
 8002dc2:	441a      	add	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d105      	bne.n	8002dda <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002de2:	697b      	ldr	r3, [r7, #20]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d018      	beq.n	8002e30 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68da      	ldr	r2, [r3, #12]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	441a      	add	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d303      	bcc.n	8002e20 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68d9      	ldr	r1, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6838      	ldr	r0, [r7, #0]
 8002e2c:	f004 fa6c 	bl	8007308 <memcpy>
    }
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e40:	f001 fd20 	bl	8004884 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e4a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e4c:	e011      	b.n	8002e72 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d012      	beq.n	8002e7c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3324      	adds	r3, #36	; 0x24
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fd9a 	bl	8003994 <xTaskRemoveFromEventList>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e66:	f000 fe77 	bl	8003b58 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	dce9      	bgt.n	8002e4e <prvUnlockQueue+0x16>
 8002e7a:	e000      	b.n	8002e7e <prvUnlockQueue+0x46>
                        break;
 8002e7c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	22ff      	movs	r2, #255	; 0xff
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e86:	f001 fd2d 	bl	80048e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e8a:	f001 fcfb 	bl	8004884 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e94:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e96:	e011      	b.n	8002ebc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3310      	adds	r3, #16
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f000 fd75 	bl	8003994 <xTaskRemoveFromEventList>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002eb0:	f000 fe52 	bl	8003b58 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002eb4:	7bbb      	ldrb	r3, [r7, #14]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	dce9      	bgt.n	8002e98 <prvUnlockQueue+0x60>
 8002ec4:	e000      	b.n	8002ec8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002ec6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	22ff      	movs	r2, #255	; 0xff
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002ed0:	f001 fd08 	bl	80048e4 <vPortExitCritical>
}
 8002ed4:	bf00      	nop
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ee4:	f001 fcce 	bl	8004884 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e001      	b.n	8002efa <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002efa:	f001 fcf3 	bl	80048e4 <vPortExitCritical>

    return xReturn;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f10:	f001 fcb8 	bl	8004884 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d102      	bne.n	8002f26 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f20:	2301      	movs	r3, #1
 8002f22:	60fb      	str	r3, [r7, #12]
 8002f24:	e001      	b.n	8002f2a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f2a:	f001 fcdb 	bl	80048e4 <vPortExitCritical>

    return xReturn;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	e01e      	b.n	8002f86 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f48:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <vQueueAddToRegistry+0x60>)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d115      	bne.n	8002f80 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f54:	4910      	ldr	r1, [pc, #64]	; (8002f98 <vQueueAddToRegistry+0x60>)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f5e:	4a0e      	ldr	r2, [pc, #56]	; (8002f98 <vQueueAddToRegistry+0x60>)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f004 f825 	bl	8006fbc <SEGGER_SYSVIEW_ShrinkId>
 8002f72:	4601      	mov	r1, r0
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	2071      	movs	r0, #113	; 0x71
 8002f7a:	f003 fa39 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002f7e:	e006      	b.n	8002f8e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	3301      	adds	r3, #1
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b07      	cmp	r3, #7
 8002f8a:	d9dd      	bls.n	8002f48 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f8c:	bf00      	nop
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20014428 	.word	0x20014428

08002f9c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002fac:	f001 fc6a 	bl	8004884 <vPortEnterCritical>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb6:	b25b      	sxtb	r3, r3
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbc:	d103      	bne.n	8002fc6 <vQueueWaitForMessageRestricted+0x2a>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fcc:	b25b      	sxtb	r3, r3
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d103      	bne.n	8002fdc <vQueueWaitForMessageRestricted+0x40>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fdc:	f001 fc82 	bl	80048e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3324      	adds	r3, #36	; 0x24
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fca1 	bl	8003938 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ff6:	6978      	ldr	r0, [r7, #20]
 8002ff8:	f7ff ff1e 	bl	8002e38 <prvUnlockQueue>
    }
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003004:	b580      	push	{r7, lr}
 8003006:	b08c      	sub	sp, #48	; 0x30
 8003008:	af04      	add	r7, sp, #16
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	4613      	mov	r3, r2
 8003012:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4618      	mov	r0, r3
 800301a:	f001 fd55 	bl	8004ac8 <pvPortMalloc>
 800301e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003026:	2058      	movs	r0, #88	; 0x58
 8003028:	f001 fd4e 	bl	8004ac8 <pvPortMalloc>
 800302c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	631a      	str	r2, [r3, #48]	; 0x30
 800303a:	e005      	b.n	8003048 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800303c:	6978      	ldr	r0, [r7, #20]
 800303e:	f001 fe23 	bl	8004c88 <vPortFree>
 8003042:	e001      	b.n	8003048 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d013      	beq.n	8003076 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800304e:	88fa      	ldrh	r2, [r7, #6]
 8003050:	2300      	movs	r3, #0
 8003052:	9303      	str	r3, [sp, #12]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	9302      	str	r3, [sp, #8]
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68b9      	ldr	r1, [r7, #8]
 8003064:	68f8      	ldr	r0, [r7, #12]
 8003066:	f000 f80e 	bl	8003086 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800306a:	69f8      	ldr	r0, [r7, #28]
 800306c:	f000 f8a2 	bl	80031b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003070:	2301      	movs	r3, #1
 8003072:	61bb      	str	r3, [r7, #24]
 8003074:	e002      	b.n	800307c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003076:	f04f 33ff 	mov.w	r3, #4294967295
 800307a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800307c:	69bb      	ldr	r3, [r7, #24]
    }
 800307e:	4618      	mov	r0, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b088      	sub	sp, #32
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	461a      	mov	r2, r3
 800309e:	21a5      	movs	r1, #165	; 0xa5
 80030a0:	f004 f940 	bl	8007324 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030ae:	3b01      	subs	r3, #1
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	f023 0307 	bic.w	r3, r3, #7
 80030bc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <prvInitialiseNewTask+0x58>
        __asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030cc:	f383 8811 	msr	BASEPRI, r3
 80030d0:	f3bf 8f6f 	isb	sy
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	617b      	str	r3, [r7, #20]
    }
 80030da:	bf00      	nop
 80030dc:	e7fe      	b.n	80030dc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01f      	beq.n	8003124 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e012      	b.n	8003110 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	7819      	ldrb	r1, [r3, #0]
 80030f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	4413      	add	r3, r2
 80030f8:	3334      	adds	r3, #52	; 0x34
 80030fa:	460a      	mov	r2, r1
 80030fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	4413      	add	r3, r2
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d006      	beq.n	8003118 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3301      	adds	r3, #1
 800310e:	61fb      	str	r3, [r7, #28]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b09      	cmp	r3, #9
 8003114:	d9e9      	bls.n	80030ea <prvInitialiseNewTask+0x64>
 8003116:	e000      	b.n	800311a <prvInitialiseNewTask+0x94>
            {
                break;
 8003118:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003122:	e003      	b.n	800312c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800312c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800312e:	2b04      	cmp	r3, #4
 8003130:	d901      	bls.n	8003136 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003132:	2304      	movs	r3, #4
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800313a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003140:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	2200      	movs	r2, #0
 8003146:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	3304      	adds	r3, #4
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff f96b 	bl	8002428 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	3318      	adds	r3, #24
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff f966 	bl	8002428 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003160:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003164:	f1c3 0205 	rsb	r2, r3, #5
 8003168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003170:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	3350      	adds	r3, #80	; 0x50
 8003176:	2204      	movs	r2, #4
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f004 f8d2 	bl	8007324 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003182:	3354      	adds	r3, #84	; 0x54
 8003184:	2201      	movs	r2, #1
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f004 f8cb 	bl	8007324 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	68f9      	ldr	r1, [r7, #12]
 8003192:	69b8      	ldr	r0, [r7, #24]
 8003194:	f001 f9c6 	bl	8004524 <pxPortInitialiseStack>
 8003198:	4602      	mov	r2, r0
 800319a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800319e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031aa:	bf00      	nop
 80031ac:	3720      	adds	r7, #32
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031bc:	f001 fb62 	bl	8004884 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031c0:	4b3b      	ldr	r3, [pc, #236]	; (80032b0 <prvAddNewTaskToReadyList+0xfc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	4a3a      	ldr	r2, [pc, #232]	; (80032b0 <prvAddNewTaskToReadyList+0xfc>)
 80031c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031ca:	4b3a      	ldr	r3, [pc, #232]	; (80032b4 <prvAddNewTaskToReadyList+0x100>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031d2:	4a38      	ldr	r2, [pc, #224]	; (80032b4 <prvAddNewTaskToReadyList+0x100>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031d8:	4b35      	ldr	r3, [pc, #212]	; (80032b0 <prvAddNewTaskToReadyList+0xfc>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d110      	bne.n	8003202 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031e0:	f000 fcde 	bl	8003ba0 <prvInitialiseTaskLists>
 80031e4:	e00d      	b.n	8003202 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80031e6:	4b34      	ldr	r3, [pc, #208]	; (80032b8 <prvAddNewTaskToReadyList+0x104>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <prvAddNewTaskToReadyList+0x100>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d802      	bhi.n	8003202 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <prvAddNewTaskToReadyList+0x100>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003202:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <prvAddNewTaskToReadyList+0x108>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <prvAddNewTaskToReadyList+0x108>)
 800320a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800320c:	4b2b      	ldr	r3, [pc, #172]	; (80032bc <prvAddNewTaskToReadyList+0x108>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <prvAddNewTaskToReadyList+0x94>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	f003 fda7 	bl	8006d70 <SEGGER_SYSVIEW_OnTaskCreate>
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	461d      	mov	r5, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	461c      	mov	r4, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	1ae3      	subs	r3, r4, r3
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	462b      	mov	r3, r5
 8003244:	f001 fef0 	bl	8005028 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4618      	mov	r0, r3
 800324c:	f003 fe14 	bl	8006e78 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	2201      	movs	r2, #1
 8003256:	409a      	lsls	r2, r3
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <prvAddNewTaskToReadyList+0x10c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4313      	orrs	r3, r2
 800325e:	4a18      	ldr	r2, [pc, #96]	; (80032c0 <prvAddNewTaskToReadyList+0x10c>)
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4a15      	ldr	r2, [pc, #84]	; (80032c4 <prvAddNewTaskToReadyList+0x110>)
 8003270:	441a      	add	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3304      	adds	r3, #4
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f7ff f8e2 	bl	8002442 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800327e:	f001 fb31 	bl	80048e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003282:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <prvAddNewTaskToReadyList+0x104>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00e      	beq.n	80032a8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <prvAddNewTaskToReadyList+0x100>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	429a      	cmp	r2, r3
 8003296:	d207      	bcs.n	80032a8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <prvAddNewTaskToReadyList+0x114>)
 800329a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bdb0      	pop	{r4, r5, r7, pc}
 80032b0:	20000170 	.word	0x20000170
 80032b4:	20000098 	.word	0x20000098
 80032b8:	2000017c 	.word	0x2000017c
 80032bc:	2000018c 	.word	0x2000018c
 80032c0:	20000178 	.word	0x20000178
 80032c4:	2000009c 	.word	0x2000009c
 80032c8:	e000ed04 	.word	0xe000ed04

080032cc <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xTaskDelayUntil+0x2a>
        __asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	617b      	str	r3, [r7, #20]
    }
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <xTaskDelayUntil+0x46>
        __asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	613b      	str	r3, [r7, #16]
    }
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 8003312:	4b2c      	ldr	r3, [pc, #176]	; (80033c4 <xTaskDelayUntil+0xf8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <xTaskDelayUntil+0x64>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	60fb      	str	r3, [r7, #12]
    }
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 8003330:	f000 f8e8 	bl	8003504 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <xTaskDelayUntil+0xfc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4413      	add	r3, r2
 8003342:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6a3a      	ldr	r2, [r7, #32]
 800334a:	429a      	cmp	r2, r3
 800334c:	d20b      	bcs.n	8003366 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	d211      	bcs.n	800337c <xTaskDelayUntil+0xb0>
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	429a      	cmp	r2, r3
 800335e:	d90d      	bls.n	800337c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003360:	2301      	movs	r3, #1
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	e00a      	b.n	800337c <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	429a      	cmp	r2, r3
 800336e:	d303      	bcc.n	8003378 <xTaskDelayUntil+0xac>
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	6a3b      	ldr	r3, [r7, #32]
 8003374:	429a      	cmp	r2, r3
 8003376:	d901      	bls.n	800337c <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003378:	2301      	movs	r3, #1
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003388:	2024      	movs	r0, #36	; 0x24
 800338a:	f002 ffd7 	bl	800633c <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2100      	movs	r1, #0
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fd3a 	bl	8003e10 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800339c:	f000 f8c0 	bl	8003520 <xTaskResumeAll>
 80033a0:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <xTaskDelayUntil+0x100>)
 80033aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	f3bf 8f4f 	dsb	sy
 80033b4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80033ba:	4618      	mov	r0, r3
 80033bc:	3728      	adds	r7, #40	; 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	20000198 	.word	0x20000198
 80033c8:	20000174 	.word	0x20000174
 80033cc:	e000ed04 	.word	0xe000ed04

080033d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d01b      	beq.n	800341a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <vTaskDelay+0x68>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <vTaskDelay+0x30>
        __asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	60bb      	str	r3, [r7, #8]
    }
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003400:	f000 f880 	bl	8003504 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	2023      	movs	r0, #35	; 0x23
 8003408:	f002 ffb6 	bl	8006378 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800340c:	2100      	movs	r1, #0
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 fcfe 	bl	8003e10 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003414:	f000 f884 	bl	8003520 <xTaskResumeAll>
 8003418:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d107      	bne.n	8003430 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <vTaskDelay+0x6c>)
 8003422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003430:	bf00      	nop
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20000198 	.word	0x20000198
 800343c:	e000ed04 	.word	0xe000ed04

08003440 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003446:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <vTaskStartScheduler+0xa4>)
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2300      	movs	r3, #0
 8003450:	2282      	movs	r2, #130	; 0x82
 8003452:	4925      	ldr	r1, [pc, #148]	; (80034e8 <vTaskStartScheduler+0xa8>)
 8003454:	4825      	ldr	r0, [pc, #148]	; (80034ec <vTaskStartScheduler+0xac>)
 8003456:	f7ff fdd5 	bl	8003004 <xTaskCreate>
 800345a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003462:	f000 fd4d 	bl	8003f00 <xTimerCreateTimerTask>
 8003466:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d124      	bne.n	80034b8 <vTaskStartScheduler+0x78>
        __asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	60bb      	str	r3, [r7, #8]
    }
 8003480:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003482:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <vTaskStartScheduler+0xb0>)
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <vTaskStartScheduler+0xb4>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <vTaskStartScheduler+0xb8>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <vTaskStartScheduler+0xbc>)
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <vTaskStartScheduler+0xa4>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d102      	bne.n	80034a8 <vTaskStartScheduler+0x68>
 80034a2:	f003 fc49 	bl	8006d38 <SEGGER_SYSVIEW_OnIdle>
 80034a6:	e004      	b.n	80034b2 <vTaskStartScheduler+0x72>
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <vTaskStartScheduler+0xbc>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f003 fca1 	bl	8006df4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80034b2:	f001 f8c7 	bl	8004644 <xPortStartScheduler>
 80034b6:	e00e      	b.n	80034d6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034be:	d10a      	bne.n	80034d6 <vTaskStartScheduler+0x96>
        __asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	607b      	str	r3, [r7, #4]
    }
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80034d6:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <vTaskStartScheduler+0xc0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
}
 80034da:	bf00      	nop
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000194 	.word	0x20000194
 80034e8:	08008270 	.word	0x08008270
 80034ec:	08003b71 	.word	0x08003b71
 80034f0:	20000190 	.word	0x20000190
 80034f4:	2000017c 	.word	0x2000017c
 80034f8:	20000174 	.word	0x20000174
 80034fc:	20000098 	.word	0x20000098
 8003500:	2000000c 	.word	0x2000000c

08003504 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <vTaskSuspendAll+0x18>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	4a03      	ldr	r2, [pc, #12]	; (800351c <vTaskSuspendAll+0x18>)
 8003510:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	20000198 	.word	0x20000198

08003520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800352e:	4b43      	ldr	r3, [pc, #268]	; (800363c <xTaskResumeAll+0x11c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <xTaskResumeAll+0x2c>
        __asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	603b      	str	r3, [r7, #0]
    }
 8003548:	bf00      	nop
 800354a:	e7fe      	b.n	800354a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800354c:	f001 f99a 	bl	8004884 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003550:	4b3a      	ldr	r3, [pc, #232]	; (800363c <xTaskResumeAll+0x11c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3b01      	subs	r3, #1
 8003556:	4a39      	ldr	r2, [pc, #228]	; (800363c <xTaskResumeAll+0x11c>)
 8003558:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355a:	4b38      	ldr	r3, [pc, #224]	; (800363c <xTaskResumeAll+0x11c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d165      	bne.n	800362e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003562:	4b37      	ldr	r3, [pc, #220]	; (8003640 <xTaskResumeAll+0x120>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d061      	beq.n	800362e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800356a:	e032      	b.n	80035d2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800356c:	4b35      	ldr	r3, [pc, #212]	; (8003644 <xTaskResumeAll+0x124>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3318      	adds	r3, #24
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe ffbf 	bl	80024fc <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3304      	adds	r3, #4
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe ffba 	bl	80024fc <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4618      	mov	r0, r3
 800358c:	f003 fc74 	bl	8006e78 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003594:	2201      	movs	r2, #1
 8003596:	409a      	lsls	r2, r3
 8003598:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <xTaskResumeAll+0x128>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4313      	orrs	r3, r2
 800359e:	4a2a      	ldr	r2, [pc, #168]	; (8003648 <xTaskResumeAll+0x128>)
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035a6:	4613      	mov	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4a27      	ldr	r2, [pc, #156]	; (800364c <xTaskResumeAll+0x12c>)
 80035b0:	441a      	add	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f7fe ff42 	bl	8002442 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c2:	4b23      	ldr	r3, [pc, #140]	; (8003650 <xTaskResumeAll+0x130>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d302      	bcc.n	80035d2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80035cc:	4b21      	ldr	r3, [pc, #132]	; (8003654 <xTaskResumeAll+0x134>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <xTaskResumeAll+0x124>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1c8      	bne.n	800356c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80035e0:	f000 fb5c 	bl	8003c9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035e4:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <xTaskResumeAll+0x138>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80035f0:	f000 f858 	bl	80036a4 <xTaskIncrementTick>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <xTaskResumeAll+0x134>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3b01      	subs	r3, #1
 8003604:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f1      	bne.n	80035f0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800360c:	4b12      	ldr	r3, [pc, #72]	; (8003658 <xTaskResumeAll+0x138>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003612:	4b10      	ldr	r3, [pc, #64]	; (8003654 <xTaskResumeAll+0x134>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800361a:	2301      	movs	r3, #1
 800361c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800361e:	4b0f      	ldr	r3, [pc, #60]	; (800365c <xTaskResumeAll+0x13c>)
 8003620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800362e:	f001 f959 	bl	80048e4 <vPortExitCritical>

    return xAlreadyYielded;
 8003632:	68bb      	ldr	r3, [r7, #8]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	20000198 	.word	0x20000198
 8003640:	20000170 	.word	0x20000170
 8003644:	20000130 	.word	0x20000130
 8003648:	20000178 	.word	0x20000178
 800364c:	2000009c 	.word	0x2000009c
 8003650:	20000098 	.word	0x20000098
 8003654:	20000184 	.word	0x20000184
 8003658:	20000180 	.word	0x20000180
 800365c:	e000ed04 	.word	0xe000ed04

08003660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <xTaskGetTickCount+0x1c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800366c:	687b      	ldr	r3, [r7, #4]
}
 800366e:	4618      	mov	r0, r3
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000174 	.word	0x20000174

08003680 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003686:	f001 f9df 	bl	8004a48 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800368a:	2300      	movs	r3, #0
 800368c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <xTaskGetTickCountFromISR+0x20>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003694:	683b      	ldr	r3, [r7, #0]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000174 	.word	0x20000174

080036a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036ae:	4b50      	ldr	r3, [pc, #320]	; (80037f0 <xTaskIncrementTick+0x14c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f040 8092 	bne.w	80037dc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036b8:	4b4e      	ldr	r3, [pc, #312]	; (80037f4 <xTaskIncrementTick+0x150>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80036c0:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <xTaskIncrementTick+0x150>)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d120      	bne.n	800370e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80036cc:	4b4a      	ldr	r3, [pc, #296]	; (80037f8 <xTaskIncrementTick+0x154>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <xTaskIncrementTick+0x48>
        __asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	603b      	str	r3, [r7, #0]
    }
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xTaskIncrementTick+0x46>
 80036ec:	4b42      	ldr	r3, [pc, #264]	; (80037f8 <xTaskIncrementTick+0x154>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	4b42      	ldr	r3, [pc, #264]	; (80037fc <xTaskIncrementTick+0x158>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a40      	ldr	r2, [pc, #256]	; (80037f8 <xTaskIncrementTick+0x154>)
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4a40      	ldr	r2, [pc, #256]	; (80037fc <xTaskIncrementTick+0x158>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6013      	str	r3, [r2, #0]
 8003700:	4b3f      	ldr	r3, [pc, #252]	; (8003800 <xTaskIncrementTick+0x15c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3301      	adds	r3, #1
 8003706:	4a3e      	ldr	r2, [pc, #248]	; (8003800 <xTaskIncrementTick+0x15c>)
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	f000 fac7 	bl	8003c9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800370e:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <xTaskIncrementTick+0x160>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	429a      	cmp	r2, r3
 8003716:	d34c      	bcc.n	80037b2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003718:	4b37      	ldr	r3, [pc, #220]	; (80037f8 <xTaskIncrementTick+0x154>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d104      	bne.n	800372c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003722:	4b38      	ldr	r3, [pc, #224]	; (8003804 <xTaskIncrementTick+0x160>)
 8003724:	f04f 32ff 	mov.w	r2, #4294967295
 8003728:	601a      	str	r2, [r3, #0]
                    break;
 800372a:	e042      	b.n	80037b2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800372c:	4b32      	ldr	r3, [pc, #200]	; (80037f8 <xTaskIncrementTick+0x154>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d203      	bcs.n	800374c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003744:	4a2f      	ldr	r2, [pc, #188]	; (8003804 <xTaskIncrementTick+0x160>)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800374a:	e032      	b.n	80037b2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	3304      	adds	r3, #4
 8003750:	4618      	mov	r0, r3
 8003752:	f7fe fed3 	bl	80024fc <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d004      	beq.n	8003768 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3318      	adds	r3, #24
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe feca 	bl	80024fc <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 fb84 	bl	8006e78 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	4b23      	ldr	r3, [pc, #140]	; (8003808 <xTaskIncrementTick+0x164>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4313      	orrs	r3, r2
 800377e:	4a22      	ldr	r2, [pc, #136]	; (8003808 <xTaskIncrementTick+0x164>)
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4a1f      	ldr	r2, [pc, #124]	; (800380c <xTaskIncrementTick+0x168>)
 8003790:	441a      	add	r2, r3
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f7fe fe52 	bl	8002442 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a2:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <xTaskIncrementTick+0x16c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d3b5      	bcc.n	8003718 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80037ac:	2301      	movs	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b0:	e7b2      	b.n	8003718 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80037b2:	4b17      	ldr	r3, [pc, #92]	; (8003810 <xTaskIncrementTick+0x16c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4914      	ldr	r1, [pc, #80]	; (800380c <xTaskIncrementTick+0x168>)
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d901      	bls.n	80037ce <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80037ce:	4b11      	ldr	r3, [pc, #68]	; (8003814 <xTaskIncrementTick+0x170>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d007      	beq.n	80037e6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80037d6:	2301      	movs	r3, #1
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	e004      	b.n	80037e6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80037dc:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <xTaskIncrementTick+0x174>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	4a0d      	ldr	r2, [pc, #52]	; (8003818 <xTaskIncrementTick+0x174>)
 80037e4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80037e6:	697b      	ldr	r3, [r7, #20]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	20000198 	.word	0x20000198
 80037f4:	20000174 	.word	0x20000174
 80037f8:	20000128 	.word	0x20000128
 80037fc:	2000012c 	.word	0x2000012c
 8003800:	20000188 	.word	0x20000188
 8003804:	20000190 	.word	0x20000190
 8003808:	20000178 	.word	0x20000178
 800380c:	2000009c 	.word	0x2000009c
 8003810:	20000098 	.word	0x20000098
 8003814:	20000184 	.word	0x20000184
 8003818:	20000180 	.word	0x20000180

0800381c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <vTaskSwitchContext+0xbc>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800382a:	4b2c      	ldr	r3, [pc, #176]	; (80038dc <vTaskSwitchContext+0xc0>)
 800382c:	2201      	movs	r2, #1
 800382e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003830:	e04d      	b.n	80038ce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <vTaskSwitchContext+0xc0>)
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003838:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <vTaskSwitchContext+0xc4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	f1c3 031f 	rsb	r3, r3, #31
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	4925      	ldr	r1, [pc, #148]	; (80038e4 <vTaskSwitchContext+0xc8>)
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10a      	bne.n	8003878 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
 8003872:	607b      	str	r3, [r7, #4]
    }
 8003874:	bf00      	nop
 8003876:	e7fe      	b.n	8003876 <vTaskSwitchContext+0x5a>
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <vTaskSwitchContext+0xc8>)
 8003884:	4413      	add	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	3308      	adds	r3, #8
 800389a:	429a      	cmp	r2, r3
 800389c:	d104      	bne.n	80038a8 <vTaskSwitchContext+0x8c>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	4a0e      	ldr	r2, [pc, #56]	; (80038e8 <vTaskSwitchContext+0xcc>)
 80038b0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80038b2:	4b0d      	ldr	r3, [pc, #52]	; (80038e8 <vTaskSwitchContext+0xcc>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <vTaskSwitchContext+0xd0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d102      	bne.n	80038c4 <vTaskSwitchContext+0xa8>
 80038be:	f003 fa3b 	bl	8006d38 <SEGGER_SYSVIEW_OnIdle>
}
 80038c2:	e004      	b.n	80038ce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80038c4:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <vTaskSwitchContext+0xcc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f003 fa93 	bl	8006df4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80038ce:	bf00      	nop
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	20000198 	.word	0x20000198
 80038dc:	20000184 	.word	0x20000184
 80038e0:	20000178 	.word	0x20000178
 80038e4:	2000009c 	.word	0x2000009c
 80038e8:	20000098 	.word	0x20000098
 80038ec:	20000194 	.word	0x20000194

080038f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	60fb      	str	r3, [r7, #12]
    }
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003916:	4b07      	ldr	r3, [pc, #28]	; (8003934 <vTaskPlaceOnEventList+0x44>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3318      	adds	r3, #24
 800391c:	4619      	mov	r1, r3
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe fdb3 	bl	800248a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003924:	2101      	movs	r1, #1
 8003926:	6838      	ldr	r0, [r7, #0]
 8003928:	f000 fa72 	bl	8003e10 <prvAddCurrentTaskToDelayedList>
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	20000098 	.word	0x20000098

08003938 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003938:	b580      	push	{r7, lr}
 800393a:	b086      	sub	sp, #24
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	617b      	str	r3, [r7, #20]
    }
 800395c:	bf00      	nop
 800395e:	e7fe      	b.n	800395e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003960:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <vTaskPlaceOnEventListRestricted+0x58>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3318      	adds	r3, #24
 8003966:	4619      	mov	r1, r3
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f7fe fd6a 	bl	8002442 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003974:	f04f 33ff 	mov.w	r3, #4294967295
 8003978:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800397a:	2024      	movs	r0, #36	; 0x24
 800397c:	f002 fcde 	bl	800633c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	68b8      	ldr	r0, [r7, #8]
 8003984:	f000 fa44 	bl	8003e10 <prvAddCurrentTaskToDelayedList>
    }
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000098 	.word	0x20000098

08003994 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	60fb      	str	r3, [r7, #12]
    }
 80039bc:	bf00      	nop
 80039be:	e7fe      	b.n	80039be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	3318      	adds	r3, #24
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fe fd99 	bl	80024fc <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ca:	4b1f      	ldr	r3, [pc, #124]	; (8003a48 <xTaskRemoveFromEventList+0xb4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d120      	bne.n	8003a14 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe fd90 	bl	80024fc <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4618      	mov	r0, r3
 80039e0:	f003 fa4a 	bl	8006e78 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	2201      	movs	r2, #1
 80039ea:	409a      	lsls	r2, r3
 80039ec:	4b17      	ldr	r3, [pc, #92]	; (8003a4c <xTaskRemoveFromEventList+0xb8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <xTaskRemoveFromEventList+0xb8>)
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <xTaskRemoveFromEventList+0xbc>)
 8003a04:	441a      	add	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	f7fe fd18 	bl	8002442 <vListInsertEnd>
 8003a12:	e005      	b.n	8003a20 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	3318      	adds	r3, #24
 8003a18:	4619      	mov	r1, r3
 8003a1a:	480e      	ldr	r0, [pc, #56]	; (8003a54 <xTaskRemoveFromEventList+0xc0>)
 8003a1c:	f7fe fd11 	bl	8002442 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <xTaskRemoveFromEventList+0xc4>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d905      	bls.n	8003a3a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a32:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <xTaskRemoveFromEventList+0xc8>)
 8003a34:	2201      	movs	r2, #1
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	e001      	b.n	8003a3e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a3e:	697b      	ldr	r3, [r7, #20]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000198 	.word	0x20000198
 8003a4c:	20000178 	.word	0x20000178
 8003a50:	2000009c 	.word	0x2000009c
 8003a54:	20000130 	.word	0x20000130
 8003a58:	20000098 	.word	0x20000098
 8003a5c:	20000184 	.word	0x20000184

08003a60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <vTaskInternalSetTimeOutState+0x24>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <vTaskInternalSetTimeOutState+0x28>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	605a      	str	r2, [r3, #4]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	20000188 	.word	0x20000188
 8003a88:	20000174 	.word	0x20000174

08003a8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	613b      	str	r3, [r7, #16]
    }
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10a      	bne.n	8003ace <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	60fb      	str	r3, [r7, #12]
    }
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003ace:	f000 fed9 	bl	8004884 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003ad2:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <xTaskCheckForTimeOut+0xc4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d102      	bne.n	8003af2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e026      	b.n	8003b40 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <xTaskCheckForTimeOut+0xc8>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d00a      	beq.n	8003b14 <xTaskCheckForTimeOut+0x88>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d305      	bcc.n	8003b14 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e015      	b.n	8003b40 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d20b      	bcs.n	8003b36 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1ad2      	subs	r2, r2, r3
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7ff ff98 	bl	8003a60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	e004      	b.n	8003b40 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b40:	f000 fed0 	bl	80048e4 <vPortExitCritical>

    return xReturn;
 8003b44:	69fb      	ldr	r3, [r7, #28]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	20000174 	.word	0x20000174
 8003b54:	20000188 	.word	0x20000188

08003b58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <vTaskMissedYield+0x14>)
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
}
 8003b62:	bf00      	nop
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20000184 	.word	0x20000184

08003b70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b78:	f000 f852 	bl	8003c20 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <prvIdleTask+0x28>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d9f9      	bls.n	8003b78 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003b84:	4b05      	ldr	r3, [pc, #20]	; (8003b9c <prvIdleTask+0x2c>)
 8003b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b8a:	601a      	str	r2, [r3, #0]
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b94:	e7f0      	b.n	8003b78 <prvIdleTask+0x8>
 8003b96:	bf00      	nop
 8003b98:	2000009c 	.word	0x2000009c
 8003b9c:	e000ed04 	.word	0xe000ed04

08003ba0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	e00c      	b.n	8003bc6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <prvInitialiseTaskLists+0x60>)
 8003bb8:	4413      	add	r3, r2
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fe fc14 	bl	80023e8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d9ef      	bls.n	8003bac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bcc:	480d      	ldr	r0, [pc, #52]	; (8003c04 <prvInitialiseTaskLists+0x64>)
 8003bce:	f7fe fc0b 	bl	80023e8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bd2:	480d      	ldr	r0, [pc, #52]	; (8003c08 <prvInitialiseTaskLists+0x68>)
 8003bd4:	f7fe fc08 	bl	80023e8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003bd8:	480c      	ldr	r0, [pc, #48]	; (8003c0c <prvInitialiseTaskLists+0x6c>)
 8003bda:	f7fe fc05 	bl	80023e8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003bde:	480c      	ldr	r0, [pc, #48]	; (8003c10 <prvInitialiseTaskLists+0x70>)
 8003be0:	f7fe fc02 	bl	80023e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003be4:	480b      	ldr	r0, [pc, #44]	; (8003c14 <prvInitialiseTaskLists+0x74>)
 8003be6:	f7fe fbff 	bl	80023e8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <prvInitialiseTaskLists+0x78>)
 8003bec:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <prvInitialiseTaskLists+0x64>)
 8003bee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bf0:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <prvInitialiseTaskLists+0x7c>)
 8003bf2:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <prvInitialiseTaskLists+0x68>)
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	2000009c 	.word	0x2000009c
 8003c04:	20000100 	.word	0x20000100
 8003c08:	20000114 	.word	0x20000114
 8003c0c:	20000130 	.word	0x20000130
 8003c10:	20000144 	.word	0x20000144
 8003c14:	2000015c 	.word	0x2000015c
 8003c18:	20000128 	.word	0x20000128
 8003c1c:	2000012c 	.word	0x2000012c

08003c20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c26:	e019      	b.n	8003c5c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c28:	f000 fe2c 	bl	8004884 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c2c:	4b10      	ldr	r3, [pc, #64]	; (8003c70 <prvCheckTasksWaitingTermination+0x50>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe fc5f 	bl	80024fc <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <prvCheckTasksWaitingTermination+0x54>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <prvCheckTasksWaitingTermination+0x54>)
 8003c46:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c48:	4b0b      	ldr	r3, [pc, #44]	; (8003c78 <prvCheckTasksWaitingTermination+0x58>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	4a0a      	ldr	r2, [pc, #40]	; (8003c78 <prvCheckTasksWaitingTermination+0x58>)
 8003c50:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c52:	f000 fe47 	bl	80048e4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f810 	bl	8003c7c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c5c:	4b06      	ldr	r3, [pc, #24]	; (8003c78 <prvCheckTasksWaitingTermination+0x58>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e1      	bne.n	8003c28 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000144 	.word	0x20000144
 8003c74:	20000170 	.word	0x20000170
 8003c78:	20000158 	.word	0x20000158

08003c7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fffd 	bl	8004c88 <vPortFree>
                vPortFree( pxTCB );
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fffa 	bl	8004c88 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003c94:	bf00      	nop
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <prvResetNextTaskUnblockTime+0x30>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003caa:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <prvResetNextTaskUnblockTime+0x34>)
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cb2:	e005      	b.n	8003cc0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cb4:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <prvResetNextTaskUnblockTime+0x30>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <prvResetNextTaskUnblockTime+0x34>)
 8003cbe:	6013      	str	r3, [r2, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	20000128 	.word	0x20000128
 8003cd0:	20000190 	.word	0x20000190

08003cd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <xTaskGetSchedulerState+0x34>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	e008      	b.n	8003cfa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <xTaskGetSchedulerState+0x38>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	607b      	str	r3, [r7, #4]
 8003cf4:	e001      	b.n	8003cfa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003cfa:	687b      	ldr	r3, [r7, #4]
    }
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	2000017c 	.word	0x2000017c
 8003d0c:	20000198 	.word	0x20000198

08003d10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d068      	beq.n	8003df8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <xTaskPriorityDisinherit+0xf4>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d00a      	beq.n	8003d46 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	60fb      	str	r3, [r7, #12]
    }
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10a      	bne.n	8003d64 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d52:	f383 8811 	msr	BASEPRI, r3
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	60bb      	str	r3, [r7, #8]
    }
 8003d60:	bf00      	nop
 8003d62:	e7fe      	b.n	8003d62 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d03e      	beq.n	8003df8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d13a      	bne.n	8003df8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fbb8 	bl	80024fc <uxListRemove>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10a      	bne.n	8003da8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	2201      	movs	r2, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	4b1a      	ldr	r3, [pc, #104]	; (8003e08 <xTaskPriorityDisinherit+0xf8>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4013      	ands	r3, r2
 8003da4:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <xTaskPriorityDisinherit+0xf8>)
 8003da6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4619      	mov	r1, r3
 8003dac:	204a      	movs	r0, #74	; 0x4a
 8003dae:	f002 fae3 	bl	8006378 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f1c3 0205 	rsb	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	2201      	movs	r2, #1
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <xTaskPriorityDisinherit+0xf8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	; (8003e08 <xTaskPriorityDisinherit+0xf8>)
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <xTaskPriorityDisinherit+0xfc>)
 8003de6:	441a      	add	r2, r3
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f7fe fb27 	bl	8002442 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003df4:	2301      	movs	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003df8:	697b      	ldr	r3, [r7, #20]
    }
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000098 	.word	0x20000098
 8003e08:	20000178 	.word	0x20000178
 8003e0c:	2000009c 	.word	0x2000009c

08003e10 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e1a:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e20:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fb68 	bl	80024fc <uxListRemove>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e32:	4b2d      	ldr	r3, [pc, #180]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e38:	2201      	movs	r2, #1
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4013      	ands	r3, r2
 8003e46:	4a29      	ldr	r2, [pc, #164]	; (8003eec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003e48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d110      	bne.n	8003e74 <prvAddCurrentTaskToDelayedList+0x64>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00d      	beq.n	8003e74 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003e58:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	211b      	movs	r1, #27
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f003 f84c 	bl	8006efc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e64:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4820      	ldr	r0, [pc, #128]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003e6e:	f7fe fae8 	bl	8002442 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e72:	e032      	b.n	8003eda <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d20f      	bcs.n	8003eac <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e8c:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2104      	movs	r1, #4
 8003e92:	4618      	mov	r0, r3
 8003e94:	f003 f832 	bl	8006efc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e98:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fe faf0 	bl	800248a <vListInsert>
}
 8003eaa:	e016      	b.n	8003eda <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003eac:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2104      	movs	r1, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f003 f822 	bl	8006efc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	f7fe fae0 	bl	800248a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003eca:	4b0c      	ldr	r3, [pc, #48]	; (8003efc <prvAddCurrentTaskToDelayedList+0xec>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d202      	bcs.n	8003eda <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <prvAddCurrentTaskToDelayedList+0xec>)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6013      	str	r3, [r2, #0]
}
 8003eda:	bf00      	nop
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000174 	.word	0x20000174
 8003ee8:	20000098 	.word	0x20000098
 8003eec:	20000178 	.word	0x20000178
 8003ef0:	2000015c 	.word	0x2000015c
 8003ef4:	2000012c 	.word	0x2000012c
 8003ef8:	20000128 	.word	0x20000128
 8003efc:	20000190 	.word	0x20000190

08003f00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f06:	2300      	movs	r3, #0
 8003f08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f0a:	f000 fad5 	bl	80044b8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <xTimerCreateTimerTask+0x54>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003f16:	4b10      	ldr	r3, [pc, #64]	; (8003f58 <xTimerCreateTimerTask+0x58>)
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f24:	490d      	ldr	r1, [pc, #52]	; (8003f5c <xTimerCreateTimerTask+0x5c>)
 8003f26:	480e      	ldr	r0, [pc, #56]	; (8003f60 <xTimerCreateTimerTask+0x60>)
 8003f28:	f7ff f86c 	bl	8003004 <xTaskCreate>
 8003f2c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	603b      	str	r3, [r7, #0]
    }
 8003f46:	bf00      	nop
 8003f48:	e7fe      	b.n	8003f48 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f4a:	687b      	ldr	r3, [r7, #4]
    }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	200001cc 	.word	0x200001cc
 8003f58:	200001d0 	.word	0x200001d0
 8003f5c:	08008278 	.word	0x08008278
 8003f60:	08004099 	.word	0x08004099

08003f64 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	623b      	str	r3, [r7, #32]
    }
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <xTimerGenericCommand+0x98>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d02a      	beq.n	8003ff0 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b05      	cmp	r3, #5
 8003faa:	dc18      	bgt.n	8003fde <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fac:	f7ff fe92 	bl	8003cd4 <xTaskGetSchedulerState>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d109      	bne.n	8003fca <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fb6:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <xTimerGenericCommand+0x98>)
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	f107 0114 	add.w	r1, r7, #20
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fc2:	f7fe fbb5 	bl	8002730 <xQueueGenericSend>
 8003fc6:	6278      	str	r0, [r7, #36]	; 0x24
 8003fc8:	e012      	b.n	8003ff0 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fca:	4b0c      	ldr	r3, [pc, #48]	; (8003ffc <xTimerGenericCommand+0x98>)
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	f107 0114 	add.w	r1, r7, #20
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f7fe fbab 	bl	8002730 <xQueueGenericSend>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24
 8003fdc:	e008      	b.n	8003ff0 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <xTimerGenericCommand+0x98>)
 8003fe0:	6818      	ldr	r0, [r3, #0]
 8003fe2:	f107 0114 	add.w	r1, r7, #20
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	f7fe fcc7 	bl	800297c <xQueueGenericSendFromISR>
 8003fee:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3728      	adds	r7, #40	; 0x28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	200001cc 	.word	0x200001cc

08004000 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400a:	4b22      	ldr	r3, [pc, #136]	; (8004094 <prvProcessExpiredTimer+0x94>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	3304      	adds	r3, #4
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe fa6f 	bl	80024fc <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b00      	cmp	r3, #0
 800402a:	d022      	beq.n	8004072 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	699a      	ldr	r2, [r3, #24]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	18d1      	adds	r1, r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	6978      	ldr	r0, [r7, #20]
 800403a:	f000 f8d1 	bl	80041e0 <prvInsertTimerInActiveList>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01f      	beq.n	8004084 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	2100      	movs	r1, #0
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff ff88 	bl	8003f64 <xTimerGenericCommand>
 8004054:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d113      	bne.n	8004084 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	60fb      	str	r3, [r7, #12]
    }
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004078:	f023 0301 	bic.w	r3, r3, #1
 800407c:	b2da      	uxtb	r2, r3
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	6978      	ldr	r0, [r7, #20]
 800408a:	4798      	blx	r3
    }
 800408c:	bf00      	nop
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	200001c4 	.word	0x200001c4

08004098 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040a0:	f107 0308 	add.w	r3, r7, #8
 80040a4:	4618      	mov	r0, r3
 80040a6:	f000 f857 	bl	8004158 <prvGetNextExpireTime>
 80040aa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4619      	mov	r1, r3
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 f803 	bl	80040bc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80040b6:	f000 f8d5 	bl	8004264 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040ba:	e7f1      	b.n	80040a0 <prvTimerTask+0x8>

080040bc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80040c6:	f7ff fa1d 	bl	8003504 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040ca:	f107 0308 	add.w	r3, r7, #8
 80040ce:	4618      	mov	r0, r3
 80040d0:	f000 f866 	bl	80041a0 <prvSampleTimeNow>
 80040d4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d130      	bne.n	800413e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10a      	bne.n	80040f8 <prvProcessTimerOrBlockTask+0x3c>
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d806      	bhi.n	80040f8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040ea:	f7ff fa19 	bl	8003520 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f7ff ff85 	bl	8004000 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040f6:	e024      	b.n	8004142 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d008      	beq.n	8004110 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040fe:	4b13      	ldr	r3, [pc, #76]	; (800414c <prvProcessTimerOrBlockTask+0x90>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <prvProcessTimerOrBlockTask+0x50>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <prvProcessTimerOrBlockTask+0x52>
 800410c:	2300      	movs	r3, #0
 800410e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004110:	4b0f      	ldr	r3, [pc, #60]	; (8004150 <prvProcessTimerOrBlockTask+0x94>)
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	4619      	mov	r1, r3
 800411e:	f7fe ff3d 	bl	8002f9c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004122:	f7ff f9fd 	bl	8003520 <xTaskResumeAll>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10a      	bne.n	8004142 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800412c:	4b09      	ldr	r3, [pc, #36]	; (8004154 <prvProcessTimerOrBlockTask+0x98>)
 800412e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	f3bf 8f6f 	isb	sy
    }
 800413c:	e001      	b.n	8004142 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800413e:	f7ff f9ef 	bl	8003520 <xTaskResumeAll>
    }
 8004142:	bf00      	nop
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	200001c8 	.word	0x200001c8
 8004150:	200001cc 	.word	0x200001cc
 8004154:	e000ed04 	.word	0xe000ed04

08004158 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004160:	4b0e      	ldr	r3, [pc, #56]	; (800419c <prvGetNextExpireTime+0x44>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <prvGetNextExpireTime+0x16>
 800416a:	2201      	movs	r2, #1
 800416c:	e000      	b.n	8004170 <prvGetNextExpireTime+0x18>
 800416e:	2200      	movs	r2, #0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d105      	bne.n	8004188 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800417c:	4b07      	ldr	r3, [pc, #28]	; (800419c <prvGetNextExpireTime+0x44>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	e001      	b.n	800418c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800418c:	68fb      	ldr	r3, [r7, #12]
    }
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
 800419a:	bf00      	nop
 800419c:	200001c4 	.word	0x200001c4

080041a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041a8:	f7ff fa5a 	bl	8003660 <xTaskGetTickCount>
 80041ac:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041ae:	4b0b      	ldr	r3, [pc, #44]	; (80041dc <prvSampleTimeNow+0x3c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d205      	bcs.n	80041c4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80041b8:	f000 f91a 	bl	80043f0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e002      	b.n	80041ca <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80041ca:	4a04      	ldr	r2, [pc, #16]	; (80041dc <prvSampleTimeNow+0x3c>)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041d0:	68fb      	ldr	r3, [r7, #12]
    }
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200001d4 	.word	0x200001d4

080041e0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d812      	bhi.n	800422c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	1ad2      	subs	r2, r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	429a      	cmp	r2, r3
 8004212:	d302      	bcc.n	800421a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004214:	2301      	movs	r3, #1
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	e01b      	b.n	8004252 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <prvInsertTimerInActiveList+0x7c>)
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3304      	adds	r3, #4
 8004222:	4619      	mov	r1, r3
 8004224:	4610      	mov	r0, r2
 8004226:	f7fe f930 	bl	800248a <vListInsert>
 800422a:	e012      	b.n	8004252 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d206      	bcs.n	8004242 <prvInsertTimerInActiveList+0x62>
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d302      	bcc.n	8004242 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800423c:	2301      	movs	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	e007      	b.n	8004252 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004242:	4b07      	ldr	r3, [pc, #28]	; (8004260 <prvInsertTimerInActiveList+0x80>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	3304      	adds	r3, #4
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f7fe f91c 	bl	800248a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004252:	697b      	ldr	r3, [r7, #20]
    }
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	200001c8 	.word	0x200001c8
 8004260:	200001c4 	.word	0x200001c4

08004264 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004264:	b580      	push	{r7, lr}
 8004266:	b08c      	sub	sp, #48	; 0x30
 8004268:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800426a:	e0ae      	b.n	80043ca <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f2c0 80aa 	blt.w	80043c8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d004      	beq.n	800428a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe f939 	bl	80024fc <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800428a:	1d3b      	adds	r3, r7, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff87 	bl	80041a0 <prvSampleTimeNow>
 8004292:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	2b09      	cmp	r3, #9
 8004298:	f200 8097 	bhi.w	80043ca <prvProcessReceivedCommands+0x166>
 800429c:	a201      	add	r2, pc, #4	; (adr r2, 80042a4 <prvProcessReceivedCommands+0x40>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	080042cd 	.word	0x080042cd
 80042a8:	080042cd 	.word	0x080042cd
 80042ac:	080042cd 	.word	0x080042cd
 80042b0:	08004341 	.word	0x08004341
 80042b4:	08004355 	.word	0x08004355
 80042b8:	0800439f 	.word	0x0800439f
 80042bc:	080042cd 	.word	0x080042cd
 80042c0:	080042cd 	.word	0x080042cd
 80042c4:	08004341 	.word	0x08004341
 80042c8:	08004355 	.word	0x08004355
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d2:	f043 0301 	orr.w	r3, r3, #1
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	18d1      	adds	r1, r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6a3a      	ldr	r2, [r7, #32]
 80042ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042ec:	f7ff ff78 	bl	80041e0 <prvInsertTimerInActiveList>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d069      	beq.n	80043ca <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042fc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05e      	beq.n	80043ca <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	441a      	add	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	2300      	movs	r3, #0
 800431a:	2100      	movs	r1, #0
 800431c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800431e:	f7ff fe21 	bl	8003f64 <xTimerGenericCommand>
 8004322:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d14f      	bne.n	80043ca <prvProcessReceivedCommands+0x166>
        __asm volatile
 800432a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432e:	f383 8811 	msr	BASEPRI, r3
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	f3bf 8f4f 	dsb	sy
 800433a:	61bb      	str	r3, [r7, #24]
    }
 800433c:	bf00      	nop
 800433e:	e7fe      	b.n	800433e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004346:	f023 0301 	bic.w	r3, r3, #1
 800434a:	b2da      	uxtb	r2, r3
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004352:	e03a      	b.n	80043ca <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004356:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800435a:	f043 0301 	orr.w	r3, r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004362:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10a      	bne.n	800438a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	617b      	str	r3, [r7, #20]
    }
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	18d1      	adds	r1, r2, r3
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004398:	f7ff ff22 	bl	80041e0 <prvInsertTimerInActiveList>
                        break;
 800439c:	e015      	b.n	80043ca <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d103      	bne.n	80043b4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80043ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ae:	f000 fc6b 	bl	8004c88 <vPortFree>
 80043b2:	e00a      	b.n	80043ca <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ba:	f023 0301 	bic.w	r3, r3, #1
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80043c6:	e000      	b.n	80043ca <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80043c8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <prvProcessReceivedCommands+0x188>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f107 0108 	add.w	r1, r7, #8
 80043d2:	2200      	movs	r2, #0
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fe fb8f 	bl	8002af8 <xQueueReceive>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f47f af45 	bne.w	800426c <prvProcessReceivedCommands+0x8>
        }
    }
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	3728      	adds	r7, #40	; 0x28
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200001cc 	.word	0x200001cc

080043f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043f6:	e048      	b.n	800448a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043f8:	4b2d      	ldr	r3, [pc, #180]	; (80044b0 <prvSwitchTimerLists+0xc0>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004402:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <prvSwitchTimerLists+0xc0>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3304      	adds	r3, #4
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe f873 	bl	80024fc <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d02e      	beq.n	800448a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d90e      	bls.n	800445c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800444a:	4b19      	ldr	r3, [pc, #100]	; (80044b0 <prvSwitchTimerLists+0xc0>)
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	3304      	adds	r3, #4
 8004452:	4619      	mov	r1, r3
 8004454:	4610      	mov	r0, r2
 8004456:	f7fe f818 	bl	800248a <vListInsert>
 800445a:	e016      	b.n	800448a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800445c:	2300      	movs	r3, #0
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	2100      	movs	r1, #0
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f7ff fd7c 	bl	8003f64 <xTimerGenericCommand>
 800446c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10a      	bne.n	800448a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	603b      	str	r3, [r7, #0]
    }
 8004486:	bf00      	nop
 8004488:	e7fe      	b.n	8004488 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <prvSwitchTimerLists+0xc0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1b1      	bne.n	80043f8 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004494:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <prvSwitchTimerLists+0xc0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <prvSwitchTimerLists+0xc4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a04      	ldr	r2, [pc, #16]	; (80044b0 <prvSwitchTimerLists+0xc0>)
 80044a0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80044a2:	4a04      	ldr	r2, [pc, #16]	; (80044b4 <prvSwitchTimerLists+0xc4>)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	6013      	str	r3, [r2, #0]
    }
 80044a8:	bf00      	nop
 80044aa:	3718      	adds	r7, #24
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	200001c4 	.word	0x200001c4
 80044b4:	200001c8 	.word	0x200001c8

080044b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80044bc:	f000 f9e2 	bl	8004884 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <prvCheckForValidListAndQueue+0x54>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11d      	bne.n	8004504 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80044c8:	4811      	ldr	r0, [pc, #68]	; (8004510 <prvCheckForValidListAndQueue+0x58>)
 80044ca:	f7fd ff8d 	bl	80023e8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80044ce:	4811      	ldr	r0, [pc, #68]	; (8004514 <prvCheckForValidListAndQueue+0x5c>)
 80044d0:	f7fd ff8a 	bl	80023e8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80044d4:	4b10      	ldr	r3, [pc, #64]	; (8004518 <prvCheckForValidListAndQueue+0x60>)
 80044d6:	4a0e      	ldr	r2, [pc, #56]	; (8004510 <prvCheckForValidListAndQueue+0x58>)
 80044d8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <prvCheckForValidListAndQueue+0x64>)
 80044dc:	4a0d      	ldr	r2, [pc, #52]	; (8004514 <prvCheckForValidListAndQueue+0x5c>)
 80044de:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044e0:	2200      	movs	r2, #0
 80044e2:	210c      	movs	r1, #12
 80044e4:	200a      	movs	r0, #10
 80044e6:	f7fe f89b 	bl	8002620 <xQueueGenericCreate>
 80044ea:	4603      	mov	r3, r0
 80044ec:	4a07      	ldr	r2, [pc, #28]	; (800450c <prvCheckForValidListAndQueue+0x54>)
 80044ee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80044f0:	4b06      	ldr	r3, [pc, #24]	; (800450c <prvCheckForValidListAndQueue+0x54>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044f8:	4b04      	ldr	r3, [pc, #16]	; (800450c <prvCheckForValidListAndQueue+0x54>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4908      	ldr	r1, [pc, #32]	; (8004520 <prvCheckForValidListAndQueue+0x68>)
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fd1a 	bl	8002f38 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004504:	f000 f9ee 	bl	80048e4 <vPortExitCritical>
    }
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}
 800450c:	200001cc 	.word	0x200001cc
 8004510:	2000019c 	.word	0x2000019c
 8004514:	200001b0 	.word	0x200001b0
 8004518:	200001c4 	.word	0x200001c4
 800451c:	200001c8 	.word	0x200001c8
 8004520:	08008280 	.word	0x08008280

08004524 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3b04      	subs	r3, #4
 8004534:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800453c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	3b04      	subs	r3, #4
 8004542:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3b04      	subs	r3, #4
 8004552:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004554:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <pxPortInitialiseStack+0x64>)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b14      	subs	r3, #20
 800455e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	3b04      	subs	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f06f 0202 	mvn.w	r2, #2
 8004572:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3b20      	subs	r3, #32
 8004578:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800457a:	68fb      	ldr	r3, [r7, #12]
}
 800457c:	4618      	mov	r0, r3
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	0800458d 	.word	0x0800458d

0800458c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <prvTaskExitError+0x54>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459e:	d00a      	beq.n	80045b6 <prvTaskExitError+0x2a>
        __asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60fb      	str	r3, [r7, #12]
    }
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <prvTaskExitError+0x28>
        __asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	60bb      	str	r3, [r7, #8]
    }
 80045c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80045ca:	bf00      	nop
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0fc      	beq.n	80045cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045d2:	bf00      	nop
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	20000010 	.word	0x20000010
	...

080045f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045f0:	4b07      	ldr	r3, [pc, #28]	; (8004610 <pxCurrentTCBConst2>)
 80045f2:	6819      	ldr	r1, [r3, #0]
 80045f4:	6808      	ldr	r0, [r1, #0]
 80045f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045fa:	f380 8809 	msr	PSP, r0
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f04f 0000 	mov.w	r0, #0
 8004606:	f380 8811 	msr	BASEPRI, r0
 800460a:	4770      	bx	lr
 800460c:	f3af 8000 	nop.w

08004610 <pxCurrentTCBConst2>:
 8004610:	20000098 	.word	0x20000098
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop

08004618 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004618:	4808      	ldr	r0, [pc, #32]	; (800463c <prvPortStartFirstTask+0x24>)
 800461a:	6800      	ldr	r0, [r0, #0]
 800461c:	6800      	ldr	r0, [r0, #0]
 800461e:	f380 8808 	msr	MSP, r0
 8004622:	f04f 0000 	mov.w	r0, #0
 8004626:	f380 8814 	msr	CONTROL, r0
 800462a:	b662      	cpsie	i
 800462c:	b661      	cpsie	f
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	df00      	svc	0
 8004638:	bf00      	nop
 800463a:	0000      	.short	0x0000
 800463c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop

08004644 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800464a:	4b46      	ldr	r3, [pc, #280]	; (8004764 <xPortStartScheduler+0x120>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a46      	ldr	r2, [pc, #280]	; (8004768 <xPortStartScheduler+0x124>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10a      	bne.n	800466a <xPortStartScheduler+0x26>
        __asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	613b      	str	r3, [r7, #16]
    }
 8004666:	bf00      	nop
 8004668:	e7fe      	b.n	8004668 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800466a:	4b3e      	ldr	r3, [pc, #248]	; (8004764 <xPortStartScheduler+0x120>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3f      	ldr	r2, [pc, #252]	; (800476c <xPortStartScheduler+0x128>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10a      	bne.n	800468a <xPortStartScheduler+0x46>
        __asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	60fb      	str	r3, [r7, #12]
    }
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800468a:	4b39      	ldr	r3, [pc, #228]	; (8004770 <xPortStartScheduler+0x12c>)
 800468c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	22ff      	movs	r2, #255	; 0xff
 800469a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	4b31      	ldr	r3, [pc, #196]	; (8004774 <xPortStartScheduler+0x130>)
 80046b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046b2:	4b31      	ldr	r3, [pc, #196]	; (8004778 <xPortStartScheduler+0x134>)
 80046b4:	2207      	movs	r2, #7
 80046b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046b8:	e009      	b.n	80046ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80046ba:	4b2f      	ldr	r3, [pc, #188]	; (8004778 <xPortStartScheduler+0x134>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3b01      	subs	r3, #1
 80046c0:	4a2d      	ldr	r2, [pc, #180]	; (8004778 <xPortStartScheduler+0x134>)
 80046c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046ce:	78fb      	ldrb	r3, [r7, #3]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d6:	2b80      	cmp	r3, #128	; 0x80
 80046d8:	d0ef      	beq.n	80046ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046da:	4b27      	ldr	r3, [pc, #156]	; (8004778 <xPortStartScheduler+0x134>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f1c3 0307 	rsb	r3, r3, #7
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d00a      	beq.n	80046fc <xPortStartScheduler+0xb8>
        __asm volatile
 80046e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ea:	f383 8811 	msr	BASEPRI, r3
 80046ee:	f3bf 8f6f 	isb	sy
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	60bb      	str	r3, [r7, #8]
    }
 80046f8:	bf00      	nop
 80046fa:	e7fe      	b.n	80046fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046fc:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <xPortStartScheduler+0x134>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <xPortStartScheduler+0x134>)
 8004704:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <xPortStartScheduler+0x134>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800470e:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <xPortStartScheduler+0x134>)
 8004710:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	b2da      	uxtb	r2, r3
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800471a:	4b18      	ldr	r3, [pc, #96]	; (800477c <xPortStartScheduler+0x138>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a17      	ldr	r2, [pc, #92]	; (800477c <xPortStartScheduler+0x138>)
 8004720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004724:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004726:	4b15      	ldr	r3, [pc, #84]	; (800477c <xPortStartScheduler+0x138>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a14      	ldr	r2, [pc, #80]	; (800477c <xPortStartScheduler+0x138>)
 800472c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004730:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004732:	f000 f963 	bl	80049fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <xPortStartScheduler+0x13c>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800473c:	f000 f978 	bl	8004a30 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <xPortStartScheduler+0x140>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0f      	ldr	r2, [pc, #60]	; (8004784 <xPortStartScheduler+0x140>)
 8004746:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800474a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800474c:	f7ff ff64 	bl	8004618 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004750:	f7ff f864 	bl	800381c <vTaskSwitchContext>
    prvTaskExitError();
 8004754:	f7ff ff1a 	bl	800458c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	e000ed00 	.word	0xe000ed00
 8004768:	410fc271 	.word	0x410fc271
 800476c:	410fc270 	.word	0x410fc270
 8004770:	e000e400 	.word	0xe000e400
 8004774:	200001d8 	.word	0x200001d8
 8004778:	200001dc 	.word	0x200001dc
 800477c:	e000ed20 	.word	0xe000ed20
 8004780:	20000010 	.word	0x20000010
 8004784:	e000ef34 	.word	0xe000ef34

08004788 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800478e:	4b37      	ldr	r3, [pc, #220]	; (800486c <vInitPrioGroupValue+0xe4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a37      	ldr	r2, [pc, #220]	; (8004870 <vInitPrioGroupValue+0xe8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d10a      	bne.n	80047ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	613b      	str	r3, [r7, #16]
    }
 80047aa:	bf00      	nop
 80047ac:	e7fe      	b.n	80047ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <vInitPrioGroupValue+0xe4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a30      	ldr	r2, [pc, #192]	; (8004874 <vInitPrioGroupValue+0xec>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d10a      	bne.n	80047ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
    }
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047ce:	4b2a      	ldr	r3, [pc, #168]	; (8004878 <vInitPrioGroupValue+0xf0>)
 80047d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	22ff      	movs	r2, #255	; 0xff
 80047de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4b22      	ldr	r3, [pc, #136]	; (800487c <vInitPrioGroupValue+0xf4>)
 80047f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047f6:	4b22      	ldr	r3, [pc, #136]	; (8004880 <vInitPrioGroupValue+0xf8>)
 80047f8:	2207      	movs	r2, #7
 80047fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047fc:	e009      	b.n	8004812 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80047fe:	4b20      	ldr	r3, [pc, #128]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	3b01      	subs	r3, #1
 8004804:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004806:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	b2db      	uxtb	r3, r3
 8004816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481a:	2b80      	cmp	r3, #128	; 0x80
 800481c:	d0ef      	beq.n	80047fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800481e:	4b18      	ldr	r3, [pc, #96]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f1c3 0307 	rsb	r3, r3, #7
 8004826:	2b04      	cmp	r3, #4
 8004828:	d00a      	beq.n	8004840 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	60bb      	str	r3, [r7, #8]
    }
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	021b      	lsls	r3, r3, #8
 8004846:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004848:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <vInitPrioGroupValue+0xf8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004852:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <vInitPrioGroupValue+0xf8>)
 8004854:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	b2da      	uxtb	r2, r3
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	e000ed00 	.word	0xe000ed00
 8004870:	410fc271 	.word	0x410fc271
 8004874:	410fc270 	.word	0x410fc270
 8004878:	e000e400 	.word	0xe000e400
 800487c:	200001d8 	.word	0x200001d8
 8004880:	200001dc 	.word	0x200001dc

08004884 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	607b      	str	r3, [r7, #4]
    }
 800489c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <vPortEnterCritical+0x58>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <vPortEnterCritical+0x58>)
 80048a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <vPortEnterCritical+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10f      	bne.n	80048d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortEnterCritical+0x5c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	603b      	str	r3, [r7, #0]
    }
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <vPortEnterCritical+0x4a>
    }
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	20000010 	.word	0x20000010
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <vPortExitCritical+0x50>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <vPortExitCritical+0x24>
        __asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
    }
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <vPortExitCritical+0x50>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <vPortExitCritical+0x50>)
 8004910:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <vPortExitCritical+0x50>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <vPortExitCritical+0x42>
 800491a:	2300      	movs	r3, #0
 800491c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f383 8811 	msr	BASEPRI, r3
    }
 8004924:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000010 	.word	0x20000010
	...

08004940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004940:	f3ef 8009 	mrs	r0, PSP
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <pxCurrentTCBConst>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f01e 0f10 	tst.w	lr, #16
 8004950:	bf08      	it	eq
 8004952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	6010      	str	r0, [r2, #0]
 800495c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004964:	f380 8811 	msr	BASEPRI, r0
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f7fe ff54 	bl	800381c <vTaskSwitchContext>
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f380 8811 	msr	BASEPRI, r0
 800497c:	bc09      	pop	{r0, r3}
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	6808      	ldr	r0, [r1, #0]
 8004982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004986:	f01e 0f10 	tst.w	lr, #16
 800498a:	bf08      	it	eq
 800498c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004990:	f380 8809 	msr	PSP, r0
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	f3af 8000 	nop.w

080049a0 <pxCurrentTCBConst>:
 80049a0:	20000098 	.word	0x20000098
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
        __asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
    }
 80049c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80049c2:	f002 f93f 	bl	8006c44 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80049c6:	f7fe fe6d 	bl	80036a4 <xTaskIncrementTick>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d006      	beq.n	80049de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80049d0:	f002 f996 	bl	8006d00 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049d4:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <SysTick_Handler+0x50>)
 80049d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e001      	b.n	80049e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80049de:	f002 f973 	bl	8006cc8 <SEGGER_SYSVIEW_RecordExitISR>
 80049e2:	2300      	movs	r3, #0
 80049e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f383 8811 	msr	BASEPRI, r3
    }
 80049ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a00:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <vPortSetupTimerInterrupt+0x28>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a06:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <vPortSetupTimerInterrupt+0x2c>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a0c:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <vPortSetupTimerInterrupt+0x30>)
 8004a0e:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8004a12:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a14:	4b03      	ldr	r3, [pc, #12]	; (8004a24 <vPortSetupTimerInterrupt+0x28>)
 8004a16:	2207      	movs	r2, #7
 8004a18:	601a      	str	r2, [r3, #0]
}
 8004a1a:	bf00      	nop
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	e000e010 	.word	0xe000e010
 8004a28:	e000e018 	.word	0xe000e018
 8004a2c:	e000e014 	.word	0xe000e014

08004a30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a40 <vPortEnableVFP+0x10>
 8004a34:	6801      	ldr	r1, [r0, #0]
 8004a36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a3a:	6001      	str	r1, [r0, #0]
 8004a3c:	4770      	bx	lr
 8004a3e:	0000      	.short	0x0000
 8004a40:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a44:	bf00      	nop
 8004a46:	bf00      	nop

08004a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a4e:	f3ef 8305 	mrs	r3, IPSR
 8004a52:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b0f      	cmp	r3, #15
 8004a58:	d914      	bls.n	8004a84 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <vPortValidateInterruptPriority+0x70>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <vPortValidateInterruptPriority+0x74>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	7afa      	ldrb	r2, [r7, #11]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d20a      	bcs.n	8004a84 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	607b      	str	r3, [r7, #4]
    }
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <vPortValidateInterruptPriority+0x78>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <vPortValidateInterruptPriority+0x7c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d90a      	bls.n	8004aaa <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	603b      	str	r3, [r7, #0]
    }
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <vPortValidateInterruptPriority+0x60>
    }
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000e3f0 	.word	0xe000e3f0
 8004abc:	200001d8 	.word	0x200001d8
 8004ac0:	e000ed0c 	.word	0xe000ed0c
 8004ac4:	200001dc 	.word	0x200001dc

08004ac8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004ad4:	f7fe fd16 	bl	8003504 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004ad8:	4b65      	ldr	r3, [pc, #404]	; (8004c70 <pvPortMalloc+0x1a8>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ae0:	f000 f934 	bl	8004d4c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ae4:	4b63      	ldr	r3, [pc, #396]	; (8004c74 <pvPortMalloc+0x1ac>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 80a7 	bne.w	8004c40 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02d      	beq.n	8004b54 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004af8:	2208      	movs	r2, #8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d227      	bcs.n	8004b54 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004b04:	2208      	movs	r2, #8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d021      	beq.n	8004b5a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f023 0307 	bic.w	r3, r3, #7
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d214      	bcs.n	8004b4e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f023 0307 	bic.w	r3, r3, #7
 8004b2a:	3308      	adds	r3, #8
 8004b2c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d010      	beq.n	8004b5a <pvPortMalloc+0x92>
        __asm volatile
 8004b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3c:	f383 8811 	msr	BASEPRI, r3
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	617b      	str	r3, [r7, #20]
    }
 8004b4a:	bf00      	nop
 8004b4c:	e7fe      	b.n	8004b4c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b52:	e002      	b.n	8004b5a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004b54:	2300      	movs	r3, #0
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	e000      	b.n	8004b5c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b5a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d06e      	beq.n	8004c40 <pvPortMalloc+0x178>
 8004b62:	4b45      	ldr	r3, [pc, #276]	; (8004c78 <pvPortMalloc+0x1b0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d869      	bhi.n	8004c40 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b6c:	4b43      	ldr	r3, [pc, #268]	; (8004c7c <pvPortMalloc+0x1b4>)
 8004b6e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b70:	4b42      	ldr	r3, [pc, #264]	; (8004c7c <pvPortMalloc+0x1b4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b76:	e004      	b.n	8004b82 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d903      	bls.n	8004b94 <pvPortMalloc+0xcc>
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1f1      	bne.n	8004b78 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b94:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <pvPortMalloc+0x1a8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d050      	beq.n	8004c40 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	4413      	add	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	1ad2      	subs	r2, r2, r3
 8004bb8:	2308      	movs	r3, #8
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d91f      	bls.n	8004c00 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <pvPortMalloc+0x120>
        __asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	613b      	str	r3, [r7, #16]
    }
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	1ad2      	subs	r2, r2, r3
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bfa:	69b8      	ldr	r0, [r7, #24]
 8004bfc:	f000 f908 	bl	8004e10 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c00:	4b1d      	ldr	r3, [pc, #116]	; (8004c78 <pvPortMalloc+0x1b0>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	4a1b      	ldr	r2, [pc, #108]	; (8004c78 <pvPortMalloc+0x1b0>)
 8004c0c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c0e:	4b1a      	ldr	r3, [pc, #104]	; (8004c78 <pvPortMalloc+0x1b0>)
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <pvPortMalloc+0x1b8>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d203      	bcs.n	8004c22 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c1a:	4b17      	ldr	r3, [pc, #92]	; (8004c78 <pvPortMalloc+0x1b0>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <pvPortMalloc+0x1b8>)
 8004c20:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <pvPortMalloc+0x1ac>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <pvPortMalloc+0x1bc>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	4a11      	ldr	r2, [pc, #68]	; (8004c84 <pvPortMalloc+0x1bc>)
 8004c3e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004c40:	f7fe fc6e 	bl	8003520 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <pvPortMalloc+0x19c>
        __asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60fb      	str	r3, [r7, #12]
    }
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <pvPortMalloc+0x19a>
    return pvReturn;
 8004c64:	69fb      	ldr	r3, [r7, #28]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3728      	adds	r7, #40	; 0x28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20012de8 	.word	0x20012de8
 8004c74:	20012dfc 	.word	0x20012dfc
 8004c78:	20012dec 	.word	0x20012dec
 8004c7c:	20012de0 	.word	0x20012de0
 8004c80:	20012df0 	.word	0x20012df0
 8004c84:	20012df4 	.word	0x20012df4

08004c88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d04d      	beq.n	8004d36 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c9a:	2308      	movs	r3, #8
 8004c9c:	425b      	negs	r3, r3
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	4b24      	ldr	r3, [pc, #144]	; (8004d40 <vPortFree+0xb8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <vPortFree+0x44>
        __asm volatile
 8004cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cba:	f383 8811 	msr	BASEPRI, r3
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f3bf 8f4f 	dsb	sy
 8004cc6:	60fb      	str	r3, [r7, #12]
    }
 8004cc8:	bf00      	nop
 8004cca:	e7fe      	b.n	8004cca <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00a      	beq.n	8004cea <vPortFree+0x62>
        __asm volatile
 8004cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	f3bf 8f4f 	dsb	sy
 8004ce4:	60bb      	str	r3, [r7, #8]
    }
 8004ce6:	bf00      	nop
 8004ce8:	e7fe      	b.n	8004ce8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <vPortFree+0xb8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01e      	beq.n	8004d36 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11a      	bne.n	8004d36 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <vPortFree+0xb8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004d10:	f7fe fbf8 	bl	8003504 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <vPortFree+0xbc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <vPortFree+0xbc>)
 8004d20:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d22:	6938      	ldr	r0, [r7, #16]
 8004d24:	f000 f874 	bl	8004e10 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004d28:	4b07      	ldr	r3, [pc, #28]	; (8004d48 <vPortFree+0xc0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	4a06      	ldr	r2, [pc, #24]	; (8004d48 <vPortFree+0xc0>)
 8004d30:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004d32:	f7fe fbf5 	bl	8003520 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004d36:	bf00      	nop
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20012dfc 	.word	0x20012dfc
 8004d44:	20012dec 	.word	0x20012dec
 8004d48:	20012df8 	.word	0x20012df8

08004d4c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d52:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d56:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004d58:	4b27      	ldr	r3, [pc, #156]	; (8004df8 <prvHeapInit+0xac>)
 8004d5a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00c      	beq.n	8004d80 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3307      	adds	r3, #7
 8004d6a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0307 	bic.w	r3, r3, #7
 8004d72:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	4a1f      	ldr	r2, [pc, #124]	; (8004df8 <prvHeapInit+0xac>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d84:	4a1d      	ldr	r2, [pc, #116]	; (8004dfc <prvHeapInit+0xb0>)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d8a:	4b1c      	ldr	r3, [pc, #112]	; (8004dfc <prvHeapInit+0xb0>)
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d98:	2208      	movs	r2, #8
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0307 	bic.w	r3, r3, #7
 8004da6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <prvHeapInit+0xb4>)
 8004dac:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004dae:	4b14      	ldr	r3, [pc, #80]	; (8004e00 <prvHeapInit+0xb4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004db6:	4b12      	ldr	r3, [pc, #72]	; (8004e00 <prvHeapInit+0xb4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	1ad2      	subs	r2, r2, r3
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <prvHeapInit+0xb4>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a0a      	ldr	r2, [pc, #40]	; (8004e04 <prvHeapInit+0xb8>)
 8004dda:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <prvHeapInit+0xbc>)
 8004de2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <prvHeapInit+0xc0>)
 8004de6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dea:	601a      	str	r2, [r3, #0]
}
 8004dec:	bf00      	nop
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	200001e0 	.word	0x200001e0
 8004dfc:	20012de0 	.word	0x20012de0
 8004e00:	20012de8 	.word	0x20012de8
 8004e04:	20012df0 	.word	0x20012df0
 8004e08:	20012dec 	.word	0x20012dec
 8004e0c:	20012dfc 	.word	0x20012dfc

08004e10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e18:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <prvInsertBlockIntoFreeList+0xac>)
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e002      	b.n	8004e24 <prvInsertBlockIntoFreeList+0x14>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d8f7      	bhi.n	8004e1e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	4413      	add	r3, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d108      	bne.n	8004e52 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	441a      	add	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	441a      	add	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d118      	bne.n	8004e98 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b15      	ldr	r3, [pc, #84]	; (8004ec0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d00d      	beq.n	8004e8e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	441a      	add	r2, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e008      	b.n	8004ea0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ec0 <prvInsertBlockIntoFreeList+0xb0>)
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e003      	b.n	8004ea0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d002      	beq.n	8004eae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	20012de0 	.word	0x20012de0
 8004ec0:	20012de8 	.word	0x20012de8

08004ec4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004ec8:	4803      	ldr	r0, [pc, #12]	; (8004ed8 <_cbSendSystemDesc+0x14>)
 8004eca:	f001 fe65 	bl	8006b98 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004ece:	4803      	ldr	r0, [pc, #12]	; (8004edc <_cbSendSystemDesc+0x18>)
 8004ed0:	f001 fe62 	bl	8006b98 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	08008288 	.word	0x08008288
 8004edc:	080082c8 	.word	0x080082c8

08004ee0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <SEGGER_SYSVIEW_Conf+0x1c>)
 8004ee6:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <SEGGER_SYSVIEW_Conf+0x20>)
 8004ee8:	4906      	ldr	r1, [pc, #24]	; (8004f04 <SEGGER_SYSVIEW_Conf+0x24>)
 8004eea:	4806      	ldr	r0, [pc, #24]	; (8004f04 <SEGGER_SYSVIEW_Conf+0x24>)
 8004eec:	f001 f9d2 	bl	8006294 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004ef0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004ef4:	f001 fa12 	bl	800631c <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ef8:	bf00      	nop
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	08004ec5 	.word	0x08004ec5
 8004f00:	08008398 	.word	0x08008398
 8004f04:	007a1200 	.word	0x007a1200

08004f08 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	e033      	b.n	8004f7c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004f14:	491e      	ldr	r1, [pc, #120]	; (8004f90 <_cbSendTaskList+0x88>)
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	6818      	ldr	r0, [r3, #0]
 8004f24:	491a      	ldr	r1, [pc, #104]	; (8004f90 <_cbSendTaskList+0x88>)
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3304      	adds	r3, #4
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	4c16      	ldr	r4, [pc, #88]	; (8004f90 <_cbSendTaskList+0x88>)
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4423      	add	r3, r4
 8004f44:	3308      	adds	r3, #8
 8004f46:	681c      	ldr	r4, [r3, #0]
 8004f48:	4d11      	ldr	r5, [pc, #68]	; (8004f90 <_cbSendTaskList+0x88>)
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	442b      	add	r3, r5
 8004f56:	330c      	adds	r3, #12
 8004f58:	681d      	ldr	r5, [r3, #0]
 8004f5a:	4e0d      	ldr	r6, [pc, #52]	; (8004f90 <_cbSendTaskList+0x88>)
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4433      	add	r3, r6
 8004f68:	3310      	adds	r3, #16
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	462b      	mov	r3, r5
 8004f70:	4622      	mov	r2, r4
 8004f72:	f000 f8c1 	bl	80050f8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <_cbSendTaskList+0x8c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3c6      	bcc.n	8004f14 <_cbSendTaskList+0xc>
  }
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f90:	20012e00 	.word	0x20012e00
 8004f94:	20012ea0 	.word	0x20012ea0

08004f98 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004f98:	b5b0      	push	{r4, r5, r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004f9e:	f7fe fb6f 	bl	8003680 <xTaskGetTickCountFromISR>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
 8004fae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	008b      	lsls	r3, r1, #2
 8004fbc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fc0:	0082      	lsls	r2, r0, #2
 8004fc2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= 1000;
 8004fc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	f04f 0400 	mov.w	r4, #0
 8004fd2:	f04f 0500 	mov.w	r5, #0
 8004fd6:	015d      	lsls	r5, r3, #5
 8004fd8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004fdc:	0154      	lsls	r4, r2, #5
 8004fde:	4622      	mov	r2, r4
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	1a12      	subs	r2, r2, r0
 8004fe4:	eb63 0301 	sbc.w	r3, r3, r1
 8004fe8:	f04f 0400 	mov.w	r4, #0
 8004fec:	f04f 0500 	mov.w	r5, #0
 8004ff0:	009d      	lsls	r5, r3, #2
 8004ff2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004ff6:	0094      	lsls	r4, r2, #2
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	462b      	mov	r3, r5
 8004ffc:	1812      	adds	r2, r2, r0
 8004ffe:	eb41 0303 	adc.w	r3, r1, r3
 8005002:	f04f 0000 	mov.w	r0, #0
 8005006:	f04f 0100 	mov.w	r1, #0
 800500a:	00d9      	lsls	r1, r3, #3
 800500c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005010:	00d0      	lsls	r0, r2, #3
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800501a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bdb0      	pop	{r4, r5, r7, pc}

08005028 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af02      	add	r7, sp, #8
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005036:	2205      	movs	r2, #5
 8005038:	492b      	ldr	r1, [pc, #172]	; (80050e8 <SYSVIEW_AddTask+0xc0>)
 800503a:	68b8      	ldr	r0, [r7, #8]
 800503c:	f002 f956 	bl	80072ec <memcmp>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04b      	beq.n	80050de <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005046:	4b29      	ldr	r3, [pc, #164]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b07      	cmp	r3, #7
 800504c:	d903      	bls.n	8005056 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800504e:	4828      	ldr	r0, [pc, #160]	; (80050f0 <SYSVIEW_AddTask+0xc8>)
 8005050:	f002 f8b4 	bl	80071bc <SEGGER_SYSVIEW_Warn>
    return;
 8005054:	e044      	b.n	80050e0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005056:	4b25      	ldr	r3, [pc, #148]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4926      	ldr	r1, [pc, #152]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	440b      	add	r3, r1
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800506a:	4b20      	ldr	r3, [pc, #128]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4921      	ldr	r1, [pc, #132]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 8005070:	4613      	mov	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	3304      	adds	r3, #4
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005080:	4b1a      	ldr	r3, [pc, #104]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	491b      	ldr	r1, [pc, #108]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 8005086:	4613      	mov	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	3308      	adds	r3, #8
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4916      	ldr	r1, [pc, #88]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	330c      	adds	r3, #12
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80050ac:	4b0f      	ldr	r3, [pc, #60]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	4910      	ldr	r1, [pc, #64]	; (80050f4 <SYSVIEW_AddTask+0xcc>)
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	3310      	adds	r3, #16
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3301      	adds	r3, #1
 80050c8:	4a08      	ldr	r2, [pc, #32]	; (80050ec <SYSVIEW_AddTask+0xc4>)
 80050ca:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 f80e 	bl	80050f8 <SYSVIEW_SendTaskInfo>
 80050dc:	e000      	b.n	80050e0 <SYSVIEW_AddTask+0xb8>
    return;
 80050de:	bf00      	nop

}
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	080082d8 	.word	0x080082d8
 80050ec:	20012ea0 	.word	0x20012ea0
 80050f0:	080082e0 	.word	0x080082e0
 80050f4:	20012e00 	.word	0x20012e00

080050f8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b08a      	sub	sp, #40	; 0x28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005106:	f107 0314 	add.w	r3, r7, #20
 800510a:	2214      	movs	r2, #20
 800510c:	2100      	movs	r1, #0
 800510e:	4618      	mov	r0, r3
 8005110:	f002 f908 	bl	8007324 <memset>
  TaskInfo.TaskID     = TaskID;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005126:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005128:	f107 0314 	add.w	r3, r7, #20
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fc3b 	bl	80069a8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005132:	bf00      	nop
 8005134:	3728      	adds	r7, #40	; 0x28
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005142:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <_DoInit+0x98>)
 8005144:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2203      	movs	r2, #3
 800514a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2203      	movs	r2, #3
 8005150:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a20      	ldr	r2, [pc, #128]	; (80051d8 <_DoInit+0x9c>)
 8005156:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a20      	ldr	r2, [pc, #128]	; (80051dc <_DoInit+0xa0>)
 800515c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005164:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a17      	ldr	r2, [pc, #92]	; (80051d8 <_DoInit+0x9c>)
 800517c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a17      	ldr	r2, [pc, #92]	; (80051e0 <_DoInit+0xa4>)
 8005182:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2210      	movs	r2, #16
 8005188:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3307      	adds	r3, #7
 80051a0:	4a10      	ldr	r2, [pc, #64]	; (80051e4 <_DoInit+0xa8>)
 80051a2:	6810      	ldr	r0, [r2, #0]
 80051a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a0e      	ldr	r2, [pc, #56]	; (80051e8 <_DoInit+0xac>)
 80051ae:	6810      	ldr	r0, [r2, #0]
 80051b0:	6018      	str	r0, [r3, #0]
 80051b2:	8891      	ldrh	r1, [r2, #4]
 80051b4:	7992      	ldrb	r2, [r2, #6]
 80051b6:	8099      	strh	r1, [r3, #4]
 80051b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051c4:	f3bf 8f5f 	dmb	sy
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	20014468 	.word	0x20014468
 80051d8:	08008330 	.word	0x08008330
 80051dc:	20012ea4 	.word	0x20012ea4
 80051e0:	200132a4 	.word	0x200132a4
 80051e4:	0800833c 	.word	0x0800833c
 80051e8:	08008340 	.word	0x08008340

080051ec <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80051f8:	2300      	movs	r3, #0
 80051fa:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	429a      	cmp	r2, r3
 800520e:	d905      	bls.n	800521c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	e007      	b.n	800522c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	69b9      	ldr	r1, [r7, #24]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	1acb      	subs	r3, r1, r3
 8005226:	4413      	add	r3, r2
 8005228:	3b01      	subs	r3, #1
 800522a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005236:	4293      	cmp	r3, r2
 8005238:	bf28      	it	cs
 800523a:	4613      	movcs	r3, r2
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800523e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4293      	cmp	r3, r2
 8005244:	bf28      	it	cs
 8005246:	4613      	movcs	r3, r2
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	4413      	add	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	6978      	ldr	r0, [r7, #20]
 800525a:	f002 f855 	bl	8007308 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800525e:	6a3a      	ldr	r2, [r7, #32]
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	4413      	add	r3, r2
 8005264:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526a:	4413      	add	r3, r2
 800526c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	4413      	add	r3, r2
 800527c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	429a      	cmp	r2, r3
 8005286:	d101      	bne.n	800528c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005288:	2300      	movs	r3, #0
 800528a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800528c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1b2      	bne.n	8005202 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800529c:	6a3b      	ldr	r3, [r7, #32]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3728      	adds	r7, #40	; 0x28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b088      	sub	sp, #32
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d911      	bls.n	80052ee <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	6938      	ldr	r0, [r7, #16]
 80052da:	f002 f815 	bl	8007308 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052de:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80052e2:	69fa      	ldr	r2, [r7, #28]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	441a      	add	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80052ec:	e01f      	b.n	800532e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	6938      	ldr	r0, [r7, #16]
 8005302:	f002 f801 	bl	8007308 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	4413      	add	r3, r2
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	4619      	mov	r1, r3
 800531e:	6938      	ldr	r0, [r7, #16]
 8005320:	f001 fff2 	bl	8007308 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005324:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	60da      	str	r2, [r3, #12]
}
 800532e:	bf00      	nop
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005336:	b480      	push	{r7}
 8005338:	b087      	sub	sp, #28
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	429a      	cmp	r2, r3
 8005350:	d808      	bhi.n	8005364 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4413      	add	r3, r2
 800535e:	3b01      	subs	r3, #1
 8005360:	617b      	str	r3, [r7, #20]
 8005362:	e004      	b.n	800536e <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	3b01      	subs	r3, #1
 800536c:	617b      	str	r3, [r7, #20]
  }
  return r;
 800536e:	697b      	ldr	r3, [r7, #20]
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b08c      	sub	sp, #48	; 0x30
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005388:	4b3e      	ldr	r3, [pc, #248]	; (8005484 <SEGGER_RTT_ReadNoLock+0x108>)
 800538a:	623b      	str	r3, [r7, #32]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <SEGGER_RTT_ReadNoLock+0x1e>
 8005396:	f7ff fed1 	bl	800513c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4613      	mov	r3, r2
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	4413      	add	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	3360      	adds	r3, #96	; 0x60
 80053a6:	4a37      	ldr	r2, [pc, #220]	; (8005484 <SEGGER_RTT_ReadNoLock+0x108>)
 80053a8:	4413      	add	r3, r2
 80053aa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80053bc:	2300      	movs	r3, #0
 80053be:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80053c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d92b      	bls.n	8005420 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4293      	cmp	r3, r2
 80053d8:	bf28      	it	cs
 80053da:	4613      	movcs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	4413      	add	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	6939      	ldr	r1, [r7, #16]
 80053ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ee:	f001 ff8b 	bl	8007308 <memcpy>
    NumBytesRead += NumBytesRem;
 80053f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80053fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4413      	add	r3, r2
 8005400:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800540a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4413      	add	r3, r2
 8005410:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005418:	429a      	cmp	r2, r3
 800541a:	d101      	bne.n	8005420 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800541c:	2300      	movs	r3, #0
 800541e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4293      	cmp	r3, r2
 800542e:	bf28      	it	cs
 8005430:	4613      	movcs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d019      	beq.n	800546e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	4413      	add	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	6939      	ldr	r1, [r7, #16]
 8005448:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800544a:	f001 ff5d 	bl	8007308 <memcpy>
    NumBytesRead += NumBytesRem;
 800544e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4413      	add	r3, r2
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4413      	add	r3, r2
 800546c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005478:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800547a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800547c:	4618      	mov	r0, r3
 800547e:	3730      	adds	r7, #48	; 0x30
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	20014468 	.word	0x20014468

08005488 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	4613      	mov	r3, r2
 800549e:	005b      	lsls	r3, r3, #1
 80054a0:	4413      	add	r3, r2
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	4a1f      	ldr	r2, [pc, #124]	; (8005524 <SEGGER_RTT_WriteNoLock+0x9c>)
 80054a6:	4413      	add	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d029      	beq.n	8005506 <SEGGER_RTT_WriteNoLock+0x7e>
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d82e      	bhi.n	8005514 <SEGGER_RTT_WriteNoLock+0x8c>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d002      	beq.n	80054c0 <SEGGER_RTT_WriteNoLock+0x38>
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d013      	beq.n	80054e6 <SEGGER_RTT_WriteNoLock+0x5e>
 80054be:	e029      	b.n	8005514 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80054c0:	6978      	ldr	r0, [r7, #20]
 80054c2:	f7ff ff38 	bl	8005336 <_GetAvailWriteSpace>
 80054c6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d202      	bcs.n	80054d6 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80054d0:	2300      	movs	r3, #0
 80054d2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80054d4:	e021      	b.n	800551a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	69b9      	ldr	r1, [r7, #24]
 80054de:	6978      	ldr	r0, [r7, #20]
 80054e0:	f7ff fee1 	bl	80052a6 <_WriteNoCheck>
    break;
 80054e4:	e019      	b.n	800551a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80054e6:	6978      	ldr	r0, [r7, #20]
 80054e8:	f7ff ff25 	bl	8005336 <_GetAvailWriteSpace>
 80054ec:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4293      	cmp	r3, r2
 80054f4:	bf28      	it	cs
 80054f6:	4613      	movcs	r3, r2
 80054f8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	6978      	ldr	r0, [r7, #20]
 8005500:	f7ff fed1 	bl	80052a6 <_WriteNoCheck>
    break;
 8005504:	e009      	b.n	800551a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	69b9      	ldr	r1, [r7, #24]
 800550a:	6978      	ldr	r0, [r7, #20]
 800550c:	f7ff fe6e 	bl	80051ec <_WriteBlocking>
 8005510:	61f8      	str	r0, [r7, #28]
    break;
 8005512:	e002      	b.n	800551a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005514:	2300      	movs	r3, #0
 8005516:	61fb      	str	r3, [r7, #28]
    break;
 8005518:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800551a:	69fb      	ldr	r3, [r7, #28]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3720      	adds	r7, #32
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	20014468 	.word	0x20014468

08005528 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005534:	4b0e      	ldr	r3, [pc, #56]	; (8005570 <SEGGER_RTT_Write+0x48>)
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <SEGGER_RTT_Write+0x1e>
 8005542:	f7ff fdfb 	bl	800513c <_DoInit>
  SEGGER_RTT_LOCK();
 8005546:	f3ef 8311 	mrs	r3, BASEPRI
 800554a:	f04f 0120 	mov.w	r1, #32
 800554e:	f381 8811 	msr	BASEPRI, r1
 8005552:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff ff95 	bl	8005488 <SEGGER_RTT_WriteNoLock>
 800555e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005566:	697b      	ldr	r3, [r7, #20]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3720      	adds	r7, #32
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	20014468 	.word	0x20014468

08005574 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
 8005580:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005582:	4b3d      	ldr	r3, [pc, #244]	; (8005678 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005590:	f7ff fdd4 	bl	800513c <_DoInit>
  SEGGER_RTT_LOCK();
 8005594:	f3ef 8311 	mrs	r3, BASEPRI
 8005598:	f04f 0120 	mov.w	r1, #32
 800559c:	f381 8811 	msr	BASEPRI, r1
 80055a0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80055a2:	4b35      	ldr	r3, [pc, #212]	; (8005678 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055a4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80055aa:	6939      	ldr	r1, [r7, #16]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	1c5a      	adds	r2, r3, #1
 80055b0:	4613      	mov	r3, r2
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	4413      	add	r3, r2
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	440b      	add	r3, r1
 80055ba:	3304      	adds	r3, #4
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	3301      	adds	r3, #1
 80055c6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	69fa      	ldr	r2, [r7, #28]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	dbeb      	blt.n	80055aa <SEGGER_RTT_AllocUpBuffer+0x36>
 80055d2:	e000      	b.n	80055d6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80055d4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	429a      	cmp	r2, r3
 80055de:	da3f      	bge.n	8005660 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80055e0:	6939      	ldr	r1, [r7, #16]
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	4613      	mov	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	440b      	add	r3, r1
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80055f4:	6939      	ldr	r1, [r7, #16]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	4613      	mov	r3, r2
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	3304      	adds	r3, #4
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	69fa      	ldr	r2, [r7, #28]
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	3320      	adds	r3, #32
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800561e:	6939      	ldr	r1, [r7, #16]
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	4613      	mov	r3, r2
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4413      	add	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	440b      	add	r3, r1
 800562c:	3328      	adds	r3, #40	; 0x28
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005632:	6939      	ldr	r1, [r7, #16]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	4613      	mov	r3, r2
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	4413      	add	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	440b      	add	r3, r1
 8005640:	3324      	adds	r3, #36	; 0x24
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005646:	6939      	ldr	r1, [r7, #16]
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	4613      	mov	r3, r2
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	4413      	add	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	440b      	add	r3, r1
 8005654:	332c      	adds	r3, #44	; 0x2c
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800565a:	f3bf 8f5f 	dmb	sy
 800565e:	e002      	b.n	8005666 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005660:	f04f 33ff 	mov.w	r3, #4294967295
 8005664:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800566c:	69fb      	ldr	r3, [r7, #28]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20014468 	.word	0x20014468

0800567c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800568a:	4b21      	ldr	r3, [pc, #132]	; (8005710 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005698:	f7ff fd50 	bl	800513c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800569c:	4b1c      	ldr	r3, [pc, #112]	; (8005710 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800569e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d82c      	bhi.n	8005700 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80056a6:	f3ef 8311 	mrs	r3, BASEPRI
 80056aa:	f04f 0120 	mov.w	r1, #32
 80056ae:	f381 8811 	msr	BASEPRI, r1
 80056b2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4613      	mov	r3, r2
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	3360      	adds	r3, #96	; 0x60
 80056c0:	69fa      	ldr	r2, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00e      	beq.n	80056ea <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2200      	movs	r2, #0
 80056e2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ee:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056f0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80056fa:	2300      	movs	r3, #0
 80056fc:	627b      	str	r3, [r7, #36]	; 0x24
 80056fe:	e002      	b.n	8005706 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005700:	f04f 33ff 	mov.w	r3, #4294967295
 8005704:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005708:	4618      	mov	r0, r3
 800570a:	3728      	adds	r7, #40	; 0x28
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20014468 	.word	0x20014468

08005714 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00f      	beq.n	800574a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 800572a:	e002      	b.n	8005732 <_EncodeStr+0x1e>
      Len++;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	3301      	adds	r3, #1
 8005730:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1f6      	bne.n	800572c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 800573e:	693a      	ldr	r2, [r7, #16]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d901      	bls.n	800574a <_EncodeStr+0x36>
      Len = Limit;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	2bfe      	cmp	r3, #254	; 0xfe
 800574e:	d806      	bhi.n	800575e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1c5a      	adds	r2, r3, #1
 8005754:	60fa      	str	r2, [r7, #12]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e011      	b.n	8005782 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	22ff      	movs	r2, #255	; 0xff
 8005766:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	60fa      	str	r2, [r7, #12]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	b2d2      	uxtb	r2, r2
 8005772:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	0a19      	lsrs	r1, r3, #8
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	60fa      	str	r2, [r7, #12]
 800577e:	b2ca      	uxtb	r2, r1
 8005780:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005786:	e00a      	b.n	800579e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	1c53      	adds	r3, r2, #1
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1c59      	adds	r1, r3, #1
 8005792:	60f9      	str	r1, [r7, #12]
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	701a      	strb	r2, [r3, #0]
    n++;
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	3301      	adds	r3, #1
 800579c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	d3f0      	bcc.n	8005788 <_EncodeStr+0x74>
  }
  return pPayload;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	371c      	adds	r7, #28
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80057d2:	4b36      	ldr	r3, [pc, #216]	; (80058ac <_HandleIncomingPacket+0xe0>)
 80057d4:	7e1b      	ldrb	r3, [r3, #24]
 80057d6:	4618      	mov	r0, r3
 80057d8:	1cfb      	adds	r3, r7, #3
 80057da:	2201      	movs	r2, #1
 80057dc:	4619      	mov	r1, r3
 80057de:	f7ff fdcd 	bl	800537c <SEGGER_RTT_ReadNoLock>
 80057e2:	4603      	mov	r3, r0
 80057e4:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	dd54      	ble.n	8005896 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80057ec:	78fb      	ldrb	r3, [r7, #3]
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d032      	beq.n	8005858 <_HandleIncomingPacket+0x8c>
 80057f2:	2b80      	cmp	r3, #128	; 0x80
 80057f4:	dc42      	bgt.n	800587c <_HandleIncomingPacket+0xb0>
 80057f6:	2b07      	cmp	r3, #7
 80057f8:	dc16      	bgt.n	8005828 <_HandleIncomingPacket+0x5c>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	dd3e      	ble.n	800587c <_HandleIncomingPacket+0xb0>
 80057fe:	3b01      	subs	r3, #1
 8005800:	2b06      	cmp	r3, #6
 8005802:	d83b      	bhi.n	800587c <_HandleIncomingPacket+0xb0>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <_HandleIncomingPacket+0x40>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	0800582f 	.word	0x0800582f
 8005810:	08005835 	.word	0x08005835
 8005814:	0800583b 	.word	0x0800583b
 8005818:	08005841 	.word	0x08005841
 800581c:	08005847 	.word	0x08005847
 8005820:	0800584d 	.word	0x0800584d
 8005824:	08005853 	.word	0x08005853
 8005828:	2b7f      	cmp	r3, #127	; 0x7f
 800582a:	d036      	beq.n	800589a <_HandleIncomingPacket+0xce>
 800582c:	e026      	b.n	800587c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800582e:	f000 ff41 	bl	80066b4 <SEGGER_SYSVIEW_Start>
      break;
 8005832:	e037      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005834:	f000 fff8 	bl	8006828 <SEGGER_SYSVIEW_Stop>
      break;
 8005838:	e034      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800583a:	f001 f9d1 	bl	8006be0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800583e:	e031      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005840:	f001 f996 	bl	8006b70 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005844:	e02e      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005846:	f001 f815 	bl	8006874 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800584a:	e02b      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800584c:	f001 fc64 	bl	8007118 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005850:	e028      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005852:	f001 fc43 	bl	80070dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005856:	e025      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005858:	4b14      	ldr	r3, [pc, #80]	; (80058ac <_HandleIncomingPacket+0xe0>)
 800585a:	7e1b      	ldrb	r3, [r3, #24]
 800585c:	4618      	mov	r0, r3
 800585e:	1cfb      	adds	r3, r7, #3
 8005860:	2201      	movs	r2, #1
 8005862:	4619      	mov	r1, r3
 8005864:	f7ff fd8a 	bl	800537c <SEGGER_RTT_ReadNoLock>
 8005868:	4603      	mov	r3, r0
 800586a:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	dd15      	ble.n	800589e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005872:	78fb      	ldrb	r3, [r7, #3]
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fbb1 	bl	8006fdc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800587a:	e010      	b.n	800589e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	b25b      	sxtb	r3, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	da0e      	bge.n	80058a2 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <_HandleIncomingPacket+0xe0>)
 8005886:	7e1b      	ldrb	r3, [r3, #24]
 8005888:	4618      	mov	r0, r3
 800588a:	1cfb      	adds	r3, r7, #3
 800588c:	2201      	movs	r2, #1
 800588e:	4619      	mov	r1, r3
 8005890:	f7ff fd74 	bl	800537c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005894:	e005      	b.n	80058a2 <_HandleIncomingPacket+0xd6>
    }
  }
 8005896:	bf00      	nop
 8005898:	e004      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
      break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
      break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <_HandleIncomingPacket+0xd8>
      break;
 80058a2:	bf00      	nop
}
 80058a4:	bf00      	nop
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	200142bc 	.word	0x200142bc

080058b0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	; 0x30
 80058b4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80058b6:	2301      	movs	r3, #1
 80058b8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80058ba:	1d3b      	adds	r3, r7, #4
 80058bc:	3301      	adds	r3, #1
 80058be:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c4:	4b31      	ldr	r3, [pc, #196]	; (800598c <_TrySendOverflowPacket+0xdc>)
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ca:	e00b      	b.n	80058e4 <_TrySendOverflowPacket+0x34>
 80058cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80058d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e0:	09db      	lsrs	r3, r3, #7
 80058e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	2b7f      	cmp	r3, #127	; 0x7f
 80058e8:	d8f0      	bhi.n	80058cc <_TrySendOverflowPacket+0x1c>
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	1c5a      	adds	r2, r3, #1
 80058ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80058fa:	4b25      	ldr	r3, [pc, #148]	; (8005990 <_TrySendOverflowPacket+0xe0>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005900:	4b22      	ldr	r3, [pc, #136]	; (800598c <_TrySendOverflowPacket+0xdc>)
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e00b      	b.n	800592c <_TrySendOverflowPacket+0x7c>
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	6279      	str	r1, [r7, #36]	; 0x24
 800591e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	09db      	lsrs	r3, r3, #7
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	2b7f      	cmp	r3, #127	; 0x7f
 8005930:	d8f0      	bhi.n	8005914 <_TrySendOverflowPacket+0x64>
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	627a      	str	r2, [r7, #36]	; 0x24
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <_TrySendOverflowPacket+0xdc>)
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	4618      	mov	r0, r3
 8005948:	1d3b      	adds	r3, r7, #4
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	461a      	mov	r2, r3
 8005950:	1d3b      	adds	r3, r7, #4
 8005952:	4619      	mov	r1, r3
 8005954:	f7fa fc54 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005958:	4603      	mov	r3, r0
 800595a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005962:	4a0a      	ldr	r2, [pc, #40]	; (800598c <_TrySendOverflowPacket+0xdc>)
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <_TrySendOverflowPacket+0xdc>)
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	3b01      	subs	r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <_TrySendOverflowPacket+0xdc>)
 8005972:	701a      	strb	r2, [r3, #0]
 8005974:	e004      	b.n	8005980 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005976:	4b05      	ldr	r3, [pc, #20]	; (800598c <_TrySendOverflowPacket+0xdc>)
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	3301      	adds	r3, #1
 800597c:	4a03      	ldr	r2, [pc, #12]	; (800598c <_TrySendOverflowPacket+0xdc>)
 800597e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005980:	693b      	ldr	r3, [r7, #16]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3730      	adds	r7, #48	; 0x30
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	200142bc 	.word	0x200142bc
 8005990:	e0001004 	.word	0xe0001004

08005994 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	; 0x28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80059a0:	4b6c      	ldr	r3, [pc, #432]	; (8005b54 <_SendPacket+0x1c0>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d010      	beq.n	80059ca <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80059a8:	4b6a      	ldr	r3, [pc, #424]	; (8005b54 <_SendPacket+0x1c0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80a3 	beq.w	8005af8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80059b2:	4b68      	ldr	r3, [pc, #416]	; (8005b54 <_SendPacket+0x1c0>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d109      	bne.n	80059ce <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80059ba:	f7ff ff79 	bl	80058b0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80059be:	4b65      	ldr	r3, [pc, #404]	; (8005b54 <_SendPacket+0x1c0>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	f040 809a 	bne.w	8005afc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80059c8:	e001      	b.n	80059ce <_SendPacket+0x3a>
    goto Send;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <_SendPacket+0x3c>
Send:
 80059ce:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b1f      	cmp	r3, #31
 80059d4:	d809      	bhi.n	80059ea <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80059d6:	4b5f      	ldr	r3, [pc, #380]	; (8005b54 <_SendPacket+0x1c0>)
 80059d8:	69da      	ldr	r2, [r3, #28]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	fa22 f303 	lsr.w	r3, r2, r3
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f040 808b 	bne.w	8005b00 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b17      	cmp	r3, #23
 80059ee:	d807      	bhi.n	8005a00 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e03d      	b.n	8005a7c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a0c:	d912      	bls.n	8005a34 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	09da      	lsrs	r2, r3, #7
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	3a01      	subs	r2, #1
 8005a26:	60fa      	str	r2, [r7, #12]
 8005a28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e006      	b.n	8005a42 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b7f      	cmp	r3, #127	; 0x7f
 8005a46:	d912      	bls.n	8005a6e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	09da      	lsrs	r2, r3, #7
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	3a01      	subs	r2, #1
 8005a60:	60fa      	str	r2, [r7, #12]
 8005a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a66:	b2da      	uxtb	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	e006      	b.n	8005a7c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005a7c:	4b36      	ldr	r3, [pc, #216]	; (8005b58 <_SendPacket+0x1c4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005a82:	4b34      	ldr	r3, [pc, #208]	; (8005b54 <_SendPacket+0x1c0>)
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	e00b      	b.n	8005aae <_SendPacket+0x11a>
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	1c59      	adds	r1, r3, #1
 8005a9e:	6279      	str	r1, [r7, #36]	; 0x24
 8005aa0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005aa4:	b2d2      	uxtb	r2, r2
 8005aa6:	701a      	strb	r2, [r3, #0]
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	09db      	lsrs	r3, r3, #7
 8005aac:	623b      	str	r3, [r7, #32]
 8005aae:	6a3b      	ldr	r3, [r7, #32]
 8005ab0:	2b7f      	cmp	r3, #127	; 0x7f
 8005ab2:	d8f0      	bhi.n	8005a96 <_SendPacket+0x102>
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	1c5a      	adds	r2, r3, #1
 8005ab8:	627a      	str	r2, [r7, #36]	; 0x24
 8005aba:	6a3a      	ldr	r2, [r7, #32]
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005ac4:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <_SendPacket+0x1c0>)
 8005ac6:	785b      	ldrb	r3, [r3, #1]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	f7fa fb94 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	; (8005b54 <_SendPacket+0x1c0>)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	60d3      	str	r3, [r2, #12]
 8005ae8:	e00b      	b.n	8005b02 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005aea:	4b1a      	ldr	r3, [pc, #104]	; (8005b54 <_SendPacket+0x1c0>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	4b18      	ldr	r3, [pc, #96]	; (8005b54 <_SendPacket+0x1c0>)
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e004      	b.n	8005b02 <_SendPacket+0x16e>
    goto SendDone;
 8005af8:	bf00      	nop
 8005afa:	e002      	b.n	8005b02 <_SendPacket+0x16e>
      goto SendDone;
 8005afc:	bf00      	nop
 8005afe:	e000      	b.n	8005b02 <_SendPacket+0x16e>
      goto SendDone;
 8005b00:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b02:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <_SendPacket+0x1c0>)
 8005b04:	7e1b      	ldrb	r3, [r3, #24]
 8005b06:	4619      	mov	r1, r3
 8005b08:	4a14      	ldr	r2, [pc, #80]	; (8005b5c <_SendPacket+0x1c8>)
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	440b      	add	r3, r1
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	336c      	adds	r3, #108	; 0x6c
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <_SendPacket+0x1c0>)
 8005b1a:	7e1b      	ldrb	r3, [r3, #24]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	490f      	ldr	r1, [pc, #60]	; (8005b5c <_SendPacket+0x1c8>)
 8005b20:	4603      	mov	r3, r0
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4403      	add	r3, r0
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	440b      	add	r3, r1
 8005b2a:	3370      	adds	r3, #112	; 0x70
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d00b      	beq.n	8005b4a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <_SendPacket+0x1c0>)
 8005b34:	789b      	ldrb	r3, [r3, #2]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d107      	bne.n	8005b4a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <_SendPacket+0x1c0>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005b40:	f7ff fe44 	bl	80057cc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <_SendPacket+0x1c0>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005b4a:	bf00      	nop
 8005b4c:	3728      	adds	r7, #40	; 0x28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200142bc 	.word	0x200142bc
 8005b58:	e0001004 	.word	0xe0001004
 8005b5c:	20014468 	.word	0x20014468

08005b60 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	; 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	3301      	adds	r3, #1
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d80a      	bhi.n	8005b90 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	1c59      	adds	r1, r3, #1
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	6051      	str	r1, [r2, #4]
 8005b84:	78fa      	ldrb	r2, [r7, #3]
 8005b86:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b80      	cmp	r3, #128	; 0x80
 8005b96:	d15a      	bne.n	8005c4e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	623b      	str	r3, [r7, #32]
 8005bb8:	e00b      	b.n	8005bd2 <_StoreChar+0x72>
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	6279      	str	r1, [r7, #36]	; 0x24
 8005bc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	09db      	lsrs	r3, r3, #7
 8005bd0:	623b      	str	r3, [r7, #32]
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005bd6:	d8f0      	bhi.n	8005bba <_StoreChar+0x5a>
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8005bde:	6a3a      	ldr	r2, [r7, #32]
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	61fb      	str	r3, [r7, #28]
 8005bec:	2300      	movs	r3, #0
 8005bee:	61bb      	str	r3, [r7, #24]
 8005bf0:	e00b      	b.n	8005c0a <_StoreChar+0xaa>
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	b2da      	uxtb	r2, r3
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	1c59      	adds	r1, r3, #1
 8005bfa:	61f9      	str	r1, [r7, #28]
 8005bfc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c00:	b2d2      	uxtb	r2, r2
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	09db      	lsrs	r3, r3, #7
 8005c08:	61bb      	str	r3, [r7, #24]
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8005c0e:	d8f0      	bhi.n	8005bf2 <_StoreChar+0x92>
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	221a      	movs	r2, #26
 8005c26:	6939      	ldr	r1, [r7, #16]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7ff feb3 	bl	8005994 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7ff fdbe 	bl	80057b4 <_PreparePacket>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	611a      	str	r2, [r3, #16]
  }
}
 8005c4e:	bf00      	nop
 8005c50:	3728      	adds	r7, #40	; 0x28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	; 0x28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c72:	e007      	b.n	8005c84 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005c74:	6a3a      	ldr	r2, [r7, #32]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7c:	623b      	str	r3, [r7, #32]
    Width++;
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	3301      	adds	r3, #1
 8005c82:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005c84:	6a3a      	ldr	r2, [r7, #32]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d2f3      	bcs.n	8005c74 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d901      	bls.n	8005c98 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d11f      	bne.n	8005ce2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01c      	beq.n	8005ce2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <_PrintUnsigned+0x66>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d102      	bne.n	8005cbe <_PrintUnsigned+0x66>
        c = '0';
 8005cb8:	2330      	movs	r3, #48	; 0x30
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e001      	b.n	8005cc2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005cbe:	2320      	movs	r3, #32
 8005cc0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cc2:	e007      	b.n	8005cd4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005cca:	7efb      	ldrb	r3, [r7, #27]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f7ff ff46 	bl	8005b60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <_PrintUnsigned+0x8a>
 8005cda:	69fa      	ldr	r2, [r7, #28]
 8005cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d3f0      	bcc.n	8005cc4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d903      	bls.n	8005cf0 <_PrintUnsigned+0x98>
      NumDigits--;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	e009      	b.n	8005d04 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d200      	bcs.n	8005d04 <_PrintUnsigned+0xac>
        break;
 8005d02:	e005      	b.n	8005d10 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d0e:	e7e8      	b.n	8005ce2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d18:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005d28:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <_PrintUnsigned+0x128>)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	4619      	mov	r1, r3
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f7ff ff14 	bl	8005b60 <_StoreChar>
    Digit /= Base;
 8005d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e3      	bne.n	8005d10 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d011      	beq.n	8005d76 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00e      	beq.n	8005d76 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d58:	e006      	b.n	8005d68 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005d60:	2120      	movs	r1, #32
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff fefc 	bl	8005b60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <_PrintUnsigned+0x11e>
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d3f1      	bcc.n	8005d5a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005d76:	bf00      	nop
 8005d78:	3728      	adds	r7, #40	; 0x28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	080083ac 	.word	0x080083ac

08005d84 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
 8005d90:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bfb8      	it	lt
 8005d98:	425b      	neglt	r3, r3
 8005d9a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005da0:	e007      	b.n	8005db2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	fb92 f3f3 	sdiv	r3, r2, r3
 8005daa:	613b      	str	r3, [r7, #16]
    Width++;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	3301      	adds	r3, #1
 8005db0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	daf3      	bge.n	8005da2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d901      	bls.n	8005dc6 <_PrintInt+0x42>
    Width = NumDigits;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <_PrintInt+0x5e>
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	db04      	blt.n	8005ddc <_PrintInt+0x58>
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	f003 0304 	and.w	r3, r3, #4
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <_PrintInt+0x5e>
    FieldWidth--;
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <_PrintInt+0x6e>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d016      	beq.n	8005e20 <_PrintInt+0x9c>
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d111      	bne.n	8005e20 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e02:	e006      	b.n	8005e12 <_PrintInt+0x8e>
        FieldWidth--;
 8005e04:	6a3b      	ldr	r3, [r7, #32]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005e0a:	2120      	movs	r1, #32
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7ff fea7 	bl	8005b60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <_PrintInt+0x9c>
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d3f1      	bcc.n	8005e04 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da07      	bge.n	8005e36 <_PrintInt+0xb2>
    v = -v;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	425b      	negs	r3, r3
 8005e2a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005e2c:	212d      	movs	r1, #45	; 0x2d
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff fe96 	bl	8005b60 <_StoreChar>
 8005e34:	e008      	b.n	8005e48 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005e40:	212b      	movs	r1, #43	; 0x2b
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f7ff fe8c 	bl	8005b60 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d019      	beq.n	8005e86 <_PrintInt+0x102>
 8005e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d114      	bne.n	8005e86 <_PrintInt+0x102>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d111      	bne.n	8005e86 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00e      	beq.n	8005e86 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e68:	e006      	b.n	8005e78 <_PrintInt+0xf4>
        FieldWidth--;
 8005e6a:	6a3b      	ldr	r3, [r7, #32]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005e70:	2130      	movs	r1, #48	; 0x30
 8005e72:	68f8      	ldr	r0, [r7, #12]
 8005e74:	f7ff fe74 	bl	8005b60 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <_PrintInt+0x102>
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	6a3b      	ldr	r3, [r7, #32]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d3f1      	bcc.n	8005e6a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005e86:	68b9      	ldr	r1, [r7, #8]
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f7ff fedf 	bl	8005c58 <_PrintUnsigned>
}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b098      	sub	sp, #96	; 0x60
 8005ea8:	af02      	add	r7, sp, #8
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005eb0:	f3ef 8311 	mrs	r3, BASEPRI
 8005eb4:	f04f 0120 	mov.w	r1, #32
 8005eb8:	f381 8811 	msr	BASEPRI, r1
 8005ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ebe:	48b7      	ldr	r0, [pc, #732]	; (800619c <_VPrintTarget+0x2f8>)
 8005ec0:	f7ff fc78 	bl	80057b4 <_PreparePacket>
 8005ec4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005ec6:	4bb5      	ldr	r3, [pc, #724]	; (800619c <_VPrintTarget+0x2f8>)
 8005ec8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005eea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 8183 	beq.w	80061fa <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005ef4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ef8:	2b25      	cmp	r3, #37	; 0x25
 8005efa:	f040 8170 	bne.w	80061de <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005efe:	2300      	movs	r3, #0
 8005f00:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005f02:	2301      	movs	r3, #1
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005f0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f12:	3b23      	subs	r3, #35	; 0x23
 8005f14:	2b0d      	cmp	r3, #13
 8005f16:	d83f      	bhi.n	8005f98 <_VPrintTarget+0xf4>
 8005f18:	a201      	add	r2, pc, #4	; (adr r2, 8005f20 <_VPrintTarget+0x7c>)
 8005f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1e:	bf00      	nop
 8005f20:	08005f89 	.word	0x08005f89
 8005f24:	08005f99 	.word	0x08005f99
 8005f28:	08005f99 	.word	0x08005f99
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005f99 	.word	0x08005f99
 8005f38:	08005f99 	.word	0x08005f99
 8005f3c:	08005f99 	.word	0x08005f99
 8005f40:	08005f79 	.word	0x08005f79
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005f59 	.word	0x08005f59
 8005f4c:	08005f99 	.word	0x08005f99
 8005f50:	08005f99 	.word	0x08005f99
 8005f54:	08005f69 	.word	0x08005f69
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3301      	adds	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e01a      	b.n	8005f9e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e012      	b.n	8005f9e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7a:	f043 0304 	orr.w	r3, r3, #4
 8005f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	e00a      	b.n	8005f9e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005f88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f8a:	f043 0308 	orr.w	r3, r3, #8
 8005f8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e002      	b.n	8005f9e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f9c:	bf00      	nop
        }
      } while (v);
 8005f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1b0      	bne.n	8005f06 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005fb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fb4:	2b2f      	cmp	r3, #47	; 0x2f
 8005fb6:	d912      	bls.n	8005fde <_VPrintTarget+0x13a>
 8005fb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fbc:	2b39      	cmp	r3, #57	; 0x39
 8005fbe:	d80e      	bhi.n	8005fde <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005fc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3b30      	subs	r3, #48	; 0x30
 8005fda:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005fdc:	e7e4      	b.n	8005fa8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005fea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005fee:	2b2e      	cmp	r3, #46	; 0x2e
 8005ff0:	d11d      	bne.n	800602e <_VPrintTarget+0x18a>
        sFormat++;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006004:	2b2f      	cmp	r3, #47	; 0x2f
 8006006:	d912      	bls.n	800602e <_VPrintTarget+0x18a>
 8006008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800600c:	2b39      	cmp	r3, #57	; 0x39
 800600e:	d80e      	bhi.n	800602e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006016:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	461a      	mov	r2, r3
 8006022:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006026:	4413      	add	r3, r2
 8006028:	3b30      	subs	r3, #48	; 0x30
 800602a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800602c:	e7e4      	b.n	8005ff8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006036:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800603a:	2b6c      	cmp	r3, #108	; 0x6c
 800603c:	d003      	beq.n	8006046 <_VPrintTarget+0x1a2>
 800603e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006042:	2b68      	cmp	r3, #104	; 0x68
 8006044:	d107      	bne.n	8006056 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3301      	adds	r3, #1
 8006052:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006054:	e7ef      	b.n	8006036 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006056:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800605a:	2b25      	cmp	r3, #37	; 0x25
 800605c:	f000 80b3 	beq.w	80061c6 <_VPrintTarget+0x322>
 8006060:	2b25      	cmp	r3, #37	; 0x25
 8006062:	f2c0 80b7 	blt.w	80061d4 <_VPrintTarget+0x330>
 8006066:	2b78      	cmp	r3, #120	; 0x78
 8006068:	f300 80b4 	bgt.w	80061d4 <_VPrintTarget+0x330>
 800606c:	2b58      	cmp	r3, #88	; 0x58
 800606e:	f2c0 80b1 	blt.w	80061d4 <_VPrintTarget+0x330>
 8006072:	3b58      	subs	r3, #88	; 0x58
 8006074:	2b20      	cmp	r3, #32
 8006076:	f200 80ad 	bhi.w	80061d4 <_VPrintTarget+0x330>
 800607a:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <_VPrintTarget+0x1dc>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	08006177 	.word	0x08006177
 8006084:	080061d5 	.word	0x080061d5
 8006088:	080061d5 	.word	0x080061d5
 800608c:	080061d5 	.word	0x080061d5
 8006090:	080061d5 	.word	0x080061d5
 8006094:	080061d5 	.word	0x080061d5
 8006098:	080061d5 	.word	0x080061d5
 800609c:	080061d5 	.word	0x080061d5
 80060a0:	080061d5 	.word	0x080061d5
 80060a4:	080061d5 	.word	0x080061d5
 80060a8:	080061d5 	.word	0x080061d5
 80060ac:	08006105 	.word	0x08006105
 80060b0:	0800612b 	.word	0x0800612b
 80060b4:	080061d5 	.word	0x080061d5
 80060b8:	080061d5 	.word	0x080061d5
 80060bc:	080061d5 	.word	0x080061d5
 80060c0:	080061d5 	.word	0x080061d5
 80060c4:	080061d5 	.word	0x080061d5
 80060c8:	080061d5 	.word	0x080061d5
 80060cc:	080061d5 	.word	0x080061d5
 80060d0:	080061d5 	.word	0x080061d5
 80060d4:	080061d5 	.word	0x080061d5
 80060d8:	080061d5 	.word	0x080061d5
 80060dc:	080061d5 	.word	0x080061d5
 80060e0:	080061a1 	.word	0x080061a1
 80060e4:	080061d5 	.word	0x080061d5
 80060e8:	080061d5 	.word	0x080061d5
 80060ec:	080061d5 	.word	0x080061d5
 80060f0:	080061d5 	.word	0x080061d5
 80060f4:	08006151 	.word	0x08006151
 80060f8:	080061d5 	.word	0x080061d5
 80060fc:	080061d5 	.word	0x080061d5
 8006100:	08006177 	.word	0x08006177
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	1d19      	adds	r1, r3, #4
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6011      	str	r1, [r2, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006118:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800611c:	f107 0314 	add.w	r3, r7, #20
 8006120:	4611      	mov	r1, r2
 8006122:	4618      	mov	r0, r3
 8006124:	f7ff fd1c 	bl	8005b60 <_StoreChar>
        break;
 8006128:	e055      	b.n	80061d6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	1d19      	adds	r1, r3, #4
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6011      	str	r1, [r2, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006138:	f107 0014 	add.w	r0, r7, #20
 800613c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800613e:	9301      	str	r3, [sp, #4]
 8006140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006146:	220a      	movs	r2, #10
 8006148:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800614a:	f7ff fe1b 	bl	8005d84 <_PrintInt>
        break;
 800614e:	e042      	b.n	80061d6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	1d19      	adds	r1, r3, #4
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6011      	str	r1, [r2, #0]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800615e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006160:	f107 0014 	add.w	r0, r7, #20
 8006164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006166:	9301      	str	r3, [sp, #4]
 8006168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616e:	220a      	movs	r2, #10
 8006170:	f7ff fd72 	bl	8005c58 <_PrintUnsigned>
        break;
 8006174:	e02f      	b.n	80061d6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	1d19      	adds	r1, r3, #4
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	6011      	str	r1, [r2, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006184:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006186:	f107 0014 	add.w	r0, r7, #20
 800618a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800618c:	9301      	str	r3, [sp, #4]
 800618e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006190:	9300      	str	r3, [sp, #0]
 8006192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006194:	2210      	movs	r2, #16
 8006196:	f7ff fd5f 	bl	8005c58 <_PrintUnsigned>
        break;
 800619a:	e01c      	b.n	80061d6 <_VPrintTarget+0x332>
 800619c:	200142ec 	.word	0x200142ec
      case 'p':
        v = va_arg(*pParamList, int);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	1d19      	adds	r1, r3, #4
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6011      	str	r1, [r2, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80061ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061b0:	f107 0014 	add.w	r0, r7, #20
 80061b4:	2300      	movs	r3, #0
 80061b6:	9301      	str	r3, [sp, #4]
 80061b8:	2308      	movs	r3, #8
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	2308      	movs	r3, #8
 80061be:	2210      	movs	r2, #16
 80061c0:	f7ff fd4a 	bl	8005c58 <_PrintUnsigned>
        break;
 80061c4:	e007      	b.n	80061d6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80061c6:	f107 0314 	add.w	r3, r7, #20
 80061ca:	2125      	movs	r1, #37	; 0x25
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7ff fcc7 	bl	8005b60 <_StoreChar>
        break;
 80061d2:	e000      	b.n	80061d6 <_VPrintTarget+0x332>
      default:
        break;
 80061d4:	bf00      	nop
      }
      sFormat++;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3301      	adds	r3, #1
 80061da:	60fb      	str	r3, [r7, #12]
 80061dc:	e007      	b.n	80061ee <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80061de:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80061e2:	f107 0314 	add.w	r3, r7, #20
 80061e6:	4611      	mov	r1, r2
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7ff fcb9 	bl	8005b60 <_StoreChar>
    }
  } while (*sFormat);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f47f ae72 	bne.w	8005edc <_VPrintTarget+0x38>
 80061f8:	e000      	b.n	80061fc <_VPrintTarget+0x358>
      break;
 80061fa:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d041      	beq.n	8006286 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	643b      	str	r3, [r7, #64]	; 0x40
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006212:	e00b      	b.n	800622c <_VPrintTarget+0x388>
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006216:	b2da      	uxtb	r2, r3
 8006218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	6439      	str	r1, [r7, #64]	; 0x40
 800621e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622e:	2b7f      	cmp	r3, #127	; 0x7f
 8006230:	d8f0      	bhi.n	8006214 <_VPrintTarget+0x370>
 8006232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	643a      	str	r2, [r7, #64]	; 0x40
 8006238:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006240:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	63bb      	str	r3, [r7, #56]	; 0x38
 8006246:	2300      	movs	r3, #0
 8006248:	637b      	str	r3, [r7, #52]	; 0x34
 800624a:	e00b      	b.n	8006264 <_VPrintTarget+0x3c0>
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	63b9      	str	r1, [r7, #56]	; 0x38
 8006256:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
 8006264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006266:	2b7f      	cmp	r3, #127	; 0x7f
 8006268:	d8f0      	bhi.n	800624c <_VPrintTarget+0x3a8>
 800626a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	69b9      	ldr	r1, [r7, #24]
 800627e:	221a      	movs	r2, #26
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fb87 	bl	8005994 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800628c:	bf00      	nop
 800628e:	3758      	adds	r7, #88	; 0x58
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062a2:	2300      	movs	r3, #0
 80062a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062a8:	4917      	ldr	r1, [pc, #92]	; (8006308 <SEGGER_SYSVIEW_Init+0x74>)
 80062aa:	4818      	ldr	r0, [pc, #96]	; (800630c <SEGGER_SYSVIEW_Init+0x78>)
 80062ac:	f7ff f962 	bl	8005574 <SEGGER_RTT_AllocUpBuffer>
 80062b0:	4603      	mov	r3, r0
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	4b16      	ldr	r3, [pc, #88]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062b6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062ba:	785a      	ldrb	r2, [r3, #1]
 80062bc:	4b14      	ldr	r3, [pc, #80]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062be:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80062c0:	4b13      	ldr	r3, [pc, #76]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062c2:	7e1b      	ldrb	r3, [r3, #24]
 80062c4:	4618      	mov	r0, r3
 80062c6:	2300      	movs	r3, #0
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	2308      	movs	r3, #8
 80062cc:	4a11      	ldr	r2, [pc, #68]	; (8006314 <SEGGER_SYSVIEW_Init+0x80>)
 80062ce:	490f      	ldr	r1, [pc, #60]	; (800630c <SEGGER_SYSVIEW_Init+0x78>)
 80062d0:	f7ff f9d4 	bl	800567c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80062d4:	4b0e      	ldr	r3, [pc, #56]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80062da:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <SEGGER_SYSVIEW_Init+0x84>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a0c      	ldr	r2, [pc, #48]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062e0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80062e2:	4a0b      	ldr	r2, [pc, #44]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80062e8:	4a09      	ldr	r2, [pc, #36]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80062ee:	4a08      	ldr	r2, [pc, #32]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80062f4:	4a06      	ldr	r2, [pc, #24]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <SEGGER_SYSVIEW_Init+0x7c>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	200132b4 	.word	0x200132b4
 800630c:	08008348 	.word	0x08008348
 8006310:	200142bc 	.word	0x200142bc
 8006314:	200142b4 	.word	0x200142b4
 8006318:	e0001004 	.word	0xe0001004

0800631c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006324:	4a04      	ldr	r2, [pc, #16]	; (8006338 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6113      	str	r3, [r2, #16]
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	200142bc 	.word	0x200142bc

0800633c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006344:	f3ef 8311 	mrs	r3, BASEPRI
 8006348:	f04f 0120 	mov.w	r1, #32
 800634c:	f381 8811 	msr	BASEPRI, r1
 8006350:	60fb      	str	r3, [r7, #12]
 8006352:	4808      	ldr	r0, [pc, #32]	; (8006374 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006354:	f7ff fa2e 	bl	80057b4 <_PreparePacket>
 8006358:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	68b9      	ldr	r1, [r7, #8]
 800635e:	68b8      	ldr	r0, [r7, #8]
 8006360:	f7ff fb18 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f383 8811 	msr	BASEPRI, r3
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	200142ec 	.word	0x200142ec

08006378 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006382:	f3ef 8311 	mrs	r3, BASEPRI
 8006386:	f04f 0120 	mov.w	r1, #32
 800638a:	f381 8811 	msr	BASEPRI, r1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	4816      	ldr	r0, [pc, #88]	; (80063ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006392:	f7ff fa0f 	bl	80057b4 <_PreparePacket>
 8006396:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	e00b      	b.n	80063be <SEGGER_SYSVIEW_RecordU32+0x46>
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	1c59      	adds	r1, r3, #1
 80063ae:	61f9      	str	r1, [r7, #28]
 80063b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063b4:	b2d2      	uxtb	r2, r2
 80063b6:	701a      	strb	r2, [r3, #0]
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	09db      	lsrs	r3, r3, #7
 80063bc:	61bb      	str	r3, [r7, #24]
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	2b7f      	cmp	r3, #127	; 0x7f
 80063c2:	d8f0      	bhi.n	80063a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	61fa      	str	r2, [r7, #28]
 80063ca:	69ba      	ldr	r2, [r7, #24]
 80063cc:	b2d2      	uxtb	r2, r2
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	68f9      	ldr	r1, [r7, #12]
 80063d8:	6938      	ldr	r0, [r7, #16]
 80063da:	f7ff fadb 	bl	8005994 <_SendPacket>
  RECORD_END();
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f383 8811 	msr	BASEPRI, r3
}
 80063e4:	bf00      	nop
 80063e6:	3720      	adds	r7, #32
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	200142ec 	.word	0x200142ec

080063f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08c      	sub	sp, #48	; 0x30
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006400:	f04f 0120 	mov.w	r1, #32
 8006404:	f381 8811 	msr	BASEPRI, r1
 8006408:	61fb      	str	r3, [r7, #28]
 800640a:	4825      	ldr	r0, [pc, #148]	; (80064a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800640c:	f7ff f9d2 	bl	80057b4 <_PreparePacket>
 8006410:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
 800641e:	e00b      	b.n	8006438 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	b2da      	uxtb	r2, r3
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	1c59      	adds	r1, r3, #1
 8006428:	62f9      	str	r1, [r7, #44]	; 0x2c
 800642a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006434:	09db      	lsrs	r3, r3, #7
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	2b7f      	cmp	r3, #127	; 0x7f
 800643c:	d8f0      	bhi.n	8006420 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	623b      	str	r3, [r7, #32]
 8006456:	e00b      	b.n	8006470 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	b2da      	uxtb	r2, r3
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	1c59      	adds	r1, r3, #1
 8006460:	6279      	str	r1, [r7, #36]	; 0x24
 8006462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	09db      	lsrs	r3, r3, #7
 800646e:	623b      	str	r3, [r7, #32]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	2b7f      	cmp	r3, #127	; 0x7f
 8006474:	d8f0      	bhi.n	8006458 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	1c5a      	adds	r2, r3, #1
 800647a:	627a      	str	r2, [r7, #36]	; 0x24
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	b2d2      	uxtb	r2, r2
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	6979      	ldr	r1, [r7, #20]
 800648a:	69b8      	ldr	r0, [r7, #24]
 800648c:	f7ff fa82 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f383 8811 	msr	BASEPRI, r3
}
 8006496:	bf00      	nop
 8006498:	3730      	adds	r7, #48	; 0x30
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	200142ec 	.word	0x200142ec

080064a4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b08e      	sub	sp, #56	; 0x38
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80064b2:	f3ef 8311 	mrs	r3, BASEPRI
 80064b6:	f04f 0120 	mov.w	r1, #32
 80064ba:	f381 8811 	msr	BASEPRI, r1
 80064be:	61fb      	str	r3, [r7, #28]
 80064c0:	4832      	ldr	r0, [pc, #200]	; (800658c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80064c2:	f7ff f977 	bl	80057b4 <_PreparePacket>
 80064c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	633b      	str	r3, [r7, #48]	; 0x30
 80064d4:	e00b      	b.n	80064ee <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	1c59      	adds	r1, r3, #1
 80064de:	6379      	str	r1, [r7, #52]	; 0x34
 80064e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ea:	09db      	lsrs	r3, r3, #7
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30
 80064ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f0:	2b7f      	cmp	r3, #127	; 0x7f
 80064f2:	d8f0      	bhi.n	80064d6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	637a      	str	r2, [r7, #52]	; 0x34
 80064fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006502:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
 800650c:	e00b      	b.n	8006526 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	b2da      	uxtb	r2, r3
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	1c59      	adds	r1, r3, #1
 8006516:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	62bb      	str	r3, [r7, #40]	; 0x28
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	2b7f      	cmp	r3, #127	; 0x7f
 800652a:	d8f0      	bhi.n	800650e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	627b      	str	r3, [r7, #36]	; 0x24
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	623b      	str	r3, [r7, #32]
 8006544:	e00b      	b.n	800655e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	b2da      	uxtb	r2, r3
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	6279      	str	r1, [r7, #36]	; 0x24
 8006550:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	09db      	lsrs	r3, r3, #7
 800655c:	623b      	str	r3, [r7, #32]
 800655e:	6a3b      	ldr	r3, [r7, #32]
 8006560:	2b7f      	cmp	r3, #127	; 0x7f
 8006562:	d8f0      	bhi.n	8006546 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	627a      	str	r2, [r7, #36]	; 0x24
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	b2d2      	uxtb	r2, r2
 800656e:	701a      	strb	r2, [r3, #0]
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	6979      	ldr	r1, [r7, #20]
 8006578:	69b8      	ldr	r0, [r7, #24]
 800657a:	f7ff fa0b 	bl	8005994 <_SendPacket>
  RECORD_END();
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	f383 8811 	msr	BASEPRI, r3
}
 8006584:	bf00      	nop
 8006586:	3738      	adds	r7, #56	; 0x38
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}
 800658c:	200142ec 	.word	0x200142ec

08006590 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006590:	b580      	push	{r7, lr}
 8006592:	b090      	sub	sp, #64	; 0x40
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800659e:	f3ef 8311 	mrs	r3, BASEPRI
 80065a2:	f04f 0120 	mov.w	r1, #32
 80065a6:	f381 8811 	msr	BASEPRI, r1
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	4840      	ldr	r0, [pc, #256]	; (80066b0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80065ae:	f7ff f901 	bl	80057b4 <_PreparePacket>
 80065b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c0:	e00b      	b.n	80065da <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	b2da      	uxtb	r2, r3
 80065c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c8:	1c59      	adds	r1, r3, #1
 80065ca:	63f9      	str	r1, [r7, #60]	; 0x3c
 80065cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065d0:	b2d2      	uxtb	r2, r2
 80065d2:	701a      	strb	r2, [r3, #0]
 80065d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065d6:	09db      	lsrs	r3, r3, #7
 80065d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065dc:	2b7f      	cmp	r3, #127	; 0x7f
 80065de:	d8f0      	bhi.n	80065c2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	637b      	str	r3, [r7, #52]	; 0x34
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	633b      	str	r3, [r7, #48]	; 0x30
 80065f8:	e00b      	b.n	8006612 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006600:	1c59      	adds	r1, r3, #1
 8006602:	6379      	str	r1, [r7, #52]	; 0x34
 8006604:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006608:	b2d2      	uxtb	r2, r2
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	09db      	lsrs	r3, r3, #7
 8006610:	633b      	str	r3, [r7, #48]	; 0x30
 8006612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006614:	2b7f      	cmp	r3, #127	; 0x7f
 8006616:	d8f0      	bhi.n	80065fa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661a:	1c5a      	adds	r2, r3, #1
 800661c:	637a      	str	r2, [r7, #52]	; 0x34
 800661e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006626:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006630:	e00b      	b.n	800664a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	b2da      	uxtb	r2, r3
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	1c59      	adds	r1, r3, #1
 800663a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800663c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	09db      	lsrs	r3, r3, #7
 8006648:	62bb      	str	r3, [r7, #40]	; 0x28
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	2b7f      	cmp	r3, #127	; 0x7f
 800664e:	d8f0      	bhi.n	8006632 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
 8006664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006666:	623b      	str	r3, [r7, #32]
 8006668:	e00b      	b.n	8006682 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	b2da      	uxtb	r2, r3
 800666e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006670:	1c59      	adds	r1, r3, #1
 8006672:	6279      	str	r1, [r7, #36]	; 0x24
 8006674:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006678:	b2d2      	uxtb	r2, r2
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	6a3b      	ldr	r3, [r7, #32]
 800667e:	09db      	lsrs	r3, r3, #7
 8006680:	623b      	str	r3, [r7, #32]
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	2b7f      	cmp	r3, #127	; 0x7f
 8006686:	d8f0      	bhi.n	800666a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	627a      	str	r2, [r7, #36]	; 0x24
 800668e:	6a3a      	ldr	r2, [r7, #32]
 8006690:	b2d2      	uxtb	r2, r2
 8006692:	701a      	strb	r2, [r3, #0]
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	6979      	ldr	r1, [r7, #20]
 800669c:	69b8      	ldr	r0, [r7, #24]
 800669e:	f7ff f979 	bl	8005994 <_SendPacket>
  RECORD_END();
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	f383 8811 	msr	BASEPRI, r3
}
 80066a8:	bf00      	nop
 80066aa:	3740      	adds	r7, #64	; 0x40
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	200142ec 	.word	0x200142ec

080066b4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08c      	sub	sp, #48	; 0x30
 80066b8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80066ba:	4b58      	ldr	r3, [pc, #352]	; (800681c <SEGGER_SYSVIEW_Start+0x168>)
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80066c0:	f3ef 8311 	mrs	r3, BASEPRI
 80066c4:	f04f 0120 	mov.w	r1, #32
 80066c8:	f381 8811 	msr	BASEPRI, r1
 80066cc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80066ce:	4b53      	ldr	r3, [pc, #332]	; (800681c <SEGGER_SYSVIEW_Start+0x168>)
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	220a      	movs	r2, #10
 80066d4:	4952      	ldr	r1, [pc, #328]	; (8006820 <SEGGER_SYSVIEW_Start+0x16c>)
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7f9 fd92 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80066e2:	200a      	movs	r0, #10
 80066e4:	f7ff fe2a 	bl	800633c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066e8:	f3ef 8311 	mrs	r3, BASEPRI
 80066ec:	f04f 0120 	mov.w	r1, #32
 80066f0:	f381 8811 	msr	BASEPRI, r1
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	484b      	ldr	r0, [pc, #300]	; (8006824 <SEGGER_SYSVIEW_Start+0x170>)
 80066f8:	f7ff f85c 	bl	80057b4 <_PreparePacket>
 80066fc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006706:	4b45      	ldr	r3, [pc, #276]	; (800681c <SEGGER_SYSVIEW_Start+0x168>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
 800670c:	e00b      	b.n	8006726 <SEGGER_SYSVIEW_Start+0x72>
 800670e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006710:	b2da      	uxtb	r2, r3
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	1c59      	adds	r1, r3, #1
 8006716:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006718:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671c:	b2d2      	uxtb	r2, r2
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006722:	09db      	lsrs	r3, r3, #7
 8006724:	62bb      	str	r3, [r7, #40]	; 0x28
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	2b7f      	cmp	r3, #127	; 0x7f
 800672a:	d8f0      	bhi.n	800670e <SEGGER_SYSVIEW_Start+0x5a>
 800672c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006734:	b2d2      	uxtb	r2, r2
 8006736:	701a      	strb	r2, [r3, #0]
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	627b      	str	r3, [r7, #36]	; 0x24
 8006740:	4b36      	ldr	r3, [pc, #216]	; (800681c <SEGGER_SYSVIEW_Start+0x168>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	623b      	str	r3, [r7, #32]
 8006746:	e00b      	b.n	8006760 <SEGGER_SYSVIEW_Start+0xac>
 8006748:	6a3b      	ldr	r3, [r7, #32]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1c59      	adds	r1, r3, #1
 8006750:	6279      	str	r1, [r7, #36]	; 0x24
 8006752:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	09db      	lsrs	r3, r3, #7
 800675e:	623b      	str	r3, [r7, #32]
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2b7f      	cmp	r3, #127	; 0x7f
 8006764:	d8f0      	bhi.n	8006748 <SEGGER_SYSVIEW_Start+0x94>
 8006766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	627a      	str	r2, [r7, #36]	; 0x24
 800676c:	6a3a      	ldr	r2, [r7, #32]
 800676e:	b2d2      	uxtb	r2, r2
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	4b28      	ldr	r3, [pc, #160]	; (800681c <SEGGER_SYSVIEW_Start+0x168>)
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	e00b      	b.n	800679a <SEGGER_SYSVIEW_Start+0xe6>
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	1c59      	adds	r1, r3, #1
 800678a:	61f9      	str	r1, [r7, #28]
 800678c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	09db      	lsrs	r3, r3, #7
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b7f      	cmp	r3, #127	; 0x7f
 800679e:	d8f0      	bhi.n	8006782 <SEGGER_SYSVIEW_Start+0xce>
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	61fa      	str	r2, [r7, #28]
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	e00b      	b.n	80067d2 <SEGGER_SYSVIEW_Start+0x11e>
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	1c59      	adds	r1, r3, #1
 80067c2:	6179      	str	r1, [r7, #20]
 80067c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067c8:	b2d2      	uxtb	r2, r2
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	09db      	lsrs	r3, r3, #7
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b7f      	cmp	r3, #127	; 0x7f
 80067d6:	d8f0      	bhi.n	80067ba <SEGGER_SYSVIEW_Start+0x106>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	617a      	str	r2, [r7, #20]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067e8:	2218      	movs	r2, #24
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff f8d1 	bl	8005994 <_SendPacket>
      RECORD_END();
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <SEGGER_SYSVIEW_Start+0x168>)
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006800:	4b06      	ldr	r3, [pc, #24]	; (800681c <SEGGER_SYSVIEW_Start+0x168>)
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006806:	f000 f9eb 	bl	8006be0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800680a:	f000 f9b1 	bl	8006b70 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800680e:	f000 fc83 	bl	8007118 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006812:	bf00      	nop
 8006814:	3730      	adds	r7, #48	; 0x30
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200142bc 	.word	0x200142bc
 8006820:	080083a0 	.word	0x080083a0
 8006824:	200142ec 	.word	0x200142ec

08006828 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800682e:	f3ef 8311 	mrs	r3, BASEPRI
 8006832:	f04f 0120 	mov.w	r1, #32
 8006836:	f381 8811 	msr	BASEPRI, r1
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	480b      	ldr	r0, [pc, #44]	; (800686c <SEGGER_SYSVIEW_Stop+0x44>)
 800683e:	f7fe ffb9 	bl	80057b4 <_PreparePacket>
 8006842:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006844:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <SEGGER_SYSVIEW_Stop+0x48>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d007      	beq.n	800685c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800684c:	220b      	movs	r2, #11
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6838      	ldr	r0, [r7, #0]
 8006852:	f7ff f89f 	bl	8005994 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <SEGGER_SYSVIEW_Stop+0x48>)
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f383 8811 	msr	BASEPRI, r3
}
 8006862:	bf00      	nop
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200142ec 	.word	0x200142ec
 8006870:	200142bc 	.word	0x200142bc

08006874 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b08c      	sub	sp, #48	; 0x30
 8006878:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800687a:	f3ef 8311 	mrs	r3, BASEPRI
 800687e:	f04f 0120 	mov.w	r1, #32
 8006882:	f381 8811 	msr	BASEPRI, r1
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	4845      	ldr	r0, [pc, #276]	; (80069a0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800688a:	f7fe ff93 	bl	80057b4 <_PreparePacket>
 800688e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006898:	4b42      	ldr	r3, [pc, #264]	; (80069a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
 800689e:	e00b      	b.n	80068b8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	1c59      	adds	r1, r3, #1
 80068a8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80068aa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ae:	b2d2      	uxtb	r2, r2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	09db      	lsrs	r3, r3, #7
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	2b7f      	cmp	r3, #127	; 0x7f
 80068bc:	d8f0      	bhi.n	80068a0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	701a      	strb	r2, [r3, #0]
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
 80068d2:	4b34      	ldr	r3, [pc, #208]	; (80069a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	623b      	str	r3, [r7, #32]
 80068d8:	e00b      	b.n	80068f2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	1c59      	adds	r1, r3, #1
 80068e2:	6279      	str	r1, [r7, #36]	; 0x24
 80068e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]
 80068ec:	6a3b      	ldr	r3, [r7, #32]
 80068ee:	09db      	lsrs	r3, r3, #7
 80068f0:	623b      	str	r3, [r7, #32]
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	2b7f      	cmp	r3, #127	; 0x7f
 80068f6:	d8f0      	bhi.n	80068da <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	627a      	str	r2, [r7, #36]	; 0x24
 80068fe:	6a3a      	ldr	r2, [r7, #32]
 8006900:	b2d2      	uxtb	r2, r2
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	61fb      	str	r3, [r7, #28]
 800690c:	4b25      	ldr	r3, [pc, #148]	; (80069a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	e00b      	b.n	800692c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	1c59      	adds	r1, r3, #1
 800691c:	61f9      	str	r1, [r7, #28]
 800691e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	09db      	lsrs	r3, r3, #7
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b7f      	cmp	r3, #127	; 0x7f
 8006930:	d8f0      	bhi.n	8006914 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	61fa      	str	r2, [r7, #28]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	2300      	movs	r3, #0
 8006948:	613b      	str	r3, [r7, #16]
 800694a:	e00b      	b.n	8006964 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	1c59      	adds	r1, r3, #1
 8006954:	6179      	str	r1, [r7, #20]
 8006956:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	09db      	lsrs	r3, r3, #7
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b7f      	cmp	r3, #127	; 0x7f
 8006968:	d8f0      	bhi.n	800694c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	1c5a      	adds	r2, r3, #1
 800696e:	617a      	str	r2, [r7, #20]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800697a:	2218      	movs	r2, #24
 800697c:	6879      	ldr	r1, [r7, #4]
 800697e:	68b8      	ldr	r0, [r7, #8]
 8006980:	f7ff f808 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800698a:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d002      	beq.n	8006998 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006992:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	4798      	blx	r3
  }
}
 8006998:	bf00      	nop
 800699a:	3730      	adds	r7, #48	; 0x30
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	200142ec 	.word	0x200142ec
 80069a4:	200142bc 	.word	0x200142bc

080069a8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b092      	sub	sp, #72	; 0x48
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80069b0:	f3ef 8311 	mrs	r3, BASEPRI
 80069b4:	f04f 0120 	mov.w	r1, #32
 80069b8:	f381 8811 	msr	BASEPRI, r1
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	486a      	ldr	r0, [pc, #424]	; (8006b68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80069c0:	f7fe fef8 	bl	80057b4 <_PreparePacket>
 80069c4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	647b      	str	r3, [r7, #68]	; 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b66      	ldr	r3, [pc, #408]	; (8006b6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	643b      	str	r3, [r7, #64]	; 0x40
 80069da:	e00b      	b.n	80069f4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80069dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069e2:	1c59      	adds	r1, r3, #1
 80069e4:	6479      	str	r1, [r7, #68]	; 0x44
 80069e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f0:	09db      	lsrs	r3, r3, #7
 80069f2:	643b      	str	r3, [r7, #64]	; 0x40
 80069f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f6:	2b7f      	cmp	r3, #127	; 0x7f
 80069f8:	d8f0      	bhi.n	80069dc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80069fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fc:	1c5a      	adds	r2, r3, #1
 80069fe:	647a      	str	r2, [r7, #68]	; 0x44
 8006a00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a14:	e00b      	b.n	8006a2e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	b2da      	uxtb	r2, r3
 8006a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1c:	1c59      	adds	r1, r3, #1
 8006a1e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2a:	09db      	lsrs	r3, r3, #7
 8006a2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b7f      	cmp	r3, #127	; 0x7f
 8006a32:	d8f0      	bhi.n	8006a16 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a36:	1c5a      	adds	r2, r3, #1
 8006a38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a42:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f7fe fe61 	bl	8005714 <_EncodeStr>
 8006a52:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006a54:	2209      	movs	r2, #9
 8006a56:	68f9      	ldr	r1, [r7, #12]
 8006a58:	6938      	ldr	r0, [r7, #16]
 8006a5a:	f7fe ff9b 	bl	8005994 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b40      	ldr	r3, [pc, #256]	; (8006b6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	633b      	str	r3, [r7, #48]	; 0x30
 8006a72:	e00b      	b.n	8006a8c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7a:	1c59      	adds	r1, r3, #1
 8006a7c:	6379      	str	r1, [r7, #52]	; 0x34
 8006a7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	09db      	lsrs	r3, r3, #7
 8006a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a90:	d8f0      	bhi.n	8006a74 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	637a      	str	r2, [r7, #52]	; 0x34
 8006a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]
 8006a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aac:	e00b      	b.n	8006ac6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab4:	1c59      	adds	r1, r3, #1
 8006ab6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ab8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	09db      	lsrs	r3, r3, #7
 8006ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8006aca:	d8f0      	bhi.n	8006aae <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ada:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	623b      	str	r3, [r7, #32]
 8006ae6:	e00b      	b.n	8006b00 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aee:	1c59      	adds	r1, r3, #1
 8006af0:	6279      	str	r1, [r7, #36]	; 0x24
 8006af2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	09db      	lsrs	r3, r3, #7
 8006afe:	623b      	str	r3, [r7, #32]
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	2b7f      	cmp	r3, #127	; 0x7f
 8006b04:	d8f0      	bhi.n	8006ae8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	1c5a      	adds	r2, r3, #1
 8006b0a:	627a      	str	r2, [r7, #36]	; 0x24
 8006b0c:	6a3a      	ldr	r2, [r7, #32]
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	701a      	strb	r2, [r3, #0]
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	61fb      	str	r3, [r7, #28]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61bb      	str	r3, [r7, #24]
 8006b1e:	e00b      	b.n	8006b38 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	1c59      	adds	r1, r3, #1
 8006b28:	61f9      	str	r1, [r7, #28]
 8006b2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	09db      	lsrs	r3, r3, #7
 8006b36:	61bb      	str	r3, [r7, #24]
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b3c:	d8f0      	bhi.n	8006b20 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	61fa      	str	r2, [r7, #28]
 8006b44:	69ba      	ldr	r2, [r7, #24]
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006b4e:	2215      	movs	r2, #21
 8006b50:	68f9      	ldr	r1, [r7, #12]
 8006b52:	6938      	ldr	r0, [r7, #16]
 8006b54:	f7fe ff1e 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bf00      	nop
 8006b60:	3748      	adds	r7, #72	; 0x48
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	200142ec 	.word	0x200142ec
 8006b6c:	200142bc 	.word	0x200142bc

08006b70 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d008      	beq.n	8006b8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006b7c:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b7e:	6a1b      	ldr	r3, [r3, #32]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006b86:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	4798      	blx	r3
  }
}
 8006b8e:	bf00      	nop
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200142bc 	.word	0x200142bc

08006b98 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba4:	f04f 0120 	mov.w	r1, #32
 8006ba8:	f381 8811 	msr	BASEPRI, r1
 8006bac:	617b      	str	r3, [r7, #20]
 8006bae:	480b      	ldr	r0, [pc, #44]	; (8006bdc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006bb0:	f7fe fe00 	bl	80057b4 <_PreparePacket>
 8006bb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006bb6:	2280      	movs	r2, #128	; 0x80
 8006bb8:	6879      	ldr	r1, [r7, #4]
 8006bba:	6938      	ldr	r0, [r7, #16]
 8006bbc:	f7fe fdaa 	bl	8005714 <_EncodeStr>
 8006bc0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006bc2:	220e      	movs	r2, #14
 8006bc4:	68f9      	ldr	r1, [r7, #12]
 8006bc6:	6938      	ldr	r0, [r7, #16]
 8006bc8:	f7fe fee4 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f383 8811 	msr	BASEPRI, r3
}
 8006bd2:	bf00      	nop
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200142ec 	.word	0x200142ec

08006be0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006be0:	b590      	push	{r4, r7, lr}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006be6:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01a      	beq.n	8006c24 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d015      	beq.n	8006c24 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006bf8:	4b10      	ldr	r3, [pc, #64]	; (8006c3c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4798      	blx	r3
 8006c00:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c04:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	f04f 0300 	mov.w	r3, #0
 8006c12:	000a      	movs	r2, r1
 8006c14:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c16:	4613      	mov	r3, r2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	4621      	mov	r1, r4
 8006c1c:	200d      	movs	r0, #13
 8006c1e:	f7ff fbe7 	bl	80063f0 <SEGGER_SYSVIEW_RecordU32x2>
 8006c22:	e006      	b.n	8006c32 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	200c      	movs	r0, #12
 8006c2c:	f7ff fba4 	bl	8006378 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006c30:	bf00      	nop
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd90      	pop	{r4, r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	200142bc 	.word	0x200142bc
 8006c40:	e0001004 	.word	0xe0001004

08006c44 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4e:	f04f 0120 	mov.w	r1, #32
 8006c52:	f381 8811 	msr	BASEPRI, r1
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	4819      	ldr	r0, [pc, #100]	; (8006cc0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006c5a:	f7fe fdab 	bl	80057b4 <_PreparePacket>
 8006c5e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006c64:	4b17      	ldr	r3, [pc, #92]	; (8006cc4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	617b      	str	r3, [r7, #20]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	613b      	str	r3, [r7, #16]
 8006c76:	e00b      	b.n	8006c90 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	b2da      	uxtb	r2, r3
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	6179      	str	r1, [r7, #20]
 8006c82:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	09db      	lsrs	r3, r3, #7
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b7f      	cmp	r3, #127	; 0x7f
 8006c94:	d8f0      	bhi.n	8006c78 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	617a      	str	r2, [r7, #20]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	6879      	ldr	r1, [r7, #4]
 8006caa:	68b8      	ldr	r0, [r7, #8]
 8006cac:	f7fe fe72 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f383 8811 	msr	BASEPRI, r3
}
 8006cb6:	bf00      	nop
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	200142ec 	.word	0x200142ec
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006cce:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd2:	f04f 0120 	mov.w	r1, #32
 8006cd6:	f381 8811 	msr	BASEPRI, r1
 8006cda:	607b      	str	r3, [r7, #4]
 8006cdc:	4807      	ldr	r0, [pc, #28]	; (8006cfc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006cde:	f7fe fd69 	bl	80057b4 <_PreparePacket>
 8006ce2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006ce4:	2203      	movs	r2, #3
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6838      	ldr	r0, [r7, #0]
 8006cea:	f7fe fe53 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f383 8811 	msr	BASEPRI, r3
}
 8006cf4:	bf00      	nop
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	200142ec 	.word	0x200142ec

08006d00 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d06:	f3ef 8311 	mrs	r3, BASEPRI
 8006d0a:	f04f 0120 	mov.w	r1, #32
 8006d0e:	f381 8811 	msr	BASEPRI, r1
 8006d12:	607b      	str	r3, [r7, #4]
 8006d14:	4807      	ldr	r0, [pc, #28]	; (8006d34 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d16:	f7fe fd4d 	bl	80057b4 <_PreparePacket>
 8006d1a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d1c:	2212      	movs	r2, #18
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6838      	ldr	r0, [r7, #0]
 8006d22:	f7fe fe37 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f383 8811 	msr	BASEPRI, r3
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	200142ec 	.word	0x200142ec

08006d38 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d42:	f04f 0120 	mov.w	r1, #32
 8006d46:	f381 8811 	msr	BASEPRI, r1
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	4807      	ldr	r0, [pc, #28]	; (8006d6c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006d4e:	f7fe fd31 	bl	80057b4 <_PreparePacket>
 8006d52:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006d54:	2211      	movs	r2, #17
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6838      	ldr	r0, [r7, #0]
 8006d5a:	f7fe fe1b 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f383 8811 	msr	BASEPRI, r3
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	200142ec 	.word	0x200142ec

08006d70 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d78:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7c:	f04f 0120 	mov.w	r1, #32
 8006d80:	f381 8811 	msr	BASEPRI, r1
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	4819      	ldr	r0, [pc, #100]	; (8006dec <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006d88:	f7fe fd14 	bl	80057b4 <_PreparePacket>
 8006d8c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d92:	4b17      	ldr	r3, [pc, #92]	; (8006df0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	e00b      	b.n	8006dbe <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	1c59      	adds	r1, r3, #1
 8006dae:	61f9      	str	r1, [r7, #28]
 8006db0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	09db      	lsrs	r3, r3, #7
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc2:	d8f0      	bhi.n	8006da6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	1c5a      	adds	r2, r3, #1
 8006dc8:	61fa      	str	r2, [r7, #28]
 8006dca:	69ba      	ldr	r2, [r7, #24]
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006dd4:	2208      	movs	r2, #8
 8006dd6:	68f9      	ldr	r1, [r7, #12]
 8006dd8:	6938      	ldr	r0, [r7, #16]
 8006dda:	f7fe fddb 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f383 8811 	msr	BASEPRI, r3
}
 8006de4:	bf00      	nop
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	200142ec 	.word	0x200142ec
 8006df0:	200142bc 	.word	0x200142bc

08006df4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006dfc:	f3ef 8311 	mrs	r3, BASEPRI
 8006e00:	f04f 0120 	mov.w	r1, #32
 8006e04:	f381 8811 	msr	BASEPRI, r1
 8006e08:	617b      	str	r3, [r7, #20]
 8006e0a:	4819      	ldr	r0, [pc, #100]	; (8006e70 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e0c:	f7fe fcd2 	bl	80057b4 <_PreparePacket>
 8006e10:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e16:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	61fb      	str	r3, [r7, #28]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	e00b      	b.n	8006e42 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	1c59      	adds	r1, r3, #1
 8006e32:	61f9      	str	r1, [r7, #28]
 8006e34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e38:	b2d2      	uxtb	r2, r2
 8006e3a:	701a      	strb	r2, [r3, #0]
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	09db      	lsrs	r3, r3, #7
 8006e40:	61bb      	str	r3, [r7, #24]
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2b7f      	cmp	r3, #127	; 0x7f
 8006e46:	d8f0      	bhi.n	8006e2a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	61fa      	str	r2, [r7, #28]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006e58:	2204      	movs	r2, #4
 8006e5a:	68f9      	ldr	r1, [r7, #12]
 8006e5c:	6938      	ldr	r0, [r7, #16]
 8006e5e:	f7fe fd99 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	f383 8811 	msr	BASEPRI, r3
}
 8006e68:	bf00      	nop
 8006e6a:	3720      	adds	r7, #32
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	200142ec 	.word	0x200142ec
 8006e74:	200142bc 	.word	0x200142bc

08006e78 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e80:	f3ef 8311 	mrs	r3, BASEPRI
 8006e84:	f04f 0120 	mov.w	r1, #32
 8006e88:	f381 8811 	msr	BASEPRI, r1
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	4819      	ldr	r0, [pc, #100]	; (8006ef4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006e90:	f7fe fc90 	bl	80057b4 <_PreparePacket>
 8006e94:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e9a:	4b17      	ldr	r3, [pc, #92]	; (8006ef8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	e00b      	b.n	8006ec6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	b2da      	uxtb	r2, r3
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	1c59      	adds	r1, r3, #1
 8006eb6:	61f9      	str	r1, [r7, #28]
 8006eb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ebc:	b2d2      	uxtb	r2, r2
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	09db      	lsrs	r3, r3, #7
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	2b7f      	cmp	r3, #127	; 0x7f
 8006eca:	d8f0      	bhi.n	8006eae <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	61fa      	str	r2, [r7, #28]
 8006ed2:	69ba      	ldr	r2, [r7, #24]
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006edc:	2206      	movs	r2, #6
 8006ede:	68f9      	ldr	r1, [r7, #12]
 8006ee0:	6938      	ldr	r0, [r7, #16]
 8006ee2:	f7fe fd57 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f383 8811 	msr	BASEPRI, r3
}
 8006eec:	bf00      	nop
 8006eee:	3720      	adds	r7, #32
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	200142ec 	.word	0x200142ec
 8006ef8:	200142bc 	.word	0x200142bc

08006efc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	; 0x28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f06:	f3ef 8311 	mrs	r3, BASEPRI
 8006f0a:	f04f 0120 	mov.w	r1, #32
 8006f0e:	f381 8811 	msr	BASEPRI, r1
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	4827      	ldr	r0, [pc, #156]	; (8006fb4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f16:	f7fe fc4d 	bl	80057b4 <_PreparePacket>
 8006f1a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f22:	691b      	ldr	r3, [r3, #16]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	623b      	str	r3, [r7, #32]
 8006f32:	e00b      	b.n	8006f4c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	b2da      	uxtb	r2, r3
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	1c59      	adds	r1, r3, #1
 8006f3c:	6279      	str	r1, [r7, #36]	; 0x24
 8006f3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	09db      	lsrs	r3, r3, #7
 8006f4a:	623b      	str	r3, [r7, #32]
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f50:	d8f0      	bhi.n	8006f34 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	1c5a      	adds	r2, r3, #1
 8006f56:	627a      	str	r2, [r7, #36]	; 0x24
 8006f58:	6a3a      	ldr	r2, [r7, #32]
 8006f5a:	b2d2      	uxtb	r2, r2
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	61bb      	str	r3, [r7, #24]
 8006f6a:	e00b      	b.n	8006f84 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	1c59      	adds	r1, r3, #1
 8006f74:	61f9      	str	r1, [r7, #28]
 8006f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	09db      	lsrs	r3, r3, #7
 8006f82:	61bb      	str	r3, [r7, #24]
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	2b7f      	cmp	r3, #127	; 0x7f
 8006f88:	d8f0      	bhi.n	8006f6c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	61fa      	str	r2, [r7, #28]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006f9a:	2207      	movs	r2, #7
 8006f9c:	68f9      	ldr	r1, [r7, #12]
 8006f9e:	6938      	ldr	r0, [r7, #16]
 8006fa0:	f7fe fcf8 	bl	8005994 <_SendPacket>
  RECORD_END();
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f383 8811 	msr	BASEPRI, r3
}
 8006faa:	bf00      	nop
 8006fac:	3728      	adds	r7, #40	; 0x28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200142ec 	.word	0x200142ec
 8006fb8:	200142bc 	.word	0x200142bc

08006fbc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006fc4:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	1ad3      	subs	r3, r2, r3
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	200142bc 	.word	0x200142bc

08006fdc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b08c      	sub	sp, #48	; 0x30
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006fe6:	4b3b      	ldr	r3, [pc, #236]	; (80070d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d06d      	beq.n	80070ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006fee:	4b39      	ldr	r3, [pc, #228]	; (80070d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ff8:	e008      	b.n	800700c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d007      	beq.n	8007016 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	3301      	adds	r3, #1
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007010:	429a      	cmp	r2, r3
 8007012:	d3f2      	bcc.n	8006ffa <SEGGER_SYSVIEW_SendModule+0x1e>
 8007014:	e000      	b.n	8007018 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007016:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d055      	beq.n	80070ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800701e:	f3ef 8311 	mrs	r3, BASEPRI
 8007022:	f04f 0120 	mov.w	r1, #32
 8007026:	f381 8811 	msr	BASEPRI, r1
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	482a      	ldr	r0, [pc, #168]	; (80070d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800702e:	f7fe fbc1 	bl	80057b4 <_PreparePacket>
 8007032:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
 800703c:	79fb      	ldrb	r3, [r7, #7]
 800703e:	623b      	str	r3, [r7, #32]
 8007040:	e00b      	b.n	800705a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	b2da      	uxtb	r2, r3
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	1c59      	adds	r1, r3, #1
 800704a:	6279      	str	r1, [r7, #36]	; 0x24
 800704c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007050:	b2d2      	uxtb	r2, r2
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	6a3b      	ldr	r3, [r7, #32]
 8007056:	09db      	lsrs	r3, r3, #7
 8007058:	623b      	str	r3, [r7, #32]
 800705a:	6a3b      	ldr	r3, [r7, #32]
 800705c:	2b7f      	cmp	r3, #127	; 0x7f
 800705e:	d8f0      	bhi.n	8007042 <SEGGER_SYSVIEW_SendModule+0x66>
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	627a      	str	r2, [r7, #36]	; 0x24
 8007066:	6a3a      	ldr	r2, [r7, #32]
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	61bb      	str	r3, [r7, #24]
 800707a:	e00b      	b.n	8007094 <SEGGER_SYSVIEW_SendModule+0xb8>
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	b2da      	uxtb	r2, r3
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	1c59      	adds	r1, r3, #1
 8007084:	61f9      	str	r1, [r7, #28]
 8007086:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	09db      	lsrs	r3, r3, #7
 8007092:	61bb      	str	r3, [r7, #24]
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	2b7f      	cmp	r3, #127	; 0x7f
 8007098:	d8f0      	bhi.n	800707c <SEGGER_SYSVIEW_SendModule+0xa0>
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	61fa      	str	r2, [r7, #28]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2280      	movs	r2, #128	; 0x80
 80070b0:	4619      	mov	r1, r3
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f7fe fb2e 	bl	8005714 <_EncodeStr>
 80070b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80070ba:	2216      	movs	r2, #22
 80070bc:	68f9      	ldr	r1, [r7, #12]
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f7fe fc68 	bl	8005994 <_SendPacket>
      RECORD_END();
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80070ca:	bf00      	nop
 80070cc:	3730      	adds	r7, #48	; 0x30
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	200142e4 	.word	0x200142e4
 80070d8:	200142ec 	.word	0x200142ec

080070dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80070e2:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00f      	beq.n	800710a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80070ea:	4b0a      	ldr	r3, [pc, #40]	; (8007114 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f2      	bne.n	80070f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800710a:	bf00      	nop
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	200142e4 	.word	0x200142e4

08007118 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800711e:	f3ef 8311 	mrs	r3, BASEPRI
 8007122:	f04f 0120 	mov.w	r1, #32
 8007126:	f381 8811 	msr	BASEPRI, r1
 800712a:	60fb      	str	r3, [r7, #12]
 800712c:	4817      	ldr	r0, [pc, #92]	; (800718c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800712e:	f7fe fb41 	bl	80057b4 <_PreparePacket>
 8007132:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	4b14      	ldr	r3, [pc, #80]	; (8007190 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	613b      	str	r3, [r7, #16]
 8007142:	e00b      	b.n	800715c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	1c59      	adds	r1, r3, #1
 800714c:	6179      	str	r1, [r7, #20]
 800714e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	09db      	lsrs	r3, r3, #7
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	2b7f      	cmp	r3, #127	; 0x7f
 8007160:	d8f0      	bhi.n	8007144 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	617a      	str	r2, [r7, #20]
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	b2d2      	uxtb	r2, r2
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007172:	221b      	movs	r2, #27
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	68b8      	ldr	r0, [r7, #8]
 8007178:	f7fe fc0c 	bl	8005994 <_SendPacket>
  RECORD_END();
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f383 8811 	msr	BASEPRI, r3
}
 8007182:	bf00      	nop
 8007184:	3718      	adds	r7, #24
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	200142ec 	.word	0x200142ec
 8007190:	200142e8 	.word	0x200142e8

08007194 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007194:	b40f      	push	{r0, r1, r2, r3}
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800719c:	f107 0314 	add.w	r3, r7, #20
 80071a0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80071a2:	1d3b      	adds	r3, r7, #4
 80071a4:	461a      	mov	r2, r3
 80071a6:	2100      	movs	r1, #0
 80071a8:	6938      	ldr	r0, [r7, #16]
 80071aa:	f7fe fe7b 	bl	8005ea4 <_VPrintTarget>
  va_end(ParamList);
}
 80071ae:	bf00      	nop
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071b8:	b004      	add	sp, #16
 80071ba:	4770      	bx	lr

080071bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b08a      	sub	sp, #40	; 0x28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071c4:	f3ef 8311 	mrs	r3, BASEPRI
 80071c8:	f04f 0120 	mov.w	r1, #32
 80071cc:	f381 8811 	msr	BASEPRI, r1
 80071d0:	617b      	str	r3, [r7, #20]
 80071d2:	4827      	ldr	r0, [pc, #156]	; (8007270 <SEGGER_SYSVIEW_Warn+0xb4>)
 80071d4:	f7fe faee 	bl	80057b4 <_PreparePacket>
 80071d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80071da:	2280      	movs	r2, #128	; 0x80
 80071dc:	6879      	ldr	r1, [r7, #4]
 80071de:	6938      	ldr	r0, [r7, #16]
 80071e0:	f7fe fa98 	bl	8005714 <_EncodeStr>
 80071e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	627b      	str	r3, [r7, #36]	; 0x24
 80071ea:	2301      	movs	r3, #1
 80071ec:	623b      	str	r3, [r7, #32]
 80071ee:	e00b      	b.n	8007208 <SEGGER_SYSVIEW_Warn+0x4c>
 80071f0:	6a3b      	ldr	r3, [r7, #32]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f6:	1c59      	adds	r1, r3, #1
 80071f8:	6279      	str	r1, [r7, #36]	; 0x24
 80071fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	09db      	lsrs	r3, r3, #7
 8007206:	623b      	str	r3, [r7, #32]
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	2b7f      	cmp	r3, #127	; 0x7f
 800720c:	d8f0      	bhi.n	80071f0 <SEGGER_SYSVIEW_Warn+0x34>
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	627a      	str	r2, [r7, #36]	; 0x24
 8007214:	6a3a      	ldr	r2, [r7, #32]
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	701a      	strb	r2, [r3, #0]
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	61fb      	str	r3, [r7, #28]
 8007222:	2300      	movs	r3, #0
 8007224:	61bb      	str	r3, [r7, #24]
 8007226:	e00b      	b.n	8007240 <SEGGER_SYSVIEW_Warn+0x84>
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	b2da      	uxtb	r2, r3
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	1c59      	adds	r1, r3, #1
 8007230:	61f9      	str	r1, [r7, #28]
 8007232:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	09db      	lsrs	r3, r3, #7
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	2b7f      	cmp	r3, #127	; 0x7f
 8007244:	d8f0      	bhi.n	8007228 <SEGGER_SYSVIEW_Warn+0x6c>
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	61fa      	str	r2, [r7, #28]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	b2d2      	uxtb	r2, r2
 8007250:	701a      	strb	r2, [r3, #0]
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007256:	221a      	movs	r2, #26
 8007258:	68f9      	ldr	r1, [r7, #12]
 800725a:	6938      	ldr	r0, [r7, #16]
 800725c:	f7fe fb9a 	bl	8005994 <_SendPacket>
  RECORD_END();
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	f383 8811 	msr	BASEPRI, r3
}
 8007266:	bf00      	nop
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	200142ec 	.word	0x200142ec

08007274 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	2000      	movs	r0, #0
 8007288:	f7fe f94e 	bl	8005528 <SEGGER_RTT_Write>
  return len;
 800728c:	683b      	ldr	r3, [r7, #0]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
	...

08007298 <__errno>:
 8007298:	4b01      	ldr	r3, [pc, #4]	; (80072a0 <__errno+0x8>)
 800729a:	6818      	ldr	r0, [r3, #0]
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20000014 	.word	0x20000014

080072a4 <__libc_init_array>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	4d0d      	ldr	r5, [pc, #52]	; (80072dc <__libc_init_array+0x38>)
 80072a8:	4c0d      	ldr	r4, [pc, #52]	; (80072e0 <__libc_init_array+0x3c>)
 80072aa:	1b64      	subs	r4, r4, r5
 80072ac:	10a4      	asrs	r4, r4, #2
 80072ae:	2600      	movs	r6, #0
 80072b0:	42a6      	cmp	r6, r4
 80072b2:	d109      	bne.n	80072c8 <__libc_init_array+0x24>
 80072b4:	4d0b      	ldr	r5, [pc, #44]	; (80072e4 <__libc_init_array+0x40>)
 80072b6:	4c0c      	ldr	r4, [pc, #48]	; (80072e8 <__libc_init_array+0x44>)
 80072b8:	f000 ff80 	bl	80081bc <_init>
 80072bc:	1b64      	subs	r4, r4, r5
 80072be:	10a4      	asrs	r4, r4, #2
 80072c0:	2600      	movs	r6, #0
 80072c2:	42a6      	cmp	r6, r4
 80072c4:	d105      	bne.n	80072d2 <__libc_init_array+0x2e>
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072cc:	4798      	blx	r3
 80072ce:	3601      	adds	r6, #1
 80072d0:	e7ee      	b.n	80072b0 <__libc_init_array+0xc>
 80072d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d6:	4798      	blx	r3
 80072d8:	3601      	adds	r6, #1
 80072da:	e7f2      	b.n	80072c2 <__libc_init_array+0x1e>
 80072dc:	08008454 	.word	0x08008454
 80072e0:	08008454 	.word	0x08008454
 80072e4:	08008454 	.word	0x08008454
 80072e8:	08008458 	.word	0x08008458

080072ec <memcmp>:
 80072ec:	b530      	push	{r4, r5, lr}
 80072ee:	3901      	subs	r1, #1
 80072f0:	2400      	movs	r4, #0
 80072f2:	42a2      	cmp	r2, r4
 80072f4:	d101      	bne.n	80072fa <memcmp+0xe>
 80072f6:	2000      	movs	r0, #0
 80072f8:	e005      	b.n	8007306 <memcmp+0x1a>
 80072fa:	5d03      	ldrb	r3, [r0, r4]
 80072fc:	3401      	adds	r4, #1
 80072fe:	5d0d      	ldrb	r5, [r1, r4]
 8007300:	42ab      	cmp	r3, r5
 8007302:	d0f6      	beq.n	80072f2 <memcmp+0x6>
 8007304:	1b58      	subs	r0, r3, r5
 8007306:	bd30      	pop	{r4, r5, pc}

08007308 <memcpy>:
 8007308:	440a      	add	r2, r1
 800730a:	4291      	cmp	r1, r2
 800730c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007310:	d100      	bne.n	8007314 <memcpy+0xc>
 8007312:	4770      	bx	lr
 8007314:	b510      	push	{r4, lr}
 8007316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800731a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800731e:	4291      	cmp	r1, r2
 8007320:	d1f9      	bne.n	8007316 <memcpy+0xe>
 8007322:	bd10      	pop	{r4, pc}

08007324 <memset>:
 8007324:	4402      	add	r2, r0
 8007326:	4603      	mov	r3, r0
 8007328:	4293      	cmp	r3, r2
 800732a:	d100      	bne.n	800732e <memset+0xa>
 800732c:	4770      	bx	lr
 800732e:	f803 1b01 	strb.w	r1, [r3], #1
 8007332:	e7f9      	b.n	8007328 <memset+0x4>

08007334 <iprintf>:
 8007334:	b40f      	push	{r0, r1, r2, r3}
 8007336:	4b0a      	ldr	r3, [pc, #40]	; (8007360 <iprintf+0x2c>)
 8007338:	b513      	push	{r0, r1, r4, lr}
 800733a:	681c      	ldr	r4, [r3, #0]
 800733c:	b124      	cbz	r4, 8007348 <iprintf+0x14>
 800733e:	69a3      	ldr	r3, [r4, #24]
 8007340:	b913      	cbnz	r3, 8007348 <iprintf+0x14>
 8007342:	4620      	mov	r0, r4
 8007344:	f000 f866 	bl	8007414 <__sinit>
 8007348:	ab05      	add	r3, sp, #20
 800734a:	9a04      	ldr	r2, [sp, #16]
 800734c:	68a1      	ldr	r1, [r4, #8]
 800734e:	9301      	str	r3, [sp, #4]
 8007350:	4620      	mov	r0, r4
 8007352:	f000 f983 	bl	800765c <_vfiprintf_r>
 8007356:	b002      	add	sp, #8
 8007358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800735c:	b004      	add	sp, #16
 800735e:	4770      	bx	lr
 8007360:	20000014 	.word	0x20000014

08007364 <std>:
 8007364:	2300      	movs	r3, #0
 8007366:	b510      	push	{r4, lr}
 8007368:	4604      	mov	r4, r0
 800736a:	e9c0 3300 	strd	r3, r3, [r0]
 800736e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007372:	6083      	str	r3, [r0, #8]
 8007374:	8181      	strh	r1, [r0, #12]
 8007376:	6643      	str	r3, [r0, #100]	; 0x64
 8007378:	81c2      	strh	r2, [r0, #14]
 800737a:	6183      	str	r3, [r0, #24]
 800737c:	4619      	mov	r1, r3
 800737e:	2208      	movs	r2, #8
 8007380:	305c      	adds	r0, #92	; 0x5c
 8007382:	f7ff ffcf 	bl	8007324 <memset>
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <std+0x38>)
 8007388:	6263      	str	r3, [r4, #36]	; 0x24
 800738a:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <std+0x3c>)
 800738c:	62a3      	str	r3, [r4, #40]	; 0x28
 800738e:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <std+0x40>)
 8007390:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <std+0x44>)
 8007394:	6224      	str	r4, [r4, #32]
 8007396:	6323      	str	r3, [r4, #48]	; 0x30
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop
 800739c:	08007c05 	.word	0x08007c05
 80073a0:	08007c27 	.word	0x08007c27
 80073a4:	08007c5f 	.word	0x08007c5f
 80073a8:	08007c83 	.word	0x08007c83

080073ac <_cleanup_r>:
 80073ac:	4901      	ldr	r1, [pc, #4]	; (80073b4 <_cleanup_r+0x8>)
 80073ae:	f000 b8af 	b.w	8007510 <_fwalk_reent>
 80073b2:	bf00      	nop
 80073b4:	08007f39 	.word	0x08007f39

080073b8 <__sfmoreglue>:
 80073b8:	b570      	push	{r4, r5, r6, lr}
 80073ba:	1e4a      	subs	r2, r1, #1
 80073bc:	2568      	movs	r5, #104	; 0x68
 80073be:	4355      	muls	r5, r2
 80073c0:	460e      	mov	r6, r1
 80073c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073c6:	f000 f8c5 	bl	8007554 <_malloc_r>
 80073ca:	4604      	mov	r4, r0
 80073cc:	b140      	cbz	r0, 80073e0 <__sfmoreglue+0x28>
 80073ce:	2100      	movs	r1, #0
 80073d0:	e9c0 1600 	strd	r1, r6, [r0]
 80073d4:	300c      	adds	r0, #12
 80073d6:	60a0      	str	r0, [r4, #8]
 80073d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073dc:	f7ff ffa2 	bl	8007324 <memset>
 80073e0:	4620      	mov	r0, r4
 80073e2:	bd70      	pop	{r4, r5, r6, pc}

080073e4 <__sfp_lock_acquire>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__sfp_lock_acquire+0x8>)
 80073e6:	f000 b8b3 	b.w	8007550 <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	20014518 	.word	0x20014518

080073f0 <__sfp_lock_release>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__sfp_lock_release+0x8>)
 80073f2:	f000 b8ae 	b.w	8007552 <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	20014518 	.word	0x20014518

080073fc <__sinit_lock_acquire>:
 80073fc:	4801      	ldr	r0, [pc, #4]	; (8007404 <__sinit_lock_acquire+0x8>)
 80073fe:	f000 b8a7 	b.w	8007550 <__retarget_lock_acquire_recursive>
 8007402:	bf00      	nop
 8007404:	20014513 	.word	0x20014513

08007408 <__sinit_lock_release>:
 8007408:	4801      	ldr	r0, [pc, #4]	; (8007410 <__sinit_lock_release+0x8>)
 800740a:	f000 b8a2 	b.w	8007552 <__retarget_lock_release_recursive>
 800740e:	bf00      	nop
 8007410:	20014513 	.word	0x20014513

08007414 <__sinit>:
 8007414:	b510      	push	{r4, lr}
 8007416:	4604      	mov	r4, r0
 8007418:	f7ff fff0 	bl	80073fc <__sinit_lock_acquire>
 800741c:	69a3      	ldr	r3, [r4, #24]
 800741e:	b11b      	cbz	r3, 8007428 <__sinit+0x14>
 8007420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007424:	f7ff bff0 	b.w	8007408 <__sinit_lock_release>
 8007428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800742c:	6523      	str	r3, [r4, #80]	; 0x50
 800742e:	4b13      	ldr	r3, [pc, #76]	; (800747c <__sinit+0x68>)
 8007430:	4a13      	ldr	r2, [pc, #76]	; (8007480 <__sinit+0x6c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	62a2      	str	r2, [r4, #40]	; 0x28
 8007436:	42a3      	cmp	r3, r4
 8007438:	bf04      	itt	eq
 800743a:	2301      	moveq	r3, #1
 800743c:	61a3      	streq	r3, [r4, #24]
 800743e:	4620      	mov	r0, r4
 8007440:	f000 f820 	bl	8007484 <__sfp>
 8007444:	6060      	str	r0, [r4, #4]
 8007446:	4620      	mov	r0, r4
 8007448:	f000 f81c 	bl	8007484 <__sfp>
 800744c:	60a0      	str	r0, [r4, #8]
 800744e:	4620      	mov	r0, r4
 8007450:	f000 f818 	bl	8007484 <__sfp>
 8007454:	2200      	movs	r2, #0
 8007456:	60e0      	str	r0, [r4, #12]
 8007458:	2104      	movs	r1, #4
 800745a:	6860      	ldr	r0, [r4, #4]
 800745c:	f7ff ff82 	bl	8007364 <std>
 8007460:	68a0      	ldr	r0, [r4, #8]
 8007462:	2201      	movs	r2, #1
 8007464:	2109      	movs	r1, #9
 8007466:	f7ff ff7d 	bl	8007364 <std>
 800746a:	68e0      	ldr	r0, [r4, #12]
 800746c:	2202      	movs	r2, #2
 800746e:	2112      	movs	r1, #18
 8007470:	f7ff ff78 	bl	8007364 <std>
 8007474:	2301      	movs	r3, #1
 8007476:	61a3      	str	r3, [r4, #24]
 8007478:	e7d2      	b.n	8007420 <__sinit+0xc>
 800747a:	bf00      	nop
 800747c:	080083bc 	.word	0x080083bc
 8007480:	080073ad 	.word	0x080073ad

08007484 <__sfp>:
 8007484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007486:	4607      	mov	r7, r0
 8007488:	f7ff ffac 	bl	80073e4 <__sfp_lock_acquire>
 800748c:	4b1e      	ldr	r3, [pc, #120]	; (8007508 <__sfp+0x84>)
 800748e:	681e      	ldr	r6, [r3, #0]
 8007490:	69b3      	ldr	r3, [r6, #24]
 8007492:	b913      	cbnz	r3, 800749a <__sfp+0x16>
 8007494:	4630      	mov	r0, r6
 8007496:	f7ff ffbd 	bl	8007414 <__sinit>
 800749a:	3648      	adds	r6, #72	; 0x48
 800749c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80074a0:	3b01      	subs	r3, #1
 80074a2:	d503      	bpl.n	80074ac <__sfp+0x28>
 80074a4:	6833      	ldr	r3, [r6, #0]
 80074a6:	b30b      	cbz	r3, 80074ec <__sfp+0x68>
 80074a8:	6836      	ldr	r6, [r6, #0]
 80074aa:	e7f7      	b.n	800749c <__sfp+0x18>
 80074ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80074b0:	b9d5      	cbnz	r5, 80074e8 <__sfp+0x64>
 80074b2:	4b16      	ldr	r3, [pc, #88]	; (800750c <__sfp+0x88>)
 80074b4:	60e3      	str	r3, [r4, #12]
 80074b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074ba:	6665      	str	r5, [r4, #100]	; 0x64
 80074bc:	f000 f847 	bl	800754e <__retarget_lock_init_recursive>
 80074c0:	f7ff ff96 	bl	80073f0 <__sfp_lock_release>
 80074c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074cc:	6025      	str	r5, [r4, #0]
 80074ce:	61a5      	str	r5, [r4, #24]
 80074d0:	2208      	movs	r2, #8
 80074d2:	4629      	mov	r1, r5
 80074d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074d8:	f7ff ff24 	bl	8007324 <memset>
 80074dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074e4:	4620      	mov	r0, r4
 80074e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074e8:	3468      	adds	r4, #104	; 0x68
 80074ea:	e7d9      	b.n	80074a0 <__sfp+0x1c>
 80074ec:	2104      	movs	r1, #4
 80074ee:	4638      	mov	r0, r7
 80074f0:	f7ff ff62 	bl	80073b8 <__sfmoreglue>
 80074f4:	4604      	mov	r4, r0
 80074f6:	6030      	str	r0, [r6, #0]
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d1d5      	bne.n	80074a8 <__sfp+0x24>
 80074fc:	f7ff ff78 	bl	80073f0 <__sfp_lock_release>
 8007500:	230c      	movs	r3, #12
 8007502:	603b      	str	r3, [r7, #0]
 8007504:	e7ee      	b.n	80074e4 <__sfp+0x60>
 8007506:	bf00      	nop
 8007508:	080083bc 	.word	0x080083bc
 800750c:	ffff0001 	.word	0xffff0001

08007510 <_fwalk_reent>:
 8007510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007514:	4606      	mov	r6, r0
 8007516:	4688      	mov	r8, r1
 8007518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800751c:	2700      	movs	r7, #0
 800751e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007522:	f1b9 0901 	subs.w	r9, r9, #1
 8007526:	d505      	bpl.n	8007534 <_fwalk_reent+0x24>
 8007528:	6824      	ldr	r4, [r4, #0]
 800752a:	2c00      	cmp	r4, #0
 800752c:	d1f7      	bne.n	800751e <_fwalk_reent+0xe>
 800752e:	4638      	mov	r0, r7
 8007530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007534:	89ab      	ldrh	r3, [r5, #12]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d907      	bls.n	800754a <_fwalk_reent+0x3a>
 800753a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800753e:	3301      	adds	r3, #1
 8007540:	d003      	beq.n	800754a <_fwalk_reent+0x3a>
 8007542:	4629      	mov	r1, r5
 8007544:	4630      	mov	r0, r6
 8007546:	47c0      	blx	r8
 8007548:	4307      	orrs	r7, r0
 800754a:	3568      	adds	r5, #104	; 0x68
 800754c:	e7e9      	b.n	8007522 <_fwalk_reent+0x12>

0800754e <__retarget_lock_init_recursive>:
 800754e:	4770      	bx	lr

08007550 <__retarget_lock_acquire_recursive>:
 8007550:	4770      	bx	lr

08007552 <__retarget_lock_release_recursive>:
 8007552:	4770      	bx	lr

08007554 <_malloc_r>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	1ccd      	adds	r5, r1, #3
 8007558:	f025 0503 	bic.w	r5, r5, #3
 800755c:	3508      	adds	r5, #8
 800755e:	2d0c      	cmp	r5, #12
 8007560:	bf38      	it	cc
 8007562:	250c      	movcc	r5, #12
 8007564:	2d00      	cmp	r5, #0
 8007566:	4606      	mov	r6, r0
 8007568:	db01      	blt.n	800756e <_malloc_r+0x1a>
 800756a:	42a9      	cmp	r1, r5
 800756c:	d903      	bls.n	8007576 <_malloc_r+0x22>
 800756e:	230c      	movs	r3, #12
 8007570:	6033      	str	r3, [r6, #0]
 8007572:	2000      	movs	r0, #0
 8007574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007576:	f000 fd91 	bl	800809c <__malloc_lock>
 800757a:	4921      	ldr	r1, [pc, #132]	; (8007600 <_malloc_r+0xac>)
 800757c:	680a      	ldr	r2, [r1, #0]
 800757e:	4614      	mov	r4, r2
 8007580:	b99c      	cbnz	r4, 80075aa <_malloc_r+0x56>
 8007582:	4f20      	ldr	r7, [pc, #128]	; (8007604 <_malloc_r+0xb0>)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	b923      	cbnz	r3, 8007592 <_malloc_r+0x3e>
 8007588:	4621      	mov	r1, r4
 800758a:	4630      	mov	r0, r6
 800758c:	f000 fb2a 	bl	8007be4 <_sbrk_r>
 8007590:	6038      	str	r0, [r7, #0]
 8007592:	4629      	mov	r1, r5
 8007594:	4630      	mov	r0, r6
 8007596:	f000 fb25 	bl	8007be4 <_sbrk_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	d123      	bne.n	80075e6 <_malloc_r+0x92>
 800759e:	230c      	movs	r3, #12
 80075a0:	6033      	str	r3, [r6, #0]
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 fd80 	bl	80080a8 <__malloc_unlock>
 80075a8:	e7e3      	b.n	8007572 <_malloc_r+0x1e>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	1b5b      	subs	r3, r3, r5
 80075ae:	d417      	bmi.n	80075e0 <_malloc_r+0x8c>
 80075b0:	2b0b      	cmp	r3, #11
 80075b2:	d903      	bls.n	80075bc <_malloc_r+0x68>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	441c      	add	r4, r3
 80075b8:	6025      	str	r5, [r4, #0]
 80075ba:	e004      	b.n	80075c6 <_malloc_r+0x72>
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	42a2      	cmp	r2, r4
 80075c0:	bf0c      	ite	eq
 80075c2:	600b      	streq	r3, [r1, #0]
 80075c4:	6053      	strne	r3, [r2, #4]
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 fd6e 	bl	80080a8 <__malloc_unlock>
 80075cc:	f104 000b 	add.w	r0, r4, #11
 80075d0:	1d23      	adds	r3, r4, #4
 80075d2:	f020 0007 	bic.w	r0, r0, #7
 80075d6:	1ac2      	subs	r2, r0, r3
 80075d8:	d0cc      	beq.n	8007574 <_malloc_r+0x20>
 80075da:	1a1b      	subs	r3, r3, r0
 80075dc:	50a3      	str	r3, [r4, r2]
 80075de:	e7c9      	b.n	8007574 <_malloc_r+0x20>
 80075e0:	4622      	mov	r2, r4
 80075e2:	6864      	ldr	r4, [r4, #4]
 80075e4:	e7cc      	b.n	8007580 <_malloc_r+0x2c>
 80075e6:	1cc4      	adds	r4, r0, #3
 80075e8:	f024 0403 	bic.w	r4, r4, #3
 80075ec:	42a0      	cmp	r0, r4
 80075ee:	d0e3      	beq.n	80075b8 <_malloc_r+0x64>
 80075f0:	1a21      	subs	r1, r4, r0
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 faf6 	bl	8007be4 <_sbrk_r>
 80075f8:	3001      	adds	r0, #1
 80075fa:	d1dd      	bne.n	80075b8 <_malloc_r+0x64>
 80075fc:	e7cf      	b.n	800759e <_malloc_r+0x4a>
 80075fe:	bf00      	nop
 8007600:	200143d0 	.word	0x200143d0
 8007604:	200143d4 	.word	0x200143d4

08007608 <__sfputc_r>:
 8007608:	6893      	ldr	r3, [r2, #8]
 800760a:	3b01      	subs	r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	b410      	push	{r4}
 8007610:	6093      	str	r3, [r2, #8]
 8007612:	da08      	bge.n	8007626 <__sfputc_r+0x1e>
 8007614:	6994      	ldr	r4, [r2, #24]
 8007616:	42a3      	cmp	r3, r4
 8007618:	db01      	blt.n	800761e <__sfputc_r+0x16>
 800761a:	290a      	cmp	r1, #10
 800761c:	d103      	bne.n	8007626 <__sfputc_r+0x1e>
 800761e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007622:	f000 bb33 	b.w	8007c8c <__swbuf_r>
 8007626:	6813      	ldr	r3, [r2, #0]
 8007628:	1c58      	adds	r0, r3, #1
 800762a:	6010      	str	r0, [r2, #0]
 800762c:	7019      	strb	r1, [r3, #0]
 800762e:	4608      	mov	r0, r1
 8007630:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007634:	4770      	bx	lr

08007636 <__sfputs_r>:
 8007636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007638:	4606      	mov	r6, r0
 800763a:	460f      	mov	r7, r1
 800763c:	4614      	mov	r4, r2
 800763e:	18d5      	adds	r5, r2, r3
 8007640:	42ac      	cmp	r4, r5
 8007642:	d101      	bne.n	8007648 <__sfputs_r+0x12>
 8007644:	2000      	movs	r0, #0
 8007646:	e007      	b.n	8007658 <__sfputs_r+0x22>
 8007648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800764c:	463a      	mov	r2, r7
 800764e:	4630      	mov	r0, r6
 8007650:	f7ff ffda 	bl	8007608 <__sfputc_r>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d1f3      	bne.n	8007640 <__sfputs_r+0xa>
 8007658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800765c <_vfiprintf_r>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	460d      	mov	r5, r1
 8007662:	b09d      	sub	sp, #116	; 0x74
 8007664:	4614      	mov	r4, r2
 8007666:	4698      	mov	r8, r3
 8007668:	4606      	mov	r6, r0
 800766a:	b118      	cbz	r0, 8007674 <_vfiprintf_r+0x18>
 800766c:	6983      	ldr	r3, [r0, #24]
 800766e:	b90b      	cbnz	r3, 8007674 <_vfiprintf_r+0x18>
 8007670:	f7ff fed0 	bl	8007414 <__sinit>
 8007674:	4b89      	ldr	r3, [pc, #548]	; (800789c <_vfiprintf_r+0x240>)
 8007676:	429d      	cmp	r5, r3
 8007678:	d11b      	bne.n	80076b2 <_vfiprintf_r+0x56>
 800767a:	6875      	ldr	r5, [r6, #4]
 800767c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800767e:	07d9      	lsls	r1, r3, #31
 8007680:	d405      	bmi.n	800768e <_vfiprintf_r+0x32>
 8007682:	89ab      	ldrh	r3, [r5, #12]
 8007684:	059a      	lsls	r2, r3, #22
 8007686:	d402      	bmi.n	800768e <_vfiprintf_r+0x32>
 8007688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800768a:	f7ff ff61 	bl	8007550 <__retarget_lock_acquire_recursive>
 800768e:	89ab      	ldrh	r3, [r5, #12]
 8007690:	071b      	lsls	r3, r3, #28
 8007692:	d501      	bpl.n	8007698 <_vfiprintf_r+0x3c>
 8007694:	692b      	ldr	r3, [r5, #16]
 8007696:	b9eb      	cbnz	r3, 80076d4 <_vfiprintf_r+0x78>
 8007698:	4629      	mov	r1, r5
 800769a:	4630      	mov	r0, r6
 800769c:	f000 fb48 	bl	8007d30 <__swsetup_r>
 80076a0:	b1c0      	cbz	r0, 80076d4 <_vfiprintf_r+0x78>
 80076a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076a4:	07dc      	lsls	r4, r3, #31
 80076a6:	d50e      	bpl.n	80076c6 <_vfiprintf_r+0x6a>
 80076a8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ac:	b01d      	add	sp, #116	; 0x74
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	4b7b      	ldr	r3, [pc, #492]	; (80078a0 <_vfiprintf_r+0x244>)
 80076b4:	429d      	cmp	r5, r3
 80076b6:	d101      	bne.n	80076bc <_vfiprintf_r+0x60>
 80076b8:	68b5      	ldr	r5, [r6, #8]
 80076ba:	e7df      	b.n	800767c <_vfiprintf_r+0x20>
 80076bc:	4b79      	ldr	r3, [pc, #484]	; (80078a4 <_vfiprintf_r+0x248>)
 80076be:	429d      	cmp	r5, r3
 80076c0:	bf08      	it	eq
 80076c2:	68f5      	ldreq	r5, [r6, #12]
 80076c4:	e7da      	b.n	800767c <_vfiprintf_r+0x20>
 80076c6:	89ab      	ldrh	r3, [r5, #12]
 80076c8:	0598      	lsls	r0, r3, #22
 80076ca:	d4ed      	bmi.n	80076a8 <_vfiprintf_r+0x4c>
 80076cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ce:	f7ff ff40 	bl	8007552 <__retarget_lock_release_recursive>
 80076d2:	e7e9      	b.n	80076a8 <_vfiprintf_r+0x4c>
 80076d4:	2300      	movs	r3, #0
 80076d6:	9309      	str	r3, [sp, #36]	; 0x24
 80076d8:	2320      	movs	r3, #32
 80076da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076de:	f8cd 800c 	str.w	r8, [sp, #12]
 80076e2:	2330      	movs	r3, #48	; 0x30
 80076e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80078a8 <_vfiprintf_r+0x24c>
 80076e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076ec:	f04f 0901 	mov.w	r9, #1
 80076f0:	4623      	mov	r3, r4
 80076f2:	469a      	mov	sl, r3
 80076f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076f8:	b10a      	cbz	r2, 80076fe <_vfiprintf_r+0xa2>
 80076fa:	2a25      	cmp	r2, #37	; 0x25
 80076fc:	d1f9      	bne.n	80076f2 <_vfiprintf_r+0x96>
 80076fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007702:	d00b      	beq.n	800771c <_vfiprintf_r+0xc0>
 8007704:	465b      	mov	r3, fp
 8007706:	4622      	mov	r2, r4
 8007708:	4629      	mov	r1, r5
 800770a:	4630      	mov	r0, r6
 800770c:	f7ff ff93 	bl	8007636 <__sfputs_r>
 8007710:	3001      	adds	r0, #1
 8007712:	f000 80aa 	beq.w	800786a <_vfiprintf_r+0x20e>
 8007716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007718:	445a      	add	r2, fp
 800771a:	9209      	str	r2, [sp, #36]	; 0x24
 800771c:	f89a 3000 	ldrb.w	r3, [sl]
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 80a2 	beq.w	800786a <_vfiprintf_r+0x20e>
 8007726:	2300      	movs	r3, #0
 8007728:	f04f 32ff 	mov.w	r2, #4294967295
 800772c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007730:	f10a 0a01 	add.w	sl, sl, #1
 8007734:	9304      	str	r3, [sp, #16]
 8007736:	9307      	str	r3, [sp, #28]
 8007738:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800773c:	931a      	str	r3, [sp, #104]	; 0x68
 800773e:	4654      	mov	r4, sl
 8007740:	2205      	movs	r2, #5
 8007742:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007746:	4858      	ldr	r0, [pc, #352]	; (80078a8 <_vfiprintf_r+0x24c>)
 8007748:	f7f8 fdaa 	bl	80002a0 <memchr>
 800774c:	9a04      	ldr	r2, [sp, #16]
 800774e:	b9d8      	cbnz	r0, 8007788 <_vfiprintf_r+0x12c>
 8007750:	06d1      	lsls	r1, r2, #27
 8007752:	bf44      	itt	mi
 8007754:	2320      	movmi	r3, #32
 8007756:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800775a:	0713      	lsls	r3, r2, #28
 800775c:	bf44      	itt	mi
 800775e:	232b      	movmi	r3, #43	; 0x2b
 8007760:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007764:	f89a 3000 	ldrb.w	r3, [sl]
 8007768:	2b2a      	cmp	r3, #42	; 0x2a
 800776a:	d015      	beq.n	8007798 <_vfiprintf_r+0x13c>
 800776c:	9a07      	ldr	r2, [sp, #28]
 800776e:	4654      	mov	r4, sl
 8007770:	2000      	movs	r0, #0
 8007772:	f04f 0c0a 	mov.w	ip, #10
 8007776:	4621      	mov	r1, r4
 8007778:	f811 3b01 	ldrb.w	r3, [r1], #1
 800777c:	3b30      	subs	r3, #48	; 0x30
 800777e:	2b09      	cmp	r3, #9
 8007780:	d94e      	bls.n	8007820 <_vfiprintf_r+0x1c4>
 8007782:	b1b0      	cbz	r0, 80077b2 <_vfiprintf_r+0x156>
 8007784:	9207      	str	r2, [sp, #28]
 8007786:	e014      	b.n	80077b2 <_vfiprintf_r+0x156>
 8007788:	eba0 0308 	sub.w	r3, r0, r8
 800778c:	fa09 f303 	lsl.w	r3, r9, r3
 8007790:	4313      	orrs	r3, r2
 8007792:	9304      	str	r3, [sp, #16]
 8007794:	46a2      	mov	sl, r4
 8007796:	e7d2      	b.n	800773e <_vfiprintf_r+0xe2>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	1d19      	adds	r1, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	9103      	str	r1, [sp, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	bfbb      	ittet	lt
 80077a4:	425b      	neglt	r3, r3
 80077a6:	f042 0202 	orrlt.w	r2, r2, #2
 80077aa:	9307      	strge	r3, [sp, #28]
 80077ac:	9307      	strlt	r3, [sp, #28]
 80077ae:	bfb8      	it	lt
 80077b0:	9204      	strlt	r2, [sp, #16]
 80077b2:	7823      	ldrb	r3, [r4, #0]
 80077b4:	2b2e      	cmp	r3, #46	; 0x2e
 80077b6:	d10c      	bne.n	80077d2 <_vfiprintf_r+0x176>
 80077b8:	7863      	ldrb	r3, [r4, #1]
 80077ba:	2b2a      	cmp	r3, #42	; 0x2a
 80077bc:	d135      	bne.n	800782a <_vfiprintf_r+0x1ce>
 80077be:	9b03      	ldr	r3, [sp, #12]
 80077c0:	1d1a      	adds	r2, r3, #4
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	9203      	str	r2, [sp, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfb8      	it	lt
 80077ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80077ce:	3402      	adds	r4, #2
 80077d0:	9305      	str	r3, [sp, #20]
 80077d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078b8 <_vfiprintf_r+0x25c>
 80077d6:	7821      	ldrb	r1, [r4, #0]
 80077d8:	2203      	movs	r2, #3
 80077da:	4650      	mov	r0, sl
 80077dc:	f7f8 fd60 	bl	80002a0 <memchr>
 80077e0:	b140      	cbz	r0, 80077f4 <_vfiprintf_r+0x198>
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	eba0 000a 	sub.w	r0, r0, sl
 80077e8:	fa03 f000 	lsl.w	r0, r3, r0
 80077ec:	9b04      	ldr	r3, [sp, #16]
 80077ee:	4303      	orrs	r3, r0
 80077f0:	3401      	adds	r4, #1
 80077f2:	9304      	str	r3, [sp, #16]
 80077f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f8:	482c      	ldr	r0, [pc, #176]	; (80078ac <_vfiprintf_r+0x250>)
 80077fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077fe:	2206      	movs	r2, #6
 8007800:	f7f8 fd4e 	bl	80002a0 <memchr>
 8007804:	2800      	cmp	r0, #0
 8007806:	d03f      	beq.n	8007888 <_vfiprintf_r+0x22c>
 8007808:	4b29      	ldr	r3, [pc, #164]	; (80078b0 <_vfiprintf_r+0x254>)
 800780a:	bb1b      	cbnz	r3, 8007854 <_vfiprintf_r+0x1f8>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	3307      	adds	r3, #7
 8007810:	f023 0307 	bic.w	r3, r3, #7
 8007814:	3308      	adds	r3, #8
 8007816:	9303      	str	r3, [sp, #12]
 8007818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781a:	443b      	add	r3, r7
 800781c:	9309      	str	r3, [sp, #36]	; 0x24
 800781e:	e767      	b.n	80076f0 <_vfiprintf_r+0x94>
 8007820:	fb0c 3202 	mla	r2, ip, r2, r3
 8007824:	460c      	mov	r4, r1
 8007826:	2001      	movs	r0, #1
 8007828:	e7a5      	b.n	8007776 <_vfiprintf_r+0x11a>
 800782a:	2300      	movs	r3, #0
 800782c:	3401      	adds	r4, #1
 800782e:	9305      	str	r3, [sp, #20]
 8007830:	4619      	mov	r1, r3
 8007832:	f04f 0c0a 	mov.w	ip, #10
 8007836:	4620      	mov	r0, r4
 8007838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800783c:	3a30      	subs	r2, #48	; 0x30
 800783e:	2a09      	cmp	r2, #9
 8007840:	d903      	bls.n	800784a <_vfiprintf_r+0x1ee>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d0c5      	beq.n	80077d2 <_vfiprintf_r+0x176>
 8007846:	9105      	str	r1, [sp, #20]
 8007848:	e7c3      	b.n	80077d2 <_vfiprintf_r+0x176>
 800784a:	fb0c 2101 	mla	r1, ip, r1, r2
 800784e:	4604      	mov	r4, r0
 8007850:	2301      	movs	r3, #1
 8007852:	e7f0      	b.n	8007836 <_vfiprintf_r+0x1da>
 8007854:	ab03      	add	r3, sp, #12
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	462a      	mov	r2, r5
 800785a:	4b16      	ldr	r3, [pc, #88]	; (80078b4 <_vfiprintf_r+0x258>)
 800785c:	a904      	add	r1, sp, #16
 800785e:	4630      	mov	r0, r6
 8007860:	f3af 8000 	nop.w
 8007864:	4607      	mov	r7, r0
 8007866:	1c78      	adds	r0, r7, #1
 8007868:	d1d6      	bne.n	8007818 <_vfiprintf_r+0x1bc>
 800786a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800786c:	07d9      	lsls	r1, r3, #31
 800786e:	d405      	bmi.n	800787c <_vfiprintf_r+0x220>
 8007870:	89ab      	ldrh	r3, [r5, #12]
 8007872:	059a      	lsls	r2, r3, #22
 8007874:	d402      	bmi.n	800787c <_vfiprintf_r+0x220>
 8007876:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007878:	f7ff fe6b 	bl	8007552 <__retarget_lock_release_recursive>
 800787c:	89ab      	ldrh	r3, [r5, #12]
 800787e:	065b      	lsls	r3, r3, #25
 8007880:	f53f af12 	bmi.w	80076a8 <_vfiprintf_r+0x4c>
 8007884:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007886:	e711      	b.n	80076ac <_vfiprintf_r+0x50>
 8007888:	ab03      	add	r3, sp, #12
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	462a      	mov	r2, r5
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <_vfiprintf_r+0x258>)
 8007890:	a904      	add	r1, sp, #16
 8007892:	4630      	mov	r0, r6
 8007894:	f000 f880 	bl	8007998 <_printf_i>
 8007898:	e7e4      	b.n	8007864 <_vfiprintf_r+0x208>
 800789a:	bf00      	nop
 800789c:	080083e0 	.word	0x080083e0
 80078a0:	08008400 	.word	0x08008400
 80078a4:	080083c0 	.word	0x080083c0
 80078a8:	08008420 	.word	0x08008420
 80078ac:	0800842a 	.word	0x0800842a
 80078b0:	00000000 	.word	0x00000000
 80078b4:	08007637 	.word	0x08007637
 80078b8:	08008426 	.word	0x08008426

080078bc <_printf_common>:
 80078bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078c0:	4616      	mov	r6, r2
 80078c2:	4699      	mov	r9, r3
 80078c4:	688a      	ldr	r2, [r1, #8]
 80078c6:	690b      	ldr	r3, [r1, #16]
 80078c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078cc:	4293      	cmp	r3, r2
 80078ce:	bfb8      	it	lt
 80078d0:	4613      	movlt	r3, r2
 80078d2:	6033      	str	r3, [r6, #0]
 80078d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078d8:	4607      	mov	r7, r0
 80078da:	460c      	mov	r4, r1
 80078dc:	b10a      	cbz	r2, 80078e2 <_printf_common+0x26>
 80078de:	3301      	adds	r3, #1
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	0699      	lsls	r1, r3, #26
 80078e6:	bf42      	ittt	mi
 80078e8:	6833      	ldrmi	r3, [r6, #0]
 80078ea:	3302      	addmi	r3, #2
 80078ec:	6033      	strmi	r3, [r6, #0]
 80078ee:	6825      	ldr	r5, [r4, #0]
 80078f0:	f015 0506 	ands.w	r5, r5, #6
 80078f4:	d106      	bne.n	8007904 <_printf_common+0x48>
 80078f6:	f104 0a19 	add.w	sl, r4, #25
 80078fa:	68e3      	ldr	r3, [r4, #12]
 80078fc:	6832      	ldr	r2, [r6, #0]
 80078fe:	1a9b      	subs	r3, r3, r2
 8007900:	42ab      	cmp	r3, r5
 8007902:	dc26      	bgt.n	8007952 <_printf_common+0x96>
 8007904:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007908:	1e13      	subs	r3, r2, #0
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	bf18      	it	ne
 800790e:	2301      	movne	r3, #1
 8007910:	0692      	lsls	r2, r2, #26
 8007912:	d42b      	bmi.n	800796c <_printf_common+0xb0>
 8007914:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007918:	4649      	mov	r1, r9
 800791a:	4638      	mov	r0, r7
 800791c:	47c0      	blx	r8
 800791e:	3001      	adds	r0, #1
 8007920:	d01e      	beq.n	8007960 <_printf_common+0xa4>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	68e5      	ldr	r5, [r4, #12]
 8007926:	6832      	ldr	r2, [r6, #0]
 8007928:	f003 0306 	and.w	r3, r3, #6
 800792c:	2b04      	cmp	r3, #4
 800792e:	bf08      	it	eq
 8007930:	1aad      	subeq	r5, r5, r2
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	6922      	ldr	r2, [r4, #16]
 8007936:	bf0c      	ite	eq
 8007938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800793c:	2500      	movne	r5, #0
 800793e:	4293      	cmp	r3, r2
 8007940:	bfc4      	itt	gt
 8007942:	1a9b      	subgt	r3, r3, r2
 8007944:	18ed      	addgt	r5, r5, r3
 8007946:	2600      	movs	r6, #0
 8007948:	341a      	adds	r4, #26
 800794a:	42b5      	cmp	r5, r6
 800794c:	d11a      	bne.n	8007984 <_printf_common+0xc8>
 800794e:	2000      	movs	r0, #0
 8007950:	e008      	b.n	8007964 <_printf_common+0xa8>
 8007952:	2301      	movs	r3, #1
 8007954:	4652      	mov	r2, sl
 8007956:	4649      	mov	r1, r9
 8007958:	4638      	mov	r0, r7
 800795a:	47c0      	blx	r8
 800795c:	3001      	adds	r0, #1
 800795e:	d103      	bne.n	8007968 <_printf_common+0xac>
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007968:	3501      	adds	r5, #1
 800796a:	e7c6      	b.n	80078fa <_printf_common+0x3e>
 800796c:	18e1      	adds	r1, r4, r3
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	2030      	movs	r0, #48	; 0x30
 8007972:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007976:	4422      	add	r2, r4
 8007978:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800797c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007980:	3302      	adds	r3, #2
 8007982:	e7c7      	b.n	8007914 <_printf_common+0x58>
 8007984:	2301      	movs	r3, #1
 8007986:	4622      	mov	r2, r4
 8007988:	4649      	mov	r1, r9
 800798a:	4638      	mov	r0, r7
 800798c:	47c0      	blx	r8
 800798e:	3001      	adds	r0, #1
 8007990:	d0e6      	beq.n	8007960 <_printf_common+0xa4>
 8007992:	3601      	adds	r6, #1
 8007994:	e7d9      	b.n	800794a <_printf_common+0x8e>
	...

08007998 <_printf_i>:
 8007998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	460c      	mov	r4, r1
 800799e:	4691      	mov	r9, r2
 80079a0:	7e27      	ldrb	r7, [r4, #24]
 80079a2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079a4:	2f78      	cmp	r7, #120	; 0x78
 80079a6:	4680      	mov	r8, r0
 80079a8:	469a      	mov	sl, r3
 80079aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079ae:	d807      	bhi.n	80079c0 <_printf_i+0x28>
 80079b0:	2f62      	cmp	r7, #98	; 0x62
 80079b2:	d80a      	bhi.n	80079ca <_printf_i+0x32>
 80079b4:	2f00      	cmp	r7, #0
 80079b6:	f000 80d8 	beq.w	8007b6a <_printf_i+0x1d2>
 80079ba:	2f58      	cmp	r7, #88	; 0x58
 80079bc:	f000 80a3 	beq.w	8007b06 <_printf_i+0x16e>
 80079c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80079c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079c8:	e03a      	b.n	8007a40 <_printf_i+0xa8>
 80079ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079ce:	2b15      	cmp	r3, #21
 80079d0:	d8f6      	bhi.n	80079c0 <_printf_i+0x28>
 80079d2:	a001      	add	r0, pc, #4	; (adr r0, 80079d8 <_printf_i+0x40>)
 80079d4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80079d8:	08007a31 	.word	0x08007a31
 80079dc:	08007a45 	.word	0x08007a45
 80079e0:	080079c1 	.word	0x080079c1
 80079e4:	080079c1 	.word	0x080079c1
 80079e8:	080079c1 	.word	0x080079c1
 80079ec:	080079c1 	.word	0x080079c1
 80079f0:	08007a45 	.word	0x08007a45
 80079f4:	080079c1 	.word	0x080079c1
 80079f8:	080079c1 	.word	0x080079c1
 80079fc:	080079c1 	.word	0x080079c1
 8007a00:	080079c1 	.word	0x080079c1
 8007a04:	08007b51 	.word	0x08007b51
 8007a08:	08007a75 	.word	0x08007a75
 8007a0c:	08007b33 	.word	0x08007b33
 8007a10:	080079c1 	.word	0x080079c1
 8007a14:	080079c1 	.word	0x080079c1
 8007a18:	08007b73 	.word	0x08007b73
 8007a1c:	080079c1 	.word	0x080079c1
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	080079c1 	.word	0x080079c1
 8007a28:	080079c1 	.word	0x080079c1
 8007a2c:	08007b3b 	.word	0x08007b3b
 8007a30:	680b      	ldr	r3, [r1, #0]
 8007a32:	1d1a      	adds	r2, r3, #4
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	600a      	str	r2, [r1, #0]
 8007a38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a40:	2301      	movs	r3, #1
 8007a42:	e0a3      	b.n	8007b8c <_printf_i+0x1f4>
 8007a44:	6825      	ldr	r5, [r4, #0]
 8007a46:	6808      	ldr	r0, [r1, #0]
 8007a48:	062e      	lsls	r6, r5, #24
 8007a4a:	f100 0304 	add.w	r3, r0, #4
 8007a4e:	d50a      	bpl.n	8007a66 <_printf_i+0xce>
 8007a50:	6805      	ldr	r5, [r0, #0]
 8007a52:	600b      	str	r3, [r1, #0]
 8007a54:	2d00      	cmp	r5, #0
 8007a56:	da03      	bge.n	8007a60 <_printf_i+0xc8>
 8007a58:	232d      	movs	r3, #45	; 0x2d
 8007a5a:	426d      	negs	r5, r5
 8007a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a60:	485e      	ldr	r0, [pc, #376]	; (8007bdc <_printf_i+0x244>)
 8007a62:	230a      	movs	r3, #10
 8007a64:	e019      	b.n	8007a9a <_printf_i+0x102>
 8007a66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007a6a:	6805      	ldr	r5, [r0, #0]
 8007a6c:	600b      	str	r3, [r1, #0]
 8007a6e:	bf18      	it	ne
 8007a70:	b22d      	sxthne	r5, r5
 8007a72:	e7ef      	b.n	8007a54 <_printf_i+0xbc>
 8007a74:	680b      	ldr	r3, [r1, #0]
 8007a76:	6825      	ldr	r5, [r4, #0]
 8007a78:	1d18      	adds	r0, r3, #4
 8007a7a:	6008      	str	r0, [r1, #0]
 8007a7c:	0628      	lsls	r0, r5, #24
 8007a7e:	d501      	bpl.n	8007a84 <_printf_i+0xec>
 8007a80:	681d      	ldr	r5, [r3, #0]
 8007a82:	e002      	b.n	8007a8a <_printf_i+0xf2>
 8007a84:	0669      	lsls	r1, r5, #25
 8007a86:	d5fb      	bpl.n	8007a80 <_printf_i+0xe8>
 8007a88:	881d      	ldrh	r5, [r3, #0]
 8007a8a:	4854      	ldr	r0, [pc, #336]	; (8007bdc <_printf_i+0x244>)
 8007a8c:	2f6f      	cmp	r7, #111	; 0x6f
 8007a8e:	bf0c      	ite	eq
 8007a90:	2308      	moveq	r3, #8
 8007a92:	230a      	movne	r3, #10
 8007a94:	2100      	movs	r1, #0
 8007a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a9a:	6866      	ldr	r6, [r4, #4]
 8007a9c:	60a6      	str	r6, [r4, #8]
 8007a9e:	2e00      	cmp	r6, #0
 8007aa0:	bfa2      	ittt	ge
 8007aa2:	6821      	ldrge	r1, [r4, #0]
 8007aa4:	f021 0104 	bicge.w	r1, r1, #4
 8007aa8:	6021      	strge	r1, [r4, #0]
 8007aaa:	b90d      	cbnz	r5, 8007ab0 <_printf_i+0x118>
 8007aac:	2e00      	cmp	r6, #0
 8007aae:	d04d      	beq.n	8007b4c <_printf_i+0x1b4>
 8007ab0:	4616      	mov	r6, r2
 8007ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8007aba:	5dc7      	ldrb	r7, [r0, r7]
 8007abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ac0:	462f      	mov	r7, r5
 8007ac2:	42bb      	cmp	r3, r7
 8007ac4:	460d      	mov	r5, r1
 8007ac6:	d9f4      	bls.n	8007ab2 <_printf_i+0x11a>
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d10b      	bne.n	8007ae4 <_printf_i+0x14c>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	07df      	lsls	r7, r3, #31
 8007ad0:	d508      	bpl.n	8007ae4 <_printf_i+0x14c>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	6861      	ldr	r1, [r4, #4]
 8007ad6:	4299      	cmp	r1, r3
 8007ad8:	bfde      	ittt	le
 8007ada:	2330      	movle	r3, #48	; 0x30
 8007adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ae4:	1b92      	subs	r2, r2, r6
 8007ae6:	6122      	str	r2, [r4, #16]
 8007ae8:	f8cd a000 	str.w	sl, [sp]
 8007aec:	464b      	mov	r3, r9
 8007aee:	aa03      	add	r2, sp, #12
 8007af0:	4621      	mov	r1, r4
 8007af2:	4640      	mov	r0, r8
 8007af4:	f7ff fee2 	bl	80078bc <_printf_common>
 8007af8:	3001      	adds	r0, #1
 8007afa:	d14c      	bne.n	8007b96 <_printf_i+0x1fe>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	b004      	add	sp, #16
 8007b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b06:	4835      	ldr	r0, [pc, #212]	; (8007bdc <_printf_i+0x244>)
 8007b08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	680e      	ldr	r6, [r1, #0]
 8007b10:	061f      	lsls	r7, r3, #24
 8007b12:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b16:	600e      	str	r6, [r1, #0]
 8007b18:	d514      	bpl.n	8007b44 <_printf_i+0x1ac>
 8007b1a:	07d9      	lsls	r1, r3, #31
 8007b1c:	bf44      	itt	mi
 8007b1e:	f043 0320 	orrmi.w	r3, r3, #32
 8007b22:	6023      	strmi	r3, [r4, #0]
 8007b24:	b91d      	cbnz	r5, 8007b2e <_printf_i+0x196>
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	f023 0320 	bic.w	r3, r3, #32
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	2310      	movs	r3, #16
 8007b30:	e7b0      	b.n	8007a94 <_printf_i+0xfc>
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	f043 0320 	orr.w	r3, r3, #32
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	2378      	movs	r3, #120	; 0x78
 8007b3c:	4828      	ldr	r0, [pc, #160]	; (8007be0 <_printf_i+0x248>)
 8007b3e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b42:	e7e3      	b.n	8007b0c <_printf_i+0x174>
 8007b44:	065e      	lsls	r6, r3, #25
 8007b46:	bf48      	it	mi
 8007b48:	b2ad      	uxthmi	r5, r5
 8007b4a:	e7e6      	b.n	8007b1a <_printf_i+0x182>
 8007b4c:	4616      	mov	r6, r2
 8007b4e:	e7bb      	b.n	8007ac8 <_printf_i+0x130>
 8007b50:	680b      	ldr	r3, [r1, #0]
 8007b52:	6826      	ldr	r6, [r4, #0]
 8007b54:	6960      	ldr	r0, [r4, #20]
 8007b56:	1d1d      	adds	r5, r3, #4
 8007b58:	600d      	str	r5, [r1, #0]
 8007b5a:	0635      	lsls	r5, r6, #24
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	d501      	bpl.n	8007b64 <_printf_i+0x1cc>
 8007b60:	6018      	str	r0, [r3, #0]
 8007b62:	e002      	b.n	8007b6a <_printf_i+0x1d2>
 8007b64:	0671      	lsls	r1, r6, #25
 8007b66:	d5fb      	bpl.n	8007b60 <_printf_i+0x1c8>
 8007b68:	8018      	strh	r0, [r3, #0]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6123      	str	r3, [r4, #16]
 8007b6e:	4616      	mov	r6, r2
 8007b70:	e7ba      	b.n	8007ae8 <_printf_i+0x150>
 8007b72:	680b      	ldr	r3, [r1, #0]
 8007b74:	1d1a      	adds	r2, r3, #4
 8007b76:	600a      	str	r2, [r1, #0]
 8007b78:	681e      	ldr	r6, [r3, #0]
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4630      	mov	r0, r6
 8007b80:	f7f8 fb8e 	bl	80002a0 <memchr>
 8007b84:	b108      	cbz	r0, 8007b8a <_printf_i+0x1f2>
 8007b86:	1b80      	subs	r0, r0, r6
 8007b88:	6060      	str	r0, [r4, #4]
 8007b8a:	6863      	ldr	r3, [r4, #4]
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b94:	e7a8      	b.n	8007ae8 <_printf_i+0x150>
 8007b96:	6923      	ldr	r3, [r4, #16]
 8007b98:	4632      	mov	r2, r6
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	4640      	mov	r0, r8
 8007b9e:	47d0      	blx	sl
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d0ab      	beq.n	8007afc <_printf_i+0x164>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	079b      	lsls	r3, r3, #30
 8007ba8:	d413      	bmi.n	8007bd2 <_printf_i+0x23a>
 8007baa:	68e0      	ldr	r0, [r4, #12]
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	4298      	cmp	r0, r3
 8007bb0:	bfb8      	it	lt
 8007bb2:	4618      	movlt	r0, r3
 8007bb4:	e7a4      	b.n	8007b00 <_printf_i+0x168>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4632      	mov	r2, r6
 8007bba:	4649      	mov	r1, r9
 8007bbc:	4640      	mov	r0, r8
 8007bbe:	47d0      	blx	sl
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d09b      	beq.n	8007afc <_printf_i+0x164>
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	68e3      	ldr	r3, [r4, #12]
 8007bc8:	9903      	ldr	r1, [sp, #12]
 8007bca:	1a5b      	subs	r3, r3, r1
 8007bcc:	42ab      	cmp	r3, r5
 8007bce:	dcf2      	bgt.n	8007bb6 <_printf_i+0x21e>
 8007bd0:	e7eb      	b.n	8007baa <_printf_i+0x212>
 8007bd2:	2500      	movs	r5, #0
 8007bd4:	f104 0619 	add.w	r6, r4, #25
 8007bd8:	e7f5      	b.n	8007bc6 <_printf_i+0x22e>
 8007bda:	bf00      	nop
 8007bdc:	08008431 	.word	0x08008431
 8007be0:	08008442 	.word	0x08008442

08007be4 <_sbrk_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4d06      	ldr	r5, [pc, #24]	; (8007c00 <_sbrk_r+0x1c>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	4604      	mov	r4, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	602b      	str	r3, [r5, #0]
 8007bf0:	f7f8 fe20 	bl	8000834 <_sbrk>
 8007bf4:	1c43      	adds	r3, r0, #1
 8007bf6:	d102      	bne.n	8007bfe <_sbrk_r+0x1a>
 8007bf8:	682b      	ldr	r3, [r5, #0]
 8007bfa:	b103      	cbz	r3, 8007bfe <_sbrk_r+0x1a>
 8007bfc:	6023      	str	r3, [r4, #0]
 8007bfe:	bd38      	pop	{r3, r4, r5, pc}
 8007c00:	2001451c 	.word	0x2001451c

08007c04 <__sread>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	460c      	mov	r4, r1
 8007c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c0c:	f000 faa2 	bl	8008154 <_read_r>
 8007c10:	2800      	cmp	r0, #0
 8007c12:	bfab      	itete	ge
 8007c14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c16:	89a3      	ldrhlt	r3, [r4, #12]
 8007c18:	181b      	addge	r3, r3, r0
 8007c1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c1e:	bfac      	ite	ge
 8007c20:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c22:	81a3      	strhlt	r3, [r4, #12]
 8007c24:	bd10      	pop	{r4, pc}

08007c26 <__swrite>:
 8007c26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2a:	461f      	mov	r7, r3
 8007c2c:	898b      	ldrh	r3, [r1, #12]
 8007c2e:	05db      	lsls	r3, r3, #23
 8007c30:	4605      	mov	r5, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	4616      	mov	r6, r2
 8007c36:	d505      	bpl.n	8007c44 <__swrite+0x1e>
 8007c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f000 f9b6 	bl	8007fb0 <_lseek_r>
 8007c44:	89a3      	ldrh	r3, [r4, #12]
 8007c46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c4e:	81a3      	strh	r3, [r4, #12]
 8007c50:	4632      	mov	r2, r6
 8007c52:	463b      	mov	r3, r7
 8007c54:	4628      	mov	r0, r5
 8007c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c5a:	f7ff bb0b 	b.w	8007274 <_write_r>

08007c5e <__sseek>:
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	460c      	mov	r4, r1
 8007c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c66:	f000 f9a3 	bl	8007fb0 <_lseek_r>
 8007c6a:	1c43      	adds	r3, r0, #1
 8007c6c:	89a3      	ldrh	r3, [r4, #12]
 8007c6e:	bf15      	itete	ne
 8007c70:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c7a:	81a3      	strheq	r3, [r4, #12]
 8007c7c:	bf18      	it	ne
 8007c7e:	81a3      	strhne	r3, [r4, #12]
 8007c80:	bd10      	pop	{r4, pc}

08007c82 <__sclose>:
 8007c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c86:	f000 b8c1 	b.w	8007e0c <_close_r>
	...

08007c8c <__swbuf_r>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	460e      	mov	r6, r1
 8007c90:	4614      	mov	r4, r2
 8007c92:	4605      	mov	r5, r0
 8007c94:	b118      	cbz	r0, 8007c9e <__swbuf_r+0x12>
 8007c96:	6983      	ldr	r3, [r0, #24]
 8007c98:	b90b      	cbnz	r3, 8007c9e <__swbuf_r+0x12>
 8007c9a:	f7ff fbbb 	bl	8007414 <__sinit>
 8007c9e:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <__swbuf_r+0x98>)
 8007ca0:	429c      	cmp	r4, r3
 8007ca2:	d12b      	bne.n	8007cfc <__swbuf_r+0x70>
 8007ca4:	686c      	ldr	r4, [r5, #4]
 8007ca6:	69a3      	ldr	r3, [r4, #24]
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	071a      	lsls	r2, r3, #28
 8007cae:	d52f      	bpl.n	8007d10 <__swbuf_r+0x84>
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	b36b      	cbz	r3, 8007d10 <__swbuf_r+0x84>
 8007cb4:	6923      	ldr	r3, [r4, #16]
 8007cb6:	6820      	ldr	r0, [r4, #0]
 8007cb8:	1ac0      	subs	r0, r0, r3
 8007cba:	6963      	ldr	r3, [r4, #20]
 8007cbc:	b2f6      	uxtb	r6, r6
 8007cbe:	4283      	cmp	r3, r0
 8007cc0:	4637      	mov	r7, r6
 8007cc2:	dc04      	bgt.n	8007cce <__swbuf_r+0x42>
 8007cc4:	4621      	mov	r1, r4
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f000 f936 	bl	8007f38 <_fflush_r>
 8007ccc:	bb30      	cbnz	r0, 8007d1c <__swbuf_r+0x90>
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	60a3      	str	r3, [r4, #8]
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	6022      	str	r2, [r4, #0]
 8007cda:	701e      	strb	r6, [r3, #0]
 8007cdc:	6963      	ldr	r3, [r4, #20]
 8007cde:	3001      	adds	r0, #1
 8007ce0:	4283      	cmp	r3, r0
 8007ce2:	d004      	beq.n	8007cee <__swbuf_r+0x62>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	07db      	lsls	r3, r3, #31
 8007ce8:	d506      	bpl.n	8007cf8 <__swbuf_r+0x6c>
 8007cea:	2e0a      	cmp	r6, #10
 8007cec:	d104      	bne.n	8007cf8 <__swbuf_r+0x6c>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	f000 f921 	bl	8007f38 <_fflush_r>
 8007cf6:	b988      	cbnz	r0, 8007d1c <__swbuf_r+0x90>
 8007cf8:	4638      	mov	r0, r7
 8007cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <__swbuf_r+0x9c>)
 8007cfe:	429c      	cmp	r4, r3
 8007d00:	d101      	bne.n	8007d06 <__swbuf_r+0x7a>
 8007d02:	68ac      	ldr	r4, [r5, #8]
 8007d04:	e7cf      	b.n	8007ca6 <__swbuf_r+0x1a>
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <__swbuf_r+0xa0>)
 8007d08:	429c      	cmp	r4, r3
 8007d0a:	bf08      	it	eq
 8007d0c:	68ec      	ldreq	r4, [r5, #12]
 8007d0e:	e7ca      	b.n	8007ca6 <__swbuf_r+0x1a>
 8007d10:	4621      	mov	r1, r4
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 f80c 	bl	8007d30 <__swsetup_r>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d0cb      	beq.n	8007cb4 <__swbuf_r+0x28>
 8007d1c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d20:	e7ea      	b.n	8007cf8 <__swbuf_r+0x6c>
 8007d22:	bf00      	nop
 8007d24:	080083e0 	.word	0x080083e0
 8007d28:	08008400 	.word	0x08008400
 8007d2c:	080083c0 	.word	0x080083c0

08007d30 <__swsetup_r>:
 8007d30:	4b32      	ldr	r3, [pc, #200]	; (8007dfc <__swsetup_r+0xcc>)
 8007d32:	b570      	push	{r4, r5, r6, lr}
 8007d34:	681d      	ldr	r5, [r3, #0]
 8007d36:	4606      	mov	r6, r0
 8007d38:	460c      	mov	r4, r1
 8007d3a:	b125      	cbz	r5, 8007d46 <__swsetup_r+0x16>
 8007d3c:	69ab      	ldr	r3, [r5, #24]
 8007d3e:	b913      	cbnz	r3, 8007d46 <__swsetup_r+0x16>
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7ff fb67 	bl	8007414 <__sinit>
 8007d46:	4b2e      	ldr	r3, [pc, #184]	; (8007e00 <__swsetup_r+0xd0>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	d10f      	bne.n	8007d6c <__swsetup_r+0x3c>
 8007d4c:	686c      	ldr	r4, [r5, #4]
 8007d4e:	89a3      	ldrh	r3, [r4, #12]
 8007d50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d54:	0719      	lsls	r1, r3, #28
 8007d56:	d42c      	bmi.n	8007db2 <__swsetup_r+0x82>
 8007d58:	06dd      	lsls	r5, r3, #27
 8007d5a:	d411      	bmi.n	8007d80 <__swsetup_r+0x50>
 8007d5c:	2309      	movs	r3, #9
 8007d5e:	6033      	str	r3, [r6, #0]
 8007d60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	f04f 30ff 	mov.w	r0, #4294967295
 8007d6a:	e03e      	b.n	8007dea <__swsetup_r+0xba>
 8007d6c:	4b25      	ldr	r3, [pc, #148]	; (8007e04 <__swsetup_r+0xd4>)
 8007d6e:	429c      	cmp	r4, r3
 8007d70:	d101      	bne.n	8007d76 <__swsetup_r+0x46>
 8007d72:	68ac      	ldr	r4, [r5, #8]
 8007d74:	e7eb      	b.n	8007d4e <__swsetup_r+0x1e>
 8007d76:	4b24      	ldr	r3, [pc, #144]	; (8007e08 <__swsetup_r+0xd8>)
 8007d78:	429c      	cmp	r4, r3
 8007d7a:	bf08      	it	eq
 8007d7c:	68ec      	ldreq	r4, [r5, #12]
 8007d7e:	e7e6      	b.n	8007d4e <__swsetup_r+0x1e>
 8007d80:	0758      	lsls	r0, r3, #29
 8007d82:	d512      	bpl.n	8007daa <__swsetup_r+0x7a>
 8007d84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d86:	b141      	cbz	r1, 8007d9a <__swsetup_r+0x6a>
 8007d88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d8c:	4299      	cmp	r1, r3
 8007d8e:	d002      	beq.n	8007d96 <__swsetup_r+0x66>
 8007d90:	4630      	mov	r0, r6
 8007d92:	f000 f98f 	bl	80080b4 <_free_r>
 8007d96:	2300      	movs	r3, #0
 8007d98:	6363      	str	r3, [r4, #52]	; 0x34
 8007d9a:	89a3      	ldrh	r3, [r4, #12]
 8007d9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	2300      	movs	r3, #0
 8007da4:	6063      	str	r3, [r4, #4]
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	89a3      	ldrh	r3, [r4, #12]
 8007dac:	f043 0308 	orr.w	r3, r3, #8
 8007db0:	81a3      	strh	r3, [r4, #12]
 8007db2:	6923      	ldr	r3, [r4, #16]
 8007db4:	b94b      	cbnz	r3, 8007dca <__swsetup_r+0x9a>
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dc0:	d003      	beq.n	8007dca <__swsetup_r+0x9a>
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 f929 	bl	800801c <__smakebuf_r>
 8007dca:	89a0      	ldrh	r0, [r4, #12]
 8007dcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd0:	f010 0301 	ands.w	r3, r0, #1
 8007dd4:	d00a      	beq.n	8007dec <__swsetup_r+0xbc>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60a3      	str	r3, [r4, #8]
 8007dda:	6963      	ldr	r3, [r4, #20]
 8007ddc:	425b      	negs	r3, r3
 8007dde:	61a3      	str	r3, [r4, #24]
 8007de0:	6923      	ldr	r3, [r4, #16]
 8007de2:	b943      	cbnz	r3, 8007df6 <__swsetup_r+0xc6>
 8007de4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007de8:	d1ba      	bne.n	8007d60 <__swsetup_r+0x30>
 8007dea:	bd70      	pop	{r4, r5, r6, pc}
 8007dec:	0781      	lsls	r1, r0, #30
 8007dee:	bf58      	it	pl
 8007df0:	6963      	ldrpl	r3, [r4, #20]
 8007df2:	60a3      	str	r3, [r4, #8]
 8007df4:	e7f4      	b.n	8007de0 <__swsetup_r+0xb0>
 8007df6:	2000      	movs	r0, #0
 8007df8:	e7f7      	b.n	8007dea <__swsetup_r+0xba>
 8007dfa:	bf00      	nop
 8007dfc:	20000014 	.word	0x20000014
 8007e00:	080083e0 	.word	0x080083e0
 8007e04:	08008400 	.word	0x08008400
 8007e08:	080083c0 	.word	0x080083c0

08007e0c <_close_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	; (8007e28 <_close_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7f8 fcd7 	bl	80007ca <_close>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_close_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_close_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	2001451c 	.word	0x2001451c

08007e2c <__sflush_r>:
 8007e2c:	898a      	ldrh	r2, [r1, #12]
 8007e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e32:	4605      	mov	r5, r0
 8007e34:	0710      	lsls	r0, r2, #28
 8007e36:	460c      	mov	r4, r1
 8007e38:	d458      	bmi.n	8007eec <__sflush_r+0xc0>
 8007e3a:	684b      	ldr	r3, [r1, #4]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	dc05      	bgt.n	8007e4c <__sflush_r+0x20>
 8007e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	dc02      	bgt.n	8007e4c <__sflush_r+0x20>
 8007e46:	2000      	movs	r0, #0
 8007e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	d0f9      	beq.n	8007e46 <__sflush_r+0x1a>
 8007e52:	2300      	movs	r3, #0
 8007e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e58:	682f      	ldr	r7, [r5, #0]
 8007e5a:	602b      	str	r3, [r5, #0]
 8007e5c:	d032      	beq.n	8007ec4 <__sflush_r+0x98>
 8007e5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e60:	89a3      	ldrh	r3, [r4, #12]
 8007e62:	075a      	lsls	r2, r3, #29
 8007e64:	d505      	bpl.n	8007e72 <__sflush_r+0x46>
 8007e66:	6863      	ldr	r3, [r4, #4]
 8007e68:	1ac0      	subs	r0, r0, r3
 8007e6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e6c:	b10b      	cbz	r3, 8007e72 <__sflush_r+0x46>
 8007e6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e70:	1ac0      	subs	r0, r0, r3
 8007e72:	2300      	movs	r3, #0
 8007e74:	4602      	mov	r2, r0
 8007e76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e78:	6a21      	ldr	r1, [r4, #32]
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	47b0      	blx	r6
 8007e7e:	1c43      	adds	r3, r0, #1
 8007e80:	89a3      	ldrh	r3, [r4, #12]
 8007e82:	d106      	bne.n	8007e92 <__sflush_r+0x66>
 8007e84:	6829      	ldr	r1, [r5, #0]
 8007e86:	291d      	cmp	r1, #29
 8007e88:	d82c      	bhi.n	8007ee4 <__sflush_r+0xb8>
 8007e8a:	4a2a      	ldr	r2, [pc, #168]	; (8007f34 <__sflush_r+0x108>)
 8007e8c:	40ca      	lsrs	r2, r1
 8007e8e:	07d6      	lsls	r6, r2, #31
 8007e90:	d528      	bpl.n	8007ee4 <__sflush_r+0xb8>
 8007e92:	2200      	movs	r2, #0
 8007e94:	6062      	str	r2, [r4, #4]
 8007e96:	04d9      	lsls	r1, r3, #19
 8007e98:	6922      	ldr	r2, [r4, #16]
 8007e9a:	6022      	str	r2, [r4, #0]
 8007e9c:	d504      	bpl.n	8007ea8 <__sflush_r+0x7c>
 8007e9e:	1c42      	adds	r2, r0, #1
 8007ea0:	d101      	bne.n	8007ea6 <__sflush_r+0x7a>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b903      	cbnz	r3, 8007ea8 <__sflush_r+0x7c>
 8007ea6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eaa:	602f      	str	r7, [r5, #0]
 8007eac:	2900      	cmp	r1, #0
 8007eae:	d0ca      	beq.n	8007e46 <__sflush_r+0x1a>
 8007eb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb4:	4299      	cmp	r1, r3
 8007eb6:	d002      	beq.n	8007ebe <__sflush_r+0x92>
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f000 f8fb 	bl	80080b4 <_free_r>
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec2:	e7c1      	b.n	8007e48 <__sflush_r+0x1c>
 8007ec4:	6a21      	ldr	r1, [r4, #32]
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	4628      	mov	r0, r5
 8007eca:	47b0      	blx	r6
 8007ecc:	1c41      	adds	r1, r0, #1
 8007ece:	d1c7      	bne.n	8007e60 <__sflush_r+0x34>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0c4      	beq.n	8007e60 <__sflush_r+0x34>
 8007ed6:	2b1d      	cmp	r3, #29
 8007ed8:	d001      	beq.n	8007ede <__sflush_r+0xb2>
 8007eda:	2b16      	cmp	r3, #22
 8007edc:	d101      	bne.n	8007ee2 <__sflush_r+0xb6>
 8007ede:	602f      	str	r7, [r5, #0]
 8007ee0:	e7b1      	b.n	8007e46 <__sflush_r+0x1a>
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee8:	81a3      	strh	r3, [r4, #12]
 8007eea:	e7ad      	b.n	8007e48 <__sflush_r+0x1c>
 8007eec:	690f      	ldr	r7, [r1, #16]
 8007eee:	2f00      	cmp	r7, #0
 8007ef0:	d0a9      	beq.n	8007e46 <__sflush_r+0x1a>
 8007ef2:	0793      	lsls	r3, r2, #30
 8007ef4:	680e      	ldr	r6, [r1, #0]
 8007ef6:	bf08      	it	eq
 8007ef8:	694b      	ldreq	r3, [r1, #20]
 8007efa:	600f      	str	r7, [r1, #0]
 8007efc:	bf18      	it	ne
 8007efe:	2300      	movne	r3, #0
 8007f00:	eba6 0807 	sub.w	r8, r6, r7
 8007f04:	608b      	str	r3, [r1, #8]
 8007f06:	f1b8 0f00 	cmp.w	r8, #0
 8007f0a:	dd9c      	ble.n	8007e46 <__sflush_r+0x1a>
 8007f0c:	6a21      	ldr	r1, [r4, #32]
 8007f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f10:	4643      	mov	r3, r8
 8007f12:	463a      	mov	r2, r7
 8007f14:	4628      	mov	r0, r5
 8007f16:	47b0      	blx	r6
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	dc06      	bgt.n	8007f2a <__sflush_r+0xfe>
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	e78e      	b.n	8007e48 <__sflush_r+0x1c>
 8007f2a:	4407      	add	r7, r0
 8007f2c:	eba8 0800 	sub.w	r8, r8, r0
 8007f30:	e7e9      	b.n	8007f06 <__sflush_r+0xda>
 8007f32:	bf00      	nop
 8007f34:	20400001 	.word	0x20400001

08007f38 <_fflush_r>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	690b      	ldr	r3, [r1, #16]
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	b913      	cbnz	r3, 8007f48 <_fflush_r+0x10>
 8007f42:	2500      	movs	r5, #0
 8007f44:	4628      	mov	r0, r5
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	b118      	cbz	r0, 8007f52 <_fflush_r+0x1a>
 8007f4a:	6983      	ldr	r3, [r0, #24]
 8007f4c:	b90b      	cbnz	r3, 8007f52 <_fflush_r+0x1a>
 8007f4e:	f7ff fa61 	bl	8007414 <__sinit>
 8007f52:	4b14      	ldr	r3, [pc, #80]	; (8007fa4 <_fflush_r+0x6c>)
 8007f54:	429c      	cmp	r4, r3
 8007f56:	d11b      	bne.n	8007f90 <_fflush_r+0x58>
 8007f58:	686c      	ldr	r4, [r5, #4]
 8007f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0ef      	beq.n	8007f42 <_fflush_r+0xa>
 8007f62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f64:	07d0      	lsls	r0, r2, #31
 8007f66:	d404      	bmi.n	8007f72 <_fflush_r+0x3a>
 8007f68:	0599      	lsls	r1, r3, #22
 8007f6a:	d402      	bmi.n	8007f72 <_fflush_r+0x3a>
 8007f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f6e:	f7ff faef 	bl	8007550 <__retarget_lock_acquire_recursive>
 8007f72:	4628      	mov	r0, r5
 8007f74:	4621      	mov	r1, r4
 8007f76:	f7ff ff59 	bl	8007e2c <__sflush_r>
 8007f7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f7c:	07da      	lsls	r2, r3, #31
 8007f7e:	4605      	mov	r5, r0
 8007f80:	d4e0      	bmi.n	8007f44 <_fflush_r+0xc>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	059b      	lsls	r3, r3, #22
 8007f86:	d4dd      	bmi.n	8007f44 <_fflush_r+0xc>
 8007f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f8a:	f7ff fae2 	bl	8007552 <__retarget_lock_release_recursive>
 8007f8e:	e7d9      	b.n	8007f44 <_fflush_r+0xc>
 8007f90:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <_fflush_r+0x70>)
 8007f92:	429c      	cmp	r4, r3
 8007f94:	d101      	bne.n	8007f9a <_fflush_r+0x62>
 8007f96:	68ac      	ldr	r4, [r5, #8]
 8007f98:	e7df      	b.n	8007f5a <_fflush_r+0x22>
 8007f9a:	4b04      	ldr	r3, [pc, #16]	; (8007fac <_fflush_r+0x74>)
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	bf08      	it	eq
 8007fa0:	68ec      	ldreq	r4, [r5, #12]
 8007fa2:	e7da      	b.n	8007f5a <_fflush_r+0x22>
 8007fa4:	080083e0 	.word	0x080083e0
 8007fa8:	08008400 	.word	0x08008400
 8007fac:	080083c0 	.word	0x080083c0

08007fb0 <_lseek_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d07      	ldr	r5, [pc, #28]	; (8007fd0 <_lseek_r+0x20>)
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	4608      	mov	r0, r1
 8007fb8:	4611      	mov	r1, r2
 8007fba:	2200      	movs	r2, #0
 8007fbc:	602a      	str	r2, [r5, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	f7f8 fc2a 	bl	8000818 <_lseek>
 8007fc4:	1c43      	adds	r3, r0, #1
 8007fc6:	d102      	bne.n	8007fce <_lseek_r+0x1e>
 8007fc8:	682b      	ldr	r3, [r5, #0]
 8007fca:	b103      	cbz	r3, 8007fce <_lseek_r+0x1e>
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	bd38      	pop	{r3, r4, r5, pc}
 8007fd0:	2001451c 	.word	0x2001451c

08007fd4 <__swhatbuf_r>:
 8007fd4:	b570      	push	{r4, r5, r6, lr}
 8007fd6:	460e      	mov	r6, r1
 8007fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fdc:	2900      	cmp	r1, #0
 8007fde:	b096      	sub	sp, #88	; 0x58
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	461d      	mov	r5, r3
 8007fe4:	da07      	bge.n	8007ff6 <__swhatbuf_r+0x22>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	602b      	str	r3, [r5, #0]
 8007fea:	89b3      	ldrh	r3, [r6, #12]
 8007fec:	061a      	lsls	r2, r3, #24
 8007fee:	d410      	bmi.n	8008012 <__swhatbuf_r+0x3e>
 8007ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ff4:	e00e      	b.n	8008014 <__swhatbuf_r+0x40>
 8007ff6:	466a      	mov	r2, sp
 8007ff8:	f000 f8be 	bl	8008178 <_fstat_r>
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	dbf2      	blt.n	8007fe6 <__swhatbuf_r+0x12>
 8008000:	9a01      	ldr	r2, [sp, #4]
 8008002:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008006:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800800a:	425a      	negs	r2, r3
 800800c:	415a      	adcs	r2, r3
 800800e:	602a      	str	r2, [r5, #0]
 8008010:	e7ee      	b.n	8007ff0 <__swhatbuf_r+0x1c>
 8008012:	2340      	movs	r3, #64	; 0x40
 8008014:	2000      	movs	r0, #0
 8008016:	6023      	str	r3, [r4, #0]
 8008018:	b016      	add	sp, #88	; 0x58
 800801a:	bd70      	pop	{r4, r5, r6, pc}

0800801c <__smakebuf_r>:
 800801c:	898b      	ldrh	r3, [r1, #12]
 800801e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008020:	079d      	lsls	r5, r3, #30
 8008022:	4606      	mov	r6, r0
 8008024:	460c      	mov	r4, r1
 8008026:	d507      	bpl.n	8008038 <__smakebuf_r+0x1c>
 8008028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	6123      	str	r3, [r4, #16]
 8008030:	2301      	movs	r3, #1
 8008032:	6163      	str	r3, [r4, #20]
 8008034:	b002      	add	sp, #8
 8008036:	bd70      	pop	{r4, r5, r6, pc}
 8008038:	ab01      	add	r3, sp, #4
 800803a:	466a      	mov	r2, sp
 800803c:	f7ff ffca 	bl	8007fd4 <__swhatbuf_r>
 8008040:	9900      	ldr	r1, [sp, #0]
 8008042:	4605      	mov	r5, r0
 8008044:	4630      	mov	r0, r6
 8008046:	f7ff fa85 	bl	8007554 <_malloc_r>
 800804a:	b948      	cbnz	r0, 8008060 <__smakebuf_r+0x44>
 800804c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008050:	059a      	lsls	r2, r3, #22
 8008052:	d4ef      	bmi.n	8008034 <__smakebuf_r+0x18>
 8008054:	f023 0303 	bic.w	r3, r3, #3
 8008058:	f043 0302 	orr.w	r3, r3, #2
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	e7e3      	b.n	8008028 <__smakebuf_r+0xc>
 8008060:	4b0d      	ldr	r3, [pc, #52]	; (8008098 <__smakebuf_r+0x7c>)
 8008062:	62b3      	str	r3, [r6, #40]	; 0x28
 8008064:	89a3      	ldrh	r3, [r4, #12]
 8008066:	6020      	str	r0, [r4, #0]
 8008068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806c:	81a3      	strh	r3, [r4, #12]
 800806e:	9b00      	ldr	r3, [sp, #0]
 8008070:	6163      	str	r3, [r4, #20]
 8008072:	9b01      	ldr	r3, [sp, #4]
 8008074:	6120      	str	r0, [r4, #16]
 8008076:	b15b      	cbz	r3, 8008090 <__smakebuf_r+0x74>
 8008078:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800807c:	4630      	mov	r0, r6
 800807e:	f000 f88d 	bl	800819c <_isatty_r>
 8008082:	b128      	cbz	r0, 8008090 <__smakebuf_r+0x74>
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f023 0303 	bic.w	r3, r3, #3
 800808a:	f043 0301 	orr.w	r3, r3, #1
 800808e:	81a3      	strh	r3, [r4, #12]
 8008090:	89a0      	ldrh	r0, [r4, #12]
 8008092:	4305      	orrs	r5, r0
 8008094:	81a5      	strh	r5, [r4, #12]
 8008096:	e7cd      	b.n	8008034 <__smakebuf_r+0x18>
 8008098:	080073ad 	.word	0x080073ad

0800809c <__malloc_lock>:
 800809c:	4801      	ldr	r0, [pc, #4]	; (80080a4 <__malloc_lock+0x8>)
 800809e:	f7ff ba57 	b.w	8007550 <__retarget_lock_acquire_recursive>
 80080a2:	bf00      	nop
 80080a4:	20014514 	.word	0x20014514

080080a8 <__malloc_unlock>:
 80080a8:	4801      	ldr	r0, [pc, #4]	; (80080b0 <__malloc_unlock+0x8>)
 80080aa:	f7ff ba52 	b.w	8007552 <__retarget_lock_release_recursive>
 80080ae:	bf00      	nop
 80080b0:	20014514 	.word	0x20014514

080080b4 <_free_r>:
 80080b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080b6:	2900      	cmp	r1, #0
 80080b8:	d048      	beq.n	800814c <_free_r+0x98>
 80080ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080be:	9001      	str	r0, [sp, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f1a1 0404 	sub.w	r4, r1, #4
 80080c6:	bfb8      	it	lt
 80080c8:	18e4      	addlt	r4, r4, r3
 80080ca:	f7ff ffe7 	bl	800809c <__malloc_lock>
 80080ce:	4a20      	ldr	r2, [pc, #128]	; (8008150 <_free_r+0x9c>)
 80080d0:	9801      	ldr	r0, [sp, #4]
 80080d2:	6813      	ldr	r3, [r2, #0]
 80080d4:	4615      	mov	r5, r2
 80080d6:	b933      	cbnz	r3, 80080e6 <_free_r+0x32>
 80080d8:	6063      	str	r3, [r4, #4]
 80080da:	6014      	str	r4, [r2, #0]
 80080dc:	b003      	add	sp, #12
 80080de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080e2:	f7ff bfe1 	b.w	80080a8 <__malloc_unlock>
 80080e6:	42a3      	cmp	r3, r4
 80080e8:	d90b      	bls.n	8008102 <_free_r+0x4e>
 80080ea:	6821      	ldr	r1, [r4, #0]
 80080ec:	1862      	adds	r2, r4, r1
 80080ee:	4293      	cmp	r3, r2
 80080f0:	bf04      	itt	eq
 80080f2:	681a      	ldreq	r2, [r3, #0]
 80080f4:	685b      	ldreq	r3, [r3, #4]
 80080f6:	6063      	str	r3, [r4, #4]
 80080f8:	bf04      	itt	eq
 80080fa:	1852      	addeq	r2, r2, r1
 80080fc:	6022      	streq	r2, [r4, #0]
 80080fe:	602c      	str	r4, [r5, #0]
 8008100:	e7ec      	b.n	80080dc <_free_r+0x28>
 8008102:	461a      	mov	r2, r3
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	b10b      	cbz	r3, 800810c <_free_r+0x58>
 8008108:	42a3      	cmp	r3, r4
 800810a:	d9fa      	bls.n	8008102 <_free_r+0x4e>
 800810c:	6811      	ldr	r1, [r2, #0]
 800810e:	1855      	adds	r5, r2, r1
 8008110:	42a5      	cmp	r5, r4
 8008112:	d10b      	bne.n	800812c <_free_r+0x78>
 8008114:	6824      	ldr	r4, [r4, #0]
 8008116:	4421      	add	r1, r4
 8008118:	1854      	adds	r4, r2, r1
 800811a:	42a3      	cmp	r3, r4
 800811c:	6011      	str	r1, [r2, #0]
 800811e:	d1dd      	bne.n	80080dc <_free_r+0x28>
 8008120:	681c      	ldr	r4, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	6053      	str	r3, [r2, #4]
 8008126:	4421      	add	r1, r4
 8008128:	6011      	str	r1, [r2, #0]
 800812a:	e7d7      	b.n	80080dc <_free_r+0x28>
 800812c:	d902      	bls.n	8008134 <_free_r+0x80>
 800812e:	230c      	movs	r3, #12
 8008130:	6003      	str	r3, [r0, #0]
 8008132:	e7d3      	b.n	80080dc <_free_r+0x28>
 8008134:	6825      	ldr	r5, [r4, #0]
 8008136:	1961      	adds	r1, r4, r5
 8008138:	428b      	cmp	r3, r1
 800813a:	bf04      	itt	eq
 800813c:	6819      	ldreq	r1, [r3, #0]
 800813e:	685b      	ldreq	r3, [r3, #4]
 8008140:	6063      	str	r3, [r4, #4]
 8008142:	bf04      	itt	eq
 8008144:	1949      	addeq	r1, r1, r5
 8008146:	6021      	streq	r1, [r4, #0]
 8008148:	6054      	str	r4, [r2, #4]
 800814a:	e7c7      	b.n	80080dc <_free_r+0x28>
 800814c:	b003      	add	sp, #12
 800814e:	bd30      	pop	{r4, r5, pc}
 8008150:	200143d0 	.word	0x200143d0

08008154 <_read_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d07      	ldr	r5, [pc, #28]	; (8008174 <_read_r+0x20>)
 8008158:	4604      	mov	r4, r0
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	2200      	movs	r2, #0
 8008160:	602a      	str	r2, [r5, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f7f8 fb14 	bl	8000790 <_read>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_read_r+0x1e>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_read_r+0x1e>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	2001451c 	.word	0x2001451c

08008178 <_fstat_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d07      	ldr	r5, [pc, #28]	; (8008198 <_fstat_r+0x20>)
 800817c:	2300      	movs	r3, #0
 800817e:	4604      	mov	r4, r0
 8008180:	4608      	mov	r0, r1
 8008182:	4611      	mov	r1, r2
 8008184:	602b      	str	r3, [r5, #0]
 8008186:	f7f8 fb2c 	bl	80007e2 <_fstat>
 800818a:	1c43      	adds	r3, r0, #1
 800818c:	d102      	bne.n	8008194 <_fstat_r+0x1c>
 800818e:	682b      	ldr	r3, [r5, #0]
 8008190:	b103      	cbz	r3, 8008194 <_fstat_r+0x1c>
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	bd38      	pop	{r3, r4, r5, pc}
 8008196:	bf00      	nop
 8008198:	2001451c 	.word	0x2001451c

0800819c <_isatty_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d06      	ldr	r5, [pc, #24]	; (80081b8 <_isatty_r+0x1c>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	f7f8 fb2b 	bl	8000802 <_isatty>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_isatty_r+0x1a>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_isatty_r+0x1a>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	2001451c 	.word	0x2001451c

080081bc <_init>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr

080081c8 <_fini>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr
