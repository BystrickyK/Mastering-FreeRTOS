
002LED_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074d0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007690  08007690  00017690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800781c  0800781c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800781c  0800781c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800781c  0800781c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c4a0  20000014  08007838  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c4b4  08007838  0002c4b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b992  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003429  00000000  00000000  0003b9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0003ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001350  00000000  00000000  000402d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7ff  00000000  00000000  00041628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d39  00000000  00000000  0006de27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111f10  00000000  00000000  00084b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00196a70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  00196ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007678 	.word	0x08007678

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	08007678 	.word	0x08007678

08000200 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000200:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000202:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000206:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000290 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800020a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800020e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000212:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000214:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000216:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000218:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800021a:	d332      	bcc.n	8000282 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800021c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800021e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000220:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000222:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000224:	d314      	bcc.n	8000250 <_CheckCase2>

08000226 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000226:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000228:	19d0      	adds	r0, r2, r7
 800022a:	bf00      	nop

0800022c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000230:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000234:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000236:	d005      	beq.n	8000244 <_CSDone>
        LDRB     R3,[R1], #+1
 8000238:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000240:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000242:	d1f3      	bne.n	800022c <_LoopCopyStraight>

08000244 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000244:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000248:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800024a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800024e:	4770      	bx	lr

08000250 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000250:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000252:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000254:	d319      	bcc.n	800028a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000256:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000258:	1b12      	subs	r2, r2, r4

0800025a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800025e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000262:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000266:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000268:	d005      	beq.n	8000276 <_No2ChunkNeeded>

0800026a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800026e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000272:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyAfterWrapAround>

08000276 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000276:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800027a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800027c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800027e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000280:	4770      	bx	lr

08000282 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000282:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000284:	3801      	subs	r0, #1
        CMP      R0,R2
 8000286:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000288:	d2cd      	bcs.n	8000226 <_Case4>

0800028a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800028a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800028e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000290:	2001c40c 	.word	0x2001c40c

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fb5a 	bl	8000952 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f885 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f000 f8c9 	bl	8000438 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 80002a6:	f005 f913 	bl	80054d0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80002aa:	f006 fbbd 	bl	8006a28 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(handler_LED_green, "Task-Green", 200, NULL,
 80002ae:	4b33      	ldr	r3, [pc, #204]	; (800037c <main+0xe8>)
 80002b0:	9301      	str	r3, [sp, #4]
 80002b2:	2302      	movs	r3, #2
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	2300      	movs	r3, #0
 80002b8:	22c8      	movs	r2, #200	; 0xc8
 80002ba:	4931      	ldr	r1, [pc, #196]	; (8000380 <main+0xec>)
 80002bc:	4831      	ldr	r0, [pc, #196]	; (8000384 <main+0xf0>)
 80002be:	f002 fed7 	bl	8003070 <xTaskCreate>
 80002c2:	6178      	str	r0, [r7, #20]
              2, &handle_LED_green);
  configASSERT(status == pdPASS);
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	2b01      	cmp	r3, #1
 80002c8:	d00a      	beq.n	80002e0 <main+0x4c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ce:	f383 8811 	msr	BASEPRI, r3
 80002d2:	f3bf 8f6f 	isb	sy
 80002d6:	f3bf 8f4f 	dsb	sy
 80002da:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002dc:	bf00      	nop
 80002de:	e7fe      	b.n	80002de <main+0x4a>


  status = xTaskCreate(handler_LED_red, "Task-Red", 200, NULL,
 80002e0:	4b29      	ldr	r3, [pc, #164]	; (8000388 <main+0xf4>)
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	2302      	movs	r3, #2
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2300      	movs	r3, #0
 80002ea:	22c8      	movs	r2, #200	; 0xc8
 80002ec:	4927      	ldr	r1, [pc, #156]	; (800038c <main+0xf8>)
 80002ee:	4828      	ldr	r0, [pc, #160]	; (8000390 <main+0xfc>)
 80002f0:	f002 febe 	bl	8003070 <xTaskCreate>
 80002f4:	6178      	str	r0, [r7, #20]
              2, &handle_LED_red);
  configASSERT(status == pdPASS);
 80002f6:	697b      	ldr	r3, [r7, #20]
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d00a      	beq.n	8000312 <main+0x7e>
        __asm volatile
 80002fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000300:	f383 8811 	msr	BASEPRI, r3
 8000304:	f3bf 8f6f 	isb	sy
 8000308:	f3bf 8f4f 	dsb	sy
 800030c:	60fb      	str	r3, [r7, #12]
    }
 800030e:	bf00      	nop
 8000310:	e7fe      	b.n	8000310 <main+0x7c>


  status = xTaskCreate(handler_LED_blue, "Task-Blue", 200, NULL,
 8000312:	4b20      	ldr	r3, [pc, #128]	; (8000394 <main+0x100>)
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2302      	movs	r3, #2
 8000318:	9300      	str	r3, [sp, #0]
 800031a:	2300      	movs	r3, #0
 800031c:	22c8      	movs	r2, #200	; 0xc8
 800031e:	491e      	ldr	r1, [pc, #120]	; (8000398 <main+0x104>)
 8000320:	481e      	ldr	r0, [pc, #120]	; (800039c <main+0x108>)
 8000322:	f002 fea5 	bl	8003070 <xTaskCreate>
 8000326:	6178      	str	r0, [r7, #20]
              2, &handle_LED_blue);
  configASSERT(status == pdPASS);
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	2b01      	cmp	r3, #1
 800032c:	d00a      	beq.n	8000344 <main+0xb0>
        __asm volatile
 800032e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000332:	f383 8811 	msr	BASEPRI, r3
 8000336:	f3bf 8f6f 	isb	sy
 800033a:	f3bf 8f4f 	dsb	sy
 800033e:	60bb      	str	r3, [r7, #8]
    }
 8000340:	bf00      	nop
 8000342:	e7fe      	b.n	8000342 <main+0xae>


  status = xTaskCreate(handler_button, "Task-Button", 200, NULL,
 8000344:	4b16      	ldr	r3, [pc, #88]	; (80003a0 <main+0x10c>)
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	2303      	movs	r3, #3
 800034a:	9300      	str	r3, [sp, #0]
 800034c:	2300      	movs	r3, #0
 800034e:	22c8      	movs	r2, #200	; 0xc8
 8000350:	4914      	ldr	r1, [pc, #80]	; (80003a4 <main+0x110>)
 8000352:	4815      	ldr	r0, [pc, #84]	; (80003a8 <main+0x114>)
 8000354:	f002 fe8c 	bl	8003070 <xTaskCreate>
 8000358:	6178      	str	r0, [r7, #20]
              3, &handle_button);
  configASSERT(status == pdPASS);
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	2b01      	cmp	r3, #1
 800035e:	d00a      	beq.n	8000376 <main+0xe2>
        __asm volatile
 8000360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000364:	f383 8811 	msr	BASEPRI, r3
 8000368:	f3bf 8f6f 	isb	sy
 800036c:	f3bf 8f4f 	dsb	sy
 8000370:	607b      	str	r3, [r7, #4]
    }
 8000372:	bf00      	nop
 8000374:	e7fe      	b.n	8000374 <main+0xe0>

  vTaskStartScheduler();
 8000376:	f003 f9e3 	bl	8003740 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800037a:	e7fe      	b.n	800037a <main+0xe6>
 800037c:	2001c374 	.word	0x2001c374
 8000380:	08007690 	.word	0x08007690
 8000384:	080005d1 	.word	0x080005d1
 8000388:	2001c378 	.word	0x2001c378
 800038c:	0800769c 	.word	0x0800769c
 8000390:	080004fd 	.word	0x080004fd
 8000394:	2001c370 	.word	0x2001c370
 8000398:	080076a8 	.word	0x080076a8
 800039c:	08000565 	.word	0x08000565
 80003a0:	2001c36c 	.word	0x2001c36c
 80003a4:	080076b4 	.word	0x080076b4
 80003a8:	0800063d 	.word	0x0800063d

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b096      	sub	sp, #88	; 0x58
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	2244      	movs	r2, #68	; 0x44
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f007 f954 	bl	8007668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	463b      	mov	r3, r7
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003d2:	f000 fdd5 	bl	8000f80 <HAL_PWREx_ControlVoltageScaling>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003dc:	f000 f9de 	bl	800079c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003e0:	2310      	movs	r3, #16
 80003e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003e4:	2301      	movs	r3, #1
 80003e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 80003ec:	2370      	movs	r3, #112	; 0x70
 80003ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003f0:	2300      	movs	r3, #0
 80003f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f4:	f107 0314 	add.w	r3, r7, #20
 80003f8:	4618      	mov	r0, r3
 80003fa:	f000 fe65 	bl	80010c8 <HAL_RCC_OscConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000404:	f000 f9ca 	bl	800079c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000408:	230f      	movs	r3, #15
 800040a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000414:	2300      	movs	r3, #0
 8000416:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800041c:	463b      	mov	r3, r7
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f001 fa77 	bl	8001914 <HAL_RCC_ClockConfig>
 8000426:	4603      	mov	r3, r0
 8000428:	2b00      	cmp	r3, #0
 800042a:	d001      	beq.n	8000430 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800042c:	f000 f9b6 	bl	800079c <Error_Handler>
  }
}
 8000430:	bf00      	nop
 8000432:	3758      	adds	r7, #88	; 0x58
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}

08000438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	f107 030c 	add.w	r3, r7, #12
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
 800044c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <MX_GPIO_Init+0xb8>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	4a27      	ldr	r2, [pc, #156]	; (80004f0 <MX_GPIO_Init+0xb8>)
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <MX_GPIO_Init+0xb8>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	f003 0304 	and.w	r3, r3, #4
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000466:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <MX_GPIO_Init+0xb8>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	4a21      	ldr	r2, [pc, #132]	; (80004f0 <MX_GPIO_Init+0xb8>)
 800046c:	f043 0302 	orr.w	r3, r3, #2
 8000470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000472:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <MX_GPIO_Init+0xb8>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000476:	f003 0302 	and.w	r3, r3, #2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000484:	481b      	ldr	r0, [pc, #108]	; (80004f4 <MX_GPIO_Init+0xbc>)
 8000486:	f000 fd29 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	481a      	ldr	r0, [pc, #104]	; (80004f8 <MX_GPIO_Init+0xc0>)
 8000490:	f000 fd24 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a2:	f107 030c 	add.w	r3, r7, #12
 80004a6:	4619      	mov	r1, r3
 80004a8:	4813      	ldr	r0, [pc, #76]	; (80004f8 <MX_GPIO_Init+0xc0>)
 80004aa:	f000 fb6d 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80004ae:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80004b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b4:	2301      	movs	r3, #1
 80004b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2300      	movs	r3, #0
 80004be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c0:	f107 030c 	add.w	r3, r7, #12
 80004c4:	4619      	mov	r1, r3
 80004c6:	480b      	ldr	r0, [pc, #44]	; (80004f4 <MX_GPIO_Init+0xbc>)
 80004c8:	f000 fb5e 	bl	8000b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	2301      	movs	r3, #1
 80004d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	4619      	mov	r1, r3
 80004e2:	4805      	ldr	r0, [pc, #20]	; (80004f8 <MX_GPIO_Init+0xc0>)
 80004e4:	f000 fb50 	bl	8000b88 <HAL_GPIO_Init>

}
 80004e8:	bf00      	nop
 80004ea:	3720      	adds	r7, #32
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000400 	.word	0x48000400
 80004f8:	48000800 	.word	0x48000800

080004fc <handler_LED_red>:

/* USER CODE BEGIN 4 */
static void handler_LED_red(void* parameters)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af02      	add	r7, sp, #8
 8000502:	6078      	str	r0, [r7, #4]
	const TickType_t xPeriod = pdMS_TO_TICKS(150);
 8000504:	2325      	movs	r3, #37	; 0x25
 8000506:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000508:	f003 fa2a 	bl	8003960 <xTaskGetTickCount>
 800050c:	4603      	mov	r3, r0
 800050e:	60bb      	str	r3, [r7, #8]

  while(1)
  {
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000510:	f107 0308 	add.w	r3, r7, #8
 8000514:	68f9      	ldr	r1, [r7, #12]
 8000516:	4618      	mov	r0, r3
 8000518:	f002 ff0e 	bl	8003338 <xTaskDelayUntil>
//    SEGGER_SYSVIEW_PrintfTarget("Toggling RED");
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800051c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000520:	480e      	ldr	r0, [pc, #56]	; (800055c <handler_LED_red+0x60>)
 8000522:	f000 fcf3 	bl	8000f0c <HAL_GPIO_TogglePin>
		if (xTaskNotifyWait(0, 0, NULL, 0))
 8000526:	2300      	movs	r3, #0
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	2200      	movs	r2, #0
 800052e:	2100      	movs	r1, #0
 8000530:	2000      	movs	r0, #0
 8000532:	f003 fded 	bl	8004110 <xTaskGenericNotifyWait>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d0e9      	beq.n	8000510 <handler_LED_red+0x14>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800053c:	2201      	movs	r2, #1
 800053e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <handler_LED_red+0x60>)
 8000544:	f000 fcca 	bl	8000edc <HAL_GPIO_WritePin>
			xTaskNotify(handle_button, 0, eNoAction);
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <handler_LED_red+0x64>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	2300      	movs	r3, #0
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	2300      	movs	r3, #0
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	f003 fe63 	bl	8004220 <xTaskGenericNotify>
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800055a:	e7d9      	b.n	8000510 <handler_LED_red+0x14>
 800055c:	48000400 	.word	0x48000400
 8000560:	2001c36c 	.word	0x2001c36c

08000564 <handler_LED_blue>:
		}
  }
}

static void handler_LED_blue(void* parameters)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
 800056a:	6078      	str	r0, [r7, #4]
  const TickType_t xPeriod = pdMS_TO_TICKS(150);
 800056c:	2325      	movs	r3, #37	; 0x25
 800056e:	60fb      	str	r3, [r7, #12]
  vTaskDelay(pdMS_TO_TICKS(50));
 8000570:	200c      	movs	r0, #12
 8000572:	f002 ff63 	bl	800343c <vTaskDelay>
  TickType_t xLastWakeTime = xTaskGetTickCount();
 8000576:	f003 f9f3 	bl	8003960 <xTaskGetTickCount>
 800057a:	4603      	mov	r3, r0
 800057c:	60bb      	str	r3, [r7, #8]

  while(1)
  {
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800057e:	f107 0308 	add.w	r3, r7, #8
 8000582:	68f9      	ldr	r1, [r7, #12]
 8000584:	4618      	mov	r0, r3
 8000586:	f002 fed7 	bl	8003338 <xTaskDelayUntil>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	480e      	ldr	r0, [pc, #56]	; (80005c8 <handler_LED_blue+0x64>)
 800058e:	f000 fcbd 	bl	8000f0c <HAL_GPIO_TogglePin>
		if (xTaskNotifyWait(0, 0, NULL, 0))
 8000592:	2300      	movs	r3, #0
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	2200      	movs	r2, #0
 800059a:	2100      	movs	r1, #0
 800059c:	2000      	movs	r0, #0
 800059e:	f003 fdb7 	bl	8004110 <xTaskGenericNotifyWait>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d0ea      	beq.n	800057e <handler_LED_blue+0x1a>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2180      	movs	r1, #128	; 0x80
 80005ac:	4806      	ldr	r0, [pc, #24]	; (80005c8 <handler_LED_blue+0x64>)
 80005ae:	f000 fc95 	bl	8000edc <HAL_GPIO_WritePin>
			xTaskNotify(handle_button, 0, eNoAction);
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <handler_LED_blue+0x68>)
 80005b4:	6818      	ldr	r0, [r3, #0]
 80005b6:	2300      	movs	r3, #0
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	f003 fe2e 	bl	8004220 <xTaskGenericNotify>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005c4:	e7db      	b.n	800057e <handler_LED_blue+0x1a>
 80005c6:	bf00      	nop
 80005c8:	48000400 	.word	0x48000400
 80005cc:	2001c36c 	.word	0x2001c36c

080005d0 <handler_LED_green>:
  }
}


static void handler_LED_green(void* parameters)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	6078      	str	r0, [r7, #4]
  const TickType_t xPeriod = pdMS_TO_TICKS(150);
 80005d8:	2325      	movs	r3, #37	; 0x25
 80005da:	60fb      	str	r3, [r7, #12]
  vTaskDelay(pdMS_TO_TICKS(100));
 80005dc:	2019      	movs	r0, #25
 80005de:	f002 ff2d 	bl	800343c <vTaskDelay>
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80005e2:	f003 f9bd 	bl	8003960 <xTaskGetTickCount>
 80005e6:	4603      	mov	r3, r0
 80005e8:	60bb      	str	r3, [r7, #8]

  while(1)
  {
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	68f9      	ldr	r1, [r7, #12]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f002 fea1 	bl	8003338 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80005f6:	2180      	movs	r1, #128	; 0x80
 80005f8:	480e      	ldr	r0, [pc, #56]	; (8000634 <handler_LED_green+0x64>)
 80005fa:	f000 fc87 	bl	8000f0c <HAL_GPIO_TogglePin>
		if (xTaskNotifyWait(0, 0, NULL, 0))
 80005fe:	2300      	movs	r3, #0
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f003 fd81 	bl	8004110 <xTaskGenericNotifyWait>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0ea      	beq.n	80005ea <handler_LED_green+0x1a>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <handler_LED_green+0x64>)
 800061a:	f000 fc5f 	bl	8000edc <HAL_GPIO_WritePin>
			xTaskNotify(handle_button, 0, eNoAction);
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <handler_LED_green+0x68>)
 8000620:	6818      	ldr	r0, [r3, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	2200      	movs	r2, #0
 800062a:	2100      	movs	r1, #0
 800062c:	f003 fdf8 	bl	8004220 <xTaskGenericNotify>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000630:	e7db      	b.n	80005ea <handler_LED_green+0x1a>
 8000632:	bf00      	nop
 8000634:	48000800 	.word	0x48000800
 8000638:	2001c36c 	.word	0x2001c36c

0800063c <handler_button>:
		}
  }
}

static void handler_button(void* parameters)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
	GPIO_PinState button_state = GPIO_PIN_RESET; //off
 8000644:	2300      	movs	r3, #0
 8000646:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState button_state_prev = GPIO_PIN_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	757b      	strb	r3, [r7, #21]

	const TickType_t xPeriod = pdMS_TO_TICKS(25);
 800064c:	2306      	movs	r3, #6
 800064e:	613b      	str	r3, [r7, #16]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000650:	f003 f986 	bl	8003960 <xTaskGetTickCount>
 8000654:	4603      	mov	r3, r0
 8000656:	60fb      	str	r3, [r7, #12]

	uint8_t state = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	75bb      	strb	r3, [r7, #22]

	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	6939      	ldr	r1, [r7, #16]
 8000662:	4618      	mov	r0, r3
 8000664:	f002 fe68 	bl	8003338 <xTaskDelayUntil>

		button_state_prev = button_state;
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	757b      	strb	r3, [r7, #21]
		button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	482c      	ldr	r0, [pc, #176]	; (8000724 <handler_button+0xe8>)
 8000672:	f000 fc1b 	bl	8000eac <HAL_GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	75fb      	strb	r3, [r7, #23]

		if (button_state==GPIO_PIN_SET && button_state_prev==GPIO_PIN_RESET)
 800067a:	7dfb      	ldrb	r3, [r7, #23]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d149      	bne.n	8000714 <handler_button+0xd8>
 8000680:	7d7b      	ldrb	r3, [r7, #21]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d146      	bne.n	8000714 <handler_button+0xd8>
		{
			SEGGER_SYSVIEW_PrintfTarget("Button pressed");
 8000686:	4828      	ldr	r0, [pc, #160]	; (8000728 <handler_button+0xec>)
 8000688:	f006 ff3e 	bl	8007508 <SEGGER_SYSVIEW_PrintfTarget>

			switch(state)
 800068c:	7dbb      	ldrb	r3, [r7, #22]
 800068e:	2b03      	cmp	r3, #3
 8000690:	d8e4      	bhi.n	800065c <handler_button+0x20>
 8000692:	a201      	add	r2, pc, #4	; (adr r2, 8000698 <handler_button+0x5c>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080006c1 	.word	0x080006c1
 80006a0:	080006d9 	.word	0x080006d9
 80006a4:	080006f1 	.word	0x080006f1
			{
				case 0:
					if(NotifyAndSuspend(handle_LED_red))
 80006a8:	4b20      	ldr	r3, [pc, #128]	; (800072c <handler_button+0xf0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f843 	bl	8000738 <NotifyAndSuspend>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d02f      	beq.n	8000718 <handler_button+0xdc>
						++state;
 80006b8:	7dbb      	ldrb	r3, [r7, #22]
 80006ba:	3301      	adds	r3, #1
 80006bc:	75bb      	strb	r3, [r7, #22]
					break;
 80006be:	e02b      	b.n	8000718 <handler_button+0xdc>
				case 1:
					if(NotifyAndSuspend(handle_LED_blue))
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <handler_button+0xf4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 f837 	bl	8000738 <NotifyAndSuspend>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d025      	beq.n	800071c <handler_button+0xe0>
						++state;
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	3301      	adds	r3, #1
 80006d4:	75bb      	strb	r3, [r7, #22]
					break;
 80006d6:	e021      	b.n	800071c <handler_button+0xe0>
				case 2:
					if(NotifyAndSuspend(handle_LED_green))
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <handler_button+0xf8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 f82b 	bl	8000738 <NotifyAndSuspend>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01b      	beq.n	8000720 <handler_button+0xe4>
						++state;
 80006e8:	7dbb      	ldrb	r3, [r7, #22]
 80006ea:	3301      	adds	r3, #1
 80006ec:	75bb      	strb	r3, [r7, #22]
					break;
 80006ee:	e017      	b.n	8000720 <handler_button+0xe4>
				case 3:
					vTaskResume(handle_LED_red);
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <handler_button+0xf0>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 ffb9 	bl	800366c <vTaskResume>
					vTaskResume(handle_LED_blue);
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <handler_button+0xf4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 ffb4 	bl	800366c <vTaskResume>
					vTaskResume(handle_LED_green);
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <handler_button+0xf8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f002 ffaf 	bl	800366c <vTaskResume>
					state = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	75bb      	strb	r3, [r7, #22]
					break;
 8000712:	e006      	b.n	8000722 <handler_button+0xe6>
			}
		}
 8000714:	bf00      	nop
 8000716:	e7a1      	b.n	800065c <handler_button+0x20>
					break;
 8000718:	bf00      	nop
 800071a:	e79f      	b.n	800065c <handler_button+0x20>
					break;
 800071c:	bf00      	nop
 800071e:	e79d      	b.n	800065c <handler_button+0x20>
					break;
 8000720:	bf00      	nop
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000722:	e79b      	b.n	800065c <handler_button+0x20>
 8000724:	48000800 	.word	0x48000800
 8000728:	080076c0 	.word	0x080076c0
 800072c:	2001c378 	.word	0x2001c378
 8000730:	2001c370 	.word	0x2001c370
 8000734:	2001c374 	.word	0x2001c374

08000738 <NotifyAndSuspend>:
	}
}

BaseType_t NotifyAndSuspend(TaskHandle_t handle)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af02      	add	r7, sp, #8
 800073e:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	xTaskNotify(handle, 0, eNoAction);
 8000740:	2300      	movs	r3, #0
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2300      	movs	r3, #0
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f003 fd68 	bl	8004220 <xTaskGenericNotify>
	status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000750:	23fa      	movs	r3, #250	; 0xfa
 8000752:	9300      	str	r3, [sp, #0]
 8000754:	2300      	movs	r3, #0
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f003 fcd8 	bl	8004110 <xTaskGenericNotifyWait>
 8000760:	60f8      	str	r0, [r7, #12]
	if (status)
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d002      	beq.n	800076e <NotifyAndSuspend+0x36>
		vTaskSuspend(handle);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f002 fe9f 	bl	80034ac <vTaskSuspend>
	return status;
 800076e:	68fb      	ldr	r3, [r7, #12]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d101      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800078a:	f000 f8fb 	bl	8000984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40001000 	.word	0x40001000

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <Error_Handler+0x8>
	...

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <HAL_MspInit+0x44>)
 80007b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6613      	str	r3, [r2, #96]	; 0x60
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_MspInit+0x44>)
 80007c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d0:	6593      	str	r3, [r2, #88]	; 0x58
 80007d2:	4b06      	ldr	r3, [pc, #24]	; (80007ec <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80007de:	f004 facb 	bl	8004d78 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000800:	2200      	movs	r2, #0
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	2036      	movs	r0, #54	; 0x36
 8000806:	f000 f995 	bl	8000b34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800080a:	2036      	movs	r0, #54	; 0x36
 800080c:	f000 f9ae 	bl	8000b6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <HAL_InitTick+0x9c>)
 8000812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000814:	4a1d      	ldr	r2, [pc, #116]	; (800088c <HAL_InitTick+0x9c>)
 8000816:	f043 0310 	orr.w	r3, r3, #16
 800081a:	6593      	str	r3, [r2, #88]	; 0x58
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <HAL_InitTick+0x9c>)
 800081e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000820:	f003 0310 	and.w	r3, r3, #16
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000828:	f107 0210 	add.w	r2, r7, #16
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f001 fa48 	bl	8001cc8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000838:	f001 fa30 	bl	8001c9c <HAL_RCC_GetPCLK1Freq>
 800083c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800083e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <HAL_InitTick+0xa0>)
 8000842:	fba2 2303 	umull	r2, r3, r2, r3
 8000846:	0c9b      	lsrs	r3, r3, #18
 8000848:	3b01      	subs	r3, #1
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_InitTick+0xa4>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <HAL_InitTick+0xa8>)
 8000850:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <HAL_InitTick+0xa4>)
 8000854:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000858:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_InitTick+0xa4>)
 800085c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800085e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_InitTick+0xa4>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_InitTick+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <HAL_InitTick+0xa4>)
 800086e:	f001 fb1f 	bl	8001eb0 <HAL_TIM_Base_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d104      	bne.n	8000882 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <HAL_InitTick+0xa4>)
 800087a:	f001 fb7b 	bl	8001f74 <HAL_TIM_Base_Start_IT>
 800087e:	4603      	mov	r3, r0
 8000880:	e000      	b.n	8000884 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000882:	2301      	movs	r3, #1
}
 8000884:	4618      	mov	r0, r3
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40021000 	.word	0x40021000
 8000890:	431bde83 	.word	0x431bde83
 8000894:	2001c37c 	.word	0x2001c37c
 8000898:	40001000 	.word	0x40001000

0800089c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <NMI_Handler+0x4>

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a6:	e7fe      	b.n	80008a6 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MemManage_Handler+0x4>

080008ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b2:	e7fe      	b.n	80008b2 <BusFault_Handler+0x4>

080008b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <UsageFault_Handler+0x4>

080008ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <TIM6_DAC_IRQHandler+0x10>)
 80008ce:	f001 fbc1 	bl	8002054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	2001c37c 	.word	0x2001c37c

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <SystemInit+0x20>)
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <SystemInit+0x20>)
 80008e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000900:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000938 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000904:	f7ff ffea 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <LoopForever+0x6>)
  ldr r1, =_edata
 800090a:	490d      	ldr	r1, [pc, #52]	; (8000940 <LoopForever+0xa>)
  ldr r2, =_sidata
 800090c:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <LoopForever+0xe>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000910:	e002      	b.n	8000918 <LoopCopyDataInit>

08000912 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000912:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000914:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000916:	3304      	adds	r3, #4

08000918 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000918:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800091c:	d3f9      	bcc.n	8000912 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091e:	4a0a      	ldr	r2, [pc, #40]	; (8000948 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000920:	4c0a      	ldr	r4, [pc, #40]	; (800094c <LoopForever+0x16>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000924:	e001      	b.n	800092a <LoopFillZerobss>

08000926 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000926:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000928:	3204      	adds	r2, #4

0800092a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800092c:	d3fb      	bcc.n	8000926 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800092e:	f006 fe5b 	bl	80075e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000932:	f7ff fcaf 	bl	8000294 <main>

08000936 <LoopForever>:

LoopForever:
    b LoopForever
 8000936:	e7fe      	b.n	8000936 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000938:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800093c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000940:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000944:	08007824 	.word	0x08007824
  ldr r2, =_sbss
 8000948:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800094c:	2001c4b4 	.word	0x2001c4b4

08000950 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000950:	e7fe      	b.n	8000950 <ADC1_IRQHandler>

08000952 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000958:	2300      	movs	r3, #0
 800095a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800095c:	2003      	movs	r0, #3
 800095e:	f000 f8de 	bl	8000b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000962:	200f      	movs	r0, #15
 8000964:	f7ff ff44 	bl	80007f0 <HAL_InitTick>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d002      	beq.n	8000974 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800096e:	2301      	movs	r3, #1
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	e001      	b.n	8000978 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000974:	f7ff ff18 	bl	80007a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000978:	79fb      	ldrb	r3, [r7, #7]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
	...

08000984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x20>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_IncTick+0x24>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <HAL_IncTick+0x24>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008
 80009a8:	2001c3c8 	.word	0x2001c3c8

080009ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <HAL_GetTick+0x14>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2001c3c8 	.word	0x2001c3c8

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	db0b      	blt.n	8000a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 021f 	and.w	r2, r3, #31
 8000a40:	4907      	ldr	r1, [pc, #28]	; (8000a60 <__NVIC_EnableIRQ+0x38>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	2001      	movs	r0, #1
 8000a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff4c 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b46:	f7ff ff61 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	6978      	ldr	r0, [r7, #20]
 8000b52:	f7ff ffb1 	bl	8000ab8 <NVIC_EncodePriority>
 8000b56:	4602      	mov	r2, r0
 8000b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff80 	bl	8000a64 <__NVIC_SetPriority>
}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff54 	bl	8000a28 <__NVIC_EnableIRQ>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b96:	e166      	b.n	8000e66 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8158 	beq.w	8000e60 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d005      	beq.n	8000bc8 <HAL_GPIO_Init+0x40>
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 0303 	and.w	r3, r3, #3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d130      	bne.n	8000c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68da      	ldr	r2, [r3, #12]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bfe:	2201      	movs	r2, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	091b      	lsrs	r3, r3, #4
 8000c14:	f003 0201 	and.w	r2, r3, #1
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d017      	beq.n	8000c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	68db      	ldr	r3, [r3, #12]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2203      	movs	r2, #3
 8000c42:	fa02 f303 	lsl.w	r3, r2, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	689a      	ldr	r2, [r3, #8]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d123      	bne.n	8000cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	08da      	lsrs	r2, r3, #3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3208      	adds	r2, #8
 8000c7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	220f      	movs	r2, #15
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4013      	ands	r3, r2
 8000c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	f003 0307 	and.w	r3, r3, #7
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	6939      	ldr	r1, [r7, #16]
 8000cb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0203 	and.w	r2, r3, #3
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	f000 80b2 	beq.w	8000e60 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfc:	4b61      	ldr	r3, [pc, #388]	; (8000e84 <HAL_GPIO_Init+0x2fc>)
 8000cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d00:	4a60      	ldr	r2, [pc, #384]	; (8000e84 <HAL_GPIO_Init+0x2fc>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6613      	str	r3, [r2, #96]	; 0x60
 8000d08:	4b5e      	ldr	r3, [pc, #376]	; (8000e84 <HAL_GPIO_Init+0x2fc>)
 8000d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d14:	4a5c      	ldr	r2, [pc, #368]	; (8000e88 <HAL_GPIO_Init+0x300>)
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	089b      	lsrs	r3, r3, #2
 8000d1a:	3302      	adds	r3, #2
 8000d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	f003 0303 	and.w	r3, r3, #3
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	43db      	mvns	r3, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4013      	ands	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d3e:	d02b      	beq.n	8000d98 <HAL_GPIO_Init+0x210>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <HAL_GPIO_Init+0x304>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d025      	beq.n	8000d94 <HAL_GPIO_Init+0x20c>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a51      	ldr	r2, [pc, #324]	; (8000e90 <HAL_GPIO_Init+0x308>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d01f      	beq.n	8000d90 <HAL_GPIO_Init+0x208>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a50      	ldr	r2, [pc, #320]	; (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d019      	beq.n	8000d8c <HAL_GPIO_Init+0x204>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a4f      	ldr	r2, [pc, #316]	; (8000e98 <HAL_GPIO_Init+0x310>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d013      	beq.n	8000d88 <HAL_GPIO_Init+0x200>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a4e      	ldr	r2, [pc, #312]	; (8000e9c <HAL_GPIO_Init+0x314>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d00d      	beq.n	8000d84 <HAL_GPIO_Init+0x1fc>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ea0 <HAL_GPIO_Init+0x318>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d007      	beq.n	8000d80 <HAL_GPIO_Init+0x1f8>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a4c      	ldr	r2, [pc, #304]	; (8000ea4 <HAL_GPIO_Init+0x31c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d101      	bne.n	8000d7c <HAL_GPIO_Init+0x1f4>
 8000d78:	2307      	movs	r3, #7
 8000d7a:	e00e      	b.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	e00c      	b.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d80:	2306      	movs	r3, #6
 8000d82:	e00a      	b.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d84:	2305      	movs	r3, #5
 8000d86:	e008      	b.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d88:	2304      	movs	r3, #4
 8000d8a:	e006      	b.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e004      	b.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e002      	b.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d94:	2301      	movs	r3, #1
 8000d96:	e000      	b.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	697a      	ldr	r2, [r7, #20]
 8000d9c:	f002 0203 	and.w	r2, r2, #3
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	4093      	lsls	r3, r2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000daa:	4937      	ldr	r1, [pc, #220]	; (8000e88 <HAL_GPIO_Init+0x300>)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000db8:	4b3b      	ldr	r3, [pc, #236]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d003      	beq.n	8000ddc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ddc:	4a32      	ldr	r2, [pc, #200]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000de4:	68db      	ldr	r3, [r3, #12]
 8000de6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e06:	4a28      	ldr	r2, [pc, #160]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e0c:	4b26      	ldr	r3, [pc, #152]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e30:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e5a:	4a13      	ldr	r2, [pc, #76]	; (8000ea8 <HAL_GPIO_Init+0x320>)
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f47f ae91 	bne.w	8000b98 <HAL_GPIO_Init+0x10>
  }
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800
 8000e94:	48000c00 	.word	0x48000c00
 8000e98:	48001000 	.word	0x48001000
 8000e9c:	48001400 	.word	0x48001400
 8000ea0:	48001800 	.word	0x48001800
 8000ea4:	48001c00 	.word	0x48001c00
 8000ea8:	40010400 	.word	0x40010400

08000eac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d002      	beq.n	8000eca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e001      	b.n	8000ece <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eec:	787b      	ldrb	r3, [r7, #1]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ef8:	e002      	b.n	8000f00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efa:	887a      	ldrh	r2, [r7, #2]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f1e:	887a      	ldrh	r2, [r7, #2]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4013      	ands	r3, r2
 8000f24:	041a      	lsls	r2, r3, #16
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	43d9      	mvns	r1, r3
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	619a      	str	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f50:	d102      	bne.n	8000f58 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	e00b      	b.n	8000f70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f58:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f66:	d102      	bne.n	8000f6e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f6c:	e000      	b.n	8000f70 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000f6e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40007000 	.word	0x40007000

08000f80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d141      	bne.n	8001012 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f8e:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f9a:	d131      	bne.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fa2:	4a46      	ldr	r2, [pc, #280]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fa8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	4b43      	ldr	r3, [pc, #268]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fb4:	4a41      	ldr	r2, [pc, #260]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fbc:	4b40      	ldr	r3, [pc, #256]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2232      	movs	r2, #50	; 0x32
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	4a3f      	ldr	r2, [pc, #252]	; (80010c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fcc:	0c9b      	lsrs	r3, r3, #18
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd2:	e002      	b.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fda:	4b38      	ldr	r3, [pc, #224]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fdc:	695b      	ldr	r3, [r3, #20]
 8000fde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fe6:	d102      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d1f2      	bne.n	8000fd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ffa:	d158      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e057      	b.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001002:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001006:	4a2d      	ldr	r2, [pc, #180]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800100c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001010:	e04d      	b.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001018:	d141      	bne.n	800109e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001026:	d131      	bne.n	800108c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001028:	4b24      	ldr	r3, [pc, #144]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800102a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800102e:	4a23      	ldr	r2, [pc, #140]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001040:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001046:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2232      	movs	r2, #50	; 0x32
 800104e:	fb02 f303 	mul.w	r3, r2, r3
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001054:	fba2 2303 	umull	r2, r3, r2, r3
 8001058:	0c9b      	lsrs	r3, r3, #18
 800105a:	3301      	adds	r3, #1
 800105c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800105e:	e002      	b.n	8001066 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3b01      	subs	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800106e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001072:	d102      	bne.n	800107a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f2      	bne.n	8001060 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107c:	695b      	ldr	r3, [r3, #20]
 800107e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001082:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001086:	d112      	bne.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e011      	b.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800109c:	e007      	b.n	80010ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ac:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40007000 	.word	0x40007000
 80010c0:	20000000 	.word	0x20000000
 80010c4:	431bde83 	.word	0x431bde83

080010c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d102      	bne.n	80010dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f000 bc16 	b.w	8001908 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010dc:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010e6:	4b9e      	ldr	r3, [pc, #632]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	f000 80e4 	beq.w	80012c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_RCC_OscConfig+0x4c>
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	2b0c      	cmp	r3, #12
 8001108:	f040 808b 	bne.w	8001222 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b01      	cmp	r3, #1
 8001110:	f040 8087 	bne.w	8001222 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001114:	4b92      	ldr	r3, [pc, #584]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d005      	beq.n	800112c <HAL_RCC_OscConfig+0x64>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e3ed      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a1a      	ldr	r2, [r3, #32]
 8001130:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d004      	beq.n	8001146 <HAL_RCC_OscConfig+0x7e>
 800113c:	4b88      	ldr	r3, [pc, #544]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001144:	e005      	b.n	8001152 <HAL_RCC_OscConfig+0x8a>
 8001146:	4b86      	ldr	r3, [pc, #536]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001152:	4293      	cmp	r3, r2
 8001154:	d223      	bcs.n	800119e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fde6 	bl	8001d2c <RCC_SetFlashLatencyFromMSIRange>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e3ce      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800116a:	4b7d      	ldr	r3, [pc, #500]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a7c      	ldr	r2, [pc, #496]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001170:	f043 0308 	orr.w	r3, r3, #8
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b7a      	ldr	r3, [pc, #488]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a1b      	ldr	r3, [r3, #32]
 8001182:	4977      	ldr	r1, [pc, #476]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	4972      	ldr	r1, [pc, #456]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
 800119c:	e025      	b.n	80011ea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119e:	4b70      	ldr	r3, [pc, #448]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a6f      	ldr	r2, [pc, #444]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b6d      	ldr	r3, [pc, #436]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	496a      	ldr	r1, [pc, #424]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011bc:	4b68      	ldr	r3, [pc, #416]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	4965      	ldr	r1, [pc, #404]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d109      	bne.n	80011ea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6a1b      	ldr	r3, [r3, #32]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 fda6 	bl	8001d2c <RCC_SetFlashLatencyFromMSIRange>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e38e      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011ea:	f000 fcbf 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 80011ee:	4602      	mov	r2, r0
 80011f0:	4b5b      	ldr	r3, [pc, #364]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	495a      	ldr	r1, [pc, #360]	; (8001364 <HAL_RCC_OscConfig+0x29c>)
 80011fc:	5ccb      	ldrb	r3, [r1, r3]
 80011fe:	f003 031f 	and.w	r3, r3, #31
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_RCC_OscConfig+0x2a0>)
 8001208:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800120a:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_RCC_OscConfig+0x2a4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff faee 	bl	80007f0 <HAL_InitTick>
 8001214:	4603      	mov	r3, r0
 8001216:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d052      	beq.n	80012c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	e372      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d032      	beq.n	8001290 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800122a:	4b4d      	ldr	r3, [pc, #308]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a4c      	ldr	r2, [pc, #304]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001236:	f7ff fbb9 	bl	80009ac <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800123e:	f7ff fbb5 	bl	80009ac <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e35b      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001250:	4b43      	ldr	r3, [pc, #268]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800125c:	4b40      	ldr	r3, [pc, #256]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a3f      	ldr	r2, [pc, #252]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b3d      	ldr	r3, [pc, #244]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	493a      	ldr	r1, [pc, #232]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	021b      	lsls	r3, r3, #8
 8001288:	4935      	ldr	r1, [pc, #212]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
 800128e:	e01a      	b.n	80012c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001290:	4b33      	ldr	r3, [pc, #204]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a32      	ldr	r2, [pc, #200]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800129c:	f7ff fb86 	bl	80009ac <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012a4:	f7ff fb82 	bl	80009ac <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e328      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012b6:	4b2a      	ldr	r3, [pc, #168]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0x1dc>
 80012c2:	e000      	b.n	80012c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d073      	beq.n	80013ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_OscConfig+0x21c>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	d10e      	bne.n	80012fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	d10b      	bne.n	80012fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d063      	beq.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d15f      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e305      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001304:	d106      	bne.n	8001314 <HAL_RCC_OscConfig+0x24c>
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800130c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	e01d      	b.n	8001350 <HAL_RCC_OscConfig+0x288>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x270>
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e00b      	b.n	8001350 <HAL_RCC_OscConfig+0x288>
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800133e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a05      	ldr	r2, [pc, #20]	; (8001360 <HAL_RCC_OscConfig+0x298>)
 800134a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800134e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01b      	beq.n	8001390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001358:	f7ff fb28 	bl	80009ac <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800135e:	e010      	b.n	8001382 <HAL_RCC_OscConfig+0x2ba>
 8001360:	40021000 	.word	0x40021000
 8001364:	080077b0 	.word	0x080077b0
 8001368:	20000000 	.word	0x20000000
 800136c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fb1c 	bl	80009ac <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e2c2      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001382:	4baf      	ldr	r3, [pc, #700]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x2a8>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001390:	f7ff fb0c 	bl	80009ac <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fb08 	bl	80009ac <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e2ae      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013aa:	4ba5      	ldr	r3, [pc, #660]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x2d0>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d060      	beq.n	8001488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x310>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d119      	bne.n	8001406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d116      	bne.n	8001406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013d8:	4b99      	ldr	r3, [pc, #612]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_OscConfig+0x328>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e28b      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f0:	4b93      	ldr	r3, [pc, #588]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	4990      	ldr	r1, [pc, #576]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001400:	4313      	orrs	r3, r2
 8001402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001404:	e040      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d023      	beq.n	8001456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800140e:	4b8c      	ldr	r3, [pc, #560]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a8b      	ldr	r2, [pc, #556]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141a:	f7ff fac7 	bl	80009ac <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fac3 	bl	80009ac <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e269      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001434:	4b82      	ldr	r3, [pc, #520]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	497c      	ldr	r1, [pc, #496]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
 8001454:	e018      	b.n	8001488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b7a      	ldr	r3, [pc, #488]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a79      	ldr	r2, [pc, #484]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800145c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001462:	f7ff faa3 	bl	80009ac <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fa9f 	bl	80009ac <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e245      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800147c:	4b70      	ldr	r3, [pc, #448]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1f0      	bne.n	800146a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d03c      	beq.n	800150e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800149c:	4b68      	ldr	r3, [pc, #416]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800149e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014a2:	4a67      	ldr	r2, [pc, #412]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ac:	f7ff fa7e 	bl	80009ac <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b4:	f7ff fa7a 	bl	80009ac <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e220      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014c6:	4b5e      	ldr	r3, [pc, #376]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ef      	beq.n	80014b4 <HAL_RCC_OscConfig+0x3ec>
 80014d4:	e01b      	b.n	800150e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d6:	4b5a      	ldr	r3, [pc, #360]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014dc:	4a58      	ldr	r2, [pc, #352]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80014de:	f023 0301 	bic.w	r3, r3, #1
 80014e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff fa61 	bl	80009ac <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ee:	f7ff fa5d 	bl	80009ac <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e203      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001500:	4b4f      	ldr	r3, [pc, #316]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1ef      	bne.n	80014ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0304 	and.w	r3, r3, #4
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80a6 	beq.w	8001668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10d      	bne.n	8001548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800152e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001530:	4a43      	ldr	r2, [pc, #268]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001536:	6593      	str	r3, [r2, #88]	; 0x58
 8001538:	4b41      	ldr	r3, [pc, #260]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001544:	2301      	movs	r3, #1
 8001546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <HAL_RCC_OscConfig+0x57c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d118      	bne.n	8001586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_RCC_OscConfig+0x57c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <HAL_RCC_OscConfig+0x57c>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001560:	f7ff fa24 	bl	80009ac <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001568:	f7ff fa20 	bl	80009ac <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1c6      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_RCC_OscConfig+0x57c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d108      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4d8>
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001594:	4a2a      	ldr	r2, [pc, #168]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800159e:	e024      	b.n	80015ea <HAL_RCC_OscConfig+0x522>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d110      	bne.n	80015ca <HAL_RCC_OscConfig+0x502>
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ae:	4a24      	ldr	r2, [pc, #144]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015b8:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015be:	4a20      	ldr	r2, [pc, #128]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015c8:	e00f      	b.n	80015ea <HAL_RCC_OscConfig+0x522>
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015d0:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	4a17      	ldr	r2, [pc, #92]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 80015e2:	f023 0304 	bic.w	r3, r3, #4
 80015e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d016      	beq.n	8001620 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f2:	f7ff f9db 	bl	80009ac <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015f8:	e00a      	b.n	8001610 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fa:	f7ff f9d7 	bl	80009ac <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	f241 3288 	movw	r2, #5000	; 0x1388
 8001608:	4293      	cmp	r3, r2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e17b      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_RCC_OscConfig+0x578>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0ed      	beq.n	80015fa <HAL_RCC_OscConfig+0x532>
 800161e:	e01a      	b.n	8001656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff f9c4 	bl	80009ac <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001626:	e00f      	b.n	8001648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001628:	f7ff f9c0 	bl	80009ac <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f241 3288 	movw	r2, #5000	; 0x1388
 8001636:	4293      	cmp	r3, r2
 8001638:	d906      	bls.n	8001648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e164      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001648:	4ba8      	ldr	r3, [pc, #672]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1e8      	bne.n	8001628 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001656:	7ffb      	ldrb	r3, [r7, #31]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d105      	bne.n	8001668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800165c:	4ba3      	ldr	r3, [pc, #652]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001660:	4aa2      	ldr	r2, [pc, #648]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001666:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b00      	cmp	r3, #0
 8001672:	d03c      	beq.n	80016ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d01c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800167c:	4b9b      	ldr	r3, [pc, #620]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800167e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001682:	4a9a      	ldr	r2, [pc, #616]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168c:	f7ff f98e 	bl	80009ac <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001694:	f7ff f98a 	bl	80009ac <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e130      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016a6:	4b91      	ldr	r3, [pc, #580]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80016a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ef      	beq.n	8001694 <HAL_RCC_OscConfig+0x5cc>
 80016b4:	e01b      	b.n	80016ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016b6:	4b8d      	ldr	r3, [pc, #564]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80016b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016bc:	4a8b      	ldr	r2, [pc, #556]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c6:	f7ff f971 	bl	80009ac <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ce:	f7ff f96d 	bl	80009ac <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e113      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016e0:	4b82      	ldr	r3, [pc, #520]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80016e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1ef      	bne.n	80016ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8107 	beq.w	8001906 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	f040 80cb 	bne.w	8001898 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001702:	4b7a      	ldr	r3, [pc, #488]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f003 0203 	and.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	429a      	cmp	r2, r3
 8001714:	d12c      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	3b01      	subs	r3, #1
 8001722:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d123      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001732:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001734:	429a      	cmp	r2, r3
 8001736:	d11b      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001742:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001744:	429a      	cmp	r2, r3
 8001746:	d113      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001752:	085b      	lsrs	r3, r3, #1
 8001754:	3b01      	subs	r3, #1
 8001756:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d109      	bne.n	8001770 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	3b01      	subs	r3, #1
 800176a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800176c:	429a      	cmp	r2, r3
 800176e:	d06d      	beq.n	800184c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b0c      	cmp	r3, #12
 8001774:	d068      	beq.n	8001848 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001776:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d105      	bne.n	800178e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001782:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0ba      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a55      	ldr	r2, [pc, #340]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800179e:	f7ff f905 	bl	80009ac <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff f901 	bl	80009ac <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0a7      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b8:	4b4c      	ldr	r3, [pc, #304]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b49      	ldr	r3, [pc, #292]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x828>)
 80017ca:	4013      	ands	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017d4:	3a01      	subs	r2, #1
 80017d6:	0112      	lsls	r2, r2, #4
 80017d8:	4311      	orrs	r1, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017de:	0212      	lsls	r2, r2, #8
 80017e0:	4311      	orrs	r1, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017e6:	0852      	lsrs	r2, r2, #1
 80017e8:	3a01      	subs	r2, #1
 80017ea:	0552      	lsls	r2, r2, #21
 80017ec:	4311      	orrs	r1, r2
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017f2:	0852      	lsrs	r2, r2, #1
 80017f4:	3a01      	subs	r2, #1
 80017f6:	0652      	lsls	r2, r2, #25
 80017f8:	4311      	orrs	r1, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017fe:	06d2      	lsls	r2, r2, #27
 8001800:	430a      	orrs	r2, r1
 8001802:	493a      	ldr	r1, [pc, #232]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001808:	4b38      	ldr	r3, [pc, #224]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a37      	ldr	r2, [pc, #220]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001812:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001814:	4b35      	ldr	r3, [pc, #212]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	4a34      	ldr	r2, [pc, #208]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800181a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800181e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001820:	f7ff f8c4 	bl	80009ac <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001828:	f7ff f8c0 	bl	80009ac <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e066      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183a:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001846:	e05e      	b.n	8001906 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e05d      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d156      	bne.n	8001906 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a23      	ldr	r2, [pc, #140]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800185e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001864:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a20      	ldr	r2, [pc, #128]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800186a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800186e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001870:	f7ff f89c 	bl	80009ac <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff f898 	bl	80009ac <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e03e      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0f0      	beq.n	8001878 <HAL_RCC_OscConfig+0x7b0>
 8001896:	e036      	b.n	8001906 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d031      	beq.n	8001902 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80018a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	4a0c      	ldr	r2, [pc, #48]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80018bc:	f023 0303 	bic.w	r3, r3, #3
 80018c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_OscConfig+0x824>)
 80018c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d2:	f7ff f86b 	bl	80009ac <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018d8:	e00c      	b.n	80018f4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff f867 	bl	80009ac <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d905      	bls.n	80018f4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e00d      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
 80018ec:	40021000 	.word	0x40021000
 80018f0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_RCC_OscConfig+0x848>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ec      	bne.n	80018da <HAL_RCC_OscConfig+0x812>
 8001900:	e001      	b.n	8001906 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3720      	adds	r7, #32
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e10f      	b.n	8001b4c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b89      	ldr	r3, [pc, #548]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b86      	ldr	r3, [pc, #536]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 020f 	bic.w	r2, r3, #15
 8001942:	4984      	ldr	r1, [pc, #528]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b82      	ldr	r3, [pc, #520]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0f7      	b.n	8001b4c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 8089 	beq.w	8001a7c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d133      	bne.n	80019da <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001972:	4b79      	ldr	r3, [pc, #484]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0e4      	b.n	8001b4c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001982:	f000 fa2d 	bl	8001de0 <RCC_GetSysClockFreqFromPLLSource>
 8001986:	4603      	mov	r3, r0
 8001988:	4a74      	ldr	r2, [pc, #464]	; (8001b5c <HAL_RCC_ClockConfig+0x248>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d955      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800198e:	4b72      	ldr	r3, [pc, #456]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10a      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800199a:	4b6f      	ldr	r3, [pc, #444]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a2:	4a6d      	ldr	r2, [pc, #436]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e044      	b.n	8001a3a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d03e      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x126>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d13a      	bne.n	8001a3a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019c4:	4b64      	ldr	r3, [pc, #400]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019cc:	4a62      	ldr	r2, [pc, #392]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019d4:	2380      	movs	r3, #128	; 0x80
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e02f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e2:	4b5d      	ldr	r3, [pc, #372]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d115      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0ac      	b.n	8001b4c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019fa:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0a0      	b.n	8001b4c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a0a:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e098      	b.n	8001b4c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001a1a:	f000 f8a7 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4a4e      	ldr	r2, [pc, #312]	; (8001b5c <HAL_RCC_ClockConfig+0x248>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d909      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a26:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a2e:	4a4a      	ldr	r2, [pc, #296]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a34:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f023 0203 	bic.w	r2, r3, #3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4944      	ldr	r1, [pc, #272]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a4c:	f7fe ffae 	bl	80009ac <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a54:	f7fe ffaa 	bl	80009ac <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e070      	b.n	8001b4c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 020c 	and.w	r2, r3, #12
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1eb      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d009      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	4930      	ldr	r1, [pc, #192]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	608b      	str	r3, [r1, #8]
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b80      	cmp	r3, #128	; 0x80
 8001aa0:	d105      	bne.n	8001aae <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	4a2c      	ldr	r2, [pc, #176]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001aa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aac:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d210      	bcs.n	8001ade <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abc:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f023 020f 	bic.w	r2, r3, #15
 8001ac4:	4923      	ldr	r1, [pc, #140]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001acc:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_RCC_ClockConfig+0x240>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e036      	b.n	8001b4c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d008      	beq.n	8001afc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aea:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	4918      	ldr	r1, [pc, #96]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691b      	ldr	r3, [r3, #16]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4910      	ldr	r1, [pc, #64]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b1c:	f000 f826 	bl	8001b6c <HAL_RCC_GetSysClockFreq>
 8001b20:	4602      	mov	r2, r0
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <HAL_RCC_ClockConfig+0x244>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	f003 030f 	and.w	r3, r3, #15
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <HAL_RCC_ClockConfig+0x24c>)
 8001b2e:	5ccb      	ldrb	r3, [r1, r3]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_RCC_ClockConfig+0x250>)
 8001b3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x254>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fe55 	bl	80007f0 <HAL_InitTick>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]

  return status;
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	04c4b400 	.word	0x04c4b400
 8001b60:	080077b0 	.word	0x080077b0
 8001b64:	20000000 	.word	0x20000000
 8001b68:	20000004 	.word	0x20000004

08001b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b089      	sub	sp, #36	; 0x24
 8001b70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b84:	4b3b      	ldr	r3, [pc, #236]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	2b0c      	cmp	r3, #12
 8001b98:	d121      	bne.n	8001bde <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d11e      	bne.n	8001bde <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bac:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	f003 030f 	and.w	r3, r3, #15
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e005      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bbc:	4b2d      	ldr	r3, [pc, #180]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	f003 030f 	and.w	r3, r3, #15
 8001bc6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bc8:	4a2b      	ldr	r2, [pc, #172]	; (8001c78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10d      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d102      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001be4:	4b25      	ldr	r3, [pc, #148]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	e004      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d101      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bf0:	4b23      	ldr	r3, [pc, #140]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bf2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b0c      	cmp	r3, #12
 8001bf8:	d134      	bne.n	8001c64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d003      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0xac>
 8001c10:	e005      	b.n	8001c1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_RCC_GetSysClockFreq+0x110>)
 8001c14:	617b      	str	r3, [r7, #20]
      break;
 8001c16:	e005      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c18:	4b19      	ldr	r3, [pc, #100]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c1a:	617b      	str	r3, [r7, #20]
      break;
 8001c1c:	e002      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	617b      	str	r3, [r7, #20]
      break;
 8001c22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	3301      	adds	r3, #1
 8001c30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	fb02 f203 	mul.w	r2, r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c4a:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	0e5b      	lsrs	r3, r3, #25
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	3301      	adds	r3, #1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c64:	69bb      	ldr	r3, [r7, #24]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000
 8001c78:	080077c8 	.word	0x080077c8
 8001c7c:	00f42400 	.word	0x00f42400
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ca0:	f7ff fff0 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	0a1b      	lsrs	r3, r3, #8
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	4904      	ldr	r1, [pc, #16]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cb2:	5ccb      	ldrb	r3, [r1, r3]
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	080077c0 	.word	0x080077c0

08001cc8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cfc:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	08db      	lsrs	r3, r3, #3
 8001d02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <HAL_RCC_GetClockConfig+0x60>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	601a      	str	r2, [r3, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40022000 	.word	0x40022000

08001d2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d38:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d44:	f7ff f8fc 	bl	8000f40 <HAL_PWREx_GetVoltageRange>
 8001d48:	6178      	str	r0, [r7, #20]
 8001d4a:	e014      	b.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	4a21      	ldr	r2, [pc, #132]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d56:	6593      	str	r3, [r2, #88]	; 0x58
 8001d58:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d64:	f7ff f8ec 	bl	8000f40 <HAL_PWREx_GetVoltageRange>
 8001d68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7c:	d10b      	bne.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b80      	cmp	r3, #128	; 0x80
 8001d82:	d913      	bls.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2ba0      	cmp	r3, #160	; 0xa0
 8001d88:	d902      	bls.n	8001d90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e00d      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d90:	2301      	movs	r3, #1
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e00a      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b7f      	cmp	r3, #127	; 0x7f
 8001d9a:	d902      	bls.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e004      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b70      	cmp	r3, #112	; 0x70
 8001da6:	d101      	bne.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da8:	2301      	movs	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 020f 	bic.w	r2, r3, #15
 8001db4:	4909      	ldr	r1, [pc, #36]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40022000 	.word	0x40022000

08001de0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001dea:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d118      	bne.n	8001e28 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e02:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e08:	0a1b      	lsrs	r3, r3, #8
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e005      	b.n	8001e1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e1e:	4a21      	ldr	r2, [pc, #132]	; (8001ea4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e28:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d003      	beq.n	8001e40 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b03      	cmp	r3, #3
 8001e3c:	d003      	beq.n	8001e46 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8001e3e:	e005      	b.n	8001e4c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001e42:	613b      	str	r3, [r7, #16]
    break;
 8001e44:	e005      	b.n	8001e52 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001e46:	4b19      	ldr	r3, [pc, #100]	; (8001eac <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e48:	613b      	str	r3, [r7, #16]
    break;
 8001e4a:	e002      	b.n	8001e52 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	613b      	str	r3, [r7, #16]
    break;
 8001e50:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	091b      	lsrs	r3, r3, #4
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	fb02 f203 	mul.w	r2, r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e76:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	0e5b      	lsrs	r3, r3, #25
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	3301      	adds	r3, #1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001e92:	683b      	ldr	r3, [r7, #0]
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	371c      	adds	r7, #28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	080077c8 	.word	0x080077c8
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	007a1200 	.word	0x007a1200

08001eb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e049      	b.n	8001f56 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d106      	bne.n	8001edc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f841 	bl	8001f5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3304      	adds	r3, #4
 8001eec:	4619      	mov	r1, r3
 8001eee:	4610      	mov	r0, r2
 8001ef0:	f000 f9f8 	bl	80022e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2201      	movs	r2, #1
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d001      	beq.n	8001f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e04f      	b.n	800202c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68da      	ldr	r2, [r3, #12]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a23      	ldr	r2, [pc, #140]	; (8002038 <HAL_TIM_Base_Start_IT+0xc4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01d      	beq.n	8001fea <HAL_TIM_Base_Start_IT+0x76>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb6:	d018      	beq.n	8001fea <HAL_TIM_Base_Start_IT+0x76>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	; (800203c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d013      	beq.n	8001fea <HAL_TIM_Base_Start_IT+0x76>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a1e      	ldr	r2, [pc, #120]	; (8002040 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00e      	beq.n	8001fea <HAL_TIM_Base_Start_IT+0x76>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d009      	beq.n	8001fea <HAL_TIM_Base_Start_IT+0x76>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1b      	ldr	r2, [pc, #108]	; (8002048 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d004      	beq.n	8001fea <HAL_TIM_Base_Start_IT+0x76>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	; (800204c <HAL_TIM_Base_Start_IT+0xd8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d115      	bne.n	8002016 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b06      	cmp	r3, #6
 8001ffa:	d015      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0xb4>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002002:	d011      	beq.n	8002028 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f042 0201 	orr.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002014:	e008      	b.n	8002028 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e000      	b.n	800202a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002028:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40012c00 	.word	0x40012c00
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800
 8002044:	40000c00 	.word	0x40000c00
 8002048:	40013400 	.word	0x40013400
 800204c:	40014000 	.word	0x40014000
 8002050:	00010007 	.word	0x00010007

08002054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b02      	cmp	r3, #2
 8002068:	d122      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b02      	cmp	r3, #2
 8002076:	d11b      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0202 	mvn.w	r2, #2
 8002080:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f905 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f8f7 	bl	8002292 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f908 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d122      	bne.n	8002104 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d11b      	bne.n	8002104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0204 	mvn.w	r2, #4
 80020d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2202      	movs	r2, #2
 80020da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8db 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 80020f0:	e005      	b.n	80020fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8cd 	bl	8002292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f8de 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b08      	cmp	r3, #8
 8002110:	d122      	bne.n	8002158 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f003 0308 	and.w	r3, r3, #8
 800211c:	2b08      	cmp	r3, #8
 800211e:	d11b      	bne.n	8002158 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0208 	mvn.w	r2, #8
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2204      	movs	r2, #4
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8b1 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8a3 	bl	8002292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f8b4 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b10      	cmp	r3, #16
 8002164:	d122      	bne.n	80021ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b10      	cmp	r3, #16
 8002172:	d11b      	bne.n	80021ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0210 	mvn.w	r2, #16
 800217c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2208      	movs	r2, #8
 8002182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	69db      	ldr	r3, [r3, #28]
 800218a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f887 	bl	80022a6 <HAL_TIM_IC_CaptureCallback>
 8002198:	e005      	b.n	80021a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f000 f879 	bl	8002292 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 f88a 	bl	80022ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d10e      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d107      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f06f 0201 	mvn.w	r2, #1
 80021d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fad0 	bl	8000778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e2:	2b80      	cmp	r3, #128	; 0x80
 80021e4:	d10e      	bne.n	8002204 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f0:	2b80      	cmp	r3, #128	; 0x80
 80021f2:	d107      	bne.n	8002204 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f914 	bl	800242c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002212:	d10e      	bne.n	8002232 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221e:	2b80      	cmp	r3, #128	; 0x80
 8002220:	d107      	bne.n	8002232 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800222a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f907 	bl	8002440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223c:	2b40      	cmp	r3, #64	; 0x40
 800223e:	d10e      	bne.n	800225e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224a:	2b40      	cmp	r3, #64	; 0x40
 800224c:	d107      	bne.n	800225e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f838 	bl	80022ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	f003 0320 	and.w	r3, r3, #32
 8002268:	2b20      	cmp	r3, #32
 800226a:	d10e      	bne.n	800228a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b20      	cmp	r3, #32
 8002278:	d107      	bne.n	800228a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f06f 0220 	mvn.w	r2, #32
 8002282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 f8c7 	bl	8002418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a40      	ldr	r2, [pc, #256]	; (80023f8 <TIM_Base_SetConfig+0x114>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d013      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002302:	d00f      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <TIM_Base_SetConfig+0x118>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d00b      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a3c      	ldr	r2, [pc, #240]	; (8002400 <TIM_Base_SetConfig+0x11c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d007      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a3b      	ldr	r2, [pc, #236]	; (8002404 <TIM_Base_SetConfig+0x120>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d003      	beq.n	8002324 <TIM_Base_SetConfig+0x40>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4a3a      	ldr	r2, [pc, #232]	; (8002408 <TIM_Base_SetConfig+0x124>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d108      	bne.n	8002336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800232a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a2f      	ldr	r2, [pc, #188]	; (80023f8 <TIM_Base_SetConfig+0x114>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <TIM_Base_SetConfig+0x9a>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002344:	d01b      	beq.n	800237e <TIM_Base_SetConfig+0x9a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a2c      	ldr	r2, [pc, #176]	; (80023fc <TIM_Base_SetConfig+0x118>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d017      	beq.n	800237e <TIM_Base_SetConfig+0x9a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a2b      	ldr	r2, [pc, #172]	; (8002400 <TIM_Base_SetConfig+0x11c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <TIM_Base_SetConfig+0x9a>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a2a      	ldr	r2, [pc, #168]	; (8002404 <TIM_Base_SetConfig+0x120>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00f      	beq.n	800237e <TIM_Base_SetConfig+0x9a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a29      	ldr	r2, [pc, #164]	; (8002408 <TIM_Base_SetConfig+0x124>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00b      	beq.n	800237e <TIM_Base_SetConfig+0x9a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a28      	ldr	r2, [pc, #160]	; (800240c <TIM_Base_SetConfig+0x128>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d007      	beq.n	800237e <TIM_Base_SetConfig+0x9a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a27      	ldr	r2, [pc, #156]	; (8002410 <TIM_Base_SetConfig+0x12c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d003      	beq.n	800237e <TIM_Base_SetConfig+0x9a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a26      	ldr	r2, [pc, #152]	; (8002414 <TIM_Base_SetConfig+0x130>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d108      	bne.n	8002390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <TIM_Base_SetConfig+0x114>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d00f      	beq.n	80023dc <TIM_Base_SetConfig+0xf8>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a12      	ldr	r2, [pc, #72]	; (8002408 <TIM_Base_SetConfig+0x124>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d00b      	beq.n	80023dc <TIM_Base_SetConfig+0xf8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a11      	ldr	r2, [pc, #68]	; (800240c <TIM_Base_SetConfig+0x128>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d007      	beq.n	80023dc <TIM_Base_SetConfig+0xf8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <TIM_Base_SetConfig+0x12c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d003      	beq.n	80023dc <TIM_Base_SetConfig+0xf8>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <TIM_Base_SetConfig+0x130>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d103      	bne.n	80023e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	615a      	str	r2, [r3, #20]
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40000400 	.word	0x40000400
 8002400:	40000800 	.word	0x40000800
 8002404:	40000c00 	.word	0x40000c00
 8002408:	40013400 	.word	0x40013400
 800240c:	40014000 	.word	0x40014000
 8002410:	40014400 	.word	0x40014400
 8002414:	40014800 	.word	0x40014800

08002418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f103 0208 	add.w	r2, r3, #8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f103 0208 	add.w	r2, r3, #8
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f103 0208 	add.w	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024ae:	b480      	push	{r7}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	1c5a      	adds	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	3714      	adds	r7, #20
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d103      	bne.n	8002516 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e00c      	b.n	8002530 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3308      	adds	r3, #8
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e002      	b.n	8002524 <vListInsert+0x2e>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	d2f6      	bcs.n	800251e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	601a      	str	r2, [r3, #0]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6892      	ldr	r2, [r2, #8]
 800257e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6852      	ldr	r2, [r2, #4]
 8002588:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	d103      	bne.n	800259c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	1e5a      	subs	r2, r3, #1
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <xQueueGenericReset+0x2a>
        __asm volatile
 80025d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d4:	f383 8811 	msr	BASEPRI, r3
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	60bb      	str	r3, [r7, #8]
    }
 80025e2:	bf00      	nop
 80025e4:	e7fe      	b.n	80025e4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80025e6:	f002 fc45 	bl	8004e74 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f2:	68f9      	ldr	r1, [r7, #12]
 80025f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025f6:	fb01 f303 	mul.w	r3, r1, r3
 80025fa:	441a      	add	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	3b01      	subs	r3, #1
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	441a      	add	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	22ff      	movs	r2, #255	; 0xff
 800262a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	22ff      	movs	r2, #255	; 0xff
 8002632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d114      	bne.n	8002666 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01a      	beq.n	800267a <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3310      	adds	r3, #16
 8002648:	4618      	mov	r0, r3
 800264a:	f001 fb23 	bl	8003c94 <xTaskRemoveFromEventList>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d012      	beq.n	800267a <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <xQueueGenericReset+0xcc>)
 8002656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	e009      	b.n	800267a <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	3310      	adds	r3, #16
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fef2 	bl	8002454 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff feed 	bl	8002454 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800267a:	f002 fc2b 	bl	8004ed4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	e000ed04 	.word	0xe000ed04

0800268c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	; 0x30
 8002690:	af02      	add	r7, sp, #8
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	4613      	mov	r3, r2
 8002698:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	61bb      	str	r3, [r7, #24]
    }
 80026b2:	bf00      	nop
 80026b4:	e7fe      	b.n	80026b4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d006      	beq.n	80026d4 <xQueueGenericCreate+0x48>
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d101      	bne.n	80026d8 <xQueueGenericCreate+0x4c>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <xQueueGenericCreate+0x4e>
 80026d8:	2300      	movs	r3, #0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <xQueueGenericCreate+0x68>
        __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	617b      	str	r3, [r7, #20]
    }
 80026f0:	bf00      	nop
 80026f2:	e7fe      	b.n	80026f2 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026fa:	d90a      	bls.n	8002712 <xQueueGenericCreate+0x86>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	613b      	str	r3, [r7, #16]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	3350      	adds	r3, #80	; 0x50
 8002716:	4618      	mov	r0, r3
 8002718:	f002 fcce 	bl	80050b8 <pvPortMalloc>
 800271c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	3350      	adds	r3, #80	; 0x50
 800272c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800272e:	79fa      	ldrb	r2, [r7, #7]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f805 	bl	800274a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002740:	6a3b      	ldr	r3, [r7, #32]
    }
 8002742:	4618      	mov	r0, r3
 8002744:	3728      	adds	r7, #40	; 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d103      	bne.n	8002766 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e002      	b.n	800276c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002778:	2101      	movs	r1, #1
 800277a:	69b8      	ldr	r0, [r7, #24]
 800277c:	f7ff ff1e 	bl	80025bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	78fa      	ldrb	r2, [r7, #3]
 8002784:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	2073      	movs	r0, #115	; 0x73
 8002790:	f004 f842 	bl	8006818 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b090      	sub	sp, #64	; 0x40
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <xQueueGenericSend+0x32>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <xQueueGenericSend+0x40>
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <xQueueGenericSend+0x44>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <xQueueGenericSend+0x46>
 80027e0:	2300      	movs	r3, #0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10a      	bne.n	80027fc <xQueueGenericSend+0x60>
        __asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d103      	bne.n	800280a <xQueueGenericSend+0x6e>
 8002802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <xQueueGenericSend+0x72>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <xQueueGenericSend+0x74>
 800280e:	2300      	movs	r3, #0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueGenericSend+0x8e>
        __asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	623b      	str	r3, [r7, #32]
    }
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800282a:	f001 fbd3 	bl	8003fd4 <xTaskGetSchedulerState>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <xQueueGenericSend+0x9e>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <xQueueGenericSend+0xa2>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueGenericSend+0xa4>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <xQueueGenericSend+0xbe>
        __asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	61fb      	str	r3, [r7, #28]
    }
 8002856:	bf00      	nop
 8002858:	e7fe      	b.n	8002858 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800285a:	f002 fb0b 	bl	8004e74 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	429a      	cmp	r2, r3
 8002868:	d302      	bcc.n	8002870 <xQueueGenericSend+0xd4>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d136      	bne.n	80028de <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	4618      	mov	r0, r3
 8002874:	f004 fd5c 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	460b      	mov	r3, r1
 8002882:	4601      	mov	r1, r0
 8002884:	205a      	movs	r0, #90	; 0x5a
 8002886:	f004 f83d 	bl	8006904 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002890:	f000 fa78 	bl	8002d84 <prvCopyDataToQueue>
 8002894:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	3324      	adds	r3, #36	; 0x24
 80028a2:	4618      	mov	r0, r3
 80028a4:	f001 f9f6 	bl	8003c94 <xTaskRemoveFromEventList>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d013      	beq.n	80028d6 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80028ae:	4b4d      	ldr	r3, [pc, #308]	; (80029e4 <xQueueGenericSend+0x248>)
 80028b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	e00a      	b.n	80028d6 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80028c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d007      	beq.n	80028d6 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <xQueueGenericSend+0x248>)
 80028c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80028d6:	f002 fafd 	bl	8004ed4 <vPortExitCritical>
                return pdPASS;
 80028da:	2301      	movs	r3, #1
 80028dc:	e07d      	b.n	80029da <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d110      	bne.n	8002906 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80028e4:	f002 faf6 	bl	8004ed4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	4618      	mov	r0, r3
 80028ec:	f004 fd20 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	460b      	mov	r3, r1
 80028fa:	4601      	mov	r1, r0
 80028fc:	205a      	movs	r0, #90	; 0x5a
 80028fe:	f004 f801 	bl	8006904 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002902:	2300      	movs	r3, #0
 8002904:	e069      	b.n	80029da <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800290c:	f107 0314 	add.w	r3, r7, #20
 8002910:	4618      	mov	r0, r3
 8002912:	f001 fa25 	bl	8003d60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002916:	2301      	movs	r3, #1
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800291a:	f002 fadb 	bl	8004ed4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800291e:	f000 ff71 	bl	8003804 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002922:	f002 faa7 	bl	8004e74 <vPortEnterCritical>
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800292c:	b25b      	sxtb	r3, r3
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d103      	bne.n	800293c <xQueueGenericSend+0x1a0>
 8002934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002942:	b25b      	sxtb	r3, r3
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d103      	bne.n	8002952 <xQueueGenericSend+0x1b6>
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002952:	f002 fabf 	bl	8004ed4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002956:	1d3a      	adds	r2, r7, #4
 8002958:	f107 0314 	add.w	r3, r7, #20
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fa14 	bl	8003d8c <xTaskCheckForTimeOut>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d124      	bne.n	80029b4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800296a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800296c:	f000 fb02 	bl	8002f74 <prvIsQueueFull>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d018      	beq.n	80029a8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	3310      	adds	r3, #16
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f001 f936 	bl	8003bf0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002986:	f000 fa8d 	bl	8002ea4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800298a:	f000 ff49 	bl	8003820 <xTaskResumeAll>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f47f af62 	bne.w	800285a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <xQueueGenericSend+0x248>)
 8002998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	e758      	b.n	800285a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029aa:	f000 fa7b 	bl	8002ea4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029ae:	f000 ff37 	bl	8003820 <xTaskResumeAll>
 80029b2:	e752      	b.n	800285a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b6:	f000 fa75 	bl	8002ea4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029ba:	f000 ff31 	bl	8003820 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fcb5 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	460b      	mov	r3, r1
 80029d0:	4601      	mov	r1, r0
 80029d2:	205a      	movs	r0, #90	; 0x5a
 80029d4:	f003 ff96 	bl	8006904 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80029d8:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3738      	adds	r7, #56	; 0x38
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b090      	sub	sp, #64	; 0x40
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80029fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d103      	bne.n	8002a24 <xQueueGenericSendFromISR+0x3c>
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <xQueueGenericSendFromISR+0x40>
 8002a24:	2301      	movs	r3, #1
 8002a26:	e000      	b.n	8002a2a <xQueueGenericSendFromISR+0x42>
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a40:	bf00      	nop
 8002a42:	e7fe      	b.n	8002a42 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d103      	bne.n	8002a52 <xQueueGenericSendFromISR+0x6a>
 8002a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <xQueueGenericSendFromISR+0x6e>
 8002a52:	2301      	movs	r3, #1
 8002a54:	e000      	b.n	8002a58 <xQueueGenericSendFromISR+0x70>
 8002a56:	2300      	movs	r3, #0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10a      	bne.n	8002a72 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	623b      	str	r3, [r7, #32]
    }
 8002a6e:	bf00      	nop
 8002a70:	e7fe      	b.n	8002a70 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a72:	f002 fae1 	bl	8005038 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002a76:	f3ef 8211 	mrs	r2, BASEPRI
 8002a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7e:	f383 8811 	msr	BASEPRI, r3
 8002a82:	f3bf 8f6f 	isb	sy
 8002a86:	f3bf 8f4f 	dsb	sy
 8002a8a:	61fa      	str	r2, [r7, #28]
 8002a8c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <xQueueGenericSendFromISR+0xbc>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d148      	bne.n	8002b36 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fc3a 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002abc:	4601      	mov	r1, r0
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	2060      	movs	r0, #96	; 0x60
 8002ac4:	f003 fe4e 	bl	8006764 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ac8:	683a      	ldr	r2, [r7, #0]
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ace:	f000 f959 	bl	8002d84 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002ad2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ada:	d112      	bne.n	8002b02 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d025      	beq.n	8002b30 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	3324      	adds	r3, #36	; 0x24
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 f8d3 	bl	8003c94 <xTaskRemoveFromEventList>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01d      	beq.n	8002b30 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01a      	beq.n	8002b30 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e016      	b.n	8002b30 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b06:	2b7f      	cmp	r3, #127	; 0x7f
 8002b08:	d10a      	bne.n	8002b20 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0e:	f383 8811 	msr	BASEPRI, r3
 8002b12:	f3bf 8f6f 	isb	sy
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	617b      	str	r3, [r7, #20]
    }
 8002b1c:	bf00      	nop
 8002b1e:	e7fe      	b.n	8002b1e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b20:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b24:	3301      	adds	r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	b25a      	sxtb	r2, r3
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b30:	2301      	movs	r3, #1
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002b34:	e00b      	b.n	8002b4e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f004 fbf9 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002b3e:	4601      	mov	r1, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	2060      	movs	r0, #96	; 0x60
 8002b46:	f003 fe0d 	bl	8006764 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b50:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b58:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3740      	adds	r7, #64	; 0x40
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b08f      	sub	sp, #60	; 0x3c
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002b70:	2300      	movs	r3, #0
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <xQueueReceive+0x30>
        __asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	623b      	str	r3, [r7, #32]
    }
 8002b90:	bf00      	nop
 8002b92:	e7fe      	b.n	8002b92 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <xQueueReceive+0x3e>
 8002b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueReceive+0x42>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueReceive+0x44>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <xQueueReceive+0x5e>
        __asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61fb      	str	r3, [r7, #28]
    }
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bc2:	f001 fa07 	bl	8003fd4 <xTaskGetSchedulerState>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d102      	bne.n	8002bd2 <xQueueReceive+0x6e>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <xQueueReceive+0x72>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueReceive+0x74>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueReceive+0x8e>
        __asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	61bb      	str	r3, [r7, #24]
    }
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002bf2:	f002 f93f 	bl	8004e74 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d02f      	beq.n	8002c62 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c06:	f000 f927 	bl	8002e58 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f004 fb8f 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002c12:	4604      	mov	r4, r0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f004 fb8b 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	9100      	str	r1, [sp, #0]
 8002c22:	4621      	mov	r1, r4
 8002c24:	205c      	movs	r0, #92	; 0x5c
 8002c26:	f003 fe6d 	bl	8006904 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1e5a      	subs	r2, r3, #1
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00f      	beq.n	8002c5a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	3310      	adds	r3, #16
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f001 f828 	bl	8003c94 <xTaskRemoveFromEventList>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <xQueueReceive+0x21c>)
 8002c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c5a:	f002 f93b 	bl	8004ed4 <vPortExitCritical>
                return pdPASS;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e08a      	b.n	8002d78 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d113      	bne.n	8002c90 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c68:	f002 f934 	bl	8004ed4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f004 fb5e 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002c74:	4604      	mov	r4, r0
 8002c76:	2000      	movs	r0, #0
 8002c78:	f004 fb5a 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2101      	movs	r1, #1
 8002c82:	9100      	str	r1, [sp, #0]
 8002c84:	4621      	mov	r1, r4
 8002c86:	205c      	movs	r0, #92	; 0x5c
 8002c88:	f003 fe3c 	bl	8006904 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e073      	b.n	8002d78 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f001 f860 	bl	8003d60 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ca4:	f002 f916 	bl	8004ed4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ca8:	f000 fdac 	bl	8003804 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cac:	f002 f8e2 	bl	8004e74 <vPortEnterCritical>
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cb6:	b25b      	sxtb	r3, r3
 8002cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cbc:	d103      	bne.n	8002cc6 <xQueueReceive+0x162>
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ccc:	b25b      	sxtb	r3, r3
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	d103      	bne.n	8002cdc <xQueueReceive+0x178>
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cdc:	f002 f8fa 	bl	8004ed4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ce0:	1d3a      	adds	r2, r7, #4
 8002ce2:	f107 0310 	add.w	r3, r7, #16
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 f84f 	bl	8003d8c <xTaskCheckForTimeOut>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d124      	bne.n	8002d3e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cf6:	f000 f927 	bl	8002f48 <prvIsQueueEmpty>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d018      	beq.n	8002d32 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	3324      	adds	r3, #36	; 0x24
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 ff71 	bl	8003bf0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d10:	f000 f8c8 	bl	8002ea4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d14:	f000 fd84 	bl	8003820 <xTaskResumeAll>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f47f af69 	bne.w	8002bf2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d20:	4b17      	ldr	r3, [pc, #92]	; (8002d80 <xQueueReceive+0x21c>)
 8002d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	e75f      	b.n	8002bf2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d34:	f000 f8b6 	bl	8002ea4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d38:	f000 fd72 	bl	8003820 <xTaskResumeAll>
 8002d3c:	e759      	b.n	8002bf2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d40:	f000 f8b0 	bl	8002ea4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d44:	f000 fd6c 	bl	8003820 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4a:	f000 f8fd 	bl	8002f48 <prvIsQueueEmpty>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f43f af4e 	beq.w	8002bf2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f004 fae9 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002d5e:	4604      	mov	r4, r0
 8002d60:	2000      	movs	r0, #0
 8002d62:	f004 fae5 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002d66:	4602      	mov	r2, r0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	9100      	str	r1, [sp, #0]
 8002d6e:	4621      	mov	r1, r4
 8002d70:	205c      	movs	r0, #92	; 0x5c
 8002d72:	f003 fdc7 	bl	8006904 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002d76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3734      	adds	r7, #52	; 0x34
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	e000ed04 	.word	0xe000ed04

08002d84 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10d      	bne.n	8002dbe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d14d      	bne.n	8002e46 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 f92e 	bl	8004010 <xTaskPriorityDisinherit>
 8002db4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	e043      	b.n	8002e46 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d119      	bne.n	8002df8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6858      	ldr	r0, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68b9      	ldr	r1, [r7, #8]
 8002dd0:	f004 fc3c 	bl	800764c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	441a      	add	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d32b      	bcc.n	8002e46 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	e026      	b.n	8002e46 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68d8      	ldr	r0, [r3, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	461a      	mov	r2, r3
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	f004 fc22 	bl	800764c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	68da      	ldr	r2, [r3, #12]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	425b      	negs	r3, r3
 8002e12:	441a      	add	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d207      	bcs.n	8002e34 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	441a      	add	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d105      	bne.n	8002e46 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d002      	beq.n	8002e46 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e4e:	697b      	ldr	r3, [r7, #20]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d018      	beq.n	8002e9c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	441a      	add	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d303      	bcc.n	8002e8c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	68d9      	ldr	r1, [r3, #12]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	461a      	mov	r2, r3
 8002e96:	6838      	ldr	r0, [r7, #0]
 8002e98:	f004 fbd8 	bl	800764c <memcpy>
    }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002eac:	f001 ffe2 	bl	8004e74 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eb8:	e011      	b.n	8002ede <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3324      	adds	r3, #36	; 0x24
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fee4 	bl	8003c94 <xTaskRemoveFromEventList>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002ed2:	f000 ffc1 	bl	8003e58 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	dce9      	bgt.n	8002eba <prvUnlockQueue+0x16>
 8002ee6:	e000      	b.n	8002eea <prvUnlockQueue+0x46>
                        break;
 8002ee8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	22ff      	movs	r2, #255	; 0xff
 8002eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002ef2:	f001 ffef 	bl	8004ed4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002ef6:	f001 ffbd 	bl	8004e74 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f00:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f02:	e011      	b.n	8002f28 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d012      	beq.n	8002f32 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3310      	adds	r3, #16
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 febf 	bl	8003c94 <xTaskRemoveFromEventList>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f1c:	f000 ff9c 	bl	8003e58 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	dce9      	bgt.n	8002f04 <prvUnlockQueue+0x60>
 8002f30:	e000      	b.n	8002f34 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f32:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	22ff      	movs	r2, #255	; 0xff
 8002f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f3c:	f001 ffca 	bl	8004ed4 <vPortExitCritical>
}
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f50:	f001 ff90 	bl	8004e74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e001      	b.n	8002f66 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f66:	f001 ffb5 	bl	8004ed4 <vPortExitCritical>

    return xReturn;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f7c:	f001 ff7a 	bl	8004e74 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d102      	bne.n	8002f92 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e001      	b.n	8002f96 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f96:	f001 ff9d 	bl	8004ed4 <vPortExitCritical>

    return xReturn;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	e01e      	b.n	8002ff2 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fb4:	4a13      	ldr	r2, [pc, #76]	; (8003004 <vQueueAddToRegistry+0x60>)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d115      	bne.n	8002fec <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fc0:	4910      	ldr	r1, [pc, #64]	; (8003004 <vQueueAddToRegistry+0x60>)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	683a      	ldr	r2, [r7, #0]
 8002fc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002fca:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <vQueueAddToRegistry+0x60>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	00db      	lsls	r3, r3, #3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f004 f9a9 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 8002fde:	4601      	mov	r1, r0
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2071      	movs	r0, #113	; 0x71
 8002fe6:	f003 fbbd 	bl	8006764 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002fea:	e006      	b.n	8002ffa <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b07      	cmp	r3, #7
 8002ff6:	d9dd      	bls.n	8002fb4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ff8:	bf00      	nop
 8002ffa:	bf00      	nop
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	2001c3cc 	.word	0x2001c3cc

08003008 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003018:	f001 ff2c 	bl	8004e74 <vPortEnterCritical>
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003022:	b25b      	sxtb	r3, r3
 8003024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003028:	d103      	bne.n	8003032 <vQueueWaitForMessageRestricted+0x2a>
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003038:	b25b      	sxtb	r3, r3
 800303a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303e:	d103      	bne.n	8003048 <vQueueWaitForMessageRestricted+0x40>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003048:	f001 ff44 	bl	8004ed4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	2b00      	cmp	r3, #0
 8003052:	d106      	bne.n	8003062 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	3324      	adds	r3, #36	; 0x24
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	68b9      	ldr	r1, [r7, #8]
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fdeb 	bl	8003c38 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff ff1e 	bl	8002ea4 <prvUnlockQueue>
    }
 8003068:	bf00      	nop
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}

08003070 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003070:	b580      	push	{r7, lr}
 8003072:	b08c      	sub	sp, #48	; 0x30
 8003074:	af04      	add	r7, sp, #16
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	4613      	mov	r3, r2
 800307e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4618      	mov	r0, r3
 8003086:	f002 f817 	bl	80050b8 <pvPortMalloc>
 800308a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00e      	beq.n	80030b0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003092:	2058      	movs	r0, #88	; 0x58
 8003094:	f002 f810 	bl	80050b8 <pvPortMalloc>
 8003098:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
 80030a6:	e005      	b.n	80030b4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80030a8:	6978      	ldr	r0, [r7, #20]
 80030aa:	f002 f8e5 	bl	8005278 <vPortFree>
 80030ae:	e001      	b.n	80030b4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d013      	beq.n	80030e2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	2300      	movs	r3, #0
 80030be:	9303      	str	r3, [sp, #12]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	9302      	str	r3, [sp, #8]
 80030c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c6:	9301      	str	r3, [sp, #4]
 80030c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f000 f80e 	bl	80030f2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80030d6:	69f8      	ldr	r0, [r7, #28]
 80030d8:	f000 f8a2 	bl	8003220 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80030dc:	2301      	movs	r3, #1
 80030de:	61bb      	str	r3, [r7, #24]
 80030e0:	e002      	b.n	80030e8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030e2:	f04f 33ff 	mov.w	r3, #4294967295
 80030e6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80030e8:	69bb      	ldr	r3, [r7, #24]
    }
 80030ea:	4618      	mov	r0, r3
 80030ec:	3720      	adds	r7, #32
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b088      	sub	sp, #32
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	461a      	mov	r2, r3
 800310a:	21a5      	movs	r1, #165	; 0xa5
 800310c:	f004 faac 	bl	8007668 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800311a:	3b01      	subs	r3, #1
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	f023 0307 	bic.w	r3, r3, #7
 8003128:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	f003 0307 	and.w	r3, r3, #7
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	617b      	str	r3, [r7, #20]
    }
 8003146:	bf00      	nop
 8003148:	e7fe      	b.n	8003148 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01f      	beq.n	8003190 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003150:	2300      	movs	r3, #0
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	e012      	b.n	800317c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	4413      	add	r3, r2
 800315c:	7819      	ldrb	r1, [r3, #0]
 800315e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	4413      	add	r3, r2
 8003164:	3334      	adds	r3, #52	; 0x34
 8003166:	460a      	mov	r2, r1
 8003168:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	4413      	add	r3, r2
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3301      	adds	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	2b09      	cmp	r3, #9
 8003180:	d9e9      	bls.n	8003156 <prvInitialiseNewTask+0x64>
 8003182:	e000      	b.n	8003186 <prvInitialiseNewTask+0x94>
            {
                break;
 8003184:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800318e:	e003      	b.n	8003198 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	2b04      	cmp	r3, #4
 800319c:	d901      	bls.n	80031a2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800319e:	2304      	movs	r3, #4
 80031a0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80031a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ac:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80031ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	3304      	adds	r3, #4
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f96b 	bl	8002494 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c0:	3318      	adds	r3, #24
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f966 	bl	8002494 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031cc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	f1c3 0205 	rsb	r2, r3, #5
 80031d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	3350      	adds	r3, #80	; 0x50
 80031e2:	2204      	movs	r2, #4
 80031e4:	2100      	movs	r1, #0
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 fa3e 	bl	8007668 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80031ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ee:	3354      	adds	r3, #84	; 0x54
 80031f0:	2201      	movs	r2, #1
 80031f2:	2100      	movs	r1, #0
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 fa37 	bl	8007668 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	68f9      	ldr	r1, [r7, #12]
 80031fe:	69b8      	ldr	r0, [r7, #24]
 8003200:	f001 fc8a 	bl	8004b18 <pxPortInitialiseStack>
 8003204:	4602      	mov	r2, r0
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003214:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003216:	bf00      	nop
 8003218:	3720      	adds	r7, #32
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003220:	b5b0      	push	{r4, r5, r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af02      	add	r7, sp, #8
 8003226:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003228:	f001 fe24 	bl	8004e74 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800322c:	4b3b      	ldr	r3, [pc, #236]	; (800331c <prvAddNewTaskToReadyList+0xfc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	4a3a      	ldr	r2, [pc, #232]	; (800331c <prvAddNewTaskToReadyList+0xfc>)
 8003234:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800323e:	4a38      	ldr	r2, [pc, #224]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003244:	4b35      	ldr	r3, [pc, #212]	; (800331c <prvAddNewTaskToReadyList+0xfc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d110      	bne.n	800326e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800324c:	f000 fe28 	bl	8003ea0 <prvInitialiseTaskLists>
 8003250:	e00d      	b.n	800326e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003252:	4b34      	ldr	r3, [pc, #208]	; (8003324 <prvAddNewTaskToReadyList+0x104>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800325a:	4b31      	ldr	r3, [pc, #196]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	429a      	cmp	r2, r3
 8003266:	d802      	bhi.n	800326e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003268:	4a2d      	ldr	r2, [pc, #180]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <prvAddNewTaskToReadyList+0x108>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3301      	adds	r3, #1
 8003274:	4a2c      	ldr	r2, [pc, #176]	; (8003328 <prvAddNewTaskToReadyList+0x108>)
 8003276:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003278:	4b2b      	ldr	r3, [pc, #172]	; (8003328 <prvAddNewTaskToReadyList+0x108>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d016      	beq.n	80032b4 <prvAddNewTaskToReadyList+0x94>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4618      	mov	r0, r3
 800328a:	f003 ff2b 	bl	80070e4 <SEGGER_SYSVIEW_OnTaskCreate>
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	461d      	mov	r5, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	461c      	mov	r4, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	1ae3      	subs	r3, r4, r3
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	462b      	mov	r3, r5
 80032b0:	f002 f9b2 	bl	8005618 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 ff98 	bl	80071ec <SEGGER_SYSVIEW_OnTaskStartReady>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	2201      	movs	r2, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <prvAddNewTaskToReadyList+0x10c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	4a18      	ldr	r2, [pc, #96]	; (800332c <prvAddNewTaskToReadyList+0x10c>)
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <prvAddNewTaskToReadyList+0x110>)
 80032dc:	441a      	add	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3304      	adds	r3, #4
 80032e2:	4619      	mov	r1, r3
 80032e4:	4610      	mov	r0, r2
 80032e6:	f7ff f8e2 	bl	80024ae <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80032ea:	f001 fdf3 	bl	8004ed4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80032ee:	4b0d      	ldr	r3, [pc, #52]	; (8003324 <prvAddNewTaskToReadyList+0x104>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00e      	beq.n	8003314 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032f6:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <prvAddNewTaskToReadyList+0x100>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003300:	429a      	cmp	r2, r3
 8003302:	d207      	bcs.n	8003314 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <prvAddNewTaskToReadyList+0x114>)
 8003306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bdb0      	pop	{r4, r5, r7, pc}
 800331c:	20000108 	.word	0x20000108
 8003320:	20000030 	.word	0x20000030
 8003324:	20000114 	.word	0x20000114
 8003328:	20000124 	.word	0x20000124
 800332c:	20000110 	.word	0x20000110
 8003330:	20000034 	.word	0x20000034
 8003334:	e000ed04 	.word	0xe000ed04

08003338 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003342:	2300      	movs	r3, #0
 8003344:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xTaskDelayUntil+0x2a>
        __asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	617b      	str	r3, [r7, #20]
    }
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10a      	bne.n	800337e <xTaskDelayUntil+0x46>
        __asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336c:	f383 8811 	msr	BASEPRI, r3
 8003370:	f3bf 8f6f 	isb	sy
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	613b      	str	r3, [r7, #16]
    }
 800337a:	bf00      	nop
 800337c:	e7fe      	b.n	800337c <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 800337e:	4b2c      	ldr	r3, [pc, #176]	; (8003430 <xTaskDelayUntil+0xf8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00a      	beq.n	800339c <xTaskDelayUntil+0x64>
        __asm volatile
 8003386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338a:	f383 8811 	msr	BASEPRI, r3
 800338e:	f3bf 8f6f 	isb	sy
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	60fb      	str	r3, [r7, #12]
    }
 8003398:	bf00      	nop
 800339a:	e7fe      	b.n	800339a <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 800339c:	f000 fa32 	bl	8003804 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <xTaskDelayUntil+0xfc>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6a3a      	ldr	r2, [r7, #32]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d20b      	bcs.n	80033d2 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d211      	bcs.n	80033e8 <xTaskDelayUntil+0xb0>
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d90d      	bls.n	80033e8 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
 80033d0:	e00a      	b.n	80033e8 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d303      	bcc.n	80033e4 <xTaskDelayUntil+0xac>
 80033dc:	69fa      	ldr	r2, [r7, #28]
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d901      	bls.n	80033e8 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80033e4:	2301      	movs	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80033f4:	2024      	movs	r0, #36	; 0x24
 80033f6:	f003 f95b 	bl	80066b0 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	6a3b      	ldr	r3, [r7, #32]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f000 fffe 	bl	8004404 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003408:	f000 fa0a 	bl	8003820 <xTaskResumeAll>
 800340c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d107      	bne.n	8003424 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8003414:	4b08      	ldr	r3, [pc, #32]	; (8003438 <xTaskDelayUntil+0x100>)
 8003416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341a:	601a      	str	r2, [r3, #0]
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003426:	4618      	mov	r0, r3
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000130 	.word	0x20000130
 8003434:	2000010c 	.word	0x2000010c
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01b      	beq.n	8003486 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800344e:	4b15      	ldr	r3, [pc, #84]	; (80034a4 <vTaskDelay+0x68>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <vTaskDelay+0x30>
        __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	60bb      	str	r3, [r7, #8]
    }
 8003468:	bf00      	nop
 800346a:	e7fe      	b.n	800346a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800346c:	f000 f9ca 	bl	8003804 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	2023      	movs	r0, #35	; 0x23
 8003474:	f003 f93a 	bl	80066ec <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003478:	2100      	movs	r1, #0
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 ffc2 	bl	8004404 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003480:	f000 f9ce 	bl	8003820 <xTaskResumeAll>
 8003484:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <vTaskDelay+0x6c>)
 800348e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000130 	.word	0x20000130
 80034a8:	e000ed04 	.word	0xe000ed04

080034ac <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80034b4:	f001 fcde 	bl	8004e74 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d102      	bne.n	80034c4 <vTaskSuspend+0x18>
 80034be:	4b4a      	ldr	r3, [pc, #296]	; (80035e8 <vTaskSuspend+0x13c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	e000      	b.n	80034c6 <vTaskSuspend+0x1a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f003 ff30 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 80034d0:	4603      	mov	r3, r0
 80034d2:	4619      	mov	r1, r3
 80034d4:	2029      	movs	r0, #41	; 0x29
 80034d6:	f003 f909 	bl	80066ec <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3304      	adds	r3, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff f842 	bl	8002568 <uxListRemove>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d115      	bne.n	8003516 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	493f      	ldr	r1, [pc, #252]	; (80035ec <vTaskSuspend+0x140>)
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <vTaskSuspend+0x6a>
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	2201      	movs	r2, #1
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <vTaskSuspend+0x144>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4013      	ands	r3, r2
 8003512:	4a37      	ldr	r2, [pc, #220]	; (80035f0 <vTaskSuspend+0x144>)
 8003514:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	2b00      	cmp	r3, #0
 800351c:	d004      	beq.n	8003528 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	3318      	adds	r3, #24
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f820 	bl	8002568 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	211b      	movs	r1, #27
 800352c:	4618      	mov	r0, r3
 800352e:	f003 fe9f 	bl	8007270 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	3304      	adds	r3, #4
 8003536:	4619      	mov	r1, r3
 8003538:	482e      	ldr	r0, [pc, #184]	; (80035f4 <vTaskSuspend+0x148>)
 800353a:	f7fe ffb8 	bl	80024ae <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	e010      	b.n	8003566 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4413      	add	r3, r2
 800354a:	3354      	adds	r3, #84	; 0x54
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d105      	bne.n	8003560 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	4413      	add	r3, r2
 800355a:	3354      	adds	r3, #84	; 0x54
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3301      	adds	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	ddeb      	ble.n	8003544 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800356c:	f001 fcb2 	bl	8004ed4 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <vTaskSuspend+0x14c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8003578:	f001 fc7c 	bl	8004e74 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 800357c:	f000 fd0e 	bl	8003f9c <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8003580:	f001 fca8 	bl	8004ed4 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <vTaskSuspend+0x13c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	429a      	cmp	r2, r3
 800358c:	d127      	bne.n	80035de <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <vTaskSuspend+0x14c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d017      	beq.n	80035c6 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <vTaskSuspend+0x150>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <vTaskSuspend+0x108>
        __asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	60fb      	str	r3, [r7, #12]
    }
 80035b0:	bf00      	nop
 80035b2:	e7fe      	b.n	80035b2 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <vTaskSuspend+0x154>)
 80035b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80035c4:	e00b      	b.n	80035de <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <vTaskSuspend+0x148>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	4b0e      	ldr	r3, [pc, #56]	; (8003604 <vTaskSuspend+0x158>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d103      	bne.n	80035da <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <vTaskSuspend+0x13c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
    }
 80035d8:	e001      	b.n	80035de <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 80035da:	f000 fa9f 	bl	8003b1c <vTaskSwitchContext>
    }
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000030 	.word	0x20000030
 80035ec:	20000034 	.word	0x20000034
 80035f0:	20000110 	.word	0x20000110
 80035f4:	200000f4 	.word	0x200000f4
 80035f8:	20000114 	.word	0x20000114
 80035fc:	20000130 	.word	0x20000130
 8003600:	e000ed04 	.word	0xe000ed04
 8003604:	20000108 	.word	0x20000108

08003608 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10a      	bne.n	8003634 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800361e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003622:	f383 8811 	msr	BASEPRI, r3
 8003626:	f3bf 8f6f 	isb	sy
 800362a:	f3bf 8f4f 	dsb	sy
 800362e:	60fb      	str	r3, [r7, #12]
    }
 8003630:	bf00      	nop
 8003632:	e7fe      	b.n	8003632 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	4a0a      	ldr	r2, [pc, #40]	; (8003664 <prvTaskIsTaskSuspended+0x5c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d10a      	bne.n	8003654 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	4a09      	ldr	r2, [pc, #36]	; (8003668 <prvTaskIsTaskSuspended+0x60>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d005      	beq.n	8003654 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8003650:	2301      	movs	r3, #1
 8003652:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003654:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003656:	4618      	mov	r0, r3
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	200000f4 	.word	0x200000f4
 8003668:	200000c8 	.word	0x200000c8

0800366c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <vTaskResume+0x28>
        __asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	60bb      	str	r3, [r7, #8]
    }
 8003690:	bf00      	nop
 8003692:	e7fe      	b.n	8003692 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003694:	4b26      	ldr	r3, [pc, #152]	; (8003730 <vTaskResume+0xc4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	429a      	cmp	r2, r3
 800369c:	d044      	beq.n	8003728 <vTaskResume+0xbc>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d041      	beq.n	8003728 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 80036a4:	f001 fbe6 	bl	8004e74 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff ffad 	bl	8003608 <prvTaskIsTaskSuspended>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d037      	beq.n	8003724 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f003 fe3a 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 80036bc:	4603      	mov	r3, r0
 80036be:	4619      	mov	r1, r3
 80036c0:	202a      	movs	r0, #42	; 0x2a
 80036c2:	f003 f813 	bl	80066ec <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe ff4c 	bl	8002568 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f003 fd8a 	bl	80071ec <SEGGER_SYSVIEW_OnTaskStartReady>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	2201      	movs	r2, #1
 80036de:	409a      	lsls	r2, r3
 80036e0:	4b14      	ldr	r3, [pc, #80]	; (8003734 <vTaskResume+0xc8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	4a13      	ldr	r2, [pc, #76]	; (8003734 <vTaskResume+0xc8>)
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4a10      	ldr	r2, [pc, #64]	; (8003738 <vTaskResume+0xcc>)
 80036f8:	441a      	add	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	3304      	adds	r3, #4
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f7fe fed4 	bl	80024ae <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <vTaskResume+0xc4>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003710:	429a      	cmp	r2, r3
 8003712:	d307      	bcc.n	8003724 <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <vTaskResume+0xd0>)
 8003716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003724:	f001 fbd6 	bl	8004ed4 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000030 	.word	0x20000030
 8003734:	20000110 	.word	0x20000110
 8003738:	20000034 	.word	0x20000034
 800373c:	e000ed04 	.word	0xe000ed04

08003740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b086      	sub	sp, #24
 8003744:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003746:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <vTaskStartScheduler+0xa4>)
 8003748:	9301      	str	r3, [sp, #4]
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	2300      	movs	r3, #0
 8003750:	2282      	movs	r2, #130	; 0x82
 8003752:	4925      	ldr	r1, [pc, #148]	; (80037e8 <vTaskStartScheduler+0xa8>)
 8003754:	4825      	ldr	r0, [pc, #148]	; (80037ec <vTaskStartScheduler+0xac>)
 8003756:	f7ff fc8b 	bl	8003070 <xTaskCreate>
 800375a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d102      	bne.n	8003768 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003762:	f000 fec7 	bl	80044f4 <xTimerCreateTimerTask>
 8003766:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d124      	bne.n	80037b8 <vTaskStartScheduler+0x78>
        __asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	60bb      	str	r3, [r7, #8]
    }
 8003780:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003782:	4b1b      	ldr	r3, [pc, #108]	; (80037f0 <vTaskStartScheduler+0xb0>)
 8003784:	f04f 32ff 	mov.w	r2, #4294967295
 8003788:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <vTaskStartScheduler+0xb4>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <vTaskStartScheduler+0xb8>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <vTaskStartScheduler+0xbc>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <vTaskStartScheduler+0xa4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d102      	bne.n	80037a8 <vTaskStartScheduler+0x68>
 80037a2:	f003 fc83 	bl	80070ac <SEGGER_SYSVIEW_OnIdle>
 80037a6:	e004      	b.n	80037b2 <vTaskStartScheduler+0x72>
 80037a8:	4b14      	ldr	r3, [pc, #80]	; (80037fc <vTaskStartScheduler+0xbc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f003 fcdb 	bl	8007168 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80037b2:	f001 fa3f 	bl	8004c34 <xPortStartScheduler>
 80037b6:	e00e      	b.n	80037d6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d10a      	bne.n	80037d6 <vTaskStartScheduler+0x96>
        __asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	607b      	str	r3, [r7, #4]
    }
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <vTaskStartScheduler+0xc0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	2000012c 	.word	0x2000012c
 80037e8:	080076d0 	.word	0x080076d0
 80037ec:	08003e71 	.word	0x08003e71
 80037f0:	20000128 	.word	0x20000128
 80037f4:	20000114 	.word	0x20000114
 80037f8:	2000010c 	.word	0x2000010c
 80037fc:	20000030 	.word	0x20000030
 8003800:	2000000c 	.word	0x2000000c

08003804 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <vTaskSuspendAll+0x18>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3301      	adds	r3, #1
 800380e:	4a03      	ldr	r2, [pc, #12]	; (800381c <vTaskSuspendAll+0x18>)
 8003810:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003812:	bf00      	nop
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	20000130 	.word	0x20000130

08003820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800382e:	4b43      	ldr	r3, [pc, #268]	; (800393c <xTaskResumeAll+0x11c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10a      	bne.n	800384c <xTaskResumeAll+0x2c>
        __asm volatile
 8003836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383a:	f383 8811 	msr	BASEPRI, r3
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	603b      	str	r3, [r7, #0]
    }
 8003848:	bf00      	nop
 800384a:	e7fe      	b.n	800384a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800384c:	f001 fb12 	bl	8004e74 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003850:	4b3a      	ldr	r3, [pc, #232]	; (800393c <xTaskResumeAll+0x11c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	4a39      	ldr	r2, [pc, #228]	; (800393c <xTaskResumeAll+0x11c>)
 8003858:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800385a:	4b38      	ldr	r3, [pc, #224]	; (800393c <xTaskResumeAll+0x11c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d165      	bne.n	800392e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003862:	4b37      	ldr	r3, [pc, #220]	; (8003940 <xTaskResumeAll+0x120>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d061      	beq.n	800392e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800386a:	e032      	b.n	80038d2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386c:	4b35      	ldr	r3, [pc, #212]	; (8003944 <xTaskResumeAll+0x124>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	3318      	adds	r3, #24
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fe75 	bl	8002568 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3304      	adds	r3, #4
 8003882:	4618      	mov	r0, r3
 8003884:	f7fe fe70 	bl	8002568 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4618      	mov	r0, r3
 800388c:	f003 fcae 	bl	80071ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <xTaskResumeAll+0x128>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4313      	orrs	r3, r2
 800389e:	4a2a      	ldr	r2, [pc, #168]	; (8003948 <xTaskResumeAll+0x128>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a27      	ldr	r2, [pc, #156]	; (800394c <xTaskResumeAll+0x12c>)
 80038b0:	441a      	add	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3304      	adds	r3, #4
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7fe fdf8 	bl	80024ae <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <xTaskResumeAll+0x130>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d302      	bcc.n	80038d2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80038cc:	4b21      	ldr	r3, [pc, #132]	; (8003954 <xTaskResumeAll+0x134>)
 80038ce:	2201      	movs	r2, #1
 80038d0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038d2:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <xTaskResumeAll+0x124>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1c8      	bne.n	800386c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80038e0:	f000 fb5c 	bl	8003f9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80038e4:	4b1c      	ldr	r3, [pc, #112]	; (8003958 <xTaskResumeAll+0x138>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d010      	beq.n	8003912 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80038f0:	f000 f858 	bl	80039a4 <xTaskIncrementTick>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <xTaskResumeAll+0x134>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3b01      	subs	r3, #1
 8003904:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1f1      	bne.n	80038f0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <xTaskResumeAll+0x138>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <xTaskResumeAll+0x134>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800391a:	2301      	movs	r3, #1
 800391c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800391e:	4b0f      	ldr	r3, [pc, #60]	; (800395c <xTaskResumeAll+0x13c>)
 8003920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800392e:	f001 fad1 	bl	8004ed4 <vPortExitCritical>

    return xAlreadyYielded;
 8003932:	68bb      	ldr	r3, [r7, #8]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000130 	.word	0x20000130
 8003940:	20000108 	.word	0x20000108
 8003944:	200000c8 	.word	0x200000c8
 8003948:	20000110 	.word	0x20000110
 800394c:	20000034 	.word	0x20000034
 8003950:	20000030 	.word	0x20000030
 8003954:	2000011c 	.word	0x2000011c
 8003958:	20000118 	.word	0x20000118
 800395c:	e000ed04 	.word	0xe000ed04

08003960 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003966:	4b05      	ldr	r3, [pc, #20]	; (800397c <xTaskGetTickCount+0x1c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800396c:	687b      	ldr	r3, [r7, #4]
}
 800396e:	4618      	mov	r0, r3
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	2000010c 	.word	0x2000010c

08003980 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003986:	f001 fb57 	bl	8005038 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800398e:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <xTaskGetTickCountFromISR+0x20>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003994:	683b      	ldr	r3, [r7, #0]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	2000010c 	.word	0x2000010c

080039a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039ae:	4b50      	ldr	r3, [pc, #320]	; (8003af0 <xTaskIncrementTick+0x14c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f040 8092 	bne.w	8003adc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039b8:	4b4e      	ldr	r3, [pc, #312]	; (8003af4 <xTaskIncrementTick+0x150>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	3301      	adds	r3, #1
 80039be:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80039c0:	4a4c      	ldr	r2, [pc, #304]	; (8003af4 <xTaskIncrementTick+0x150>)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d120      	bne.n	8003a0e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80039cc:	4b4a      	ldr	r3, [pc, #296]	; (8003af8 <xTaskIncrementTick+0x154>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <xTaskIncrementTick+0x48>
        __asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	603b      	str	r3, [r7, #0]
    }
 80039e8:	bf00      	nop
 80039ea:	e7fe      	b.n	80039ea <xTaskIncrementTick+0x46>
 80039ec:	4b42      	ldr	r3, [pc, #264]	; (8003af8 <xTaskIncrementTick+0x154>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b42      	ldr	r3, [pc, #264]	; (8003afc <xTaskIncrementTick+0x158>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a40      	ldr	r2, [pc, #256]	; (8003af8 <xTaskIncrementTick+0x154>)
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	4a40      	ldr	r2, [pc, #256]	; (8003afc <xTaskIncrementTick+0x158>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b3f      	ldr	r3, [pc, #252]	; (8003b00 <xTaskIncrementTick+0x15c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	4a3e      	ldr	r2, [pc, #248]	; (8003b00 <xTaskIncrementTick+0x15c>)
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	f000 fac7 	bl	8003f9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a0e:	4b3d      	ldr	r3, [pc, #244]	; (8003b04 <xTaskIncrementTick+0x160>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d34c      	bcc.n	8003ab2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a18:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <xTaskIncrementTick+0x154>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d104      	bne.n	8003a2c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a22:	4b38      	ldr	r3, [pc, #224]	; (8003b04 <xTaskIncrementTick+0x160>)
 8003a24:	f04f 32ff 	mov.w	r2, #4294967295
 8003a28:	601a      	str	r2, [r3, #0]
                    break;
 8003a2a:	e042      	b.n	8003ab2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a2c:	4b32      	ldr	r3, [pc, #200]	; (8003af8 <xTaskIncrementTick+0x154>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d203      	bcs.n	8003a4c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003a44:	4a2f      	ldr	r2, [pc, #188]	; (8003b04 <xTaskIncrementTick+0x160>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a4a:	e032      	b.n	8003ab2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fe fd89 	bl	8002568 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	3318      	adds	r3, #24
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fd80 	bl	8002568 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 fbbe 	bl	80071ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2201      	movs	r2, #1
 8003a76:	409a      	lsls	r2, r3
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <xTaskIncrementTick+0x164>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <xTaskIncrementTick+0x164>)
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4a1f      	ldr	r2, [pc, #124]	; (8003b0c <xTaskIncrementTick+0x168>)
 8003a90:	441a      	add	r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f7fe fd08 	bl	80024ae <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa2:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <xTaskIncrementTick+0x16c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d3b5      	bcc.n	8003a18 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ab0:	e7b2      	b.n	8003a18 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ab2:	4b17      	ldr	r3, [pc, #92]	; (8003b10 <xTaskIncrementTick+0x16c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	4914      	ldr	r1, [pc, #80]	; (8003b0c <xTaskIncrementTick+0x168>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d901      	bls.n	8003ace <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003aca:	2301      	movs	r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003ace:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <xTaskIncrementTick+0x170>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d007      	beq.n	8003ae6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	e004      	b.n	8003ae6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <xTaskIncrementTick+0x174>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	4a0d      	ldr	r2, [pc, #52]	; (8003b18 <xTaskIncrementTick+0x174>)
 8003ae4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003ae6:	697b      	ldr	r3, [r7, #20]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000130 	.word	0x20000130
 8003af4:	2000010c 	.word	0x2000010c
 8003af8:	200000c0 	.word	0x200000c0
 8003afc:	200000c4 	.word	0x200000c4
 8003b00:	20000120 	.word	0x20000120
 8003b04:	20000128 	.word	0x20000128
 8003b08:	20000110 	.word	0x20000110
 8003b0c:	20000034 	.word	0x20000034
 8003b10:	20000030 	.word	0x20000030
 8003b14:	2000011c 	.word	0x2000011c
 8003b18:	20000118 	.word	0x20000118

08003b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b22:	4b2d      	ldr	r3, [pc, #180]	; (8003bd8 <vTaskSwitchContext+0xbc>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d003      	beq.n	8003b32 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003b2a:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <vTaskSwitchContext+0xc0>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003b30:	e04d      	b.n	8003bce <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003b32:	4b2a      	ldr	r3, [pc, #168]	; (8003bdc <vTaskSwitchContext+0xc0>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <vTaskSwitchContext+0xc4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	fab3 f383 	clz	r3, r3
 8003b44:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003b46:	7afb      	ldrb	r3, [r7, #11]
 8003b48:	f1c3 031f 	rsb	r3, r3, #31
 8003b4c:	617b      	str	r3, [r7, #20]
 8003b4e:	4925      	ldr	r1, [pc, #148]	; (8003be4 <vTaskSwitchContext+0xc8>)
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b66:	f383 8811 	msr	BASEPRI, r3
 8003b6a:	f3bf 8f6f 	isb	sy
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	607b      	str	r3, [r7, #4]
    }
 8003b74:	bf00      	nop
 8003b76:	e7fe      	b.n	8003b76 <vTaskSwitchContext+0x5a>
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4a18      	ldr	r2, [pc, #96]	; (8003be4 <vTaskSwitchContext+0xc8>)
 8003b84:	4413      	add	r3, r2
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	605a      	str	r2, [r3, #4]
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	3308      	adds	r3, #8
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d104      	bne.n	8003ba8 <vTaskSwitchContext+0x8c>
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	605a      	str	r2, [r3, #4]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <vTaskSwitchContext+0xcc>)
 8003bb0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003bb2:	4b0d      	ldr	r3, [pc, #52]	; (8003be8 <vTaskSwitchContext+0xcc>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4b0d      	ldr	r3, [pc, #52]	; (8003bec <vTaskSwitchContext+0xd0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d102      	bne.n	8003bc4 <vTaskSwitchContext+0xa8>
 8003bbe:	f003 fa75 	bl	80070ac <SEGGER_SYSVIEW_OnIdle>
}
 8003bc2:	e004      	b.n	8003bce <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <vTaskSwitchContext+0xcc>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f003 facd 	bl	8007168 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003bce:	bf00      	nop
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000130 	.word	0x20000130
 8003bdc:	2000011c 	.word	0x2000011c
 8003be0:	20000110 	.word	0x20000110
 8003be4:	20000034 	.word	0x20000034
 8003be8:	20000030 	.word	0x20000030
 8003bec:	2000012c 	.word	0x2000012c

08003bf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	60fb      	str	r3, [r7, #12]
    }
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <vTaskPlaceOnEventList+0x44>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3318      	adds	r3, #24
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe fc69 	bl	80024f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c24:	2101      	movs	r1, #1
 8003c26:	6838      	ldr	r0, [r7, #0]
 8003c28:	f000 fbec 	bl	8004404 <prvAddCurrentTaskToDelayedList>
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000030 	.word	0x20000030

08003c38 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	617b      	str	r3, [r7, #20]
    }
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <vTaskPlaceOnEventListRestricted+0x58>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3318      	adds	r3, #24
 8003c66:	4619      	mov	r1, r3
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7fe fc20 	bl	80024ae <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
 8003c78:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003c7a:	2024      	movs	r0, #36	; 0x24
 8003c7c:	f002 fd18 	bl	80066b0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	68b8      	ldr	r0, [r7, #8]
 8003c84:	f000 fbbe 	bl	8004404 <prvAddCurrentTaskToDelayedList>
    }
 8003c88:	bf00      	nop
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000030 	.word	0x20000030

08003c94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10a      	bne.n	8003cc0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cae:	f383 8811 	msr	BASEPRI, r3
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	60fb      	str	r3, [r7, #12]
    }
 8003cbc:	bf00      	nop
 8003cbe:	e7fe      	b.n	8003cbe <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	3318      	adds	r3, #24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fe fc4f 	bl	8002568 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cca:	4b1f      	ldr	r3, [pc, #124]	; (8003d48 <xTaskRemoveFromEventList+0xb4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d120      	bne.n	8003d14 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe fc46 	bl	8002568 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f003 fa84 	bl	80071ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	2201      	movs	r2, #1
 8003cea:	409a      	lsls	r2, r3
 8003cec:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <xTaskRemoveFromEventList+0xb8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	4a16      	ldr	r2, [pc, #88]	; (8003d4c <xTaskRemoveFromEventList+0xb8>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4a13      	ldr	r2, [pc, #76]	; (8003d50 <xTaskRemoveFromEventList+0xbc>)
 8003d04:	441a      	add	r2, r3
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	f7fe fbce 	bl	80024ae <vListInsertEnd>
 8003d12:	e005      	b.n	8003d20 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	3318      	adds	r3, #24
 8003d18:	4619      	mov	r1, r3
 8003d1a:	480e      	ldr	r0, [pc, #56]	; (8003d54 <xTaskRemoveFromEventList+0xc0>)
 8003d1c:	f7fe fbc7 	bl	80024ae <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4b0c      	ldr	r3, [pc, #48]	; (8003d58 <xTaskRemoveFromEventList+0xc4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d905      	bls.n	8003d3a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003d32:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <xTaskRemoveFromEventList+0xc8>)
 8003d34:	2201      	movs	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e001      	b.n	8003d3e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003d3e:	697b      	ldr	r3, [r7, #20]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000130 	.word	0x20000130
 8003d4c:	20000110 	.word	0x20000110
 8003d50:	20000034 	.word	0x20000034
 8003d54:	200000c8 	.word	0x200000c8
 8003d58:	20000030 	.word	0x20000030
 8003d5c:	2000011c 	.word	0x2000011c

08003d60 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <vTaskInternalSetTimeOutState+0x24>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <vTaskInternalSetTimeOutState+0x28>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	20000120 	.word	0x20000120
 8003d88:	2000010c 	.word	0x2000010c

08003d8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	613b      	str	r3, [r7, #16]
    }
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbc:	f383 8811 	msr	BASEPRI, r3
 8003dc0:	f3bf 8f6f 	isb	sy
 8003dc4:	f3bf 8f4f 	dsb	sy
 8003dc8:	60fb      	str	r3, [r7, #12]
    }
 8003dca:	bf00      	nop
 8003dcc:	e7fe      	b.n	8003dcc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003dce:	f001 f851 	bl	8004e74 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003dd2:	4b1f      	ldr	r3, [pc, #124]	; (8003e50 <xTaskCheckForTimeOut+0xc4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d102      	bne.n	8003df2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
 8003df0:	e026      	b.n	8003e40 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b17      	ldr	r3, [pc, #92]	; (8003e54 <xTaskCheckForTimeOut+0xc8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d00a      	beq.n	8003e14 <xTaskCheckForTimeOut+0x88>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d305      	bcc.n	8003e14 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e015      	b.n	8003e40 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d20b      	bcs.n	8003e36 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	1ad2      	subs	r2, r2, r3
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff ff98 	bl	8003d60 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e004      	b.n	8003e40 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e40:	f001 f848 	bl	8004ed4 <vPortExitCritical>

    return xReturn;
 8003e44:	69fb      	ldr	r3, [r7, #28]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3720      	adds	r7, #32
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	2000010c 	.word	0x2000010c
 8003e54:	20000120 	.word	0x20000120

08003e58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <vTaskMissedYield+0x14>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	2000011c 	.word	0x2000011c

08003e70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e78:	f000 f852 	bl	8003f20 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <prvIdleTask+0x28>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d9f9      	bls.n	8003e78 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <prvIdleTask+0x2c>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003e94:	e7f0      	b.n	8003e78 <prvIdleTask+0x8>
 8003e96:	bf00      	nop
 8003e98:	20000034 	.word	0x20000034
 8003e9c:	e000ed04 	.word	0xe000ed04

08003ea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	607b      	str	r3, [r7, #4]
 8003eaa:	e00c      	b.n	8003ec6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <prvInitialiseTaskLists+0x60>)
 8003eb8:	4413      	add	r3, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe faca 	bl	8002454 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d9ef      	bls.n	8003eac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ecc:	480d      	ldr	r0, [pc, #52]	; (8003f04 <prvInitialiseTaskLists+0x64>)
 8003ece:	f7fe fac1 	bl	8002454 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ed2:	480d      	ldr	r0, [pc, #52]	; (8003f08 <prvInitialiseTaskLists+0x68>)
 8003ed4:	f7fe fabe 	bl	8002454 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ed8:	480c      	ldr	r0, [pc, #48]	; (8003f0c <prvInitialiseTaskLists+0x6c>)
 8003eda:	f7fe fabb 	bl	8002454 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003ede:	480c      	ldr	r0, [pc, #48]	; (8003f10 <prvInitialiseTaskLists+0x70>)
 8003ee0:	f7fe fab8 	bl	8002454 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ee4:	480b      	ldr	r0, [pc, #44]	; (8003f14 <prvInitialiseTaskLists+0x74>)
 8003ee6:	f7fe fab5 	bl	8002454 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <prvInitialiseTaskLists+0x78>)
 8003eec:	4a05      	ldr	r2, [pc, #20]	; (8003f04 <prvInitialiseTaskLists+0x64>)
 8003eee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <prvInitialiseTaskLists+0x7c>)
 8003ef2:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <prvInitialiseTaskLists+0x68>)
 8003ef4:	601a      	str	r2, [r3, #0]
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000034 	.word	0x20000034
 8003f04:	20000098 	.word	0x20000098
 8003f08:	200000ac 	.word	0x200000ac
 8003f0c:	200000c8 	.word	0x200000c8
 8003f10:	200000dc 	.word	0x200000dc
 8003f14:	200000f4 	.word	0x200000f4
 8003f18:	200000c0 	.word	0x200000c0
 8003f1c:	200000c4 	.word	0x200000c4

08003f20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f26:	e019      	b.n	8003f5c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003f28:	f000 ffa4 	bl	8004e74 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <prvCheckTasksWaitingTermination+0x50>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe fb15 	bl	8002568 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <prvCheckTasksWaitingTermination+0x54>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <prvCheckTasksWaitingTermination+0x54>)
 8003f46:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	4a0a      	ldr	r2, [pc, #40]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f50:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f52:	f000 ffbf 	bl	8004ed4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f810 	bl	8003f7c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f5c:	4b06      	ldr	r3, [pc, #24]	; (8003f78 <prvCheckTasksWaitingTermination+0x58>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1e1      	bne.n	8003f28 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200000dc 	.word	0x200000dc
 8003f74:	20000108 	.word	0x20000108
 8003f78:	200000f0 	.word	0x200000f0

08003f7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 f975 	bl	8005278 <vPortFree>
                vPortFree( pxTCB );
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f001 f972 	bl	8005278 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fa0:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <prvResetNextTaskUnblockTime+0x30>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d104      	bne.n	8003fb4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <prvResetNextTaskUnblockTime+0x34>)
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fb2:	e005      	b.n	8003fc0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fb4:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <prvResetNextTaskUnblockTime+0x30>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a04      	ldr	r2, [pc, #16]	; (8003fd0 <prvResetNextTaskUnblockTime+0x34>)
 8003fbe:	6013      	str	r3, [r2, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	200000c0 	.word	0x200000c0
 8003fd0:	20000128 	.word	0x20000128

08003fd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <xTaskGetSchedulerState+0x34>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d102      	bne.n	8003fe8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	e008      	b.n	8003ffa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fe8:	4b08      	ldr	r3, [pc, #32]	; (800400c <xTaskGetSchedulerState+0x38>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	607b      	str	r3, [r7, #4]
 8003ff4:	e001      	b.n	8003ffa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003ffa:	687b      	ldr	r3, [r7, #4]
    }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	20000114 	.word	0x20000114
 800400c:	20000130 	.word	0x20000130

08004010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d068      	beq.n	80040f8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004026:	4b37      	ldr	r3, [pc, #220]	; (8004104 <xTaskPriorityDisinherit+0xf4>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	429a      	cmp	r2, r3
 800402e:	d00a      	beq.n	8004046 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
    }
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	60bb      	str	r3, [r7, #8]
    }
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004068:	1e5a      	subs	r2, r3, #1
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	429a      	cmp	r2, r3
 8004078:	d03e      	beq.n	80040f8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d13a      	bne.n	80040f8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	3304      	adds	r3, #4
 8004086:	4618      	mov	r0, r3
 8004088:	f7fe fa6e 	bl	8002568 <uxListRemove>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10a      	bne.n	80040a8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004096:	2201      	movs	r2, #1
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	43da      	mvns	r2, r3
 800409e:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <xTaskPriorityDisinherit+0xf8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4013      	ands	r3, r2
 80040a4:	4a18      	ldr	r2, [pc, #96]	; (8004108 <xTaskPriorityDisinherit+0xf8>)
 80040a6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4619      	mov	r1, r3
 80040ac:	204a      	movs	r0, #74	; 0x4a
 80040ae:	f002 fb1d 	bl	80066ec <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	f1c3 0205 	rsb	r2, r3, #5
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	2201      	movs	r2, #1
 80040cc:	409a      	lsls	r2, r3
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <xTaskPriorityDisinherit+0xf8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	4a0c      	ldr	r2, [pc, #48]	; (8004108 <xTaskPriorityDisinherit+0xf8>)
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4a09      	ldr	r2, [pc, #36]	; (800410c <xTaskPriorityDisinherit+0xfc>)
 80040e6:	441a      	add	r2, r3
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	3304      	adds	r3, #4
 80040ec:	4619      	mov	r1, r3
 80040ee:	4610      	mov	r0, r2
 80040f0:	f7fe f9dd 	bl	80024ae <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80040f8:	697b      	ldr	r3, [r7, #20]
    }
 80040fa:	4618      	mov	r0, r3
 80040fc:	3718      	adds	r7, #24
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000030 	.word	0x20000030
 8004108:	20000110 	.word	0x20000110
 800410c:	20000034 	.word	0x20000034

08004110 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	613b      	str	r3, [r7, #16]
    }
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800413a:	f000 fe9b 	bl	8004e74 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <xTaskGenericNotifyWait+0x108>)
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4413      	add	r3, r2
 8004146:	3354      	adds	r3, #84	; 0x54
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d022      	beq.n	8004196 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004150:	4b31      	ldr	r3, [pc, #196]	; (8004218 <xTaskGenericNotifyWait+0x108>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	3214      	adds	r2, #20
 8004158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	43d2      	mvns	r2, r2
 8004160:	4011      	ands	r1, r2
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	3214      	adds	r2, #20
 8004166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <xTaskGenericNotifyWait+0x108>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	3354      	adds	r3, #84	; 0x54
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800417e:	2101      	movs	r1, #1
 8004180:	6a38      	ldr	r0, [r7, #32]
 8004182:	f000 f93f 	bl	8004404 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004186:	4b25      	ldr	r3, [pc, #148]	; (800421c <xTaskGenericNotifyWait+0x10c>)
 8004188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004196:	f000 fe9d 	bl	8004ed4 <vPortExitCritical>

        taskENTER_CRITICAL();
 800419a:	f000 fe6b 	bl	8004e74 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	4613      	mov	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	2040      	movs	r0, #64	; 0x40
 80041ac:	f002 fbaa 	bl	8006904 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <xTaskGenericNotifyWait+0x108>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	3214      	adds	r2, #20
 80041be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80041c6:	4b14      	ldr	r3, [pc, #80]	; (8004218 <xTaskGenericNotifyWait+0x108>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	3354      	adds	r3, #84	; 0x54
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d002      	beq.n	80041de <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e00e      	b.n	80041fc <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80041de:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <xTaskGenericNotifyWait+0x108>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	3214      	adds	r2, #20
 80041e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	43d2      	mvns	r2, r2
 80041ee:	4011      	ands	r1, r2
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	3214      	adds	r2, #20
 80041f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80041f8:	2301      	movs	r3, #1
 80041fa:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80041fc:	4b06      	ldr	r3, [pc, #24]	; (8004218 <xTaskGenericNotifyWait+0x108>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	3354      	adds	r3, #84	; 0x54
 8004206:	2200      	movs	r2, #0
 8004208:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800420a:	f000 fe63 	bl	8004ed4 <vPortExitCritical>

        return xReturn;
 800420e:	697b      	ldr	r3, [r7, #20]
    }
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	20000030 	.word	0x20000030
 800421c:	e000ed04 	.word	0xe000ed04

08004220 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004220:	b580      	push	{r7, lr}
 8004222:	b08e      	sub	sp, #56	; 0x38
 8004224:	af02      	add	r7, sp, #8
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
 800422c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800422e:	2301      	movs	r3, #1
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <xTaskGenericNotify+0x2e>
        __asm volatile
 8004238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	623b      	str	r3, [r7, #32]
    }
 800424a:	bf00      	nop
 800424c:	e7fe      	b.n	800424c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10a      	bne.n	800426a <xTaskGenericNotify+0x4a>
        __asm volatile
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	61fb      	str	r3, [r7, #28]
    }
 8004266:	bf00      	nop
 8004268:	e7fe      	b.n	8004268 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800426e:	f000 fe01 	bl	8004e74 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b00      	cmp	r3, #0
 8004276:	d006      	beq.n	8004286 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	3214      	adds	r2, #20
 800427e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004284:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4413      	add	r3, r2
 800428c:	3354      	adds	r3, #84	; 0x54
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4413      	add	r3, r2
 800429a:	3354      	adds	r3, #84	; 0x54
 800429c:	2202      	movs	r2, #2
 800429e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d83b      	bhi.n	800431e <xTaskGenericNotify+0xfe>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <xTaskGenericNotify+0x8c>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	0800433d 	.word	0x0800433d
 80042b0:	080042c1 	.word	0x080042c1
 80042b4:	080042dd 	.word	0x080042dd
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	08004303 	.word	0x08004303
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	3214      	adds	r2, #20
 80042c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	ea42 0103 	orr.w	r1, r2, r3
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	3214      	adds	r2, #20
 80042d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80042da:	e032      	b.n	8004342 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	3214      	adds	r2, #20
 80042e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e6:	1c59      	adds	r1, r3, #1
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	68ba      	ldr	r2, [r7, #8]
 80042ec:	3214      	adds	r2, #20
 80042ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80042f2:	e026      	b.n	8004342 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	3214      	adds	r2, #20
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004300:	e01f      	b.n	8004342 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004306:	2b02      	cmp	r3, #2
 8004308:	d006      	beq.n	8004318 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	3214      	adds	r2, #20
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004316:	e014      	b.n	8004342 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004318:	2300      	movs	r3, #0
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800431c:	e011      	b.n	8004342 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800431e:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <xTaskGenericNotify+0x1d0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <xTaskGenericNotify+0x120>
        __asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61bb      	str	r3, [r7, #24]
    }
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <xTaskGenericNotify+0x11a>
                    break;
 800433c:	bf00      	nop
 800433e:	e000      	b.n	8004342 <xTaskGenericNotify+0x122>

                    break;
 8004340:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	4618      	mov	r0, r3
 8004346:	f002 fff3 	bl	8007330 <SEGGER_SYSVIEW_ShrinkId>
 800434a:	4601      	mov	r1, r0
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	203e      	movs	r0, #62	; 0x3e
 8004358:	f002 fad4 	bl	8006904 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800435c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004360:	2b01      	cmp	r3, #1
 8004362:	d13d      	bne.n	80043e0 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	3304      	adds	r3, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe f8fd 	bl	8002568 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	4618      	mov	r0, r3
 8004372:	f002 ff3b 	bl	80071ec <SEGGER_SYSVIEW_OnTaskStartReady>
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437a:	2201      	movs	r2, #1
 800437c:	409a      	lsls	r2, r3
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <xTaskGenericNotify+0x1d4>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4313      	orrs	r3, r2
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <xTaskGenericNotify+0x1d4>)
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4a18      	ldr	r2, [pc, #96]	; (80043f8 <xTaskGenericNotify+0x1d8>)
 8004396:	441a      	add	r2, r3
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	3304      	adds	r3, #4
 800439c:	4619      	mov	r1, r3
 800439e:	4610      	mov	r0, r2
 80043a0:	f7fe f885 	bl	80024ae <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <xTaskGenericNotify+0x1a2>
        __asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	617b      	str	r3, [r7, #20]
    }
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c6:	4b0d      	ldr	r3, [pc, #52]	; (80043fc <xTaskGenericNotify+0x1dc>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d907      	bls.n	80043e0 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <xTaskGenericNotify+0x1e0>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043e0:	f000 fd78 	bl	8004ed4 <vPortExitCritical>

        return xReturn;
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80043e6:	4618      	mov	r0, r3
 80043e8:	3730      	adds	r7, #48	; 0x30
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	2000010c 	.word	0x2000010c
 80043f4:	20000110 	.word	0x20000110
 80043f8:	20000034 	.word	0x20000034
 80043fc:	20000030 	.word	0x20000030
 8004400:	e000ed04 	.word	0xe000ed04

08004404 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800440e:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004414:	4b31      	ldr	r3, [pc, #196]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3304      	adds	r3, #4
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe f8a4 	bl	8002568 <uxListRemove>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004426:	4b2d      	ldr	r3, [pc, #180]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	2201      	movs	r2, #1
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43da      	mvns	r2, r3
 8004434:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4013      	ands	r3, r2
 800443a:	4a29      	ldr	r2, [pc, #164]	; (80044e0 <prvAddCurrentTaskToDelayedList+0xdc>)
 800443c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004444:	d110      	bne.n	8004468 <prvAddCurrentTaskToDelayedList+0x64>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00d      	beq.n	8004468 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800444c:	4b23      	ldr	r3, [pc, #140]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	211b      	movs	r1, #27
 8004452:	4618      	mov	r0, r3
 8004454:	f002 ff0c 	bl	8007270 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004458:	4b20      	ldr	r3, [pc, #128]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3304      	adds	r3, #4
 800445e:	4619      	mov	r1, r3
 8004460:	4820      	ldr	r0, [pc, #128]	; (80044e4 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004462:	f7fe f824 	bl	80024ae <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004466:	e032      	b.n	80044ce <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4413      	add	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	429a      	cmp	r2, r3
 800447e:	d20f      	bcs.n	80044a0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004480:	4b16      	ldr	r3, [pc, #88]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2104      	movs	r1, #4
 8004486:	4618      	mov	r0, r3
 8004488:	f002 fef2 	bl	8007270 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800448c:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3304      	adds	r3, #4
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f7fe f82c 	bl	80024f6 <vListInsert>
}
 800449e:	e016      	b.n	80044ce <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80044a0:	4b0e      	ldr	r3, [pc, #56]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2104      	movs	r1, #4
 80044a6:	4618      	mov	r0, r3
 80044a8:	f002 fee2 	bl	8007270 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <prvAddCurrentTaskToDelayedList+0xe8>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <prvAddCurrentTaskToDelayedList+0xd8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f7fe f81c 	bl	80024f6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80044be:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xec>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d202      	bcs.n	80044ce <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80044c8:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <prvAddCurrentTaskToDelayedList+0xec>)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6013      	str	r3, [r2, #0]
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	2000010c 	.word	0x2000010c
 80044dc:	20000030 	.word	0x20000030
 80044e0:	20000110 	.word	0x20000110
 80044e4:	200000f4 	.word	0x200000f4
 80044e8:	200000c4 	.word	0x200000c4
 80044ec:	200000c0 	.word	0x200000c0
 80044f0:	20000128 	.word	0x20000128

080044f4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80044fe:	f000 fad5 	bl	8004aac <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <xTimerCreateTimerTask+0x54>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00b      	beq.n	8004522 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <xTimerCreateTimerTask+0x58>)
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	2302      	movs	r3, #2
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	2300      	movs	r3, #0
 8004514:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004518:	490d      	ldr	r1, [pc, #52]	; (8004550 <xTimerCreateTimerTask+0x5c>)
 800451a:	480e      	ldr	r0, [pc, #56]	; (8004554 <xTimerCreateTimerTask+0x60>)
 800451c:	f7fe fda8 	bl	8003070 <xTaskCreate>
 8004520:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	603b      	str	r3, [r7, #0]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800453e:	687b      	ldr	r3, [r7, #4]
    }
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000164 	.word	0x20000164
 800454c:	20000168 	.word	0x20000168
 8004550:	080076d8 	.word	0x080076d8
 8004554:	0800468d 	.word	0x0800468d

08004558 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004558:	b580      	push	{r7, lr}
 800455a:	b08a      	sub	sp, #40	; 0x28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10a      	bne.n	8004586 <xTimerGenericCommand+0x2e>
        __asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	623b      	str	r3, [r7, #32]
    }
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8004586:	4b1a      	ldr	r3, [pc, #104]	; (80045f0 <xTimerGenericCommand+0x98>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d02a      	beq.n	80045e4 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	2b05      	cmp	r3, #5
 800459e:	dc18      	bgt.n	80045d2 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045a0:	f7ff fd18 	bl	8003fd4 <xTaskGetSchedulerState>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d109      	bne.n	80045be <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045aa:	4b11      	ldr	r3, [pc, #68]	; (80045f0 <xTimerGenericCommand+0x98>)
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f107 0114 	add.w	r1, r7, #20
 80045b2:	2300      	movs	r3, #0
 80045b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b6:	f7fe f8f1 	bl	800279c <xQueueGenericSend>
 80045ba:	6278      	str	r0, [r7, #36]	; 0x24
 80045bc:	e012      	b.n	80045e4 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <xTimerGenericCommand+0x98>)
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	f107 0114 	add.w	r1, r7, #20
 80045c6:	2300      	movs	r3, #0
 80045c8:	2200      	movs	r2, #0
 80045ca:	f7fe f8e7 	bl	800279c <xQueueGenericSend>
 80045ce:	6278      	str	r0, [r7, #36]	; 0x24
 80045d0:	e008      	b.n	80045e4 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045d2:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <xTimerGenericCommand+0x98>)
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	f107 0114 	add.w	r1, r7, #20
 80045da:	2300      	movs	r3, #0
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	f7fe fa03 	bl	80029e8 <xQueueGenericSendFromISR>
 80045e2:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80045e6:	4618      	mov	r0, r3
 80045e8:	3728      	adds	r7, #40	; 0x28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000164 	.word	0x20000164

080045f4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045fe:	4b22      	ldr	r3, [pc, #136]	; (8004688 <prvProcessExpiredTimer+0x94>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	3304      	adds	r3, #4
 800460c:	4618      	mov	r0, r3
 800460e:	f7fd ffab 	bl	8002568 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d022      	beq.n	8004666 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	18d1      	adds	r1, r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	6978      	ldr	r0, [r7, #20]
 800462e:	f000 f8d1 	bl	80047d4 <prvInsertTimerInActiveList>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01f      	beq.n	8004678 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004638:	2300      	movs	r3, #0
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	2100      	movs	r1, #0
 8004642:	6978      	ldr	r0, [r7, #20]
 8004644:	f7ff ff88 	bl	8004558 <xTimerGenericCommand>
 8004648:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d113      	bne.n	8004678 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60fb      	str	r3, [r7, #12]
    }
 8004662:	bf00      	nop
 8004664:	e7fe      	b.n	8004664 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	b2da      	uxtb	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	6978      	ldr	r0, [r7, #20]
 800467e:	4798      	blx	r3
    }
 8004680:	bf00      	nop
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	2000015c 	.word	0x2000015c

0800468c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004694:	f107 0308 	add.w	r3, r7, #8
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f857 	bl	800474c <prvGetNextExpireTime>
 800469e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4619      	mov	r1, r3
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 f803 	bl	80046b0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80046aa:	f000 f8d5 	bl	8004858 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046ae:	e7f1      	b.n	8004694 <prvTimerTask+0x8>

080046b0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80046ba:	f7ff f8a3 	bl	8003804 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f866 	bl	8004794 <prvSampleTimeNow>
 80046c8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d130      	bne.n	8004732 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <prvProcessTimerOrBlockTask+0x3c>
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d806      	bhi.n	80046ec <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80046de:	f7ff f89f 	bl	8003820 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046e2:	68f9      	ldr	r1, [r7, #12]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff85 	bl	80045f4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80046ea:	e024      	b.n	8004736 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046f2:	4b13      	ldr	r3, [pc, #76]	; (8004740 <prvProcessTimerOrBlockTask+0x90>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <prvProcessTimerOrBlockTask+0x50>
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <prvProcessTimerOrBlockTask+0x52>
 8004700:	2300      	movs	r3, #0
 8004702:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004704:	4b0f      	ldr	r3, [pc, #60]	; (8004744 <prvProcessTimerOrBlockTask+0x94>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	f7fe fc79 	bl	8003008 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004716:	f7ff f883 	bl	8003820 <xTaskResumeAll>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004720:	4b09      	ldr	r3, [pc, #36]	; (8004748 <prvProcessTimerOrBlockTask+0x98>)
 8004722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
    }
 8004730:	e001      	b.n	8004736 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004732:	f7ff f875 	bl	8003820 <xTaskResumeAll>
    }
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	20000160 	.word	0x20000160
 8004744:	20000164 	.word	0x20000164
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004754:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <prvGetNextExpireTime+0x44>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <prvGetNextExpireTime+0x16>
 800475e:	2201      	movs	r2, #1
 8004760:	e000      	b.n	8004764 <prvGetNextExpireTime+0x18>
 8004762:	2200      	movs	r2, #0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <prvGetNextExpireTime+0x44>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	e001      	b.n	8004780 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004780:	68fb      	ldr	r3, [r7, #12]
    }
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	2000015c 	.word	0x2000015c

08004794 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800479c:	f7ff f8e0 	bl	8003960 <xTaskGetTickCount>
 80047a0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <prvSampleTimeNow+0x3c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d205      	bcs.n	80047b8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80047ac:	f000 f91a 	bl	80049e4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	e002      	b.n	80047be <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80047be:	4a04      	ldr	r2, [pc, #16]	; (80047d0 <prvSampleTimeNow+0x3c>)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80047c4:	68fb      	ldr	r3, [r7, #12]
    }
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	2000016c 	.word	0x2000016c

080047d4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d812      	bhi.n	8004820 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	1ad2      	subs	r2, r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e01b      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800480e:	4b10      	ldr	r3, [pc, #64]	; (8004850 <prvInsertTimerInActiveList+0x7c>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7fd fe6c 	bl	80024f6 <vListInsert>
 800481e:	e012      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d206      	bcs.n	8004836 <prvInsertTimerInActiveList+0x62>
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d302      	bcc.n	8004836 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004830:	2301      	movs	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e007      	b.n	8004846 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004836:	4b07      	ldr	r3, [pc, #28]	; (8004854 <prvInsertTimerInActiveList+0x80>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	3304      	adds	r3, #4
 800483e:	4619      	mov	r1, r3
 8004840:	4610      	mov	r0, r2
 8004842:	f7fd fe58 	bl	80024f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004846:	697b      	ldr	r3, [r7, #20]
    }
 8004848:	4618      	mov	r0, r3
 800484a:	3718      	adds	r7, #24
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000160 	.word	0x20000160
 8004854:	2000015c 	.word	0x2000015c

08004858 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004858:	b580      	push	{r7, lr}
 800485a:	b08c      	sub	sp, #48	; 0x30
 800485c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800485e:	e0ae      	b.n	80049be <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	f2c0 80aa 	blt.w	80049bc <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d004      	beq.n	800487e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	3304      	adds	r3, #4
 8004878:	4618      	mov	r0, r3
 800487a:	f7fd fe75 	bl	8002568 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800487e:	1d3b      	adds	r3, r7, #4
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff ff87 	bl	8004794 <prvSampleTimeNow>
 8004886:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2b09      	cmp	r3, #9
 800488c:	f200 8097 	bhi.w	80049be <prvProcessReceivedCommands+0x166>
 8004890:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <prvProcessReceivedCommands+0x40>)
 8004892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004896:	bf00      	nop
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c1 	.word	0x080048c1
 80048a4:	08004935 	.word	0x08004935
 80048a8:	08004949 	.word	0x08004949
 80048ac:	08004993 	.word	0x08004993
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048c1 	.word	0x080048c1
 80048b8:	08004935 	.word	0x08004935
 80048bc:	08004949 	.word	0x08004949
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	18d1      	adds	r1, r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048e0:	f7ff ff78 	bl	80047d4 <prvInsertTimerInActiveList>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d069      	beq.n	80049be <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05e      	beq.n	80049be <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	441a      	add	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2300      	movs	r3, #0
 800490e:	2100      	movs	r1, #0
 8004910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004912:	f7ff fe21 	bl	8004558 <xTimerGenericCommand>
 8004916:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d14f      	bne.n	80049be <prvProcessReceivedCommands+0x166>
        __asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	61bb      	str	r3, [r7, #24]
    }
 8004930:	bf00      	nop
 8004932:	e7fe      	b.n	8004932 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004936:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004946:	e03a      	b.n	80049be <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800494e:	f043 0301 	orr.w	r3, r3, #1
 8004952:	b2da      	uxtb	r2, r3
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	617b      	str	r3, [r7, #20]
    }
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800497e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004980:	699a      	ldr	r2, [r3, #24]
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	18d1      	adds	r1, r2, r3
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	6a3a      	ldr	r2, [r7, #32]
 800498a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800498c:	f7ff ff22 	bl	80047d4 <prvInsertTimerInActiveList>
                        break;
 8004990:	e015      	b.n	80049be <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80049a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a2:	f000 fc69 	bl	8005278 <vPortFree>
 80049a6:	e00a      	b.n	80049be <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ae:	f023 0301 	bic.w	r3, r3, #1
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80049ba:	e000      	b.n	80049be <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80049bc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049be:	4b08      	ldr	r3, [pc, #32]	; (80049e0 <prvProcessReceivedCommands+0x188>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f107 0108 	add.w	r1, r7, #8
 80049c6:	2200      	movs	r2, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fe f8cb 	bl	8002b64 <xQueueReceive>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f47f af45 	bne.w	8004860 <prvProcessReceivedCommands+0x8>
        }
    }
 80049d6:	bf00      	nop
 80049d8:	bf00      	nop
 80049da:	3728      	adds	r7, #40	; 0x28
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000164 	.word	0x20000164

080049e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ea:	e048      	b.n	8004a7e <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049ec:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <prvSwitchTimerLists+0xc0>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049f6:	4b2b      	ldr	r3, [pc, #172]	; (8004aa4 <prvSwitchTimerLists+0xc0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fd fdaf 	bl	8002568 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02e      	beq.n	8004a7e <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4413      	add	r3, r2
 8004a28:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d90e      	bls.n	8004a50 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a3e:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <prvSwitchTimerLists+0xc0>)
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3304      	adds	r3, #4
 8004a46:	4619      	mov	r1, r3
 8004a48:	4610      	mov	r0, r2
 8004a4a:	f7fd fd54 	bl	80024f6 <vListInsert>
 8004a4e:	e016      	b.n	8004a7e <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a50:	2300      	movs	r3, #0
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f7ff fd7c 	bl	8004558 <xTimerGenericCommand>
 8004a60:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	603b      	str	r3, [r7, #0]
    }
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <prvSwitchTimerLists+0xc0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1b1      	bne.n	80049ec <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004a88:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <prvSwitchTimerLists+0xc0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <prvSwitchTimerLists+0xc4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a04      	ldr	r2, [pc, #16]	; (8004aa4 <prvSwitchTimerLists+0xc0>)
 8004a94:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004a96:	4a04      	ldr	r2, [pc, #16]	; (8004aa8 <prvSwitchTimerLists+0xc4>)
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	6013      	str	r3, [r2, #0]
    }
 8004a9c:	bf00      	nop
 8004a9e:	3718      	adds	r7, #24
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	2000015c 	.word	0x2000015c
 8004aa8:	20000160 	.word	0x20000160

08004aac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004ab0:	f000 f9e0 	bl	8004e74 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004ab4:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <prvCheckForValidListAndQueue+0x54>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d11d      	bne.n	8004af8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004abc:	4811      	ldr	r0, [pc, #68]	; (8004b04 <prvCheckForValidListAndQueue+0x58>)
 8004abe:	f7fd fcc9 	bl	8002454 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004ac2:	4811      	ldr	r0, [pc, #68]	; (8004b08 <prvCheckForValidListAndQueue+0x5c>)
 8004ac4:	f7fd fcc6 	bl	8002454 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <prvCheckForValidListAndQueue+0x60>)
 8004aca:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <prvCheckForValidListAndQueue+0x58>)
 8004acc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004ace:	4b10      	ldr	r3, [pc, #64]	; (8004b10 <prvCheckForValidListAndQueue+0x64>)
 8004ad0:	4a0d      	ldr	r2, [pc, #52]	; (8004b08 <prvCheckForValidListAndQueue+0x5c>)
 8004ad2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	210c      	movs	r1, #12
 8004ad8:	200a      	movs	r0, #10
 8004ada:	f7fd fdd7 	bl	800268c <xQueueGenericCreate>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	4a07      	ldr	r2, [pc, #28]	; (8004b00 <prvCheckForValidListAndQueue+0x54>)
 8004ae2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004ae4:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <prvCheckForValidListAndQueue+0x54>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004aec:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <prvCheckForValidListAndQueue+0x54>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4908      	ldr	r1, [pc, #32]	; (8004b14 <prvCheckForValidListAndQueue+0x68>)
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe fa56 	bl	8002fa4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004af8:	f000 f9ec 	bl	8004ed4 <vPortExitCritical>
    }
 8004afc:	bf00      	nop
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20000164 	.word	0x20000164
 8004b04:	20000134 	.word	0x20000134
 8004b08:	20000148 	.word	0x20000148
 8004b0c:	2000015c 	.word	0x2000015c
 8004b10:	20000160 	.word	0x20000160
 8004b14:	080076e0 	.word	0x080076e0

08004b18 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3b04      	subs	r3, #4
 8004b28:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b30:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b04      	subs	r3, #4
 8004b46:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b48:	4a0c      	ldr	r2, [pc, #48]	; (8004b7c <pxPortInitialiseStack+0x64>)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b14      	subs	r3, #20
 8004b52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f06f 0202 	mvn.w	r2, #2
 8004b66:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3b20      	subs	r3, #32
 8004b6c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	08004b81 	.word	0x08004b81

08004b80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <prvTaskExitError+0x54>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b92:	d00a      	beq.n	8004baa <prvTaskExitError+0x2a>
        __asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	60fb      	str	r3, [r7, #12]
    }
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <prvTaskExitError+0x28>
        __asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	60bb      	str	r3, [r7, #8]
    }
 8004bbc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004bbe:	bf00      	nop
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0fc      	beq.n	8004bc0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000010 	.word	0x20000010
	...

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	4770      	bx	lr
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst2>:
 8004c00:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c08:	4808      	ldr	r0, [pc, #32]	; (8004c2c <prvPortStartFirstTask+0x24>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8814 	msr	CONTROL, r0
 8004c1a:	b662      	cpsie	i
 8004c1c:	b661      	cpsie	f
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	df00      	svc	0
 8004c28:	bf00      	nop
 8004c2a:	0000      	.short	0x0000
 8004c2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop

08004c34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c3a:	4b46      	ldr	r3, [pc, #280]	; (8004d54 <xPortStartScheduler+0x120>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a46      	ldr	r2, [pc, #280]	; (8004d58 <xPortStartScheduler+0x124>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d10a      	bne.n	8004c5a <xPortStartScheduler+0x26>
        __asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	613b      	str	r3, [r7, #16]
    }
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	; (8004d54 <xPortStartScheduler+0x120>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a3f      	ldr	r2, [pc, #252]	; (8004d5c <xPortStartScheduler+0x128>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d10a      	bne.n	8004c7a <xPortStartScheduler+0x46>
        __asm volatile
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	60fb      	str	r3, [r7, #12]
    }
 8004c76:	bf00      	nop
 8004c78:	e7fe      	b.n	8004c78 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c7a:	4b39      	ldr	r3, [pc, #228]	; (8004d60 <xPortStartScheduler+0x12c>)
 8004c7c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	22ff      	movs	r2, #255	; 0xff
 8004c8a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <xPortStartScheduler+0x130>)
 8004ca0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ca2:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <xPortStartScheduler+0x134>)
 8004ca4:	2207      	movs	r2, #7
 8004ca6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ca8:	e009      	b.n	8004cbe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004caa:	4b2f      	ldr	r3, [pc, #188]	; (8004d68 <xPortStartScheduler+0x134>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <xPortStartScheduler+0x134>)
 8004cb2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	005b      	lsls	r3, r3, #1
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cbe:	78fb      	ldrb	r3, [r7, #3]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d0ef      	beq.n	8004caa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cca:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <xPortStartScheduler+0x134>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1c3 0307 	rsb	r3, r3, #7
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d00a      	beq.n	8004cec <xPortStartScheduler+0xb8>
        __asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	60bb      	str	r3, [r7, #8]
    }
 8004ce8:	bf00      	nop
 8004cea:	e7fe      	b.n	8004cea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cec:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <xPortStartScheduler+0x134>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	4a1d      	ldr	r2, [pc, #116]	; (8004d68 <xPortStartScheduler+0x134>)
 8004cf4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <xPortStartScheduler+0x134>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cfe:	4a1a      	ldr	r2, [pc, #104]	; (8004d68 <xPortStartScheduler+0x134>)
 8004d00:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d0a:	4b18      	ldr	r3, [pc, #96]	; (8004d6c <xPortStartScheduler+0x138>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <xPortStartScheduler+0x138>)
 8004d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d14:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <xPortStartScheduler+0x138>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <xPortStartScheduler+0x138>)
 8004d1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d22:	f000 f963 	bl	8004fec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <xPortStartScheduler+0x13c>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d2c:	f000 f978 	bl	8005020 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d30:	4b10      	ldr	r3, [pc, #64]	; (8004d74 <xPortStartScheduler+0x140>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a0f      	ldr	r2, [pc, #60]	; (8004d74 <xPortStartScheduler+0x140>)
 8004d36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d3a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d3c:	f7ff ff64 	bl	8004c08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d40:	f7fe feec 	bl	8003b1c <vTaskSwitchContext>
    prvTaskExitError();
 8004d44:	f7ff ff1c 	bl	8004b80 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3718      	adds	r7, #24
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	e000ed00 	.word	0xe000ed00
 8004d58:	410fc271 	.word	0x410fc271
 8004d5c:	410fc270 	.word	0x410fc270
 8004d60:	e000e400 	.word	0xe000e400
 8004d64:	20000170 	.word	0x20000170
 8004d68:	20000174 	.word	0x20000174
 8004d6c:	e000ed20 	.word	0xe000ed20
 8004d70:	20000010 	.word	0x20000010
 8004d74:	e000ef34 	.word	0xe000ef34

08004d78 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d7e:	4b37      	ldr	r3, [pc, #220]	; (8004e5c <vInitPrioGroupValue+0xe4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a37      	ldr	r2, [pc, #220]	; (8004e60 <vInitPrioGroupValue+0xe8>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d10a      	bne.n	8004d9e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	613b      	str	r3, [r7, #16]
    }
 8004d9a:	bf00      	nop
 8004d9c:	e7fe      	b.n	8004d9c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d9e:	4b2f      	ldr	r3, [pc, #188]	; (8004e5c <vInitPrioGroupValue+0xe4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a30      	ldr	r2, [pc, #192]	; (8004e64 <vInitPrioGroupValue+0xec>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d10a      	bne.n	8004dbe <vInitPrioGroupValue+0x46>
        __asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	60fb      	str	r3, [r7, #12]
    }
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dbe:	4b2a      	ldr	r3, [pc, #168]	; (8004e68 <vInitPrioGroupValue+0xf0>)
 8004dc0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	22ff      	movs	r2, #255	; 0xff
 8004dce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	4b22      	ldr	r3, [pc, #136]	; (8004e6c <vInitPrioGroupValue+0xf4>)
 8004de4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004de6:	4b22      	ldr	r3, [pc, #136]	; (8004e70 <vInitPrioGroupValue+0xf8>)
 8004de8:	2207      	movs	r2, #7
 8004dea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dec:	e009      	b.n	8004e02 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004dee:	4b20      	ldr	r3, [pc, #128]	; (8004e70 <vInitPrioGroupValue+0xf8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <vInitPrioGroupValue+0xf8>)
 8004df6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b80      	cmp	r3, #128	; 0x80
 8004e0c:	d0ef      	beq.n	8004dee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e0e:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <vInitPrioGroupValue+0xf8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1c3 0307 	rsb	r3, r3, #7
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d00a      	beq.n	8004e30 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	60bb      	str	r3, [r7, #8]
    }
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <vInitPrioGroupValue+0xf8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	021b      	lsls	r3, r3, #8
 8004e36:	4a0e      	ldr	r2, [pc, #56]	; (8004e70 <vInitPrioGroupValue+0xf8>)
 8004e38:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e3a:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <vInitPrioGroupValue+0xf8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e42:	4a0b      	ldr	r2, [pc, #44]	; (8004e70 <vInitPrioGroupValue+0xf8>)
 8004e44:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004e4e:	bf00      	nop
 8004e50:	371c      	adds	r7, #28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	e000ed00 	.word	0xe000ed00
 8004e60:	410fc271 	.word	0x410fc271
 8004e64:	410fc270 	.word	0x410fc270
 8004e68:	e000e400 	.word	0xe000e400
 8004e6c:	20000170 	.word	0x20000170
 8004e70:	20000174 	.word	0x20000174

08004e74 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
        __asm volatile
 8004e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7e:	f383 8811 	msr	BASEPRI, r3
 8004e82:	f3bf 8f6f 	isb	sy
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	607b      	str	r3, [r7, #4]
    }
 8004e8c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004e8e:	4b0f      	ldr	r3, [pc, #60]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e96:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004e98:	4b0c      	ldr	r3, [pc, #48]	; (8004ecc <vPortEnterCritical+0x58>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d10f      	bne.n	8004ec0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ea0:	4b0b      	ldr	r3, [pc, #44]	; (8004ed0 <vPortEnterCritical+0x5c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <vPortEnterCritical+0x4c>
        __asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	603b      	str	r3, [r7, #0]
    }
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <vPortEnterCritical+0x4a>
    }
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	20000010 	.word	0x20000010
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004eda:	4b12      	ldr	r3, [pc, #72]	; (8004f24 <vPortExitCritical+0x50>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <vPortExitCritical+0x24>
        __asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	607b      	str	r3, [r7, #4]
    }
 8004ef4:	bf00      	nop
 8004ef6:	e7fe      	b.n	8004ef6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <vPortExitCritical+0x50>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <vPortExitCritical+0x50>)
 8004f00:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004f02:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <vPortExitCritical+0x50>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d105      	bne.n	8004f16 <vPortExitCritical+0x42>
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f383 8811 	msr	BASEPRI, r3
    }
 8004f14:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000010 	.word	0x20000010
	...

08004f30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f30:	f3ef 8009 	mrs	r0, PSP
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <pxCurrentTCBConst>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	f01e 0f10 	tst.w	lr, #16
 8004f40:	bf08      	it	eq
 8004f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4a:	6010      	str	r0, [r2, #0]
 8004f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f54:	f380 8811 	msr	BASEPRI, r0
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f7fe fddc 	bl	8003b1c <vTaskSwitchContext>
 8004f64:	f04f 0000 	mov.w	r0, #0
 8004f68:	f380 8811 	msr	BASEPRI, r0
 8004f6c:	bc09      	pop	{r0, r3}
 8004f6e:	6819      	ldr	r1, [r3, #0]
 8004f70:	6808      	ldr	r0, [r1, #0]
 8004f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f76:	f01e 0f10 	tst.w	lr, #16
 8004f7a:	bf08      	it	eq
 8004f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f80:	f380 8809 	msr	PSP, r0
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	f3af 8000 	nop.w

08004f90 <pxCurrentTCBConst>:
 8004f90:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
        __asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	607b      	str	r3, [r7, #4]
    }
 8004fb0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004fb2:	f002 f801 	bl	8006fb8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004fb6:	f7fe fcf5 	bl	80039a4 <xTaskIncrementTick>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004fc0:	f002 f858 	bl	8007074 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fc4:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <SysTick_Handler+0x50>)
 8004fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e001      	b.n	8004fd2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004fce:	f002 f835 	bl	800703c <SEGGER_SYSVIEW_RecordExitISR>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f383 8811 	msr	BASEPRI, r3
    }
 8004fdc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8004fde:	bf00      	nop
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ff0:	4b08      	ldr	r3, [pc, #32]	; (8005014 <vPortSetupTimerInterrupt+0x28>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ff6:	4b08      	ldr	r3, [pc, #32]	; (8005018 <vPortSetupTimerInterrupt+0x2c>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <vPortSetupTimerInterrupt+0x30>)
 8004ffe:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8005002:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005004:	4b03      	ldr	r3, [pc, #12]	; (8005014 <vPortSetupTimerInterrupt+0x28>)
 8005006:	2207      	movs	r2, #7
 8005008:	601a      	str	r2, [r3, #0]
}
 800500a:	bf00      	nop
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	e000e010 	.word	0xe000e010
 8005018:	e000e018 	.word	0xe000e018
 800501c:	e000e014 	.word	0xe000e014

08005020 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005020:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005030 <vPortEnableVFP+0x10>
 8005024:	6801      	ldr	r1, [r0, #0]
 8005026:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800502a:	6001      	str	r1, [r0, #0]
 800502c:	4770      	bx	lr
 800502e:	0000      	.short	0x0000
 8005030:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop

08005038 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800503e:	f3ef 8305 	mrs	r3, IPSR
 8005042:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	d914      	bls.n	8005074 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <vPortValidateInterruptPriority+0x70>)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	4413      	add	r3, r2
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005054:	4b15      	ldr	r3, [pc, #84]	; (80050ac <vPortValidateInterruptPriority+0x74>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	7afa      	ldrb	r2, [r7, #11]
 800505a:	429a      	cmp	r2, r3
 800505c:	d20a      	bcs.n	8005074 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	607b      	str	r3, [r7, #4]
    }
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <vPortValidateInterruptPriority+0x78>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800507c:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <vPortValidateInterruptPriority+0x7c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d90a      	bls.n	800509a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005088:	f383 8811 	msr	BASEPRI, r3
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	f3bf 8f4f 	dsb	sy
 8005094:	603b      	str	r3, [r7, #0]
    }
 8005096:	bf00      	nop
 8005098:	e7fe      	b.n	8005098 <vPortValidateInterruptPriority+0x60>
    }
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	e000e3f0 	.word	0xe000e3f0
 80050ac:	20000170 	.word	0x20000170
 80050b0:	e000ed0c 	.word	0xe000ed0c
 80050b4:	20000174 	.word	0x20000174

080050b8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80050c4:	f7fe fb9e 	bl	8003804 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80050c8:	4b65      	ldr	r3, [pc, #404]	; (8005260 <pvPortMalloc+0x1a8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80050d0:	f000 f934 	bl	800533c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050d4:	4b63      	ldr	r3, [pc, #396]	; (8005264 <pvPortMalloc+0x1ac>)
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4013      	ands	r3, r2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f040 80a7 	bne.w	8005230 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02d      	beq.n	8005144 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80050e8:	2208      	movs	r2, #8
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d227      	bcs.n	8005144 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80050f4:	2208      	movs	r2, #8
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4413      	add	r3, r2
 80050fa:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b00      	cmp	r3, #0
 8005104:	d021      	beq.n	800514a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f023 0307 	bic.w	r3, r3, #7
 800510c:	3308      	adds	r3, #8
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d214      	bcs.n	800513e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f023 0307 	bic.w	r3, r3, #7
 800511a:	3308      	adds	r3, #8
 800511c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <pvPortMalloc+0x92>
        __asm volatile
 8005128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800512c:	f383 8811 	msr	BASEPRI, r3
 8005130:	f3bf 8f6f 	isb	sy
 8005134:	f3bf 8f4f 	dsb	sy
 8005138:	617b      	str	r3, [r7, #20]
    }
 800513a:	bf00      	nop
 800513c:	e7fe      	b.n	800513c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800513e:	2300      	movs	r3, #0
 8005140:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005142:	e002      	b.n	800514a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	607b      	str	r3, [r7, #4]
 8005148:	e000      	b.n	800514c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800514a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d06e      	beq.n	8005230 <pvPortMalloc+0x178>
 8005152:	4b45      	ldr	r3, [pc, #276]	; (8005268 <pvPortMalloc+0x1b0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	429a      	cmp	r2, r3
 800515a:	d869      	bhi.n	8005230 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800515c:	4b43      	ldr	r3, [pc, #268]	; (800526c <pvPortMalloc+0x1b4>)
 800515e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005160:	4b42      	ldr	r3, [pc, #264]	; (800526c <pvPortMalloc+0x1b4>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005166:	e004      	b.n	8005172 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d903      	bls.n	8005184 <pvPortMalloc+0xcc>
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1f1      	bne.n	8005168 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005184:	4b36      	ldr	r3, [pc, #216]	; (8005260 <pvPortMalloc+0x1a8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518a:	429a      	cmp	r2, r3
 800518c:	d050      	beq.n	8005230 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2208      	movs	r2, #8
 8005194:	4413      	add	r3, r2
 8005196:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad2      	subs	r2, r2, r3
 80051a8:	2308      	movs	r3, #8
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d91f      	bls.n	80051f0 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4413      	add	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <pvPortMalloc+0x120>
        __asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	613b      	str	r3, [r7, #16]
    }
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ea:	69b8      	ldr	r0, [r7, #24]
 80051ec:	f000 f908 	bl	8005400 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051f0:	4b1d      	ldr	r3, [pc, #116]	; (8005268 <pvPortMalloc+0x1b0>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <pvPortMalloc+0x1b0>)
 80051fc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051fe:	4b1a      	ldr	r3, [pc, #104]	; (8005268 <pvPortMalloc+0x1b0>)
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b1b      	ldr	r3, [pc, #108]	; (8005270 <pvPortMalloc+0x1b8>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d203      	bcs.n	8005212 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800520a:	4b17      	ldr	r3, [pc, #92]	; (8005268 <pvPortMalloc+0x1b0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a18      	ldr	r2, [pc, #96]	; (8005270 <pvPortMalloc+0x1b8>)
 8005210:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <pvPortMalloc+0x1ac>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	431a      	orrs	r2, r3
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <pvPortMalloc+0x1bc>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	4a11      	ldr	r2, [pc, #68]	; (8005274 <pvPortMalloc+0x1bc>)
 800522e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005230:	f7fe faf6 	bl	8003820 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <pvPortMalloc+0x19c>
        __asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	60fb      	str	r3, [r7, #12]
    }
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <pvPortMalloc+0x19a>
    return pvReturn;
 8005254:	69fb      	ldr	r3, [r7, #28]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3728      	adds	r7, #40	; 0x28
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20012d80 	.word	0x20012d80
 8005264:	20012d94 	.word	0x20012d94
 8005268:	20012d84 	.word	0x20012d84
 800526c:	20012d78 	.word	0x20012d78
 8005270:	20012d88 	.word	0x20012d88
 8005274:	20012d8c 	.word	0x20012d8c

08005278 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d04d      	beq.n	8005326 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800528a:	2308      	movs	r3, #8
 800528c:	425b      	negs	r3, r3
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4413      	add	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	4b24      	ldr	r3, [pc, #144]	; (8005330 <vPortFree+0xb8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4013      	ands	r3, r2
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <vPortFree+0x44>
        __asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60fb      	str	r3, [r7, #12]
    }
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <vPortFree+0x62>
        __asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	60bb      	str	r3, [r7, #8]
    }
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	4b14      	ldr	r3, [pc, #80]	; (8005330 <vPortFree+0xb8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4013      	ands	r3, r2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01e      	beq.n	8005326 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11a      	bne.n	8005326 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	4b0e      	ldr	r3, [pc, #56]	; (8005330 <vPortFree+0xb8>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	401a      	ands	r2, r3
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005300:	f7fe fa80 	bl	8003804 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <vPortFree+0xbc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4413      	add	r3, r2
 800530e:	4a09      	ldr	r2, [pc, #36]	; (8005334 <vPortFree+0xbc>)
 8005310:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005312:	6938      	ldr	r0, [r7, #16]
 8005314:	f000 f874 	bl	8005400 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005318:	4b07      	ldr	r3, [pc, #28]	; (8005338 <vPortFree+0xc0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	3301      	adds	r3, #1
 800531e:	4a06      	ldr	r2, [pc, #24]	; (8005338 <vPortFree+0xc0>)
 8005320:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005322:	f7fe fa7d 	bl	8003820 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005326:	bf00      	nop
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	20012d94 	.word	0x20012d94
 8005334:	20012d84 	.word	0x20012d84
 8005338:	20012d90 	.word	0x20012d90

0800533c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005342:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8005346:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005348:	4b27      	ldr	r3, [pc, #156]	; (80053e8 <prvHeapInit+0xac>)
 800534a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00c      	beq.n	8005370 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	3307      	adds	r3, #7
 800535a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0307 	bic.w	r3, r3, #7
 8005362:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	4a1f      	ldr	r2, [pc, #124]	; (80053e8 <prvHeapInit+0xac>)
 800536c:	4413      	add	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005374:	4a1d      	ldr	r2, [pc, #116]	; (80053ec <prvHeapInit+0xb0>)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800537a:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <prvHeapInit+0xb0>)
 800537c:	2200      	movs	r2, #0
 800537e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	4413      	add	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005388:	2208      	movs	r2, #8
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0307 	bic.w	r3, r3, #7
 8005396:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a15      	ldr	r2, [pc, #84]	; (80053f0 <prvHeapInit+0xb4>)
 800539c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800539e:	4b14      	ldr	r3, [pc, #80]	; (80053f0 <prvHeapInit+0xb4>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2200      	movs	r2, #0
 80053a4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80053a6:	4b12      	ldr	r3, [pc, #72]	; (80053f0 <prvHeapInit+0xb4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2200      	movs	r2, #0
 80053ac:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	1ad2      	subs	r2, r2, r3
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053bc:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <prvHeapInit+0xb4>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <prvHeapInit+0xb8>)
 80053ca:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <prvHeapInit+0xbc>)
 80053d2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <prvHeapInit+0xc0>)
 80053d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053da:	601a      	str	r2, [r3, #0]
}
 80053dc:	bf00      	nop
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	20000178 	.word	0x20000178
 80053ec:	20012d78 	.word	0x20012d78
 80053f0:	20012d80 	.word	0x20012d80
 80053f4:	20012d88 	.word	0x20012d88
 80053f8:	20012d84 	.word	0x20012d84
 80053fc:	20012d94 	.word	0x20012d94

08005400 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005408:	4b28      	ldr	r3, [pc, #160]	; (80054ac <prvInsertBlockIntoFreeList+0xac>)
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	e002      	b.n	8005414 <prvInsertBlockIntoFreeList+0x14>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	429a      	cmp	r2, r3
 800541c:	d8f7      	bhi.n	800540e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4413      	add	r3, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d108      	bne.n	8005442 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	441a      	add	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	441a      	add	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d118      	bne.n	8005488 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <prvInsertBlockIntoFreeList+0xb0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d00d      	beq.n	800547e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	441a      	add	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	601a      	str	r2, [r3, #0]
 800547c:	e008      	b.n	8005490 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <prvInsertBlockIntoFreeList+0xb0>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e003      	b.n	8005490 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d002      	beq.n	800549e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800549e:	bf00      	nop
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	20012d78 	.word	0x20012d78
 80054b0:	20012d80 	.word	0x20012d80

080054b4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80054b8:	4803      	ldr	r0, [pc, #12]	; (80054c8 <_cbSendSystemDesc+0x14>)
 80054ba:	f001 fd27 	bl	8006f0c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80054be:	4803      	ldr	r0, [pc, #12]	; (80054cc <_cbSendSystemDesc+0x18>)
 80054c0:	f001 fd24 	bl	8006f0c <SEGGER_SYSVIEW_SendSysDesc>
}
 80054c4:	bf00      	nop
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	080076e8 	.word	0x080076e8
 80054cc:	08007728 	.word	0x08007728

080054d0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80054d4:	4b05      	ldr	r3, [pc, #20]	; (80054ec <SEGGER_SYSVIEW_Conf+0x1c>)
 80054d6:	4a06      	ldr	r2, [pc, #24]	; (80054f0 <SEGGER_SYSVIEW_Conf+0x20>)
 80054d8:	4906      	ldr	r1, [pc, #24]	; (80054f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80054da:	4806      	ldr	r0, [pc, #24]	; (80054f4 <SEGGER_SYSVIEW_Conf+0x24>)
 80054dc:	f001 f894 	bl	8006608 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80054e0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80054e4:	f001 f8d4 	bl	8006690 <SEGGER_SYSVIEW_SetRAMBase>
}
 80054e8:	bf00      	nop
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	080054b5 	.word	0x080054b5
 80054f0:	080077f8 	.word	0x080077f8
 80054f4:	007a1200 	.word	0x007a1200

080054f8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80054f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80054fe:	2300      	movs	r3, #0
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	e033      	b.n	800556c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005504:	491e      	ldr	r1, [pc, #120]	; (8005580 <_cbSendTaskList+0x88>)
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4613      	mov	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	440b      	add	r3, r1
 8005512:	6818      	ldr	r0, [r3, #0]
 8005514:	491a      	ldr	r1, [pc, #104]	; (8005580 <_cbSendTaskList+0x88>)
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	3304      	adds	r3, #4
 8005524:	6819      	ldr	r1, [r3, #0]
 8005526:	4c16      	ldr	r4, [pc, #88]	; (8005580 <_cbSendTaskList+0x88>)
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	4423      	add	r3, r4
 8005534:	3308      	adds	r3, #8
 8005536:	681c      	ldr	r4, [r3, #0]
 8005538:	4d11      	ldr	r5, [pc, #68]	; (8005580 <_cbSendTaskList+0x88>)
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	442b      	add	r3, r5
 8005546:	330c      	adds	r3, #12
 8005548:	681d      	ldr	r5, [r3, #0]
 800554a:	4e0d      	ldr	r6, [pc, #52]	; (8005580 <_cbSendTaskList+0x88>)
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4433      	add	r3, r6
 8005558:	3310      	adds	r3, #16
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	462b      	mov	r3, r5
 8005560:	4622      	mov	r2, r4
 8005562:	f000 f8c1 	bl	80056e8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3301      	adds	r3, #1
 800556a:	607b      	str	r3, [r7, #4]
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <_cbSendTaskList+0x8c>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	429a      	cmp	r2, r3
 8005574:	d3c6      	bcc.n	8005504 <_cbSendTaskList+0xc>
  }
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005580:	20012d98 	.word	0x20012d98
 8005584:	20012e38 	.word	0x20012e38

08005588 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8005588:	b5b0      	push	{r4, r5, r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800558e:	f7fe f9f7 	bl	8003980 <xTaskGetTickCountFromISR>
 8005592:	4603      	mov	r3, r0
 8005594:	461a      	mov	r2, r3
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
 800559e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	008b      	lsls	r3, r1, #2
 80055ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055b0:	0082      	lsls	r2, r0, #2
 80055b2:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= 1000;
 80055b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	f04f 0400 	mov.w	r4, #0
 80055c2:	f04f 0500 	mov.w	r5, #0
 80055c6:	015d      	lsls	r5, r3, #5
 80055c8:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80055cc:	0154      	lsls	r4, r2, #5
 80055ce:	4622      	mov	r2, r4
 80055d0:	462b      	mov	r3, r5
 80055d2:	1a12      	subs	r2, r2, r0
 80055d4:	eb63 0301 	sbc.w	r3, r3, r1
 80055d8:	f04f 0400 	mov.w	r4, #0
 80055dc:	f04f 0500 	mov.w	r5, #0
 80055e0:	009d      	lsls	r5, r3, #2
 80055e2:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 80055e6:	0094      	lsls	r4, r2, #2
 80055e8:	4622      	mov	r2, r4
 80055ea:	462b      	mov	r3, r5
 80055ec:	1812      	adds	r2, r2, r0
 80055ee:	eb41 0303 	adc.w	r3, r1, r3
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f04f 0100 	mov.w	r1, #0
 80055fa:	00d9      	lsls	r1, r3, #3
 80055fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005600:	00d0      	lsls	r0, r2, #3
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800560a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800560e:	4610      	mov	r0, r2
 8005610:	4619      	mov	r1, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bdb0      	pop	{r4, r5, r7, pc}

08005618 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af02      	add	r7, sp, #8
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8005626:	2205      	movs	r2, #5
 8005628:	492b      	ldr	r1, [pc, #172]	; (80056d8 <SYSVIEW_AddTask+0xc0>)
 800562a:	68b8      	ldr	r0, [r7, #8]
 800562c:	f002 f800 	bl	8007630 <memcmp>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d04b      	beq.n	80056ce <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8005636:	4b29      	ldr	r3, [pc, #164]	; (80056dc <SYSVIEW_AddTask+0xc4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b07      	cmp	r3, #7
 800563c:	d903      	bls.n	8005646 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800563e:	4828      	ldr	r0, [pc, #160]	; (80056e0 <SYSVIEW_AddTask+0xc8>)
 8005640:	f001 ff76 	bl	8007530 <SEGGER_SYSVIEW_Warn>
    return;
 8005644:	e044      	b.n	80056d0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8005646:	4b25      	ldr	r3, [pc, #148]	; (80056dc <SYSVIEW_AddTask+0xc4>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4926      	ldr	r1, [pc, #152]	; (80056e4 <SYSVIEW_AddTask+0xcc>)
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800565a:	4b20      	ldr	r3, [pc, #128]	; (80056dc <SYSVIEW_AddTask+0xc4>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4921      	ldr	r1, [pc, #132]	; (80056e4 <SYSVIEW_AddTask+0xcc>)
 8005660:	4613      	mov	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	3304      	adds	r3, #4
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8005670:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <SYSVIEW_AddTask+0xc4>)
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	491b      	ldr	r1, [pc, #108]	; (80056e4 <SYSVIEW_AddTask+0xcc>)
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	440b      	add	r3, r1
 8005680:	3308      	adds	r3, #8
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8005686:	4b15      	ldr	r3, [pc, #84]	; (80056dc <SYSVIEW_AddTask+0xc4>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4916      	ldr	r1, [pc, #88]	; (80056e4 <SYSVIEW_AddTask+0xcc>)
 800568c:	4613      	mov	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	4413      	add	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	330c      	adds	r3, #12
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800569c:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <SYSVIEW_AddTask+0xc4>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4910      	ldr	r1, [pc, #64]	; (80056e4 <SYSVIEW_AddTask+0xcc>)
 80056a2:	4613      	mov	r3, r2
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	4413      	add	r3, r2
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	440b      	add	r3, r1
 80056ac:	3310      	adds	r3, #16
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80056b2:	4b0a      	ldr	r3, [pc, #40]	; (80056dc <SYSVIEW_AddTask+0xc4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	4a08      	ldr	r2, [pc, #32]	; (80056dc <SYSVIEW_AddTask+0xc4>)
 80056ba:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68b9      	ldr	r1, [r7, #8]
 80056c6:	68f8      	ldr	r0, [r7, #12]
 80056c8:	f000 f80e 	bl	80056e8 <SYSVIEW_SendTaskInfo>
 80056cc:	e000      	b.n	80056d0 <SYSVIEW_AddTask+0xb8>
    return;
 80056ce:	bf00      	nop

}
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	08007738 	.word	0x08007738
 80056dc:	20012e38 	.word	0x20012e38
 80056e0:	08007740 	.word	0x08007740
 80056e4:	20012d98 	.word	0x20012d98

080056e8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b08a      	sub	sp, #40	; 0x28
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80056f6:	f107 0314 	add.w	r3, r7, #20
 80056fa:	2214      	movs	r2, #20
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 ffb2 	bl	8007668 <memset>
  TaskInfo.TaskID     = TaskID;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005718:	f107 0314 	add.w	r3, r7, #20
 800571c:	4618      	mov	r0, r3
 800571e:	f001 fafd 	bl	8006d1c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005722:	bf00      	nop
 8005724:	3728      	adds	r7, #40	; 0x28
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005732:	4b24      	ldr	r3, [pc, #144]	; (80057c4 <_DoInit+0x98>)
 8005734:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2203      	movs	r2, #3
 800573a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <_DoInit+0x9c>)
 8005746:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a20      	ldr	r2, [pc, #128]	; (80057cc <_DoInit+0xa0>)
 800574c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005754:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <_DoInit+0x9c>)
 800576c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <_DoInit+0xa4>)
 8005772:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2210      	movs	r2, #16
 8005778:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3307      	adds	r3, #7
 8005790:	4a10      	ldr	r2, [pc, #64]	; (80057d4 <_DoInit+0xa8>)
 8005792:	6810      	ldr	r0, [r2, #0]
 8005794:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005796:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a0e      	ldr	r2, [pc, #56]	; (80057d8 <_DoInit+0xac>)
 800579e:	6810      	ldr	r0, [r2, #0]
 80057a0:	6018      	str	r0, [r3, #0]
 80057a2:	8891      	ldrh	r1, [r2, #4]
 80057a4:	7992      	ldrb	r2, [r2, #6]
 80057a6:	8099      	strh	r1, [r3, #4]
 80057a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057b4:	f3bf 8f5f 	dmb	sy
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	2001c40c 	.word	0x2001c40c
 80057c8:	08007790 	.word	0x08007790
 80057cc:	20012e3c 	.word	0x20012e3c
 80057d0:	2001323c 	.word	0x2001323c
 80057d4:	0800779c 	.word	0x0800779c
 80057d8:	080077a0 	.word	0x080077a0

080057dc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80057e8:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <SEGGER_RTT_ReadNoLock+0x108>)
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <SEGGER_RTT_ReadNoLock+0x1e>
 80057f6:	f7ff ff99 	bl	800572c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4613      	mov	r3, r2
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	4413      	add	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	3360      	adds	r3, #96	; 0x60
 8005806:	4a37      	ldr	r2, [pc, #220]	; (80058e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005808:	4413      	add	r3, r2
 800580a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d92b      	bls.n	8005880 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4293      	cmp	r3, r2
 8005838:	bf28      	it	cs
 800583a:	4613      	movcs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	4413      	add	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	6939      	ldr	r1, [r7, #16]
 800584c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800584e:	f001 fefd 	bl	800764c <memcpy>
    NumBytesRead += NumBytesRem;
 8005852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800586a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	4413      	add	r3, r2
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005878:	429a      	cmp	r2, r3
 800587a:	d101      	bne.n	8005880 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800587c:	2300      	movs	r3, #0
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4293      	cmp	r3, r2
 800588e:	bf28      	it	cs
 8005890:	4613      	movcs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d019      	beq.n	80058ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	4413      	add	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	6939      	ldr	r1, [r7, #16]
 80058a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058aa:	f001 fecf 	bl	800764c <memcpy>
    NumBytesRead += NumBytesRem;
 80058ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3730      	adds	r7, #48	; 0x30
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	2001c40c 	.word	0x2001c40c

080058e8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80058f6:	4b3d      	ldr	r3, [pc, #244]	; (80059ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005904:	f7ff ff12 	bl	800572c <_DoInit>
  SEGGER_RTT_LOCK();
 8005908:	f3ef 8311 	mrs	r3, BASEPRI
 800590c:	f04f 0120 	mov.w	r1, #32
 8005910:	f381 8811 	msr	BASEPRI, r1
 8005914:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005916:	4b35      	ldr	r3, [pc, #212]	; (80059ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005918:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800591e:	6939      	ldr	r1, [r7, #16]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	4613      	mov	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4413      	add	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	440b      	add	r3, r1
 800592e:	3304      	adds	r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	429a      	cmp	r2, r3
 8005944:	dbeb      	blt.n	800591e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005946:	e000      	b.n	800594a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005948:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	da3f      	bge.n	80059d4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005954:	6939      	ldr	r1, [r7, #16]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	4613      	mov	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005968:	6939      	ldr	r1, [r7, #16]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	4613      	mov	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	3304      	adds	r3, #4
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800597e:	6939      	ldr	r1, [r7, #16]
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	4613      	mov	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	440b      	add	r3, r1
 800598c:	3320      	adds	r3, #32
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005992:	6939      	ldr	r1, [r7, #16]
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	4613      	mov	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	4413      	add	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	440b      	add	r3, r1
 80059a0:	3328      	adds	r3, #40	; 0x28
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80059a6:	6939      	ldr	r1, [r7, #16]
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	440b      	add	r3, r1
 80059b4:	3324      	adds	r3, #36	; 0x24
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80059ba:	6939      	ldr	r1, [r7, #16]
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	4613      	mov	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	440b      	add	r3, r1
 80059c8:	332c      	adds	r3, #44	; 0x2c
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059ce:	f3bf 8f5f 	dmb	sy
 80059d2:	e002      	b.n	80059da <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295
 80059d8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80059e0:	69fb      	ldr	r3, [r7, #28]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	2001c40c 	.word	0x2001c40c

080059f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80059fe:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a0c:	f7ff fe8e 	bl	800572c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a10:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a12:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d82c      	bhi.n	8005a74 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a1e:	f04f 0120 	mov.w	r1, #32
 8005a22:	f381 8811 	msr	BASEPRI, r1
 8005a26:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	3360      	adds	r3, #96	; 0x60
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a62:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	e002      	b.n	8005a7a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3728      	adds	r7, #40	; 0x28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	2001c40c 	.word	0x2001c40c

08005a88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00f      	beq.n	8005abe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005a9e:	e002      	b.n	8005aa6 <_EncodeStr+0x1e>
      Len++;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4413      	add	r3, r2
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f6      	bne.n	8005aa0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d901      	bls.n	8005abe <_EncodeStr+0x36>
      Len = Limit;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8005ac2:	d806      	bhi.n	8005ad2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	60fa      	str	r2, [r7, #12]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e011      	b.n	8005af6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	60fa      	str	r2, [r7, #12]
 8005ad8:	22ff      	movs	r2, #255	; 0xff
 8005ada:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	60fa      	str	r2, [r7, #12]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	0a19      	lsrs	r1, r3, #8
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	60fa      	str	r2, [r7, #12]
 8005af2:	b2ca      	uxtb	r2, r1
 8005af4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005afa:	e00a      	b.n	8005b12 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	1c53      	adds	r3, r2, #1
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1c59      	adds	r1, r3, #1
 8005b06:	60f9      	str	r1, [r7, #12]
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	701a      	strb	r2, [r3, #0]
    n++;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3f0      	bcc.n	8005afc <_EncodeStr+0x74>
  }
  return pPayload;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3304      	adds	r3, #4
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b46:	4b36      	ldr	r3, [pc, #216]	; (8005c20 <_HandleIncomingPacket+0xe0>)
 8005b48:	7e1b      	ldrb	r3, [r3, #24]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	1cfb      	adds	r3, r7, #3
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4619      	mov	r1, r3
 8005b52:	f7ff fe43 	bl	80057dc <SEGGER_RTT_ReadNoLock>
 8005b56:	4603      	mov	r3, r0
 8005b58:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dd54      	ble.n	8005c0a <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	2b80      	cmp	r3, #128	; 0x80
 8005b64:	d032      	beq.n	8005bcc <_HandleIncomingPacket+0x8c>
 8005b66:	2b80      	cmp	r3, #128	; 0x80
 8005b68:	dc42      	bgt.n	8005bf0 <_HandleIncomingPacket+0xb0>
 8005b6a:	2b07      	cmp	r3, #7
 8005b6c:	dc16      	bgt.n	8005b9c <_HandleIncomingPacket+0x5c>
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dd3e      	ble.n	8005bf0 <_HandleIncomingPacket+0xb0>
 8005b72:	3b01      	subs	r3, #1
 8005b74:	2b06      	cmp	r3, #6
 8005b76:	d83b      	bhi.n	8005bf0 <_HandleIncomingPacket+0xb0>
 8005b78:	a201      	add	r2, pc, #4	; (adr r2, 8005b80 <_HandleIncomingPacket+0x40>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005ba3 	.word	0x08005ba3
 8005b84:	08005ba9 	.word	0x08005ba9
 8005b88:	08005baf 	.word	0x08005baf
 8005b8c:	08005bb5 	.word	0x08005bb5
 8005b90:	08005bbb 	.word	0x08005bbb
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	08005bc7 	.word	0x08005bc7
 8005b9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b9e:	d036      	beq.n	8005c0e <_HandleIncomingPacket+0xce>
 8005ba0:	e026      	b.n	8005bf0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005ba2:	f000 ff41 	bl	8006a28 <SEGGER_SYSVIEW_Start>
      break;
 8005ba6:	e037      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005ba8:	f000 fff8 	bl	8006b9c <SEGGER_SYSVIEW_Stop>
      break;
 8005bac:	e034      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005bae:	f001 f9d1 	bl	8006f54 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005bb2:	e031      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005bb4:	f001 f996 	bl	8006ee4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005bb8:	e02e      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005bba:	f001 f815 	bl	8006be8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005bbe:	e02b      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005bc0:	f001 fc64 	bl	800748c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005bc4:	e028      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005bc6:	f001 fc43 	bl	8007450 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005bca:	e025      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <_HandleIncomingPacket+0xe0>)
 8005bce:	7e1b      	ldrb	r3, [r3, #24]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	1cfb      	adds	r3, r7, #3
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	f7ff fe00 	bl	80057dc <SEGGER_RTT_ReadNoLock>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	dd15      	ble.n	8005c12 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f001 fbb1 	bl	8007350 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005bee:	e010      	b.n	8005c12 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	b25b      	sxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	da0e      	bge.n	8005c16 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bf8:	4b09      	ldr	r3, [pc, #36]	; (8005c20 <_HandleIncomingPacket+0xe0>)
 8005bfa:	7e1b      	ldrb	r3, [r3, #24]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	1cfb      	adds	r3, r7, #3
 8005c00:	2201      	movs	r2, #1
 8005c02:	4619      	mov	r1, r3
 8005c04:	f7ff fdea 	bl	80057dc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005c08:	e005      	b.n	8005c16 <_HandleIncomingPacket+0xd6>
    }
  }
 8005c0a:	bf00      	nop
 8005c0c:	e004      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
      break;
 8005c0e:	bf00      	nop
 8005c10:	e002      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
      break;
 8005c12:	bf00      	nop
 8005c14:	e000      	b.n	8005c18 <_HandleIncomingPacket+0xd8>
      break;
 8005c16:	bf00      	nop
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	2001c254 	.word	0x2001c254

08005c24 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b08c      	sub	sp, #48	; 0x30
 8005c28:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c2e:	1d3b      	adds	r3, r7, #4
 8005c30:	3301      	adds	r3, #1
 8005c32:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c38:	4b31      	ldr	r3, [pc, #196]	; (8005d00 <_TrySendOverflowPacket+0xdc>)
 8005c3a:	695b      	ldr	r3, [r3, #20]
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c3e:	e00b      	b.n	8005c58 <_TrySendOverflowPacket+0x34>
 8005c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	1c59      	adds	r1, r3, #1
 8005c48:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	701a      	strb	r2, [r3, #0]
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	09db      	lsrs	r3, r3, #7
 8005c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005c5c:	d8f0      	bhi.n	8005c40 <_TrySendOverflowPacket+0x1c>
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c6e:	4b25      	ldr	r3, [pc, #148]	; (8005d04 <_TrySendOverflowPacket+0xe0>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c74:	4b22      	ldr	r3, [pc, #136]	; (8005d00 <_TrySendOverflowPacket+0xdc>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	e00b      	b.n	8005ca0 <_TrySendOverflowPacket+0x7c>
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	6279      	str	r1, [r7, #36]	; 0x24
 8005c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	09db      	lsrs	r3, r3, #7
 8005c9e:	623b      	str	r3, [r7, #32]
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ca4:	d8f0      	bhi.n	8005c88 <_TrySendOverflowPacket+0x64>
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	627a      	str	r2, [r7, #36]	; 0x24
 8005cac:	6a3a      	ldr	r2, [r7, #32]
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005cb6:	4b12      	ldr	r3, [pc, #72]	; (8005d00 <_TrySendOverflowPacket+0xdc>)
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	1d3b      	adds	r3, r7, #4
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	1d3b      	adds	r3, r7, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f7fa fa9a 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005cd6:	4a0a      	ldr	r2, [pc, #40]	; (8005d00 <_TrySendOverflowPacket+0xdc>)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <_TrySendOverflowPacket+0xdc>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	b2da      	uxtb	r2, r3
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <_TrySendOverflowPacket+0xdc>)
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e004      	b.n	8005cf4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005cea:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <_TrySendOverflowPacket+0xdc>)
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	4a03      	ldr	r2, [pc, #12]	; (8005d00 <_TrySendOverflowPacket+0xdc>)
 8005cf2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005cf4:	693b      	ldr	r3, [r7, #16]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3730      	adds	r7, #48	; 0x30
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	2001c254 	.word	0x2001c254
 8005d04:	e0001004 	.word	0xe0001004

08005d08 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d14:	4b6c      	ldr	r3, [pc, #432]	; (8005ec8 <_SendPacket+0x1c0>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d010      	beq.n	8005d3e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d1c:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <_SendPacket+0x1c0>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 80a3 	beq.w	8005e6c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d26:	4b68      	ldr	r3, [pc, #416]	; (8005ec8 <_SendPacket+0x1c0>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d109      	bne.n	8005d42 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d2e:	f7ff ff79 	bl	8005c24 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d32:	4b65      	ldr	r3, [pc, #404]	; (8005ec8 <_SendPacket+0x1c0>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	f040 809a 	bne.w	8005e70 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005d3c:	e001      	b.n	8005d42 <_SendPacket+0x3a>
    goto Send;
 8005d3e:	bf00      	nop
 8005d40:	e000      	b.n	8005d44 <_SendPacket+0x3c>
Send:
 8005d42:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2b1f      	cmp	r3, #31
 8005d48:	d809      	bhi.n	8005d5e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005d4a:	4b5f      	ldr	r3, [pc, #380]	; (8005ec8 <_SendPacket+0x1c0>)
 8005d4c:	69da      	ldr	r2, [r3, #28]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f040 808b 	bne.w	8005e74 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2b17      	cmp	r3, #23
 8005d62:	d807      	bhi.n	8005d74 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e03d      	b.n	8005df0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d80:	d912      	bls.n	8005da8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	09da      	lsrs	r2, r3, #7
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	3a01      	subs	r2, #1
 8005d9a:	60fa      	str	r2, [r7, #12]
 8005d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e006      	b.n	8005db6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2b7f      	cmp	r3, #127	; 0x7f
 8005dba:	d912      	bls.n	8005de2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	09da      	lsrs	r2, r3, #7
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	3a01      	subs	r2, #1
 8005dd4:	60fa      	str	r2, [r7, #12]
 8005dd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	e006      	b.n	8005df0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	b2da      	uxtb	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005df0:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <_SendPacket+0x1c4>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005df6:	4b34      	ldr	r3, [pc, #208]	; (8005ec8 <_SendPacket+0x1c0>)
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	623b      	str	r3, [r7, #32]
 8005e08:	e00b      	b.n	8005e22 <_SendPacket+0x11a>
 8005e0a:	6a3b      	ldr	r3, [r7, #32]
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e10:	1c59      	adds	r1, r3, #1
 8005e12:	6279      	str	r1, [r7, #36]	; 0x24
 8005e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e18:	b2d2      	uxtb	r2, r2
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	09db      	lsrs	r3, r3, #7
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	2b7f      	cmp	r3, #127	; 0x7f
 8005e26:	d8f0      	bhi.n	8005e0a <_SendPacket+0x102>
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	627a      	str	r2, [r7, #36]	; 0x24
 8005e2e:	6a3a      	ldr	r2, [r7, #32]
 8005e30:	b2d2      	uxtb	r2, r2
 8005e32:	701a      	strb	r2, [r3, #0]
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005e38:	4b23      	ldr	r3, [pc, #140]	; (8005ec8 <_SendPacket+0x1c0>)
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	68f9      	ldr	r1, [r7, #12]
 8005e48:	f7fa f9da 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e56:	4a1c      	ldr	r2, [pc, #112]	; (8005ec8 <_SendPacket+0x1c0>)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	60d3      	str	r3, [r2, #12]
 8005e5c:	e00b      	b.n	8005e76 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e5e:	4b1a      	ldr	r3, [pc, #104]	; (8005ec8 <_SendPacket+0x1c0>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	3301      	adds	r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	4b18      	ldr	r3, [pc, #96]	; (8005ec8 <_SendPacket+0x1c0>)
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	e004      	b.n	8005e76 <_SendPacket+0x16e>
    goto SendDone;
 8005e6c:	bf00      	nop
 8005e6e:	e002      	b.n	8005e76 <_SendPacket+0x16e>
      goto SendDone;
 8005e70:	bf00      	nop
 8005e72:	e000      	b.n	8005e76 <_SendPacket+0x16e>
      goto SendDone;
 8005e74:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e76:	4b14      	ldr	r3, [pc, #80]	; (8005ec8 <_SendPacket+0x1c0>)
 8005e78:	7e1b      	ldrb	r3, [r3, #24]
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <_SendPacket+0x1c8>)
 8005e7e:	460b      	mov	r3, r1
 8005e80:	005b      	lsls	r3, r3, #1
 8005e82:	440b      	add	r3, r1
 8005e84:	00db      	lsls	r3, r3, #3
 8005e86:	4413      	add	r3, r2
 8005e88:	336c      	adds	r3, #108	; 0x6c
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	; (8005ec8 <_SendPacket+0x1c0>)
 8005e8e:	7e1b      	ldrb	r3, [r3, #24]
 8005e90:	4618      	mov	r0, r3
 8005e92:	490f      	ldr	r1, [pc, #60]	; (8005ed0 <_SendPacket+0x1c8>)
 8005e94:	4603      	mov	r3, r0
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	4403      	add	r3, r0
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3370      	adds	r3, #112	; 0x70
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d00b      	beq.n	8005ebe <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005ea6:	4b08      	ldr	r3, [pc, #32]	; (8005ec8 <_SendPacket+0x1c0>)
 8005ea8:	789b      	ldrb	r3, [r3, #2]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <_SendPacket+0x1c0>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005eb4:	f7ff fe44 	bl	8005b40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005eb8:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <_SendPacket+0x1c0>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005ebe:	bf00      	nop
 8005ec0:	3728      	adds	r7, #40	; 0x28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	2001c254 	.word	0x2001c254
 8005ecc:	e0001004 	.word	0xe0001004
 8005ed0:	2001c40c 	.word	0x2001c40c

08005ed4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	; 0x28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	2b80      	cmp	r3, #128	; 0x80
 8005eec:	d80a      	bhi.n	8005f04 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	1c59      	adds	r1, r3, #1
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6051      	str	r1, [r2, #4]
 8005ef8:	78fa      	ldrb	r2, [r7, #3]
 8005efa:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b80      	cmp	r3, #128	; 0x80
 8005f0a:	d15a      	bne.n	8005fc2 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	623b      	str	r3, [r7, #32]
 8005f2c:	e00b      	b.n	8005f46 <_StoreChar+0x72>
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	1c59      	adds	r1, r3, #1
 8005f36:	6279      	str	r1, [r7, #36]	; 0x24
 8005f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f3c:	b2d2      	uxtb	r2, r2
 8005f3e:	701a      	strb	r2, [r3, #0]
 8005f40:	6a3b      	ldr	r3, [r7, #32]
 8005f42:	09db      	lsrs	r3, r3, #7
 8005f44:	623b      	str	r3, [r7, #32]
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4a:	d8f0      	bhi.n	8005f2e <_StoreChar+0x5a>
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	1c5a      	adds	r2, r3, #1
 8005f50:	627a      	str	r2, [r7, #36]	; 0x24
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	61fb      	str	r3, [r7, #28]
 8005f60:	2300      	movs	r3, #0
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e00b      	b.n	8005f7e <_StoreChar+0xaa>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	b2da      	uxtb	r2, r3
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	1c59      	adds	r1, r3, #1
 8005f6e:	61f9      	str	r1, [r7, #28]
 8005f70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f74:	b2d2      	uxtb	r2, r2
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	09db      	lsrs	r3, r3, #7
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b7f      	cmp	r3, #127	; 0x7f
 8005f82:	d8f0      	bhi.n	8005f66 <_StoreChar+0x92>
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	1c5a      	adds	r2, r3, #1
 8005f88:	61fa      	str	r2, [r7, #28]
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	b2d2      	uxtb	r2, r2
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	221a      	movs	r2, #26
 8005f9a:	6939      	ldr	r1, [r7, #16]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7ff feb3 	bl	8005d08 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff fdbe 	bl	8005b28 <_PreparePacket>
 8005fac:	4602      	mov	r2, r0
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	611a      	str	r2, [r3, #16]
  }
}
 8005fc2:	bf00      	nop
 8005fc4:	3728      	adds	r7, #40	; 0x28
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
	...

08005fcc <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	; 0x28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005fe6:	e007      	b.n	8005ff8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005fe8:	6a3a      	ldr	r2, [r7, #32]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	623b      	str	r3, [r7, #32]
    Width++;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005ff8:	6a3a      	ldr	r2, [r7, #32]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d2f3      	bcs.n	8005fe8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	429a      	cmp	r2, r3
 8006006:	d901      	bls.n	800600c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800600c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	d11f      	bne.n	8006056 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01c      	beq.n	8006056 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800601c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800601e:	f003 0302 	and.w	r3, r3, #2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <_PrintUnsigned+0x66>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <_PrintUnsigned+0x66>
        c = '0';
 800602c:	2330      	movs	r3, #48	; 0x30
 800602e:	76fb      	strb	r3, [r7, #27]
 8006030:	e001      	b.n	8006036 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8006032:	2320      	movs	r3, #32
 8006034:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006036:	e007      	b.n	8006048 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	3b01      	subs	r3, #1
 800603c:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800603e:	7efb      	ldrb	r3, [r7, #27]
 8006040:	4619      	mov	r1, r3
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff ff46 	bl	8005ed4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <_PrintUnsigned+0x8a>
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	429a      	cmp	r2, r3
 8006054:	d3f0      	bcc.n	8006038 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d903      	bls.n	8006064 <_PrintUnsigned+0x98>
      NumDigits--;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	3b01      	subs	r3, #1
 8006060:	603b      	str	r3, [r7, #0]
 8006062:	e009      	b.n	8006078 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	fbb2 f3f3 	udiv	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	429a      	cmp	r2, r3
 8006074:	d200      	bcs.n	8006078 <_PrintUnsigned+0xac>
        break;
 8006076:	e005      	b.n	8006084 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	fb02 f303 	mul.w	r3, r2, r3
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006082:	e7e8      	b.n	8006056 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006088:	fbb2 f3f3 	udiv	r3, r2, r3
 800608c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006092:	fb02 f303 	mul.w	r3, r2, r3
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800609c:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <_PrintUnsigned+0x128>)
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	4413      	add	r3, r2
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff ff14 	bl	8005ed4 <_StoreChar>
    Digit /= Base;
 80060ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b4:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e3      	bne.n	8006084 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80060bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d011      	beq.n	80060ea <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 80060c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00e      	beq.n	80060ea <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060cc:	e006      	b.n	80060dc <_PrintUnsigned+0x110>
        FieldWidth--;
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	3b01      	subs	r3, #1
 80060d2:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 80060d4:	2120      	movs	r1, #32
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff fefc 	bl	8005ed4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <_PrintUnsigned+0x11e>
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d3f1      	bcc.n	80060ce <_PrintUnsigned+0x102>
      }
    }
  }
}
 80060ea:	bf00      	nop
 80060ec:	3728      	adds	r7, #40	; 0x28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	0800780c 	.word	0x0800780c

080060f8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af02      	add	r7, sp, #8
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	bfb8      	it	lt
 800610c:	425b      	neglt	r3, r3
 800610e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006114:	e007      	b.n	8006126 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	fb92 f3f3 	sdiv	r3, r2, r3
 800611e:	613b      	str	r3, [r7, #16]
    Width++;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	3301      	adds	r3, #1
 8006124:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	daf3      	bge.n	8006116 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800612e:	683a      	ldr	r2, [r7, #0]
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	429a      	cmp	r2, r3
 8006134:	d901      	bls.n	800613a <_PrintInt+0x42>
    Width = NumDigits;
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00a      	beq.n	8006156 <_PrintInt+0x5e>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	db04      	blt.n	8006150 <_PrintInt+0x58>
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	f003 0304 	and.w	r3, r3, #4
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <_PrintInt+0x5e>
    FieldWidth--;
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	3b01      	subs	r3, #1
 8006154:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <_PrintInt+0x6e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d016      	beq.n	8006194 <_PrintInt+0x9c>
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d111      	bne.n	8006194 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00e      	beq.n	8006194 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006176:	e006      	b.n	8006186 <_PrintInt+0x8e>
        FieldWidth--;
 8006178:	6a3b      	ldr	r3, [r7, #32]
 800617a:	3b01      	subs	r3, #1
 800617c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800617e:	2120      	movs	r1, #32
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	f7ff fea7 	bl	8005ed4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <_PrintInt+0x9c>
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	429a      	cmp	r2, r3
 8006192:	d3f1      	bcc.n	8006178 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	da07      	bge.n	80061aa <_PrintInt+0xb2>
    v = -v;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	425b      	negs	r3, r3
 800619e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80061a0:	212d      	movs	r1, #45	; 0x2d
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff fe96 	bl	8005ed4 <_StoreChar>
 80061a8:	e008      	b.n	80061bc <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80061b4:	212b      	movs	r1, #43	; 0x2b
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7ff fe8c 	bl	8005ed4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d019      	beq.n	80061fa <_PrintInt+0x102>
 80061c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d114      	bne.n	80061fa <_PrintInt+0x102>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d111      	bne.n	80061fa <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00e      	beq.n	80061fa <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061dc:	e006      	b.n	80061ec <_PrintInt+0xf4>
        FieldWidth--;
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80061e4:	2130      	movs	r1, #48	; 0x30
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff fe74 	bl	8005ed4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <_PrintInt+0x102>
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d3f1      	bcc.n	80061de <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	9301      	str	r3, [sp, #4]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	9300      	str	r3, [sp, #0]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff fedf 	bl	8005fcc <_PrintUnsigned>
}
 800620e:	bf00      	nop
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b098      	sub	sp, #96	; 0x60
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006224:	f3ef 8311 	mrs	r3, BASEPRI
 8006228:	f04f 0120 	mov.w	r1, #32
 800622c:	f381 8811 	msr	BASEPRI, r1
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
 8006232:	48b7      	ldr	r0, [pc, #732]	; (8006510 <_VPrintTarget+0x2f8>)
 8006234:	f7ff fc78 	bl	8005b28 <_PreparePacket>
 8006238:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800623a:	4bb5      	ldr	r3, [pc, #724]	; (8006510 <_VPrintTarget+0x2f8>)
 800623c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800623e:	2300      	movs	r3, #0
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006244:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	3301      	adds	r3, #1
 800624a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800625e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8183 	beq.w	800656e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800626c:	2b25      	cmp	r3, #37	; 0x25
 800626e:	f040 8170 	bne.w	8006552 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006272:	2300      	movs	r3, #0
 8006274:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006276:	2301      	movs	r3, #1
 8006278:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006282:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006286:	3b23      	subs	r3, #35	; 0x23
 8006288:	2b0d      	cmp	r3, #13
 800628a:	d83f      	bhi.n	800630c <_VPrintTarget+0xf4>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <_VPrintTarget+0x7c>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062fd 	.word	0x080062fd
 8006298:	0800630d 	.word	0x0800630d
 800629c:	0800630d 	.word	0x0800630d
 80062a0:	0800630d 	.word	0x0800630d
 80062a4:	0800630d 	.word	0x0800630d
 80062a8:	0800630d 	.word	0x0800630d
 80062ac:	0800630d 	.word	0x0800630d
 80062b0:	0800630d 	.word	0x0800630d
 80062b4:	080062ed 	.word	0x080062ed
 80062b8:	0800630d 	.word	0x0800630d
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	0800630d 	.word	0x0800630d
 80062c4:	0800630d 	.word	0x0800630d
 80062c8:	080062dd 	.word	0x080062dd
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80062cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3301      	adds	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e01a      	b.n	8006312 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80062dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062de:	f043 0302 	orr.w	r3, r3, #2
 80062e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	e012      	b.n	8006312 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80062ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ee:	f043 0304 	orr.w	r3, r3, #4
 80062f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3301      	adds	r3, #1
 80062f8:	60fb      	str	r3, [r7, #12]
 80062fa:	e00a      	b.n	8006312 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80062fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fe:	f043 0308 	orr.w	r3, r3, #8
 8006302:	64bb      	str	r3, [r7, #72]	; 0x48
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	e002      	b.n	8006312 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800630c:	2300      	movs	r3, #0
 800630e:	653b      	str	r3, [r7, #80]	; 0x50
 8006310:	bf00      	nop
        }
      } while (v);
 8006312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1b0      	bne.n	800627a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006318:	2300      	movs	r3, #0
 800631a:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8006324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006328:	2b2f      	cmp	r3, #47	; 0x2f
 800632a:	d912      	bls.n	8006352 <_VPrintTarget+0x13a>
 800632c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006330:	2b39      	cmp	r3, #57	; 0x39
 8006332:	d80e      	bhi.n	8006352 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800633a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800633c:	4613      	mov	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	461a      	mov	r2, r3
 8006346:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800634a:	4413      	add	r3, r2
 800634c:	3b30      	subs	r3, #48	; 0x30
 800634e:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006350:	e7e4      	b.n	800631c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006352:	2300      	movs	r3, #0
 8006354:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800635e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006362:	2b2e      	cmp	r3, #46	; 0x2e
 8006364:	d11d      	bne.n	80063a2 <_VPrintTarget+0x18a>
        sFormat++;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3301      	adds	r3, #1
 800636a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006378:	2b2f      	cmp	r3, #47	; 0x2f
 800637a:	d912      	bls.n	80063a2 <_VPrintTarget+0x18a>
 800637c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006380:	2b39      	cmp	r3, #57	; 0x39
 8006382:	d80e      	bhi.n	80063a2 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	3301      	adds	r3, #1
 8006388:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800638a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800638c:	4613      	mov	r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4413      	add	r3, r2
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	461a      	mov	r2, r3
 8006396:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800639a:	4413      	add	r3, r2
 800639c:	3b30      	subs	r3, #48	; 0x30
 800639e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80063a0:	e7e4      	b.n	800636c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80063aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ae:	2b6c      	cmp	r3, #108	; 0x6c
 80063b0:	d003      	beq.n	80063ba <_VPrintTarget+0x1a2>
 80063b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063b6:	2b68      	cmp	r3, #104	; 0x68
 80063b8:	d107      	bne.n	80063ca <_VPrintTarget+0x1b2>
          c = *sFormat;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3301      	adds	r3, #1
 80063c6:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80063c8:	e7ef      	b.n	80063aa <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80063ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063ce:	2b25      	cmp	r3, #37	; 0x25
 80063d0:	f000 80b3 	beq.w	800653a <_VPrintTarget+0x322>
 80063d4:	2b25      	cmp	r3, #37	; 0x25
 80063d6:	f2c0 80b7 	blt.w	8006548 <_VPrintTarget+0x330>
 80063da:	2b78      	cmp	r3, #120	; 0x78
 80063dc:	f300 80b4 	bgt.w	8006548 <_VPrintTarget+0x330>
 80063e0:	2b58      	cmp	r3, #88	; 0x58
 80063e2:	f2c0 80b1 	blt.w	8006548 <_VPrintTarget+0x330>
 80063e6:	3b58      	subs	r3, #88	; 0x58
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	f200 80ad 	bhi.w	8006548 <_VPrintTarget+0x330>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <_VPrintTarget+0x1dc>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	080064eb 	.word	0x080064eb
 80063f8:	08006549 	.word	0x08006549
 80063fc:	08006549 	.word	0x08006549
 8006400:	08006549 	.word	0x08006549
 8006404:	08006549 	.word	0x08006549
 8006408:	08006549 	.word	0x08006549
 800640c:	08006549 	.word	0x08006549
 8006410:	08006549 	.word	0x08006549
 8006414:	08006549 	.word	0x08006549
 8006418:	08006549 	.word	0x08006549
 800641c:	08006549 	.word	0x08006549
 8006420:	08006479 	.word	0x08006479
 8006424:	0800649f 	.word	0x0800649f
 8006428:	08006549 	.word	0x08006549
 800642c:	08006549 	.word	0x08006549
 8006430:	08006549 	.word	0x08006549
 8006434:	08006549 	.word	0x08006549
 8006438:	08006549 	.word	0x08006549
 800643c:	08006549 	.word	0x08006549
 8006440:	08006549 	.word	0x08006549
 8006444:	08006549 	.word	0x08006549
 8006448:	08006549 	.word	0x08006549
 800644c:	08006549 	.word	0x08006549
 8006450:	08006549 	.word	0x08006549
 8006454:	08006515 	.word	0x08006515
 8006458:	08006549 	.word	0x08006549
 800645c:	08006549 	.word	0x08006549
 8006460:	08006549 	.word	0x08006549
 8006464:	08006549 	.word	0x08006549
 8006468:	080064c5 	.word	0x080064c5
 800646c:	08006549 	.word	0x08006549
 8006470:	08006549 	.word	0x08006549
 8006474:	080064eb 	.word	0x080064eb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	1d19      	adds	r1, r3, #4
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800648c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f7ff fd1c 	bl	8005ed4 <_StoreChar>
        break;
 800649c:	e055      	b.n	800654a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	1d19      	adds	r1, r3, #4
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6011      	str	r1, [r2, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80064ac:	f107 0014 	add.w	r0, r7, #20
 80064b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064ba:	220a      	movs	r2, #10
 80064bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064be:	f7ff fe1b 	bl	80060f8 <_PrintInt>
        break;
 80064c2:	e042      	b.n	800654a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	1d19      	adds	r1, r3, #4
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6011      	str	r1, [r2, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80064d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064d4:	f107 0014 	add.w	r0, r7, #20
 80064d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064da:	9301      	str	r3, [sp, #4]
 80064dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e2:	220a      	movs	r2, #10
 80064e4:	f7ff fd72 	bl	8005fcc <_PrintUnsigned>
        break;
 80064e8:	e02f      	b.n	800654a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	1d19      	adds	r1, r3, #4
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	6011      	str	r1, [r2, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80064f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064fa:	f107 0014 	add.w	r0, r7, #20
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	9301      	str	r3, [sp, #4]
 8006502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006508:	2210      	movs	r2, #16
 800650a:	f7ff fd5f 	bl	8005fcc <_PrintUnsigned>
        break;
 800650e:	e01c      	b.n	800654a <_VPrintTarget+0x332>
 8006510:	2001c284 	.word	0x2001c284
      case 'p':
        v = va_arg(*pParamList, int);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6011      	str	r1, [r2, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8006522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006524:	f107 0014 	add.w	r0, r7, #20
 8006528:	2300      	movs	r3, #0
 800652a:	9301      	str	r3, [sp, #4]
 800652c:	2308      	movs	r3, #8
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	2308      	movs	r3, #8
 8006532:	2210      	movs	r2, #16
 8006534:	f7ff fd4a 	bl	8005fcc <_PrintUnsigned>
        break;
 8006538:	e007      	b.n	800654a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800653a:	f107 0314 	add.w	r3, r7, #20
 800653e:	2125      	movs	r1, #37	; 0x25
 8006540:	4618      	mov	r0, r3
 8006542:	f7ff fcc7 	bl	8005ed4 <_StoreChar>
        break;
 8006546:	e000      	b.n	800654a <_VPrintTarget+0x332>
      default:
        break;
 8006548:	bf00      	nop
      }
      sFormat++;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3301      	adds	r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e007      	b.n	8006562 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006552:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	4611      	mov	r1, r2
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff fcb9 	bl	8005ed4 <_StoreChar>
    }
  } while (*sFormat);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	f47f ae72 	bne.w	8006250 <_VPrintTarget+0x38>
 800656c:	e000      	b.n	8006570 <_VPrintTarget+0x358>
      break;
 800656e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d041      	beq.n	80065fa <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	643b      	str	r3, [r7, #64]	; 0x40
 8006582:	6a3b      	ldr	r3, [r7, #32]
 8006584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006586:	e00b      	b.n	80065a0 <_VPrintTarget+0x388>
 8006588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658a:	b2da      	uxtb	r2, r3
 800658c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800658e:	1c59      	adds	r1, r3, #1
 8006590:	6439      	str	r1, [r7, #64]	; 0x40
 8006592:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006596:	b2d2      	uxtb	r2, r2
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800659c:	09db      	lsrs	r3, r3, #7
 800659e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a2:	2b7f      	cmp	r3, #127	; 0x7f
 80065a4:	d8f0      	bhi.n	8006588 <_VPrintTarget+0x370>
 80065a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a8:	1c5a      	adds	r2, r3, #1
 80065aa:	643a      	str	r2, [r7, #64]	; 0x40
 80065ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b4:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80065ba:	2300      	movs	r3, #0
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
 80065be:	e00b      	b.n	80065d8 <_VPrintTarget+0x3c0>
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	63b9      	str	r1, [r7, #56]	; 0x38
 80065ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	637b      	str	r3, [r7, #52]	; 0x34
 80065d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065da:	2b7f      	cmp	r3, #127	; 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <_VPrintTarget+0x3a8>
 80065de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	63ba      	str	r2, [r7, #56]	; 0x38
 80065e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065ec:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	69b9      	ldr	r1, [r7, #24]
 80065f2:	221a      	movs	r2, #26
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fb87 	bl	8005d08 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006600:	bf00      	nop
 8006602:	3758      	adds	r7, #88	; 0x58
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af02      	add	r7, sp, #8
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006616:	2300      	movs	r3, #0
 8006618:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800661c:	4917      	ldr	r1, [pc, #92]	; (800667c <SEGGER_SYSVIEW_Init+0x74>)
 800661e:	4818      	ldr	r0, [pc, #96]	; (8006680 <SEGGER_SYSVIEW_Init+0x78>)
 8006620:	f7ff f962 	bl	80058e8 <SEGGER_RTT_AllocUpBuffer>
 8006624:	4603      	mov	r3, r0
 8006626:	b2da      	uxtb	r2, r3
 8006628:	4b16      	ldr	r3, [pc, #88]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 800662a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800662c:	4b15      	ldr	r3, [pc, #84]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 800662e:	785a      	ldrb	r2, [r3, #1]
 8006630:	4b14      	ldr	r3, [pc, #80]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 8006632:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006634:	4b13      	ldr	r3, [pc, #76]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 8006636:	7e1b      	ldrb	r3, [r3, #24]
 8006638:	4618      	mov	r0, r3
 800663a:	2300      	movs	r3, #0
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2308      	movs	r3, #8
 8006640:	4a11      	ldr	r2, [pc, #68]	; (8006688 <SEGGER_SYSVIEW_Init+0x80>)
 8006642:	490f      	ldr	r1, [pc, #60]	; (8006680 <SEGGER_SYSVIEW_Init+0x78>)
 8006644:	f7ff f9d4 	bl	80059f0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006648:	4b0e      	ldr	r3, [pc, #56]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 800664a:	2200      	movs	r2, #0
 800664c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <SEGGER_SYSVIEW_Init+0x84>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 8006654:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006656:	4a0b      	ldr	r2, [pc, #44]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800665c:	4a09      	ldr	r2, [pc, #36]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006662:	4a08      	ldr	r2, [pc, #32]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006668:	4a06      	ldr	r2, [pc, #24]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <SEGGER_SYSVIEW_Init+0x7c>)
 8006670:	2200      	movs	r2, #0
 8006672:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006674:	bf00      	nop
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	2001324c 	.word	0x2001324c
 8006680:	080077a8 	.word	0x080077a8
 8006684:	2001c254 	.word	0x2001c254
 8006688:	2001c24c 	.word	0x2001c24c
 800668c:	e0001004 	.word	0xe0001004

08006690 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006698:	4a04      	ldr	r2, [pc, #16]	; (80066ac <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6113      	str	r3, [r2, #16]
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	2001c254 	.word	0x2001c254

080066b0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066b8:	f3ef 8311 	mrs	r3, BASEPRI
 80066bc:	f04f 0120 	mov.w	r1, #32
 80066c0:	f381 8811 	msr	BASEPRI, r1
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	4808      	ldr	r0, [pc, #32]	; (80066e8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80066c8:	f7ff fa2e 	bl	8005b28 <_PreparePacket>
 80066cc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	68b8      	ldr	r0, [r7, #8]
 80066d4:	f7ff fb18 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f383 8811 	msr	BASEPRI, r3
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	2001c284 	.word	0x2001c284

080066ec <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066f6:	f3ef 8311 	mrs	r3, BASEPRI
 80066fa:	f04f 0120 	mov.w	r1, #32
 80066fe:	f381 8811 	msr	BASEPRI, r1
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	4816      	ldr	r0, [pc, #88]	; (8006760 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006706:	f7ff fa0f 	bl	8005b28 <_PreparePacket>
 800670a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	61bb      	str	r3, [r7, #24]
 8006718:	e00b      	b.n	8006732 <SEGGER_SYSVIEW_RecordU32+0x46>
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	b2da      	uxtb	r2, r3
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	1c59      	adds	r1, r3, #1
 8006722:	61f9      	str	r1, [r7, #28]
 8006724:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006728:	b2d2      	uxtb	r2, r2
 800672a:	701a      	strb	r2, [r3, #0]
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	09db      	lsrs	r3, r3, #7
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	2b7f      	cmp	r3, #127	; 0x7f
 8006736:	d8f0      	bhi.n	800671a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	1c5a      	adds	r2, r3, #1
 800673c:	61fa      	str	r2, [r7, #28]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	b2d2      	uxtb	r2, r2
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	68f9      	ldr	r1, [r7, #12]
 800674c:	6938      	ldr	r0, [r7, #16]
 800674e:	f7ff fadb 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f383 8811 	msr	BASEPRI, r3
}
 8006758:	bf00      	nop
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	2001c284 	.word	0x2001c284

08006764 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b08c      	sub	sp, #48	; 0x30
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006770:	f3ef 8311 	mrs	r3, BASEPRI
 8006774:	f04f 0120 	mov.w	r1, #32
 8006778:	f381 8811 	msr	BASEPRI, r1
 800677c:	61fb      	str	r3, [r7, #28]
 800677e:	4825      	ldr	r0, [pc, #148]	; (8006814 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006780:	f7ff f9d2 	bl	8005b28 <_PreparePacket>
 8006784:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
 8006792:	e00b      	b.n	80067ac <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	b2da      	uxtb	r2, r3
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	1c59      	adds	r1, r3, #1
 800679c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800679e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a8:	09db      	lsrs	r3, r3, #7
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	2b7f      	cmp	r3, #127	; 0x7f
 80067b0:	d8f0      	bhi.n	8006794 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80067b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	623b      	str	r3, [r7, #32]
 80067ca:	e00b      	b.n	80067e4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	6279      	str	r1, [r7, #36]	; 0x24
 80067d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	09db      	lsrs	r3, r3, #7
 80067e2:	623b      	str	r3, [r7, #32]
 80067e4:	6a3b      	ldr	r3, [r7, #32]
 80067e6:	2b7f      	cmp	r3, #127	; 0x7f
 80067e8:	d8f0      	bhi.n	80067cc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	627a      	str	r2, [r7, #36]	; 0x24
 80067f0:	6a3a      	ldr	r2, [r7, #32]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	6979      	ldr	r1, [r7, #20]
 80067fe:	69b8      	ldr	r0, [r7, #24]
 8006800:	f7ff fa82 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f383 8811 	msr	BASEPRI, r3
}
 800680a:	bf00      	nop
 800680c:	3730      	adds	r7, #48	; 0x30
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	2001c284 	.word	0x2001c284

08006818 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b08e      	sub	sp, #56	; 0x38
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006826:	f3ef 8311 	mrs	r3, BASEPRI
 800682a:	f04f 0120 	mov.w	r1, #32
 800682e:	f381 8811 	msr	BASEPRI, r1
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	4832      	ldr	r0, [pc, #200]	; (8006900 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006836:	f7ff f977 	bl	8005b28 <_PreparePacket>
 800683a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	633b      	str	r3, [r7, #48]	; 0x30
 8006848:	e00b      	b.n	8006862 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800684a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684c:	b2da      	uxtb	r2, r3
 800684e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006850:	1c59      	adds	r1, r3, #1
 8006852:	6379      	str	r1, [r7, #52]	; 0x34
 8006854:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	701a      	strb	r2, [r3, #0]
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	09db      	lsrs	r3, r3, #7
 8006860:	633b      	str	r3, [r7, #48]	; 0x30
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	2b7f      	cmp	r3, #127	; 0x7f
 8006866:	d8f0      	bhi.n	800684a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	637a      	str	r2, [r7, #52]	; 0x34
 800686e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006870:	b2d2      	uxtb	r2, r2
 8006872:	701a      	strb	r2, [r3, #0]
 8006874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006876:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006880:	e00b      	b.n	800689a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006884:	b2da      	uxtb	r2, r3
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	1c59      	adds	r1, r3, #1
 800688a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800688c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006890:	b2d2      	uxtb	r2, r2
 8006892:	701a      	strb	r2, [r3, #0]
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	09db      	lsrs	r3, r3, #7
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	2b7f      	cmp	r3, #127	; 0x7f
 800689e:	d8f0      	bhi.n	8006882 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068a8:	b2d2      	uxtb	r2, r2
 80068aa:	701a      	strb	r2, [r3, #0]
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	623b      	str	r3, [r7, #32]
 80068b8:	e00b      	b.n	80068d2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	b2da      	uxtb	r2, r3
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	1c59      	adds	r1, r3, #1
 80068c2:	6279      	str	r1, [r7, #36]	; 0x24
 80068c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	701a      	strb	r2, [r3, #0]
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	09db      	lsrs	r3, r3, #7
 80068d0:	623b      	str	r3, [r7, #32]
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	2b7f      	cmp	r3, #127	; 0x7f
 80068d6:	d8f0      	bhi.n	80068ba <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	627a      	str	r2, [r7, #36]	; 0x24
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	b2d2      	uxtb	r2, r2
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	6979      	ldr	r1, [r7, #20]
 80068ec:	69b8      	ldr	r0, [r7, #24]
 80068ee:	f7ff fa0b 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	f383 8811 	msr	BASEPRI, r3
}
 80068f8:	bf00      	nop
 80068fa:	3738      	adds	r7, #56	; 0x38
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	2001c284 	.word	0x2001c284

08006904 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b090      	sub	sp, #64	; 0x40
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006912:	f3ef 8311 	mrs	r3, BASEPRI
 8006916:	f04f 0120 	mov.w	r1, #32
 800691a:	f381 8811 	msr	BASEPRI, r1
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	4840      	ldr	r0, [pc, #256]	; (8006a24 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006922:	f7ff f901 	bl	8005b28 <_PreparePacket>
 8006926:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	63bb      	str	r3, [r7, #56]	; 0x38
 8006934:	e00b      	b.n	800694e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	b2da      	uxtb	r2, r3
 800693a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800693c:	1c59      	adds	r1, r3, #1
 800693e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	09db      	lsrs	r3, r3, #7
 800694c:	63bb      	str	r3, [r7, #56]	; 0x38
 800694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006950:	2b7f      	cmp	r3, #127	; 0x7f
 8006952:	d8f0      	bhi.n	8006936 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	63fa      	str	r2, [r7, #60]	; 0x3c
 800695a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006962:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	633b      	str	r3, [r7, #48]	; 0x30
 800696c:	e00b      	b.n	8006986 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800696e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006970:	b2da      	uxtb	r2, r3
 8006972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006974:	1c59      	adds	r1, r3, #1
 8006976:	6379      	str	r1, [r7, #52]	; 0x34
 8006978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	09db      	lsrs	r3, r3, #7
 8006984:	633b      	str	r3, [r7, #48]	; 0x30
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	2b7f      	cmp	r3, #127	; 0x7f
 800698a:	d8f0      	bhi.n	800696e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	637a      	str	r2, [r7, #52]	; 0x34
 8006992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80069a4:	e00b      	b.n	80069be <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80069a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	1c59      	adds	r1, r3, #1
 80069ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80069b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069b4:	b2d2      	uxtb	r2, r2
 80069b6:	701a      	strb	r2, [r3, #0]
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	09db      	lsrs	r3, r3, #7
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	2b7f      	cmp	r3, #127	; 0x7f
 80069c2:	d8f0      	bhi.n	80069a6 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	1c5a      	adds	r2, r3, #1
 80069c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069cc:	b2d2      	uxtb	r2, r2
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	627b      	str	r3, [r7, #36]	; 0x24
 80069d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069da:	623b      	str	r3, [r7, #32]
 80069dc:	e00b      	b.n	80069f6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	6279      	str	r1, [r7, #36]	; 0x24
 80069e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069ec:	b2d2      	uxtb	r2, r2
 80069ee:	701a      	strb	r2, [r3, #0]
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	09db      	lsrs	r3, r3, #7
 80069f4:	623b      	str	r3, [r7, #32]
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	2b7f      	cmp	r3, #127	; 0x7f
 80069fa:	d8f0      	bhi.n	80069de <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	627a      	str	r2, [r7, #36]	; 0x24
 8006a02:	6a3a      	ldr	r2, [r7, #32]
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]
 8006a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	69b8      	ldr	r0, [r7, #24]
 8006a12:	f7ff f979 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f383 8811 	msr	BASEPRI, r3
}
 8006a1c:	bf00      	nop
 8006a1e:	3740      	adds	r7, #64	; 0x40
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}
 8006a24:	2001c284 	.word	0x2001c284

08006a28 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	; 0x30
 8006a2c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006a2e:	4b58      	ldr	r3, [pc, #352]	; (8006b90 <SEGGER_SYSVIEW_Start+0x168>)
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006a34:	f3ef 8311 	mrs	r3, BASEPRI
 8006a38:	f04f 0120 	mov.w	r1, #32
 8006a3c:	f381 8811 	msr	BASEPRI, r1
 8006a40:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006a42:	4b53      	ldr	r3, [pc, #332]	; (8006b90 <SEGGER_SYSVIEW_Start+0x168>)
 8006a44:	785b      	ldrb	r3, [r3, #1]
 8006a46:	220a      	movs	r2, #10
 8006a48:	4952      	ldr	r1, [pc, #328]	; (8006b94 <SEGGER_SYSVIEW_Start+0x16c>)
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7f9 fbd8 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006a56:	200a      	movs	r0, #10
 8006a58:	f7ff fe2a 	bl	80066b0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a60:	f04f 0120 	mov.w	r1, #32
 8006a64:	f381 8811 	msr	BASEPRI, r1
 8006a68:	60bb      	str	r3, [r7, #8]
 8006a6a:	484b      	ldr	r0, [pc, #300]	; (8006b98 <SEGGER_SYSVIEW_Start+0x170>)
 8006a6c:	f7ff f85c 	bl	8005b28 <_PreparePacket>
 8006a70:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a7a:	4b45      	ldr	r3, [pc, #276]	; (8006b90 <SEGGER_SYSVIEW_Start+0x168>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a80:	e00b      	b.n	8006a9a <SEGGER_SYSVIEW_Start+0x72>
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a88:	1c59      	adds	r1, r3, #1
 8006a8a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	09db      	lsrs	r3, r3, #7
 8006a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a9e:	d8f0      	bhi.n	8006a82 <SEGGER_SYSVIEW_Start+0x5a>
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	1c5a      	adds	r2, r3, #1
 8006aa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006aa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006aa8:	b2d2      	uxtb	r2, r2
 8006aaa:	701a      	strb	r2, [r3, #0]
 8006aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab4:	4b36      	ldr	r3, [pc, #216]	; (8006b90 <SEGGER_SYSVIEW_Start+0x168>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	623b      	str	r3, [r7, #32]
 8006aba:	e00b      	b.n	8006ad4 <SEGGER_SYSVIEW_Start+0xac>
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	1c59      	adds	r1, r3, #1
 8006ac4:	6279      	str	r1, [r7, #36]	; 0x24
 8006ac6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	09db      	lsrs	r3, r3, #7
 8006ad2:	623b      	str	r3, [r7, #32]
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad8:	d8f0      	bhi.n	8006abc <SEGGER_SYSVIEW_Start+0x94>
 8006ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006adc:	1c5a      	adds	r2, r3, #1
 8006ade:	627a      	str	r2, [r7, #36]	; 0x24
 8006ae0:	6a3a      	ldr	r2, [r7, #32]
 8006ae2:	b2d2      	uxtb	r2, r2
 8006ae4:	701a      	strb	r2, [r3, #0]
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	61fb      	str	r3, [r7, #28]
 8006aee:	4b28      	ldr	r3, [pc, #160]	; (8006b90 <SEGGER_SYSVIEW_Start+0x168>)
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	61bb      	str	r3, [r7, #24]
 8006af4:	e00b      	b.n	8006b0e <SEGGER_SYSVIEW_Start+0xe6>
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	b2da      	uxtb	r2, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	1c59      	adds	r1, r3, #1
 8006afe:	61f9      	str	r1, [r7, #28]
 8006b00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	701a      	strb	r2, [r3, #0]
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	09db      	lsrs	r3, r3, #7
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	2b7f      	cmp	r3, #127	; 0x7f
 8006b12:	d8f0      	bhi.n	8006af6 <SEGGER_SYSVIEW_Start+0xce>
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	69ba      	ldr	r2, [r7, #24]
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	2300      	movs	r3, #0
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	e00b      	b.n	8006b46 <SEGGER_SYSVIEW_Start+0x11e>
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	1c59      	adds	r1, r3, #1
 8006b36:	6179      	str	r1, [r7, #20]
 8006b38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	09db      	lsrs	r3, r3, #7
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	2b7f      	cmp	r3, #127	; 0x7f
 8006b4a:	d8f0      	bhi.n	8006b2e <SEGGER_SYSVIEW_Start+0x106>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	617a      	str	r2, [r7, #20]
 8006b52:	693a      	ldr	r2, [r7, #16]
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b5c:	2218      	movs	r2, #24
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff f8d1 	bl	8005d08 <_SendPacket>
      RECORD_END();
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b6c:	4b08      	ldr	r3, [pc, #32]	; (8006b90 <SEGGER_SYSVIEW_Start+0x168>)
 8006b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006b74:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <SEGGER_SYSVIEW_Start+0x168>)
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006b7a:	f000 f9eb 	bl	8006f54 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006b7e:	f000 f9b1 	bl	8006ee4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006b82:	f000 fc83 	bl	800748c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006b86:	bf00      	nop
 8006b88:	3730      	adds	r7, #48	; 0x30
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	2001c254 	.word	0x2001c254
 8006b94:	08007800 	.word	0x08007800
 8006b98:	2001c284 	.word	0x2001c284

08006b9c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ba2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ba6:	f04f 0120 	mov.w	r1, #32
 8006baa:	f381 8811 	msr	BASEPRI, r1
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	480b      	ldr	r0, [pc, #44]	; (8006be0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006bb2:	f7fe ffb9 	bl	8005b28 <_PreparePacket>
 8006bb6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006bb8:	4b0a      	ldr	r3, [pc, #40]	; (8006be4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d007      	beq.n	8006bd0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006bc0:	220b      	movs	r2, #11
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6838      	ldr	r0, [r7, #0]
 8006bc6:	f7ff f89f 	bl	8005d08 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006bcc:	2200      	movs	r2, #0
 8006bce:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f383 8811 	msr	BASEPRI, r3
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	2001c284 	.word	0x2001c284
 8006be4:	2001c254 	.word	0x2001c254

08006be8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08c      	sub	sp, #48	; 0x30
 8006bec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006bee:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf2:	f04f 0120 	mov.w	r1, #32
 8006bf6:	f381 8811 	msr	BASEPRI, r1
 8006bfa:	60fb      	str	r3, [r7, #12]
 8006bfc:	4845      	ldr	r0, [pc, #276]	; (8006d14 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006bfe:	f7fe ff93 	bl	8005b28 <_PreparePacket>
 8006c02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c0c:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c12:	e00b      	b.n	8006c2c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	1c59      	adds	r1, r3, #1
 8006c1c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c22:	b2d2      	uxtb	r2, r2
 8006c24:	701a      	strb	r2, [r3, #0]
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	09db      	lsrs	r3, r3, #7
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c30:	d8f0      	bhi.n	8006c14 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	627b      	str	r3, [r7, #36]	; 0x24
 8006c46:	4b34      	ldr	r3, [pc, #208]	; (8006d18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	623b      	str	r3, [r7, #32]
 8006c4c:	e00b      	b.n	8006c66 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006c4e:	6a3b      	ldr	r3, [r7, #32]
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	1c59      	adds	r1, r3, #1
 8006c56:	6279      	str	r1, [r7, #36]	; 0x24
 8006c58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	09db      	lsrs	r3, r3, #7
 8006c64:	623b      	str	r3, [r7, #32]
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	2b7f      	cmp	r3, #127	; 0x7f
 8006c6a:	d8f0      	bhi.n	8006c4e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	627a      	str	r2, [r7, #36]	; 0x24
 8006c72:	6a3a      	ldr	r2, [r7, #32]
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	61fb      	str	r3, [r7, #28]
 8006c80:	4b25      	ldr	r3, [pc, #148]	; (8006d18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	61bb      	str	r3, [r7, #24]
 8006c86:	e00b      	b.n	8006ca0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	61f9      	str	r1, [r7, #28]
 8006c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	09db      	lsrs	r3, r3, #7
 8006c9e:	61bb      	str	r3, [r7, #24]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8006ca4:	d8f0      	bhi.n	8006c88 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	61fa      	str	r2, [r7, #28]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	b2d2      	uxtb	r2, r2
 8006cb0:	701a      	strb	r2, [r3, #0]
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	613b      	str	r3, [r7, #16]
 8006cbe:	e00b      	b.n	8006cd8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	6179      	str	r1, [r7, #20]
 8006cca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cce:	b2d2      	uxtb	r2, r2
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	09db      	lsrs	r3, r3, #7
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b7f      	cmp	r3, #127	; 0x7f
 8006cdc:	d8f0      	bhi.n	8006cc0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	617a      	str	r2, [r7, #20]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	701a      	strb	r2, [r3, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006cee:	2218      	movs	r2, #24
 8006cf0:	6879      	ldr	r1, [r7, #4]
 8006cf2:	68b8      	ldr	r0, [r7, #8]
 8006cf4:	f7ff f808 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006cfe:	4b06      	ldr	r3, [pc, #24]	; (8006d18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006d06:	4b04      	ldr	r3, [pc, #16]	; (8006d18 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	4798      	blx	r3
  }
}
 8006d0c:	bf00      	nop
 8006d0e:	3730      	adds	r7, #48	; 0x30
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	2001c284 	.word	0x2001c284
 8006d18:	2001c254 	.word	0x2001c254

08006d1c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b092      	sub	sp, #72	; 0x48
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006d24:	f3ef 8311 	mrs	r3, BASEPRI
 8006d28:	f04f 0120 	mov.w	r1, #32
 8006d2c:	f381 8811 	msr	BASEPRI, r1
 8006d30:	617b      	str	r3, [r7, #20]
 8006d32:	486a      	ldr	r0, [pc, #424]	; (8006edc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006d34:	f7fe fef8 	bl	8005b28 <_PreparePacket>
 8006d38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	647b      	str	r3, [r7, #68]	; 0x44
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b66      	ldr	r3, [pc, #408]	; (8006ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006d4e:	e00b      	b.n	8006d68 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d56:	1c59      	adds	r1, r3, #1
 8006d58:	6479      	str	r1, [r7, #68]	; 0x44
 8006d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d64:	09db      	lsrs	r3, r3, #7
 8006d66:	643b      	str	r3, [r7, #64]	; 0x40
 8006d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d6c:	d8f0      	bhi.n	8006d50 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	647a      	str	r2, [r7, #68]	; 0x44
 8006d74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d88:	e00b      	b.n	8006da2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d90:	1c59      	adds	r1, r3, #1
 8006d92:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d94:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d98:	b2d2      	uxtb	r2, r2
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	09db      	lsrs	r3, r3, #7
 8006da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da4:	2b7f      	cmp	r3, #127	; 0x7f
 8006da6:	d8f0      	bhi.n	8006d8a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006da8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	701a      	strb	r2, [r3, #0]
 8006db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7fe fe61 	bl	8005a88 <_EncodeStr>
 8006dc6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006dc8:	2209      	movs	r2, #9
 8006dca:	68f9      	ldr	r1, [r7, #12]
 8006dcc:	6938      	ldr	r0, [r7, #16]
 8006dce:	f7fe ff9b 	bl	8005d08 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4b40      	ldr	r3, [pc, #256]	; (8006ee0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	633b      	str	r3, [r7, #48]	; 0x30
 8006de6:	e00b      	b.n	8006e00 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	6379      	str	r1, [r7, #52]	; 0x34
 8006df2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	09db      	lsrs	r3, r3, #7
 8006dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8006e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e02:	2b7f      	cmp	r3, #127	; 0x7f
 8006e04:	d8f0      	bhi.n	8006de8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	637a      	str	r2, [r7, #52]	; 0x34
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e20:	e00b      	b.n	8006e3a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e28:	1c59      	adds	r1, r3, #1
 8006e2a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e30:	b2d2      	uxtb	r2, r2
 8006e32:	701a      	strb	r2, [r3, #0]
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	09db      	lsrs	r3, r3, #7
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e3e:	d8f0      	bhi.n	8006e22 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e42:	1c5a      	adds	r2, r3, #1
 8006e44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e48:	b2d2      	uxtb	r2, r2
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	623b      	str	r3, [r7, #32]
 8006e5a:	e00b      	b.n	8006e74 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	6279      	str	r1, [r7, #36]	; 0x24
 8006e66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	09db      	lsrs	r3, r3, #7
 8006e72:	623b      	str	r3, [r7, #32]
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	2b7f      	cmp	r3, #127	; 0x7f
 8006e78:	d8f0      	bhi.n	8006e5c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	627a      	str	r2, [r7, #36]	; 0x24
 8006e80:	6a3a      	ldr	r2, [r7, #32]
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	e00b      	b.n	8006eac <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	b2da      	uxtb	r2, r3
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	1c59      	adds	r1, r3, #1
 8006e9c:	61f9      	str	r1, [r7, #28]
 8006e9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	09db      	lsrs	r3, r3, #7
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb0:	d8f0      	bhi.n	8006e94 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	61fa      	str	r2, [r7, #28]
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006ec2:	2215      	movs	r2, #21
 8006ec4:	68f9      	ldr	r1, [r7, #12]
 8006ec6:	6938      	ldr	r0, [r7, #16]
 8006ec8:	f7fe ff1e 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	f383 8811 	msr	BASEPRI, r3
}
 8006ed2:	bf00      	nop
 8006ed4:	3748      	adds	r7, #72	; 0x48
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	2001c284 	.word	0x2001c284
 8006ee0:	2001c254 	.word	0x2001c254

08006ee4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006ee8:	4b07      	ldr	r3, [pc, #28]	; (8006f08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006ef0:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d003      	beq.n	8006f02 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006efa:	4b03      	ldr	r3, [pc, #12]	; (8006f08 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	4798      	blx	r3
  }
}
 8006f02:	bf00      	nop
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	2001c254 	.word	0x2001c254

08006f0c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f14:	f3ef 8311 	mrs	r3, BASEPRI
 8006f18:	f04f 0120 	mov.w	r1, #32
 8006f1c:	f381 8811 	msr	BASEPRI, r1
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	480b      	ldr	r0, [pc, #44]	; (8006f50 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006f24:	f7fe fe00 	bl	8005b28 <_PreparePacket>
 8006f28:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f2a:	2280      	movs	r2, #128	; 0x80
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	6938      	ldr	r0, [r7, #16]
 8006f30:	f7fe fdaa 	bl	8005a88 <_EncodeStr>
 8006f34:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006f36:	220e      	movs	r2, #14
 8006f38:	68f9      	ldr	r1, [r7, #12]
 8006f3a:	6938      	ldr	r0, [r7, #16]
 8006f3c:	f7fe fee4 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	f383 8811 	msr	BASEPRI, r3
}
 8006f46:	bf00      	nop
 8006f48:	3718      	adds	r7, #24
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	2001c284 	.word	0x2001c284

08006f54 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006f54:	b590      	push	{r4, r7, lr}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006f5a:	4b15      	ldr	r3, [pc, #84]	; (8006fb0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f5c:	6a1b      	ldr	r3, [r3, #32]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d01a      	beq.n	8006f98 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d015      	beq.n	8006f98 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006f6c:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4798      	blx	r3
 8006f74:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f78:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f7e:	f04f 0200 	mov.w	r2, #0
 8006f82:	f04f 0300 	mov.w	r3, #0
 8006f86:	000a      	movs	r2, r1
 8006f88:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	4621      	mov	r1, r4
 8006f90:	200d      	movs	r0, #13
 8006f92:	f7ff fbe7 	bl	8006764 <SEGGER_SYSVIEW_RecordU32x2>
 8006f96:	e006      	b.n	8006fa6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	200c      	movs	r0, #12
 8006fa0:	f7ff fba4 	bl	80066ec <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	2001c254 	.word	0x2001c254
 8006fb4:	e0001004 	.word	0xe0001004

08006fb8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8006fc2:	f04f 0120 	mov.w	r1, #32
 8006fc6:	f381 8811 	msr	BASEPRI, r1
 8006fca:	60fb      	str	r3, [r7, #12]
 8006fcc:	4819      	ldr	r0, [pc, #100]	; (8007034 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006fce:	f7fe fdab 	bl	8005b28 <_PreparePacket>
 8006fd2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006fd8:	4b17      	ldr	r3, [pc, #92]	; (8007038 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	617b      	str	r3, [r7, #20]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	e00b      	b.n	8007004 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	6179      	str	r1, [r7, #20]
 8006ff6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	09db      	lsrs	r3, r3, #7
 8007002:	613b      	str	r3, [r7, #16]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2b7f      	cmp	r3, #127	; 0x7f
 8007008:	d8f0      	bhi.n	8006fec <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	1c5a      	adds	r2, r3, #1
 800700e:	617a      	str	r2, [r7, #20]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	b2d2      	uxtb	r2, r2
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800701a:	2202      	movs	r2, #2
 800701c:	6879      	ldr	r1, [r7, #4]
 800701e:	68b8      	ldr	r0, [r7, #8]
 8007020:	f7fe fe72 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f383 8811 	msr	BASEPRI, r3
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	2001c284 	.word	0x2001c284
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007042:	f3ef 8311 	mrs	r3, BASEPRI
 8007046:	f04f 0120 	mov.w	r1, #32
 800704a:	f381 8811 	msr	BASEPRI, r1
 800704e:	607b      	str	r3, [r7, #4]
 8007050:	4807      	ldr	r0, [pc, #28]	; (8007070 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007052:	f7fe fd69 	bl	8005b28 <_PreparePacket>
 8007056:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007058:	2203      	movs	r2, #3
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6838      	ldr	r0, [r7, #0]
 800705e:	f7fe fe53 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f383 8811 	msr	BASEPRI, r3
}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	2001c284 	.word	0x2001c284

08007074 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800707a:	f3ef 8311 	mrs	r3, BASEPRI
 800707e:	f04f 0120 	mov.w	r1, #32
 8007082:	f381 8811 	msr	BASEPRI, r1
 8007086:	607b      	str	r3, [r7, #4]
 8007088:	4807      	ldr	r0, [pc, #28]	; (80070a8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800708a:	f7fe fd4d 	bl	8005b28 <_PreparePacket>
 800708e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007090:	2212      	movs	r2, #18
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6838      	ldr	r0, [r7, #0]
 8007096:	f7fe fe37 	bl	8005d08 <_SendPacket>
  RECORD_END();
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f383 8811 	msr	BASEPRI, r3
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	2001c284 	.word	0x2001c284

080070ac <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80070b2:	f3ef 8311 	mrs	r3, BASEPRI
 80070b6:	f04f 0120 	mov.w	r1, #32
 80070ba:	f381 8811 	msr	BASEPRI, r1
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	4807      	ldr	r0, [pc, #28]	; (80070e0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80070c2:	f7fe fd31 	bl	8005b28 <_PreparePacket>
 80070c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80070c8:	2211      	movs	r2, #17
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6838      	ldr	r0, [r7, #0]
 80070ce:	f7fe fe1b 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f383 8811 	msr	BASEPRI, r3
}
 80070d8:	bf00      	nop
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	2001c284 	.word	0x2001c284

080070e4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b088      	sub	sp, #32
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80070ec:	f3ef 8311 	mrs	r3, BASEPRI
 80070f0:	f04f 0120 	mov.w	r1, #32
 80070f4:	f381 8811 	msr	BASEPRI, r1
 80070f8:	617b      	str	r3, [r7, #20]
 80070fa:	4819      	ldr	r0, [pc, #100]	; (8007160 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80070fc:	f7fe fd14 	bl	8005b28 <_PreparePacket>
 8007100:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007106:	4b17      	ldr	r3, [pc, #92]	; (8007164 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	61bb      	str	r3, [r7, #24]
 8007118:	e00b      	b.n	8007132 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	1c59      	adds	r1, r3, #1
 8007122:	61f9      	str	r1, [r7, #28]
 8007124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	701a      	strb	r2, [r3, #0]
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	09db      	lsrs	r3, r3, #7
 8007130:	61bb      	str	r3, [r7, #24]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	2b7f      	cmp	r3, #127	; 0x7f
 8007136:	d8f0      	bhi.n	800711a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	1c5a      	adds	r2, r3, #1
 800713c:	61fa      	str	r2, [r7, #28]
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007148:	2208      	movs	r2, #8
 800714a:	68f9      	ldr	r1, [r7, #12]
 800714c:	6938      	ldr	r0, [r7, #16]
 800714e:	f7fe fddb 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	f383 8811 	msr	BASEPRI, r3
}
 8007158:	bf00      	nop
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	2001c284 	.word	0x2001c284
 8007164:	2001c254 	.word	0x2001c254

08007168 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b088      	sub	sp, #32
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007170:	f3ef 8311 	mrs	r3, BASEPRI
 8007174:	f04f 0120 	mov.w	r1, #32
 8007178:	f381 8811 	msr	BASEPRI, r1
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	4819      	ldr	r0, [pc, #100]	; (80071e4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007180:	f7fe fcd2 	bl	8005b28 <_PreparePacket>
 8007184:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800718a:	4b17      	ldr	r3, [pc, #92]	; (80071e8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	687a      	ldr	r2, [r7, #4]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	61bb      	str	r3, [r7, #24]
 800719c:	e00b      	b.n	80071b6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	1c59      	adds	r1, r3, #1
 80071a6:	61f9      	str	r1, [r7, #28]
 80071a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071ac:	b2d2      	uxtb	r2, r2
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	09db      	lsrs	r3, r3, #7
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ba:	d8f0      	bhi.n	800719e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	1c5a      	adds	r2, r3, #1
 80071c0:	61fa      	str	r2, [r7, #28]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	b2d2      	uxtb	r2, r2
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80071cc:	2204      	movs	r2, #4
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	6938      	ldr	r0, [r7, #16]
 80071d2:	f7fe fd99 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f383 8811 	msr	BASEPRI, r3
}
 80071dc:	bf00      	nop
 80071de:	3720      	adds	r7, #32
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	2001c284 	.word	0x2001c284
 80071e8:	2001c254 	.word	0x2001c254

080071ec <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071f4:	f3ef 8311 	mrs	r3, BASEPRI
 80071f8:	f04f 0120 	mov.w	r1, #32
 80071fc:	f381 8811 	msr	BASEPRI, r1
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	4819      	ldr	r0, [pc, #100]	; (8007268 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007204:	f7fe fc90 	bl	8005b28 <_PreparePacket>
 8007208:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800720e:	4b17      	ldr	r3, [pc, #92]	; (800726c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	61bb      	str	r3, [r7, #24]
 8007220:	e00b      	b.n	800723a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	b2da      	uxtb	r2, r3
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	1c59      	adds	r1, r3, #1
 800722a:	61f9      	str	r1, [r7, #28]
 800722c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	09db      	lsrs	r3, r3, #7
 8007238:	61bb      	str	r3, [r7, #24]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	2b7f      	cmp	r3, #127	; 0x7f
 800723e:	d8f0      	bhi.n	8007222 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	1c5a      	adds	r2, r3, #1
 8007244:	61fa      	str	r2, [r7, #28]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	b2d2      	uxtb	r2, r2
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007250:	2206      	movs	r2, #6
 8007252:	68f9      	ldr	r1, [r7, #12]
 8007254:	6938      	ldr	r0, [r7, #16]
 8007256:	f7fe fd57 	bl	8005d08 <_SendPacket>
  RECORD_END();
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f383 8811 	msr	BASEPRI, r3
}
 8007260:	bf00      	nop
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	2001c284 	.word	0x2001c284
 800726c:	2001c254 	.word	0x2001c254

08007270 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007270:	b580      	push	{r7, lr}
 8007272:	b08a      	sub	sp, #40	; 0x28
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800727a:	f3ef 8311 	mrs	r3, BASEPRI
 800727e:	f04f 0120 	mov.w	r1, #32
 8007282:	f381 8811 	msr	BASEPRI, r1
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	4827      	ldr	r0, [pc, #156]	; (8007328 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800728a:	f7fe fc4d 	bl	8005b28 <_PreparePacket>
 800728e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007294:	4b25      	ldr	r3, [pc, #148]	; (800732c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	627b      	str	r3, [r7, #36]	; 0x24
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	623b      	str	r3, [r7, #32]
 80072a6:	e00b      	b.n	80072c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80072a8:	6a3b      	ldr	r3, [r7, #32]
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	1c59      	adds	r1, r3, #1
 80072b0:	6279      	str	r1, [r7, #36]	; 0x24
 80072b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072b6:	b2d2      	uxtb	r2, r2
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	09db      	lsrs	r3, r3, #7
 80072be:	623b      	str	r3, [r7, #32]
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	2b7f      	cmp	r3, #127	; 0x7f
 80072c4:	d8f0      	bhi.n	80072a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80072c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	627a      	str	r2, [r7, #36]	; 0x24
 80072cc:	6a3a      	ldr	r2, [r7, #32]
 80072ce:	b2d2      	uxtb	r2, r2
 80072d0:	701a      	strb	r2, [r3, #0]
 80072d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	61fb      	str	r3, [r7, #28]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e00b      	b.n	80072f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	1c59      	adds	r1, r3, #1
 80072e8:	61f9      	str	r1, [r7, #28]
 80072ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ee:	b2d2      	uxtb	r2, r2
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	09db      	lsrs	r3, r3, #7
 80072f6:	61bb      	str	r3, [r7, #24]
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b7f      	cmp	r3, #127	; 0x7f
 80072fc:	d8f0      	bhi.n	80072e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	1c5a      	adds	r2, r3, #1
 8007302:	61fa      	str	r2, [r7, #28]
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	b2d2      	uxtb	r2, r2
 8007308:	701a      	strb	r2, [r3, #0]
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800730e:	2207      	movs	r2, #7
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	6938      	ldr	r0, [r7, #16]
 8007314:	f7fe fcf8 	bl	8005d08 <_SendPacket>
  RECORD_END();
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f383 8811 	msr	BASEPRI, r3
}
 800731e:	bf00      	nop
 8007320:	3728      	adds	r7, #40	; 0x28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	2001c284 	.word	0x2001c284
 800732c:	2001c254 	.word	0x2001c254

08007330 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007338:	4b04      	ldr	r3, [pc, #16]	; (800734c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	1ad3      	subs	r3, r2, r3
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	2001c254 	.word	0x2001c254

08007350 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007350:	b580      	push	{r7, lr}
 8007352:	b08c      	sub	sp, #48	; 0x30
 8007354:	af00      	add	r7, sp, #0
 8007356:	4603      	mov	r3, r0
 8007358:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800735a:	4b3b      	ldr	r3, [pc, #236]	; (8007448 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d06d      	beq.n	800743e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007362:	4b39      	ldr	r3, [pc, #228]	; (8007448 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007368:	2300      	movs	r3, #0
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
 800736c:	e008      	b.n	8007380 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	3301      	adds	r3, #1
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007384:	429a      	cmp	r2, r3
 8007386:	d3f2      	bcc.n	800736e <SEGGER_SYSVIEW_SendModule+0x1e>
 8007388:	e000      	b.n	800738c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800738a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d055      	beq.n	800743e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007392:	f3ef 8311 	mrs	r3, BASEPRI
 8007396:	f04f 0120 	mov.w	r1, #32
 800739a:	f381 8811 	msr	BASEPRI, r1
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	482a      	ldr	r0, [pc, #168]	; (800744c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80073a2:	f7fe fbc1 	bl	8005b28 <_PreparePacket>
 80073a6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	627b      	str	r3, [r7, #36]	; 0x24
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	623b      	str	r3, [r7, #32]
 80073b4:	e00b      	b.n	80073ce <SEGGER_SYSVIEW_SendModule+0x7e>
 80073b6:	6a3b      	ldr	r3, [r7, #32]
 80073b8:	b2da      	uxtb	r2, r3
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	1c59      	adds	r1, r3, #1
 80073be:	6279      	str	r1, [r7, #36]	; 0x24
 80073c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073c4:	b2d2      	uxtb	r2, r2
 80073c6:	701a      	strb	r2, [r3, #0]
 80073c8:	6a3b      	ldr	r3, [r7, #32]
 80073ca:	09db      	lsrs	r3, r3, #7
 80073cc:	623b      	str	r3, [r7, #32]
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	2b7f      	cmp	r3, #127	; 0x7f
 80073d2:	d8f0      	bhi.n	80073b6 <SEGGER_SYSVIEW_SendModule+0x66>
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	627a      	str	r2, [r7, #36]	; 0x24
 80073da:	6a3a      	ldr	r2, [r7, #32]
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	701a      	strb	r2, [r3, #0]
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	61fb      	str	r3, [r7, #28]
 80073e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e00b      	b.n	8007408 <SEGGER_SYSVIEW_SendModule+0xb8>
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	b2da      	uxtb	r2, r3
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	1c59      	adds	r1, r3, #1
 80073f8:	61f9      	str	r1, [r7, #28]
 80073fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073fe:	b2d2      	uxtb	r2, r2
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	09db      	lsrs	r3, r3, #7
 8007406:	61bb      	str	r3, [r7, #24]
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b7f      	cmp	r3, #127	; 0x7f
 800740c:	d8f0      	bhi.n	80073f0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	61fa      	str	r2, [r7, #28]
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800741e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2280      	movs	r2, #128	; 0x80
 8007424:	4619      	mov	r1, r3
 8007426:	68f8      	ldr	r0, [r7, #12]
 8007428:	f7fe fb2e 	bl	8005a88 <_EncodeStr>
 800742c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800742e:	2216      	movs	r2, #22
 8007430:	68f9      	ldr	r1, [r7, #12]
 8007432:	6938      	ldr	r0, [r7, #16]
 8007434:	f7fe fc68 	bl	8005d08 <_SendPacket>
      RECORD_END();
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800743e:	bf00      	nop
 8007440:	3730      	adds	r7, #48	; 0x30
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	2001c27c 	.word	0x2001c27c
 800744c:	2001c284 	.word	0x2001c284

08007450 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007450:	b580      	push	{r7, lr}
 8007452:	b082      	sub	sp, #8
 8007454:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007456:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00f      	beq.n	800747e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800745e:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1f2      	bne.n	8007464 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800747e:	bf00      	nop
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	2001c27c 	.word	0x2001c27c

0800748c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007492:	f3ef 8311 	mrs	r3, BASEPRI
 8007496:	f04f 0120 	mov.w	r1, #32
 800749a:	f381 8811 	msr	BASEPRI, r1
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	4817      	ldr	r0, [pc, #92]	; (8007500 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80074a2:	f7fe fb41 	bl	8005b28 <_PreparePacket>
 80074a6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	4b14      	ldr	r3, [pc, #80]	; (8007504 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	613b      	str	r3, [r7, #16]
 80074b6:	e00b      	b.n	80074d0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	1c59      	adds	r1, r3, #1
 80074c0:	6179      	str	r1, [r7, #20]
 80074c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	09db      	lsrs	r3, r3, #7
 80074ce:	613b      	str	r3, [r7, #16]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b7f      	cmp	r3, #127	; 0x7f
 80074d4:	d8f0      	bhi.n	80074b8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	617a      	str	r2, [r7, #20]
 80074dc:	693a      	ldr	r2, [r7, #16]
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80074e6:	221b      	movs	r2, #27
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	68b8      	ldr	r0, [r7, #8]
 80074ec:	f7fe fc0c 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f383 8811 	msr	BASEPRI, r3
}
 80074f6:	bf00      	nop
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	2001c284 	.word	0x2001c284
 8007504:	2001c280 	.word	0x2001c280

08007508 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007508:	b40f      	push	{r0, r1, r2, r3}
 800750a:	b580      	push	{r7, lr}
 800750c:	b082      	sub	sp, #8
 800750e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007510:	f107 0314 	add.w	r3, r7, #20
 8007514:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007516:	1d3b      	adds	r3, r7, #4
 8007518:	461a      	mov	r2, r3
 800751a:	2100      	movs	r1, #0
 800751c:	6938      	ldr	r0, [r7, #16]
 800751e:	f7fe fe7b 	bl	8006218 <_VPrintTarget>
  va_end(ParamList);
}
 8007522:	bf00      	nop
 8007524:	3708      	adds	r7, #8
 8007526:	46bd      	mov	sp, r7
 8007528:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800752c:	b004      	add	sp, #16
 800752e:	4770      	bx	lr

08007530 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	; 0x28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007538:	f3ef 8311 	mrs	r3, BASEPRI
 800753c:	f04f 0120 	mov.w	r1, #32
 8007540:	f381 8811 	msr	BASEPRI, r1
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	4827      	ldr	r0, [pc, #156]	; (80075e4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007548:	f7fe faee 	bl	8005b28 <_PreparePacket>
 800754c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800754e:	2280      	movs	r2, #128	; 0x80
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	6938      	ldr	r0, [r7, #16]
 8007554:	f7fe fa98 	bl	8005a88 <_EncodeStr>
 8007558:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	627b      	str	r3, [r7, #36]	; 0x24
 800755e:	2301      	movs	r3, #1
 8007560:	623b      	str	r3, [r7, #32]
 8007562:	e00b      	b.n	800757c <SEGGER_SYSVIEW_Warn+0x4c>
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	b2da      	uxtb	r2, r3
 8007568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756a:	1c59      	adds	r1, r3, #1
 800756c:	6279      	str	r1, [r7, #36]	; 0x24
 800756e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	09db      	lsrs	r3, r3, #7
 800757a:	623b      	str	r3, [r7, #32]
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	2b7f      	cmp	r3, #127	; 0x7f
 8007580:	d8f0      	bhi.n	8007564 <SEGGER_SYSVIEW_Warn+0x34>
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	627a      	str	r2, [r7, #36]	; 0x24
 8007588:	6a3a      	ldr	r2, [r7, #32]
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007590:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	61fb      	str	r3, [r7, #28]
 8007596:	2300      	movs	r3, #0
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	e00b      	b.n	80075b4 <SEGGER_SYSVIEW_Warn+0x84>
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	1c59      	adds	r1, r3, #1
 80075a4:	61f9      	str	r1, [r7, #28]
 80075a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075aa:	b2d2      	uxtb	r2, r2
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	09db      	lsrs	r3, r3, #7
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	2b7f      	cmp	r3, #127	; 0x7f
 80075b8:	d8f0      	bhi.n	800759c <SEGGER_SYSVIEW_Warn+0x6c>
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	61fa      	str	r2, [r7, #28]
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	b2d2      	uxtb	r2, r2
 80075c4:	701a      	strb	r2, [r3, #0]
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80075ca:	221a      	movs	r2, #26
 80075cc:	68f9      	ldr	r1, [r7, #12]
 80075ce:	6938      	ldr	r0, [r7, #16]
 80075d0:	f7fe fb9a 	bl	8005d08 <_SendPacket>
  RECORD_END();
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f383 8811 	msr	BASEPRI, r3
}
 80075da:	bf00      	nop
 80075dc:	3728      	adds	r7, #40	; 0x28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	2001c284 	.word	0x2001c284

080075e8 <__libc_init_array>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4d0d      	ldr	r5, [pc, #52]	; (8007620 <__libc_init_array+0x38>)
 80075ec:	4c0d      	ldr	r4, [pc, #52]	; (8007624 <__libc_init_array+0x3c>)
 80075ee:	1b64      	subs	r4, r4, r5
 80075f0:	10a4      	asrs	r4, r4, #2
 80075f2:	2600      	movs	r6, #0
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	d109      	bne.n	800760c <__libc_init_array+0x24>
 80075f8:	4d0b      	ldr	r5, [pc, #44]	; (8007628 <__libc_init_array+0x40>)
 80075fa:	4c0c      	ldr	r4, [pc, #48]	; (800762c <__libc_init_array+0x44>)
 80075fc:	f000 f83c 	bl	8007678 <_init>
 8007600:	1b64      	subs	r4, r4, r5
 8007602:	10a4      	asrs	r4, r4, #2
 8007604:	2600      	movs	r6, #0
 8007606:	42a6      	cmp	r6, r4
 8007608:	d105      	bne.n	8007616 <__libc_init_array+0x2e>
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007610:	4798      	blx	r3
 8007612:	3601      	adds	r6, #1
 8007614:	e7ee      	b.n	80075f4 <__libc_init_array+0xc>
 8007616:	f855 3b04 	ldr.w	r3, [r5], #4
 800761a:	4798      	blx	r3
 800761c:	3601      	adds	r6, #1
 800761e:	e7f2      	b.n	8007606 <__libc_init_array+0x1e>
 8007620:	0800781c 	.word	0x0800781c
 8007624:	0800781c 	.word	0x0800781c
 8007628:	0800781c 	.word	0x0800781c
 800762c:	08007820 	.word	0x08007820

08007630 <memcmp>:
 8007630:	b530      	push	{r4, r5, lr}
 8007632:	3901      	subs	r1, #1
 8007634:	2400      	movs	r4, #0
 8007636:	42a2      	cmp	r2, r4
 8007638:	d101      	bne.n	800763e <memcmp+0xe>
 800763a:	2000      	movs	r0, #0
 800763c:	e005      	b.n	800764a <memcmp+0x1a>
 800763e:	5d03      	ldrb	r3, [r0, r4]
 8007640:	3401      	adds	r4, #1
 8007642:	5d0d      	ldrb	r5, [r1, r4]
 8007644:	42ab      	cmp	r3, r5
 8007646:	d0f6      	beq.n	8007636 <memcmp+0x6>
 8007648:	1b58      	subs	r0, r3, r5
 800764a:	bd30      	pop	{r4, r5, pc}

0800764c <memcpy>:
 800764c:	440a      	add	r2, r1
 800764e:	4291      	cmp	r1, r2
 8007650:	f100 33ff 	add.w	r3, r0, #4294967295
 8007654:	d100      	bne.n	8007658 <memcpy+0xc>
 8007656:	4770      	bx	lr
 8007658:	b510      	push	{r4, lr}
 800765a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800765e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007662:	4291      	cmp	r1, r2
 8007664:	d1f9      	bne.n	800765a <memcpy+0xe>
 8007666:	bd10      	pop	{r4, pc}

08007668 <memset>:
 8007668:	4402      	add	r2, r0
 800766a:	4603      	mov	r3, r0
 800766c:	4293      	cmp	r3, r2
 800766e:	d100      	bne.n	8007672 <memset+0xa>
 8007670:	4770      	bx	lr
 8007672:	f803 1b01 	strb.w	r1, [r3], #1
 8007676:	e7f9      	b.n	800766c <memset+0x4>

08007678 <_init>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr

08007684 <_fini>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr
