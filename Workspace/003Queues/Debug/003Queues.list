
003Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff4  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800a1b4  0800a1b4  0001a1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a354  0800a354  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a35c  0800a35c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a360  0800a360  0001a360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800a364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c564  20000014  0800a378  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c578  0800a378  0002c578  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026cea  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004205  00000000  00000000  00046d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  0004af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f8  00000000  00000000  0004c9e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e879  00000000  00000000  0004e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020454  00000000  00000000  0007cb59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ec86  00000000  00000000  0009cfad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bbc33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007068  00000000  00000000  001bbc88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a19c 	.word	0x0800a19c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	0800a19c 	.word	0x0800a19c

08000200 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000200:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000202:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000206:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000290 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800020a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800020e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000212:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000214:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000216:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000218:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800021a:	d332      	bcc.n	8000282 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800021c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800021e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000220:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000222:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000224:	d314      	bcc.n	8000250 <_CheckCase2>

08000226 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000226:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000228:	19d0      	adds	r0, r2, r7
 800022a:	bf00      	nop

0800022c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000230:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000234:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000236:	d005      	beq.n	8000244 <_CSDone>
        LDRB     R3,[R1], #+1
 8000238:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000240:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000242:	d1f3      	bne.n	800022c <_LoopCopyStraight>

08000244 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000244:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000248:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800024a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800024e:	4770      	bx	lr

08000250 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000250:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000252:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000254:	d319      	bcc.n	800028a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000256:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000258:	1b12      	subs	r2, r2, r4

0800025a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800025e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000262:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000266:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000268:	d005      	beq.n	8000276 <_No2ChunkNeeded>

0800026a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800026e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000272:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyAfterWrapAround>

08000276 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000276:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800027a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800027c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800027e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000280:	4770      	bx	lr

08000282 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000282:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000284:	3801      	subs	r0, #1
        CMP      R0,R2
 8000286:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000288:	d2cd      	bcs.n	8000226 <_Case4>

0800028a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800028a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800028e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000290:	2001c4d0 	.word	0x2001c4d0

08000294 <__aeabi_uldivmod>:
 8000294:	b953      	cbnz	r3, 80002ac <__aeabi_uldivmod+0x18>
 8000296:	b94a      	cbnz	r2, 80002ac <__aeabi_uldivmod+0x18>
 8000298:	2900      	cmp	r1, #0
 800029a:	bf08      	it	eq
 800029c:	2800      	cmpeq	r0, #0
 800029e:	bf1c      	itt	ne
 80002a0:	f04f 31ff 	movne.w	r1, #4294967295
 80002a4:	f04f 30ff 	movne.w	r0, #4294967295
 80002a8:	f000 b96e 	b.w	8000588 <__aeabi_idiv0>
 80002ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b4:	f000 f806 	bl	80002c4 <__udivmoddi4>
 80002b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c0:	b004      	add	sp, #16
 80002c2:	4770      	bx	lr

080002c4 <__udivmoddi4>:
 80002c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c8:	9d08      	ldr	r5, [sp, #32]
 80002ca:	4604      	mov	r4, r0
 80002cc:	468c      	mov	ip, r1
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	f040 8083 	bne.w	80003da <__udivmoddi4+0x116>
 80002d4:	428a      	cmp	r2, r1
 80002d6:	4617      	mov	r7, r2
 80002d8:	d947      	bls.n	800036a <__udivmoddi4+0xa6>
 80002da:	fab2 f282 	clz	r2, r2
 80002de:	b142      	cbz	r2, 80002f2 <__udivmoddi4+0x2e>
 80002e0:	f1c2 0020 	rsb	r0, r2, #32
 80002e4:	fa24 f000 	lsr.w	r0, r4, r0
 80002e8:	4091      	lsls	r1, r2
 80002ea:	4097      	lsls	r7, r2
 80002ec:	ea40 0c01 	orr.w	ip, r0, r1
 80002f0:	4094      	lsls	r4, r2
 80002f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f6:	0c23      	lsrs	r3, r4, #16
 80002f8:	fbbc f6f8 	udiv	r6, ip, r8
 80002fc:	fa1f fe87 	uxth.w	lr, r7
 8000300:	fb08 c116 	mls	r1, r8, r6, ip
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb06 f10e 	mul.w	r1, r6, lr
 800030c:	4299      	cmp	r1, r3
 800030e:	d909      	bls.n	8000324 <__udivmoddi4+0x60>
 8000310:	18fb      	adds	r3, r7, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 8119 	bcs.w	800054c <__udivmoddi4+0x288>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 8116 	bls.w	800054c <__udivmoddi4+0x288>
 8000320:	3e02      	subs	r6, #2
 8000322:	443b      	add	r3, r7
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 fe0e 	mul.w	lr, r0, lr
 8000338:	45a6      	cmp	lr, r4
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x8c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	f080 8105 	bcs.w	8000550 <__udivmoddi4+0x28c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f240 8102 	bls.w	8000550 <__udivmoddi4+0x28c>
 800034c:	3802      	subs	r0, #2
 800034e:	443c      	add	r4, r7
 8000350:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000354:	eba4 040e 	sub.w	r4, r4, lr
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa0>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	b902      	cbnz	r2, 800036e <__udivmoddi4+0xaa>
 800036c:	deff      	udf	#255	; 0xff
 800036e:	fab2 f282 	clz	r2, r2
 8000372:	2a00      	cmp	r2, #0
 8000374:	d150      	bne.n	8000418 <__udivmoddi4+0x154>
 8000376:	1bcb      	subs	r3, r1, r7
 8000378:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037c:	fa1f f887 	uxth.w	r8, r7
 8000380:	2601      	movs	r6, #1
 8000382:	fbb3 fcfe 	udiv	ip, r3, lr
 8000386:	0c21      	lsrs	r1, r4, #16
 8000388:	fb0e 331c 	mls	r3, lr, ip, r3
 800038c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000390:	fb08 f30c 	mul.w	r3, r8, ip
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xe4>
 8000398:	1879      	adds	r1, r7, r1
 800039a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0xe2>
 80003a0:	428b      	cmp	r3, r1
 80003a2:	f200 80e9 	bhi.w	8000578 <__udivmoddi4+0x2b4>
 80003a6:	4684      	mov	ip, r0
 80003a8:	1ac9      	subs	r1, r1, r3
 80003aa:	b2a3      	uxth	r3, r4
 80003ac:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b0:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b8:	fb08 f800 	mul.w	r8, r8, r0
 80003bc:	45a0      	cmp	r8, r4
 80003be:	d907      	bls.n	80003d0 <__udivmoddi4+0x10c>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x10a>
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	f200 80d9 	bhi.w	8000580 <__udivmoddi4+0x2bc>
 80003ce:	4618      	mov	r0, r3
 80003d0:	eba4 0408 	sub.w	r4, r4, r8
 80003d4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d8:	e7bf      	b.n	800035a <__udivmoddi4+0x96>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d909      	bls.n	80003f2 <__udivmoddi4+0x12e>
 80003de:	2d00      	cmp	r5, #0
 80003e0:	f000 80b1 	beq.w	8000546 <__udivmoddi4+0x282>
 80003e4:	2600      	movs	r6, #0
 80003e6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ea:	4630      	mov	r0, r6
 80003ec:	4631      	mov	r1, r6
 80003ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f2:	fab3 f683 	clz	r6, r3
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d14a      	bne.n	8000490 <__udivmoddi4+0x1cc>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d302      	bcc.n	8000404 <__udivmoddi4+0x140>
 80003fe:	4282      	cmp	r2, r0
 8000400:	f200 80b8 	bhi.w	8000574 <__udivmoddi4+0x2b0>
 8000404:	1a84      	subs	r4, r0, r2
 8000406:	eb61 0103 	sbc.w	r1, r1, r3
 800040a:	2001      	movs	r0, #1
 800040c:	468c      	mov	ip, r1
 800040e:	2d00      	cmp	r5, #0
 8000410:	d0a8      	beq.n	8000364 <__udivmoddi4+0xa0>
 8000412:	e9c5 4c00 	strd	r4, ip, [r5]
 8000416:	e7a5      	b.n	8000364 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f603 	lsr.w	r6, r0, r3
 8000420:	4097      	lsls	r7, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800042a:	40d9      	lsrs	r1, r3
 800042c:	4330      	orrs	r0, r6
 800042e:	0c03      	lsrs	r3, r0, #16
 8000430:	fbb1 f6fe 	udiv	r6, r1, lr
 8000434:	fa1f f887 	uxth.w	r8, r7
 8000438:	fb0e 1116 	mls	r1, lr, r6, r1
 800043c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000440:	fb06 f108 	mul.w	r1, r6, r8
 8000444:	4299      	cmp	r1, r3
 8000446:	fa04 f402 	lsl.w	r4, r4, r2
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x19c>
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000452:	f080 808d 	bcs.w	8000570 <__udivmoddi4+0x2ac>
 8000456:	4299      	cmp	r1, r3
 8000458:	f240 808a 	bls.w	8000570 <__udivmoddi4+0x2ac>
 800045c:	3e02      	subs	r6, #2
 800045e:	443b      	add	r3, r7
 8000460:	1a5b      	subs	r3, r3, r1
 8000462:	b281      	uxth	r1, r0
 8000464:	fbb3 f0fe 	udiv	r0, r3, lr
 8000468:	fb0e 3310 	mls	r3, lr, r0, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb00 f308 	mul.w	r3, r0, r8
 8000474:	428b      	cmp	r3, r1
 8000476:	d907      	bls.n	8000488 <__udivmoddi4+0x1c4>
 8000478:	1879      	adds	r1, r7, r1
 800047a:	f100 3cff 	add.w	ip, r0, #4294967295
 800047e:	d273      	bcs.n	8000568 <__udivmoddi4+0x2a4>
 8000480:	428b      	cmp	r3, r1
 8000482:	d971      	bls.n	8000568 <__udivmoddi4+0x2a4>
 8000484:	3802      	subs	r0, #2
 8000486:	4439      	add	r1, r7
 8000488:	1acb      	subs	r3, r1, r3
 800048a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048e:	e778      	b.n	8000382 <__udivmoddi4+0xbe>
 8000490:	f1c6 0c20 	rsb	ip, r6, #32
 8000494:	fa03 f406 	lsl.w	r4, r3, r6
 8000498:	fa22 f30c 	lsr.w	r3, r2, ip
 800049c:	431c      	orrs	r4, r3
 800049e:	fa20 f70c 	lsr.w	r7, r0, ip
 80004a2:	fa01 f306 	lsl.w	r3, r1, r6
 80004a6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004aa:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ae:	431f      	orrs	r7, r3
 80004b0:	0c3b      	lsrs	r3, r7, #16
 80004b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b6:	fa1f f884 	uxth.w	r8, r4
 80004ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80004be:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004c2:	fb09 fa08 	mul.w	sl, r9, r8
 80004c6:	458a      	cmp	sl, r1
 80004c8:	fa02 f206 	lsl.w	r2, r2, r6
 80004cc:	fa00 f306 	lsl.w	r3, r0, r6
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x220>
 80004d2:	1861      	adds	r1, r4, r1
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d248      	bcs.n	800056c <__udivmoddi4+0x2a8>
 80004da:	458a      	cmp	sl, r1
 80004dc:	d946      	bls.n	800056c <__udivmoddi4+0x2a8>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	4421      	add	r1, r4
 80004e4:	eba1 010a 	sub.w	r1, r1, sl
 80004e8:	b2bf      	uxth	r7, r7
 80004ea:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ee:	fb0e 1110 	mls	r1, lr, r0, r1
 80004f2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45b8      	cmp	r8, r7
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x24a>
 80004fe:	19e7      	adds	r7, r4, r7
 8000500:	f100 31ff 	add.w	r1, r0, #4294967295
 8000504:	d22e      	bcs.n	8000564 <__udivmoddi4+0x2a0>
 8000506:	45b8      	cmp	r8, r7
 8000508:	d92c      	bls.n	8000564 <__udivmoddi4+0x2a0>
 800050a:	3802      	subs	r0, #2
 800050c:	4427      	add	r7, r4
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba7 0708 	sub.w	r7, r7, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454f      	cmp	r7, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	4649      	mov	r1, r9
 8000520:	d31a      	bcc.n	8000558 <__udivmoddi4+0x294>
 8000522:	d017      	beq.n	8000554 <__udivmoddi4+0x290>
 8000524:	b15d      	cbz	r5, 800053e <__udivmoddi4+0x27a>
 8000526:	ebb3 020e 	subs.w	r2, r3, lr
 800052a:	eb67 0701 	sbc.w	r7, r7, r1
 800052e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000532:	40f2      	lsrs	r2, r6
 8000534:	ea4c 0202 	orr.w	r2, ip, r2
 8000538:	40f7      	lsrs	r7, r6
 800053a:	e9c5 2700 	strd	r2, r7, [r5]
 800053e:	2600      	movs	r6, #0
 8000540:	4631      	mov	r1, r6
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	462e      	mov	r6, r5
 8000548:	4628      	mov	r0, r5
 800054a:	e70b      	b.n	8000364 <__udivmoddi4+0xa0>
 800054c:	4606      	mov	r6, r0
 800054e:	e6e9      	b.n	8000324 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fd      	b.n	8000350 <__udivmoddi4+0x8c>
 8000554:	4543      	cmp	r3, r8
 8000556:	d2e5      	bcs.n	8000524 <__udivmoddi4+0x260>
 8000558:	ebb8 0e02 	subs.w	lr, r8, r2
 800055c:	eb69 0104 	sbc.w	r1, r9, r4
 8000560:	3801      	subs	r0, #1
 8000562:	e7df      	b.n	8000524 <__udivmoddi4+0x260>
 8000564:	4608      	mov	r0, r1
 8000566:	e7d2      	b.n	800050e <__udivmoddi4+0x24a>
 8000568:	4660      	mov	r0, ip
 800056a:	e78d      	b.n	8000488 <__udivmoddi4+0x1c4>
 800056c:	4681      	mov	r9, r0
 800056e:	e7b9      	b.n	80004e4 <__udivmoddi4+0x220>
 8000570:	4666      	mov	r6, ip
 8000572:	e775      	b.n	8000460 <__udivmoddi4+0x19c>
 8000574:	4630      	mov	r0, r6
 8000576:	e74a      	b.n	800040e <__udivmoddi4+0x14a>
 8000578:	f1ac 0c02 	sub.w	ip, ip, #2
 800057c:	4439      	add	r1, r7
 800057e:	e713      	b.n	80003a8 <__udivmoddi4+0xe4>
 8000580:	3802      	subs	r0, #2
 8000582:	443c      	add	r4, r7
 8000584:	e724      	b.n	80003d0 <__udivmoddi4+0x10c>
 8000586:	bf00      	nop

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000592:	f000 fc98 	bl	8000ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f8eb 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f9b3 	bl	8000904 <MX_GPIO_Init>
  MX_RTC_Init();
 800059e:	f000 f93d 	bl	800081c <MX_RTC_Init>
  MX_USART2_UART_Init();
 80005a2:	f000 f963 	bl	800086c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 80005a6:	4b5e      	ldr	r3, [pc, #376]	; (8000720 <main+0x194>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a5d      	ldr	r2, [pc, #372]	; (8000720 <main+0x194>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005b2:	f008 f81f 	bl	80085f4 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80005b6:	f008 ffdd 	bl	8009574 <SEGGER_SYSVIEW_Start>
//  SEGGER_UART_Init(500000);

  status = xTaskCreate(task_handler_led, "Task-LED", 200, NULL,
 80005ba:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <main+0x198>)
 80005bc:	9301      	str	r3, [sp, #4]
 80005be:	2302      	movs	r3, #2
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	22c8      	movs	r2, #200	; 0xc8
 80005c6:	4958      	ldr	r1, [pc, #352]	; (8000728 <main+0x19c>)
 80005c8:	4858      	ldr	r0, [pc, #352]	; (800072c <main+0x1a0>)
 80005ca:	f005 fecd 	bl	8006368 <xTaskCreate>
 80005ce:	61f8      	str	r0, [r7, #28]
              2, &handle_led_task);
  configASSERT(status == pdPASS);
 80005d0:	69fb      	ldr	r3, [r7, #28]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d00a      	beq.n	80005ec <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005da:	f383 8811 	msr	BASEPRI, r3
 80005de:	f3bf 8f6f 	isb	sy
 80005e2:	f3bf 8f4f 	dsb	sy
 80005e6:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005e8:	bf00      	nop
 80005ea:	e7fe      	b.n	80005ea <main+0x5e>

  status = xTaskCreate(task_handler_menu, "Task-MENU", 200, NULL,
 80005ec:	4b50      	ldr	r3, [pc, #320]	; (8000730 <main+0x1a4>)
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	22c8      	movs	r2, #200	; 0xc8
 80005f8:	494e      	ldr	r1, [pc, #312]	; (8000734 <main+0x1a8>)
 80005fa:	484f      	ldr	r0, [pc, #316]	; (8000738 <main+0x1ac>)
 80005fc:	f005 feb4 	bl	8006368 <xTaskCreate>
 8000600:	61f8      	str	r0, [r7, #28]
              2, &handle_menu_task);
  configASSERT(status == pdPASS);
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d00a      	beq.n	800061e <main+0x92>
        __asm volatile
 8000608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800060c:	f383 8811 	msr	BASEPRI, r3
 8000610:	f3bf 8f6f 	isb	sy
 8000614:	f3bf 8f4f 	dsb	sy
 8000618:	617b      	str	r3, [r7, #20]
    }
 800061a:	bf00      	nop
 800061c:	e7fe      	b.n	800061c <main+0x90>

  status = xTaskCreate(task_handler_cmd, "Task-CMD", 200, NULL,
 800061e:	4b47      	ldr	r3, [pc, #284]	; (800073c <main+0x1b0>)
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2302      	movs	r3, #2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	22c8      	movs	r2, #200	; 0xc8
 800062a:	4945      	ldr	r1, [pc, #276]	; (8000740 <main+0x1b4>)
 800062c:	4845      	ldr	r0, [pc, #276]	; (8000744 <main+0x1b8>)
 800062e:	f005 fe9b 	bl	8006368 <xTaskCreate>
 8000632:	61f8      	str	r0, [r7, #28]
              2, &handle_cmd_task);
  configASSERT(status == pdPASS);
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d00a      	beq.n	8000650 <main+0xc4>
        __asm volatile
 800063a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800063e:	f383 8811 	msr	BASEPRI, r3
 8000642:	f3bf 8f6f 	isb	sy
 8000646:	f3bf 8f4f 	dsb	sy
 800064a:	613b      	str	r3, [r7, #16]
    }
 800064c:	bf00      	nop
 800064e:	e7fe      	b.n	800064e <main+0xc2>

  status = xTaskCreate(task_handler_print, "Task-PRINT", 200, NULL,
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <main+0x1bc>)
 8000652:	9301      	str	r3, [sp, #4]
 8000654:	2302      	movs	r3, #2
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	22c8      	movs	r2, #200	; 0xc8
 800065c:	493b      	ldr	r1, [pc, #236]	; (800074c <main+0x1c0>)
 800065e:	483c      	ldr	r0, [pc, #240]	; (8000750 <main+0x1c4>)
 8000660:	f005 fe82 	bl	8006368 <xTaskCreate>
 8000664:	61f8      	str	r0, [r7, #28]
              2, &handle_print_task);
  configASSERT(status == pdPASS);
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d00a      	beq.n	8000682 <main+0xf6>
        __asm volatile
 800066c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000670:	f383 8811 	msr	BASEPRI, r3
 8000674:	f3bf 8f6f 	isb	sy
 8000678:	f3bf 8f4f 	dsb	sy
 800067c:	60fb      	str	r3, [r7, #12]
    }
 800067e:	bf00      	nop
 8000680:	e7fe      	b.n	8000680 <main+0xf4>

  status = xTaskCreate(task_handler_rtc, "Task-RTC", 200, NULL,
 8000682:	4b34      	ldr	r3, [pc, #208]	; (8000754 <main+0x1c8>)
 8000684:	9301      	str	r3, [sp, #4]
 8000686:	2302      	movs	r3, #2
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2300      	movs	r3, #0
 800068c:	22c8      	movs	r2, #200	; 0xc8
 800068e:	4932      	ldr	r1, [pc, #200]	; (8000758 <main+0x1cc>)
 8000690:	4832      	ldr	r0, [pc, #200]	; (800075c <main+0x1d0>)
 8000692:	f005 fe69 	bl	8006368 <xTaskCreate>
 8000696:	61f8      	str	r0, [r7, #28]
              2, &handle_rtc_task);
  configASSERT(status == pdPASS);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d00a      	beq.n	80006b4 <main+0x128>
        __asm volatile
 800069e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006a2:	f383 8811 	msr	BASEPRI, r3
 80006a6:	f3bf 8f6f 	isb	sy
 80006aa:	f3bf 8f4f 	dsb	sy
 80006ae:	60bb      	str	r3, [r7, #8]
    }
 80006b0:	bf00      	nop
 80006b2:	e7fe      	b.n	80006b2 <main+0x126>

	/*
	Create FreeRTOS queues
	*/
	queue_data = xQueueCreate(10, sizeof(char));
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	200a      	movs	r0, #10
 80006ba:	f005 f91f 	bl	80058fc <xQueueGenericCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a27      	ldr	r2, [pc, #156]	; (8000760 <main+0x1d4>)
 80006c2:	6013      	str	r3, [r2, #0]
	configASSERT(queue_data != NULL);
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <main+0x1d4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d10a      	bne.n	80006e2 <main+0x156>
        __asm volatile
 80006cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006d0:	f383 8811 	msr	BASEPRI, r3
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	607b      	str	r3, [r7, #4]
    }
 80006de:	bf00      	nop
 80006e0:	e7fe      	b.n	80006e0 <main+0x154>

	queue_print = xQueueCreate(10, sizeof(size_t)); // Will only store pointers to strings
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	200a      	movs	r0, #10
 80006e8:	f005 f908 	bl	80058fc <xQueueGenericCreate>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <main+0x1d8>)
 80006f0:	6013      	str	r3, [r2, #0]
	configASSERT(queue_print != NULL);
 80006f2:	4b1c      	ldr	r3, [pc, #112]	; (8000764 <main+0x1d8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10a      	bne.n	8000710 <main+0x184>
        __asm volatile
 80006fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006fe:	f383 8811 	msr	BASEPRI, r3
 8000702:	f3bf 8f6f 	isb	sy
 8000706:	f3bf 8f4f 	dsb	sy
 800070a:	603b      	str	r3, [r7, #0]
    }
 800070c:	bf00      	nop
 800070e:	e7fe      	b.n	800070e <main+0x182>

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1); // enable receiving UART interrupts
 8000710:	2201      	movs	r2, #1
 8000712:	4915      	ldr	r1, [pc, #84]	; (8000768 <main+0x1dc>)
 8000714:	4815      	ldr	r0, [pc, #84]	; (800076c <main+0x1e0>)
 8000716:	f003 f871 	bl	80037fc <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 800071a:	f005 ff89 	bl	8006630 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800071e:	e7fe      	b.n	800071e <main+0x192>
 8000720:	e0001000 	.word	0xe0001000
 8000724:	2001c3a4 	.word	0x2001c3a4
 8000728:	0800a1b4 	.word	0x0800a1b4
 800072c:	08000e4d 	.word	0x08000e4d
 8000730:	2001c378 	.word	0x2001c378
 8000734:	0800a1c0 	.word	0x0800a1c0
 8000738:	08000e57 	.word	0x08000e57
 800073c:	2001c374 	.word	0x2001c374
 8000740:	0800a1cc 	.word	0x0800a1cc
 8000744:	08000d31 	.word	0x08000d31
 8000748:	2001c3a0 	.word	0x2001c3a0
 800074c:	0800a1d8 	.word	0x0800a1d8
 8000750:	08000e61 	.word	0x08000e61
 8000754:	2001c370 	.word	0x2001c370
 8000758:	0800a1e4 	.word	0x0800a1e4
 800075c:	08000e6b 	.word	0x08000e6b
 8000760:	2001c36c 	.word	0x2001c36c
 8000764:	2001c43c 	.word	0x2001c43c
 8000768:	2001c3a8 	.word	0x2001c3a8
 800076c:	2001c3ac 	.word	0x2001c3ac

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	; 0x58
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2244      	movs	r2, #68	; 0x44
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f009 fd04 	bl	800a18c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000792:	2000      	movs	r0, #0
 8000794:	f000 ff38 	bl	8001608 <HAL_PWREx_ControlVoltageScaling>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800079e:	f000 f973 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80007a2:	2318      	movs	r3, #24
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007a6:	2301      	movs	r3, #1
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007b2:	2360      	movs	r3, #96	; 0x60
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b6:	2302      	movs	r3, #2
 80007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007ba:	2301      	movs	r3, #1
 80007bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007be:	2301      	movs	r3, #1
 80007c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007c2:	233c      	movs	r3, #60	; 0x3c
 80007c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c6:	2302      	movs	r3, #2
 80007c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007ce:	2302      	movs	r3, #2
 80007d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 ffba 	bl	8001750 <HAL_RCC_OscConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80007e2:	f000 f951 	bl	8000a88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e6:	230f      	movs	r3, #15
 80007e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ea:	2303      	movs	r3, #3
 80007ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80007f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2105      	movs	r1, #5
 8000802:	4618      	mov	r0, r3
 8000804:	f001 fbca 	bl	8001f9c <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800080e:	f000 f93b 	bl	8000a88 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3758      	adds	r7, #88	; 0x58
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000820:	4b10      	ldr	r3, [pc, #64]	; (8000864 <MX_RTC_Init+0x48>)
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <MX_RTC_Init+0x4c>)
 8000824:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_RTC_Init+0x48>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800082c:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <MX_RTC_Init+0x48>)
 800082e:	227f      	movs	r2, #127	; 0x7f
 8000830:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_RTC_Init+0x48>)
 8000834:	22ff      	movs	r2, #255	; 0xff
 8000836:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000838:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <MX_RTC_Init+0x48>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_RTC_Init+0x48>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000844:	4b07      	ldr	r3, [pc, #28]	; (8000864 <MX_RTC_Init+0x48>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_RTC_Init+0x48>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_RTC_Init+0x48>)
 8000852:	f002 fb9f 	bl	8002f94 <HAL_RTC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800085c:	f000 f914 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2001c37c 	.word	0x2001c37c
 8000868:	40002800 	.word	0x40002800

0800086c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000870:	4b22      	ldr	r3, [pc, #136]	; (80008fc <MX_USART2_UART_Init+0x90>)
 8000872:	4a23      	ldr	r2, [pc, #140]	; (8000900 <MX_USART2_UART_Init+0x94>)
 8000874:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_USART2_UART_Init+0x90>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_USART2_UART_Init+0x90>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_USART2_UART_Init+0x90>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_USART2_UART_Init+0x90>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_USART2_UART_Init+0x90>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_USART2_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_USART2_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b16      	ldr	r3, [pc, #88]	; (80008fc <MX_USART2_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008a8:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART2_UART_Init+0x90>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_USART2_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x90>)
 80008b6:	f002 ff51 	bl	800375c <HAL_UART_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008c0:	f000 f8e2 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_USART2_UART_Init+0x90>)
 80008c8:	f004 fe31 	bl	800552e <HAL_UARTEx_SetTxFifoThreshold>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008d2:	f000 f8d9 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4808      	ldr	r0, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x90>)
 80008da:	f004 fe66 	bl	80055aa <HAL_UARTEx_SetRxFifoThreshold>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008e4:	f000 f8d0 	bl	8000a88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_USART2_UART_Init+0x90>)
 80008ea:	f004 fde7 	bl	80054bc <HAL_UARTEx_DisableFifoMode>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008f4:	f000 f8c8 	bl	8000a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2001c3ac 	.word	0x2001c3ac
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	4b2e      	ldr	r3, [pc, #184]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4b2b      	ldr	r3, [pc, #172]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000950:	f043 0302 	orr.w	r3, r3, #2
 8000954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	f003 0302 	and.w	r3, r3, #2
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000968:	481b      	ldr	r0, [pc, #108]	; (80009d8 <MX_GPIO_Init+0xd4>)
 800096a:	f000 fe15 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	481a      	ldr	r0, [pc, #104]	; (80009dc <MX_GPIO_Init+0xd8>)
 8000974:	f000 fe10 	bl	8001598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <MX_GPIO_Init+0xd8>)
 800098e:	f000 fc71 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000992:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	480b      	ldr	r0, [pc, #44]	; (80009d8 <MX_GPIO_Init+0xd4>)
 80009ac:	f000 fc62 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009b0:	2380      	movs	r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_GPIO_Init+0xd8>)
 80009c8:	f000 fc54 	bl	8001274 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3720      	adds	r7, #32
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40021000 	.word	0x40021000
 80009d8:	48000400 	.word	0x48000400
 80009dc:	48000800 	.word	0x48000800

080009e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	if(pdFALSE == xQueueIsQueueFullFromISR(queue_data))
 80009e8:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_UART_RxCpltCallback+0x74>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 fc2f 	bl	8006250 <xQueueIsQueueFullFromISR>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d107      	bne.n	8000a08 <HAL_UART_RxCpltCallback+0x28>
	{
		xQueueSendToBackFromISR(queue_data, (void*) &user_data, NULL);
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_UART_RxCpltCallback+0x74>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	4915      	ldr	r1, [pc, #84]	; (8000a58 <HAL_UART_RxCpltCallback+0x78>)
 8000a02:	f005 f929 	bl	8005c58 <xQueueGenericSendFromISR>
 8000a06:	e00b      	b.n	8000a20 <HAL_UART_RxCpltCallback+0x40>
	}
	else
	{
		if ('\n' == user_data)
 8000a08:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <HAL_UART_RxCpltCallback+0x78>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b0a      	cmp	r3, #10
 8000a10:	d106      	bne.n	8000a20 <HAL_UART_RxCpltCallback+0x40>
		{
			// make sure the last element in the queue is '\n'
			xQueueOverwriteFromISR(queue_data, (void*)&user_data, NULL);
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_UART_RxCpltCallback+0x74>)
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	2302      	movs	r3, #2
 8000a18:	2200      	movs	r2, #0
 8000a1a:	490f      	ldr	r1, [pc, #60]	; (8000a58 <HAL_UART_RxCpltCallback+0x78>)
 8000a1c:	f005 f91c 	bl	8005c58 <xQueueGenericSendFromISR>
		}
	}

	if('\n' == user_data)
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_UART_RxCpltCallback+0x78>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
 8000a26:	2b0a      	cmp	r3, #10
 8000a28:	d10a      	bne.n	8000a40 <HAL_UART_RxCpltCallback+0x60>
	{
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_UART_RxCpltCallback+0x7c>)
 8000a2c:	6818      	ldr	r0, [r3, #0]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	2300      	movs	r3, #0
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	f006 fc5a 	bl	80072f4 <xTaskGenericNotifyFromISR>
	}

	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1); // enable receiving UART interrupts
 8000a40:	2201      	movs	r2, #1
 8000a42:	4905      	ldr	r1, [pc, #20]	; (8000a58 <HAL_UART_RxCpltCallback+0x78>)
 8000a44:	4806      	ldr	r0, [pc, #24]	; (8000a60 <HAL_UART_RxCpltCallback+0x80>)
 8000a46:	f002 fed9 	bl	80037fc <HAL_UART_Receive_IT>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2001c36c 	.word	0x2001c36c
 8000a58:	2001c3a8 	.word	0x2001c3a8
 8000a5c:	2001c374 	.word	0x2001c374
 8000a60:	2001c3ac 	.word	0x2001c3ac

08000a64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d101      	bne.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a76:	f000 fa3f 	bl	8000ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40001000 	.word	0x40001000

08000a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8c:	b672      	cpsid	i
}
 8000a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <Error_Handler+0x8>
	...

08000a94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <HAL_MspInit+0x44>)
 8000a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <HAL_MspInit+0x44>)
 8000aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6593      	str	r3, [r2, #88]	; 0x58
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x44>)
 8000ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aca:	f007 f9e5 	bl	8007e98 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0a8      	sub	sp, #160	; 0xa0
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ae4:	f107 030c 	add.w	r3, r7, #12
 8000ae8:	2294      	movs	r2, #148	; 0x94
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f009 fb4d 	bl	800a18c <memset>
  if(hrtc->Instance==RTC)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_RTC_MspInit+0x5c>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d118      	bne.n	8000b2e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000afc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b00:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fd28 	bl	8002564 <HAL_RCCEx_PeriphCLKConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000b1a:	f7ff ffb5 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b1e:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <HAL_RTC_MspInit+0x60>)
 8000b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <HAL_RTC_MspInit+0x60>)
 8000b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	37a0      	adds	r7, #160	; 0xa0
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40002800 	.word	0x40002800
 8000b3c:	40021000 	.word	0x40021000

08000b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0ae      	sub	sp, #184	; 0xb8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2294      	movs	r2, #148	; 0x94
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f009 fb13 	bl	800a18c <memset>
  if(huart->Instance==USART2)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a25      	ldr	r2, [pc, #148]	; (8000c00 <HAL_UART_MspInit+0xc0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d143      	bne.n	8000bf8 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b70:	2302      	movs	r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fcf1 	bl	8002564 <HAL_RCCEx_PeriphCLKConfig>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b88:	f7ff ff7e 	bl	8000a88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8c:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <HAL_UART_MspInit+0xc4>)
 8000b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b90:	4a1c      	ldr	r2, [pc, #112]	; (8000c04 <HAL_UART_MspInit+0xc4>)
 8000b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b96:	6593      	str	r3, [r2, #88]	; 0x58
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <HAL_UART_MspInit+0xc4>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_UART_MspInit+0xc4>)
 8000ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba8:	4a16      	ldr	r2, [pc, #88]	; (8000c04 <HAL_UART_MspInit+0xc4>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb0:	4b14      	ldr	r3, [pc, #80]	; (8000c04 <HAL_UART_MspInit+0xc4>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd4:	2307      	movs	r3, #7
 8000bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000bde:	4619      	mov	r1, r3
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f000 fb46 	bl	8001274 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2026      	movs	r0, #38	; 0x26
 8000bee:	f000 fa5b 	bl	80010a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bf2:	2026      	movs	r0, #38	; 0x26
 8000bf4:	f000 fa74 	bl	80010e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bf8:	bf00      	nop
 8000bfa:	37b8      	adds	r7, #184	; 0xb8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40004400 	.word	0x40004400
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	; 0x30
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	2036      	movs	r0, #54	; 0x36
 8000c1e:	f000 fa43 	bl	80010a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c22:	2036      	movs	r0, #54	; 0x36
 8000c24:	f000 fa5c 	bl	80010e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_InitTick+0xa0>)
 8000c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2c:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <HAL_InitTick+0xa0>)
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6593      	str	r3, [r2, #88]	; 0x58
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_InitTick+0xa0>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c38:	f003 0310 	and.w	r3, r3, #16
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c40:	f107 0210 	add.w	r2, r7, #16
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	4611      	mov	r1, r2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 fb96 	bl	800237c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c50:	f001 fb68 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8000c54:	4603      	mov	r3, r0
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <HAL_InitTick+0xa4>)
 8000c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c62:	0c9b      	lsrs	r3, r3, #18
 8000c64:	3b01      	subs	r3, #1
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c68:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	; (8000cb4 <HAL_InitTick+0xac>)
 8000c6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c74:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c8a:	f002 fa95 	bl	80031b8 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d104      	bne.n	8000c9e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c94:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <HAL_InitTick+0xa8>)
 8000c96:	f002 faf1 	bl	800327c <HAL_TIM_Base_Start_IT>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3730      	adds	r7, #48	; 0x30
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	431bde83 	.word	0x431bde83
 8000cb0:	2001c440 	.word	0x2001c440
 8000cb4:	40001000 	.word	0x40001000

08000cb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <NMI_Handler+0x4>

08000cbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <HardFault_Handler+0x4>

08000cc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <MemManage_Handler+0x4>

08000cca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <BusFault_Handler+0x4>

08000cd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <UsageFault_Handler+0x4>

08000cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <USART2_IRQHandler+0x10>)
 8000cea:	f002 fddd 	bl	80038a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2001c3ac 	.word	0x2001c3ac

08000cf8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <TIM6_DAC_IRQHandler+0x10>)
 8000cfe:	f002 fb2d 	bl	800335c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2001c440 	.word	0x2001c440

08000d0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <SystemInit+0x20>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <SystemInit+0x20>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d20:	bf00      	nop
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <task_handler_cmd>:
#include "main.h"

void task_handler_cmd(void* parameters)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af02      	add	r7, sp, #8
 8000d36:	6078      	str	r0, [r7, #4]
    BaseType_t notify_status;
    command_t command;

    while(1)
    {
        notify_status = xTaskNotifyWait(0x00, 0x00, NULL, portMAX_DELAY);
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2000      	movs	r0, #0
 8000d46:	f006 f95b 	bl	8007000 <xTaskGenericNotifyWait>
 8000d4a:	6178      	str	r0, [r7, #20]
        if (pdTRUE == notify_status)
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d1f2      	bne.n	8000d38 <task_handler_cmd+0x8>
        {
            process_command(&command);
 8000d52:	f107 0308 	add.w	r3, r7, #8
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f802 	bl	8000d60 <process_command>
        notify_status = xTaskNotifyWait(0x00, 0x00, NULL, portMAX_DELAY);
 8000d5c:	e7ec      	b.n	8000d38 <task_handler_cmd+0x8>
	...

08000d60 <process_command>:
        }
    }
}

void process_command(command_t *command)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	6078      	str	r0, [r7, #4]
    extract_command(command);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f000 f835 	bl	8000dd8 <extract_command>

    switch(current_state)
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <process_command+0x68>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b05      	cmp	r3, #5
 8000d74:	dc24      	bgt.n	8000dc0 <process_command+0x60>
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	da18      	bge.n	8000dac <process_command+0x4c>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <process_command+0x24>
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d00a      	beq.n	8000d98 <process_command+0x38>
        case sRtcDateConfig:
        case sRtcReport:
            xTaskNotify(handle_rtc_task, (size_t)command, eSetValueWithOverwrite);
            break;
    }
}
 8000d82:	e01d      	b.n	8000dc0 <process_command+0x60>
            xTaskNotify(handle_menu_task, (size_t)command, eSetValueWithOverwrite);
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <process_command+0x6c>)
 8000d86:	6818      	ldr	r0, [r3, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2303      	movs	r3, #3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f006 f9bd 	bl	8007110 <xTaskGenericNotify>
            break;
 8000d96:	e013      	b.n	8000dc0 <process_command+0x60>
            xTaskNotify(handle_led_task, (size_t)command, eSetValueWithOverwrite);
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <process_command+0x70>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	2300      	movs	r3, #0
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2303      	movs	r3, #3
 8000da4:	2100      	movs	r1, #0
 8000da6:	f006 f9b3 	bl	8007110 <xTaskGenericNotify>
            break;
 8000daa:	e009      	b.n	8000dc0 <process_command+0x60>
            xTaskNotify(handle_rtc_task, (size_t)command, eSetValueWithOverwrite);
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <process_command+0x74>)
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	2300      	movs	r3, #0
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2303      	movs	r3, #3
 8000db8:	2100      	movs	r1, #0
 8000dba:	f006 f9a9 	bl	8007110 <xTaskGenericNotify>
            break;
 8000dbe:	bf00      	nop
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000030 	.word	0x20000030
 8000dcc:	2001c378 	.word	0x2001c378
 8000dd0:	2001c3a4 	.word	0x2001c3a4
 8000dd4:	2001c370 	.word	0x2001c370

08000dd8 <extract_command>:

int extract_command(command_t* command)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    char msg_char;
    BaseType_t status;

    status = uxQueueMessagesWaiting(queue_data);
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <extract_command+0x70>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 f905 	bl	8005ff4 <uxQueueMessagesWaiting>
 8000dea:	4603      	mov	r3, r0
 8000dec:	613b      	str	r3, [r7, #16]
    if (!status)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <extract_command+0x22>
        return -1;
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	e022      	b.n	8000e40 <extract_command+0x68>

    uint8_t idx = 0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	75fb      	strb	r3, [r7, #23]
    do
    {
        status = xQueueReceive(queue_data, &msg_char, 0);
 8000dfe:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <extract_command+0x70>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f107 010f 	add.w	r1, r7, #15
 8000e06:	2200      	movs	r2, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f004 ffe3 	bl	8005dd4 <xQueueReceive>
 8000e0e:	6138      	str	r0, [r7, #16]
        if (pdTRUE == status)
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d106      	bne.n	8000e24 <extract_command+0x4c>
            command->payload[idx++] = msg_char;
 8000e16:	7dfb      	ldrb	r3, [r7, #23]
 8000e18:	1c5a      	adds	r2, r3, #1
 8000e1a:	75fa      	strb	r2, [r7, #23]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	7bf9      	ldrb	r1, [r7, #15]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	5499      	strb	r1, [r3, r2]
    } while(msg_char != '\n');
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2b0a      	cmp	r3, #10
 8000e28:	d1e9      	bne.n	8000dfe <extract_command+0x26>

    command->payload[idx-1] = '\0'; // rewrite the last char '\n'
 8000e2a:	7dfb      	ldrb	r3, [r7, #23]
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	2100      	movs	r1, #0
 8000e32:	54d1      	strb	r1, [r2, r3]
    command->len = idx-1; // save length of the string excluding the null char
 8000e34:	7dfb      	ldrb	r3, [r7, #23]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	729a      	strb	r2, [r3, #10]

    return 0;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	2001c36c 	.word	0x2001c36c

08000e4c <task_handler_led>:

void task_handler_led(void* parameters)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
    while(1)
 8000e54:	e7fe      	b.n	8000e54 <task_handler_led+0x8>

08000e56 <task_handler_menu>:

    }
}

void task_handler_menu(void* parameters)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b083      	sub	sp, #12
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
    while(1)
 8000e5e:	e7fe      	b.n	8000e5e <task_handler_menu+0x8>

08000e60 <task_handler_print>:

    }
}

void task_handler_print(void* parameters)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
    while(1)
 8000e68:	e7fe      	b.n	8000e68 <task_handler_print+0x8>

08000e6a <task_handler_rtc>:

    }
}

void task_handler_rtc(void* parameters)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b083      	sub	sp, #12
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
    while(1)
 8000e72:	e7fe      	b.n	8000e72 <task_handler_rtc+0x8>

08000e74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e78:	f7ff ff48 	bl	8000d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e7e:	490d      	ldr	r1, [pc, #52]	; (8000eb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e80:	4a0d      	ldr	r2, [pc, #52]	; (8000eb8 <LoopForever+0xe>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e84:	e002      	b.n	8000e8c <LoopCopyDataInit>

08000e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e8a:	3304      	adds	r3, #4

08000e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e90:	d3f9      	bcc.n	8000e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e94:	4c0a      	ldr	r4, [pc, #40]	; (8000ec0 <LoopForever+0x16>)
  movs r3, #0
 8000e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e98:	e001      	b.n	8000e9e <LoopFillZerobss>

08000e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e9c:	3204      	adds	r2, #4

08000e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ea0:	d3fb      	bcc.n	8000e9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f009 f933 	bl	800a10c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ea6:	f7ff fb71 	bl	800058c <main>

08000eaa <LoopForever>:

LoopForever:
    b LoopForever
 8000eaa:	e7fe      	b.n	8000eaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000eac:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000eb8:	0800a364 	.word	0x0800a364
  ldr r2, =_sbss
 8000ebc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000ec0:	2001c578 	.word	0x2001c578

08000ec4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC1_IRQHandler>

08000ec6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f000 f8de 	bl	8001092 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f7ff fe96 	bl	8000c08 <HAL_InitTick>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d002      	beq.n	8000ee8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	71fb      	strb	r3, [r7, #7]
 8000ee6:	e001      	b.n	8000eec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee8:	f7ff fdd4 	bl	8000a94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	2001c48c 	.word	0x2001c48c

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	2001c48c 	.word	0x2001c48c

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff4c 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ba:	f7ff ff61 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 80010be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	68b9      	ldr	r1, [r7, #8]
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f7ff ffb1 	bl	800102c <NVIC_EncodePriority>
 80010ca:	4602      	mov	r2, r0
 80010cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff80 	bl	8000fd8 <__NVIC_SetPriority>
}
 80010d8:	bf00      	nop
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff54 	bl	8000f9c <__NVIC_EnableIRQ>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d008      	beq.n	8001126 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e040      	b.n	80011a8 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 020e 	bic.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001144:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0201 	bic.w	r2, r2, #1
 8001154:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	f003 021c 	and.w	r2, r3, #28
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001172:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00c      	beq.n	8001196 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001186:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800118a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001194:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d005      	beq.n	80011d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2204      	movs	r2, #4
 80011d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	e047      	b.n	8001268 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 020e 	bic.w	r2, r2, #14
 80011e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001206:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f003 021c 	and.w	r2, r3, #28
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	2101      	movs	r1, #1
 8001216:	fa01 f202 	lsl.w	r2, r1, r2
 800121a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001224:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00c      	beq.n	8001248 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800123c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001246:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	4798      	blx	r3
    }
  }
  return status;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e166      	b.n	8001552 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 8158 	beq.w	800154c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d005      	beq.n	80012b4 <HAL_GPIO_Init+0x40>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f003 0201 	and.w	r2, r3, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b03      	cmp	r3, #3
 8001320:	d017      	beq.n	8001352 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d123      	bne.n	80013a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3208      	adds	r2, #8
 80013a0:	6939      	ldr	r1, [r7, #16]
 80013a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0203 	and.w	r2, r3, #3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80b2 	beq.w	800154c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e8:	4b61      	ldr	r3, [pc, #388]	; (8001570 <HAL_GPIO_Init+0x2fc>)
 80013ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ec:	4a60      	ldr	r2, [pc, #384]	; (8001570 <HAL_GPIO_Init+0x2fc>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6613      	str	r3, [r2, #96]	; 0x60
 80013f4:	4b5e      	ldr	r3, [pc, #376]	; (8001570 <HAL_GPIO_Init+0x2fc>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001400:	4a5c      	ldr	r2, [pc, #368]	; (8001574 <HAL_GPIO_Init+0x300>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142a:	d02b      	beq.n	8001484 <HAL_GPIO_Init+0x210>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a52      	ldr	r2, [pc, #328]	; (8001578 <HAL_GPIO_Init+0x304>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d025      	beq.n	8001480 <HAL_GPIO_Init+0x20c>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a51      	ldr	r2, [pc, #324]	; (800157c <HAL_GPIO_Init+0x308>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d01f      	beq.n	800147c <HAL_GPIO_Init+0x208>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4a50      	ldr	r2, [pc, #320]	; (8001580 <HAL_GPIO_Init+0x30c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d019      	beq.n	8001478 <HAL_GPIO_Init+0x204>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a4f      	ldr	r2, [pc, #316]	; (8001584 <HAL_GPIO_Init+0x310>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d013      	beq.n	8001474 <HAL_GPIO_Init+0x200>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_GPIO_Init+0x314>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <HAL_GPIO_Init+0x1fc>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a4d      	ldr	r2, [pc, #308]	; (800158c <HAL_GPIO_Init+0x318>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x1f8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <HAL_GPIO_Init+0x31c>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_GPIO_Init+0x1f4>
 8001464:	2307      	movs	r3, #7
 8001466:	e00e      	b.n	8001486 <HAL_GPIO_Init+0x212>
 8001468:	2308      	movs	r3, #8
 800146a:	e00c      	b.n	8001486 <HAL_GPIO_Init+0x212>
 800146c:	2306      	movs	r3, #6
 800146e:	e00a      	b.n	8001486 <HAL_GPIO_Init+0x212>
 8001470:	2305      	movs	r3, #5
 8001472:	e008      	b.n	8001486 <HAL_GPIO_Init+0x212>
 8001474:	2304      	movs	r3, #4
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x212>
 8001478:	2303      	movs	r3, #3
 800147a:	e004      	b.n	8001486 <HAL_GPIO_Init+0x212>
 800147c:	2302      	movs	r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x212>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_GPIO_Init+0x212>
 8001484:	2300      	movs	r3, #0
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	f002 0203 	and.w	r2, r2, #3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4093      	lsls	r3, r2
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001496:	4937      	ldr	r1, [pc, #220]	; (8001574 <HAL_GPIO_Init+0x300>)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014a4:	4b3b      	ldr	r3, [pc, #236]	; (8001594 <HAL_GPIO_Init+0x320>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014c8:	4a32      	ldr	r2, [pc, #200]	; (8001594 <HAL_GPIO_Init+0x320>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014ce:	4b31      	ldr	r3, [pc, #196]	; (8001594 <HAL_GPIO_Init+0x320>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f2:	4a28      	ldr	r2, [pc, #160]	; (8001594 <HAL_GPIO_Init+0x320>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <HAL_GPIO_Init+0x320>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	43db      	mvns	r3, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4013      	ands	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_GPIO_Init+0x320>)
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <HAL_GPIO_Init+0x320>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	43db      	mvns	r3, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4013      	ands	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4313      	orrs	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <HAL_GPIO_Init+0x320>)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3301      	adds	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	f47f ae91 	bne.w	8001284 <HAL_GPIO_Init+0x10>
  }
}
 8001562:	bf00      	nop
 8001564:	bf00      	nop
 8001566:	371c      	adds	r7, #28
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	40021000 	.word	0x40021000
 8001574:	40010000 	.word	0x40010000
 8001578:	48000400 	.word	0x48000400
 800157c:	48000800 	.word	0x48000800
 8001580:	48000c00 	.word	0x48000c00
 8001584:	48001000 	.word	0x48001000
 8001588:	48001400 	.word	0x48001400
 800158c:	48001800 	.word	0x48001800
 8001590:	48001c00 	.word	0x48001c00
 8001594:	40010400 	.word	0x40010400

08001598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	807b      	strh	r3, [r7, #2]
 80015a4:	4613      	mov	r3, r2
 80015a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015a8:	787b      	ldrb	r3, [r7, #1]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ae:	887a      	ldrh	r2, [r7, #2]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b4:	e002      	b.n	80015bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_PWREx_GetVoltageRange+0x3c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d8:	d102      	bne.n	80015e0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80015da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015de:	e00b      	b.n	80015f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80015e0:	4b08      	ldr	r3, [pc, #32]	; (8001604 <HAL_PWREx_GetVoltageRange+0x3c>)
 80015e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015ee:	d102      	bne.n	80015f6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80015f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f4:	e000      	b.n	80015f8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80015f6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40007000 	.word	0x40007000

08001608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d141      	bne.n	800169a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001616:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800161e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001622:	d131      	bne.n	8001688 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001624:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800162a:	4a46      	ldr	r2, [pc, #280]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800162c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001634:	4b43      	ldr	r3, [pc, #268]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800163c:	4a41      	ldr	r2, [pc, #260]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001644:	4b40      	ldr	r3, [pc, #256]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2232      	movs	r2, #50	; 0x32
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	4a3f      	ldr	r2, [pc, #252]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9b      	lsrs	r3, r3, #18
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800165a:	e002      	b.n	8001662 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3b01      	subs	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800166e:	d102      	bne.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f2      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001682:	d158      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e057      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800168e:	4a2d      	ldr	r2, [pc, #180]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001694:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001698:	e04d      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016a0:	d141      	bne.n	8001726 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ae:	d131      	bne.n	8001714 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c0:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016c8:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80016d0:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2232      	movs	r2, #50	; 0x32
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	0c9b      	lsrs	r3, r3, #18
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e6:	e002      	b.n	80016ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fa:	d102      	bne.n	8001702 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f2      	bne.n	80016e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170e:	d112      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e011      	b.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800171a:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001724:	e007      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001726:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001734:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	40007000 	.word	0x40007000
 8001748:	20000000 	.word	0x20000000
 800174c:	431bde83 	.word	0x431bde83

08001750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	f000 bc16 	b.w	8001f90 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001764:	4ba0      	ldr	r3, [pc, #640]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176e:	4b9e      	ldr	r3, [pc, #632]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80e4 	beq.w	800194e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d007      	beq.n	800179c <HAL_RCC_OscConfig+0x4c>
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	f040 808b 	bne.w	80018aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b01      	cmp	r3, #1
 8001798:	f040 8087 	bne.w	80018aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179c:	4b92      	ldr	r3, [pc, #584]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x64>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e3ed      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_RCC_OscConfig+0x7e>
 80017c4:	4b88      	ldr	r3, [pc, #544]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017cc:	e005      	b.n	80017da <HAL_RCC_OscConfig+0x8a>
 80017ce:	4b86      	ldr	r3, [pc, #536]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017da:	4293      	cmp	r3, r2
 80017dc:	d223      	bcs.n	8001826 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fdfc 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e3ce      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f2:	4b7d      	ldr	r3, [pc, #500]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a7c      	ldr	r2, [pc, #496]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4977      	ldr	r1, [pc, #476]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001810:	4b75      	ldr	r3, [pc, #468]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	4972      	ldr	r1, [pc, #456]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e025      	b.n	8001872 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	4b70      	ldr	r3, [pc, #448]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a6f      	ldr	r2, [pc, #444]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b6d      	ldr	r3, [pc, #436]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	496a      	ldr	r1, [pc, #424]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001844:	4b68      	ldr	r3, [pc, #416]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	4965      	ldr	r1, [pc, #404]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fdbc 	bl	80023e0 <RCC_SetFlashLatencyFromMSIRange>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e38e      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001872:	f000 fcbf 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8001876:	4602      	mov	r2, r0
 8001878:	4b5b      	ldr	r3, [pc, #364]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	495a      	ldr	r1, [pc, #360]	; (80019ec <HAL_RCC_OscConfig+0x29c>)
 8001884:	5ccb      	ldrb	r3, [r1, r3]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a58      	ldr	r2, [pc, #352]	; (80019f0 <HAL_RCC_OscConfig+0x2a0>)
 8001890:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001892:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_OscConfig+0x2a4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f9b6 	bl	8000c08 <HAL_InitTick>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d052      	beq.n	800194c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	e372      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d032      	beq.n	8001918 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b2:	4b4d      	ldr	r3, [pc, #308]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a4c      	ldr	r2, [pc, #304]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018be:	f7ff fb2f 	bl	8000f20 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c6:	f7ff fb2b 	bl	8000f20 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e35b      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d8:	4b43      	ldr	r3, [pc, #268]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a3f      	ldr	r2, [pc, #252]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b3d      	ldr	r3, [pc, #244]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	493a      	ldr	r1, [pc, #232]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001902:	4b39      	ldr	r3, [pc, #228]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	4935      	ldr	r1, [pc, #212]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
 8001916:	e01a      	b.n	800194e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001918:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001924:	f7ff fafc 	bl	8000f20 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800192c:	f7ff faf8 	bl	8000f20 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e328      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800193e:	4b2a      	ldr	r3, [pc, #168]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x1dc>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d073      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x21c>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d10e      	bne.n	8001984 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d10b      	bne.n	8001984 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d063      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d15f      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e305      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x24c>
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e01d      	b.n	80019d8 <HAL_RCC_OscConfig+0x288>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a4:	d10c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x270>
 80019a6:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a0f      	ldr	r2, [pc, #60]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e00b      	b.n	80019d8 <HAL_RCC_OscConfig+0x288>
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a08      	ldr	r2, [pc, #32]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80019c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <HAL_RCC_OscConfig+0x298>)
 80019d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01b      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fa9e 	bl	8000f20 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e6:	e010      	b.n	8001a0a <HAL_RCC_OscConfig+0x2ba>
 80019e8:	40021000 	.word	0x40021000
 80019ec:	0800a2d0 	.word	0x0800a2d0
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fa92 	bl	8000f20 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e2c2      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	4baf      	ldr	r3, [pc, #700]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2a8>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fa82 	bl	8000f20 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fa7e 	bl	8000f20 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e2ae      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	4ba5      	ldr	r3, [pc, #660]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d0>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d060      	beq.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x310>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d116      	bne.n	8001a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a60:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x328>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e28b      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b93      	ldr	r3, [pc, #588]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	4990      	ldr	r1, [pc, #576]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8c:	e040      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d023      	beq.n	8001ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a96:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a8b      	ldr	r2, [pc, #556]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fa3d 	bl	8000f20 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fa39 	bl	8000f20 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e269      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abc:	4b82      	ldr	r3, [pc, #520]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b7f      	ldr	r3, [pc, #508]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	497c      	ldr	r1, [pc, #496]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e018      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b7a      	ldr	r3, [pc, #488]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a79      	ldr	r2, [pc, #484]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fa19 	bl	8000f20 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fa15 	bl	8000f20 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e245      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b04:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d03c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b24:	4b68      	ldr	r3, [pc, #416]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	4a67      	ldr	r2, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff f9f4 	bl	8000f20 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f9f0 	bl	8000f20 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e220      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4e:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ef      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
 8001b5c:	e01b      	b.n	8001b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b5a      	ldr	r3, [pc, #360]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b64:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff f9d7 	bl	8000f20 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b76:	f7ff f9d3 	bl	8000f20 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e203      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ef      	bne.n	8001b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a6 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba8:	4b47      	ldr	r3, [pc, #284]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	4a43      	ldr	r2, [pc, #268]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc0:	4b41      	ldr	r3, [pc, #260]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_RCC_OscConfig+0x57c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d118      	bne.n	8001c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_RCC_OscConfig+0x57c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a3a      	ldr	r2, [pc, #232]	; (8001ccc <HAL_RCC_OscConfig+0x57c>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be8:	f7ff f99a 	bl	8000f20 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf0:	f7ff f996 	bl	8000f20 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1c6      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_RCC_OscConfig+0x57c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4d8>
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1c:	4a2a      	ldr	r2, [pc, #168]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c26:	e024      	b.n	8001c72 <HAL_RCC_OscConfig+0x522>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d110      	bne.n	8001c52 <HAL_RCC_OscConfig+0x502>
 8001c30:	4b25      	ldr	r3, [pc, #148]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	4a20      	ldr	r2, [pc, #128]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c50:	e00f      	b.n	8001c72 <HAL_RCC_OscConfig+0x522>
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c5a:	f023 0301 	bic.w	r3, r3, #1
 8001c5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c68:	4a17      	ldr	r2, [pc, #92]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f023 0304 	bic.w	r3, r3, #4
 8001c6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d016      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7a:	f7ff f951 	bl	8000f20 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c80:	e00a      	b.n	8001c98 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f7ff f94d 	bl	8000f20 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e17b      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0ed      	beq.n	8001c82 <HAL_RCC_OscConfig+0x532>
 8001ca6:	e01a      	b.n	8001cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f93a 	bl	8000f20 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cae:	e00f      	b.n	8001cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb0:	f7ff f936 	bl	8000f20 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d906      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e164      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd0:	4ba8      	ldr	r3, [pc, #672]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1e8      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4ba3      	ldr	r3, [pc, #652]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4aa2      	ldr	r2, [pc, #648]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d03c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d04:	4b9b      	ldr	r3, [pc, #620]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0a:	4a9a      	ldr	r2, [pc, #616]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f904 	bl	8000f20 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1c:	f7ff f900 	bl	8000f20 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e130      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d2e:	4b91      	ldr	r3, [pc, #580]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ef      	beq.n	8001d1c <HAL_RCC_OscConfig+0x5cc>
 8001d3c:	e01b      	b.n	8001d76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d3e:	4b8d      	ldr	r3, [pc, #564]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d44:	4a8b      	ldr	r2, [pc, #556]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f8e7 	bl	8000f20 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d56:	f7ff f8e3 	bl	8000f20 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e113      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d68:	4b82      	ldr	r3, [pc, #520]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ef      	bne.n	8001d56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8107 	beq.w	8001f8e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	f040 80cb 	bne.w	8001f20 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d8a:	4b7a      	ldr	r3, [pc, #488]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0203 	and.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d12c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	3b01      	subs	r3, #1
 8001daa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d123      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d11b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d113      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d109      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	3b01      	subs	r3, #1
 8001df2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d06d      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d068      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dfe:	4b5d      	ldr	r3, [pc, #372]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d105      	bne.n	8001e16 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e0a:	4b5a      	ldr	r3, [pc, #360]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0ba      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a55      	ldr	r2, [pc, #340]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e24:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e26:	f7ff f87b 	bl	8000f20 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2e:	f7ff f877 	bl	8000f20 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0a7      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4c:	4b49      	ldr	r3, [pc, #292]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	4b49      	ldr	r3, [pc, #292]	; (8001f78 <HAL_RCC_OscConfig+0x828>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e5c:	3a01      	subs	r2, #1
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	4311      	orrs	r1, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e66:	0212      	lsls	r2, r2, #8
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e6e:	0852      	lsrs	r2, r2, #1
 8001e70:	3a01      	subs	r2, #1
 8001e72:	0552      	lsls	r2, r2, #21
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e7a:	0852      	lsrs	r2, r2, #1
 8001e7c:	3a01      	subs	r2, #1
 8001e7e:	0652      	lsls	r2, r2, #25
 8001e80:	4311      	orrs	r1, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e86:	06d2      	lsls	r2, r2, #27
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	493a      	ldr	r1, [pc, #232]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e90:	4b38      	ldr	r3, [pc, #224]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a37      	ldr	r2, [pc, #220]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e9c:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	4a34      	ldr	r2, [pc, #208]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ea8:	f7ff f83a 	bl	8000f20 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb0:	f7ff f836 	bl	8000f20 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e066      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec2:	4b2c      	ldr	r3, [pc, #176]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0f0      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ece:	e05e      	b.n	8001f8e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e05d      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed4:	4b27      	ldr	r3, [pc, #156]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d156      	bne.n	8001f8e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef8:	f7ff f812 	bl	8000f20 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff f80e 	bl	8000f20 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e03e      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0x7b0>
 8001f1e:	e036      	b.n	8001f8e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d031      	beq.n	8001f8a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f30:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f3e:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f44:	f023 0303 	bic.w	r3, r3, #3
 8001f48:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f50:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f58:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7fe ffe1 	bl	8000f20 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f60:	e00c      	b.n	8001f7c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f62:	f7fe ffdd 	bl	8000f20 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d905      	bls.n	8001f7c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e00d      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <HAL_RCC_OscConfig+0x848>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ec      	bne.n	8001f62 <HAL_RCC_OscConfig+0x812>
 8001f88:	e001      	b.n	8001f8e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e10f      	b.n	80021d4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b89      	ldr	r3, [pc, #548]	; (80021dc <HAL_RCC_ClockConfig+0x240>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d910      	bls.n	8001fe4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b86      	ldr	r3, [pc, #536]	; (80021dc <HAL_RCC_ClockConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 020f 	bic.w	r2, r3, #15
 8001fca:	4984      	ldr	r1, [pc, #528]	; (80021dc <HAL_RCC_ClockConfig+0x240>)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd2:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_ClockConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0f7      	b.n	80021d4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0301 	and.w	r3, r3, #1
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8089 	beq.w	8002104 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d133      	bne.n	8002062 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0e4      	b.n	80021d4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800200a:	f000 fa43 	bl	8002494 <RCC_GetSysClockFreqFromPLLSource>
 800200e:	4603      	mov	r3, r0
 8002010:	4a74      	ldr	r2, [pc, #464]	; (80021e4 <HAL_RCC_ClockConfig+0x248>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d955      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10a      	bne.n	8002038 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800202a:	4a6d      	ldr	r2, [pc, #436]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e044      	b.n	80020c2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d03e      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x126>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d13a      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800204c:	4b64      	ldr	r3, [pc, #400]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002054:	4a62      	ldr	r2, [pc, #392]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800205a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e02f      	b.n	80020c2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0ac      	b.n	80021d4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002082:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d109      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0a0      	b.n	80021d4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e098      	b.n	80021d4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80020a2:	f000 f8a7 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80020a6:	4603      	mov	r3, r0
 80020a8:	4a4e      	ldr	r2, [pc, #312]	; (80021e4 <HAL_RCC_ClockConfig+0x248>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d909      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020ae:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020b6:	4a4a      	ldr	r2, [pc, #296]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020be:	2380      	movs	r3, #128	; 0x80
 80020c0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4944      	ldr	r1, [pc, #272]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020d4:	f7fe ff24 	bl	8000f20 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7fe ff20 	bl	8000f20 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e070      	b.n	80021d4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002110:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	4930      	ldr	r1, [pc, #192]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	608b      	str	r3, [r1, #8]
 8002122:	e008      	b.n	8002136 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b80      	cmp	r3, #128	; 0x80
 8002128:	d105      	bne.n	8002136 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4a2c      	ldr	r2, [pc, #176]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002134:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d210      	bcs.n	8002166 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <HAL_RCC_ClockConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f023 020f 	bic.w	r2, r3, #15
 800214c:	4923      	ldr	r1, [pc, #140]	; (80021dc <HAL_RCC_ClockConfig+0x240>)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	4313      	orrs	r3, r2
 8002152:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002154:	4b21      	ldr	r3, [pc, #132]	; (80021dc <HAL_RCC_ClockConfig+0x240>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d001      	beq.n	8002166 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e036      	b.n	80021d4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d008      	beq.n	8002184 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4918      	ldr	r1, [pc, #96]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002180:	4313      	orrs	r3, r2
 8002182:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b00      	cmp	r3, #0
 800218e:	d009      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002190:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	00db      	lsls	r3, r3, #3
 800219e:	4910      	ldr	r1, [pc, #64]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a4:	f000 f826 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCC_ClockConfig+0x244>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	091b      	lsrs	r3, r3, #4
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x24c>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	f003 031f 	and.w	r3, r3, #31
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x250>)
 80021c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021c4:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x254>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7fe fd1d 	bl	8000c08 <HAL_InitTick>
 80021ce:	4603      	mov	r3, r0
 80021d0:	73fb      	strb	r3, [r7, #15]

  return status;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	0800a2d0 	.word	0x0800a2d0
 80021ec:	20000000 	.word	0x20000000
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	2300      	movs	r3, #0
 8002200:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002202:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	f003 030c 	and.w	r3, r3, #12
 800220a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800220c:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x34>
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	2b0c      	cmp	r3, #12
 8002220:	d121      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d11e      	bne.n	8002266 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002228:	4b34      	ldr	r3, [pc, #208]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d107      	bne.n	8002244 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002234:	4b31      	ldr	r3, [pc, #196]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223a:	0a1b      	lsrs	r3, r3, #8
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e005      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002250:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002258:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10d      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002264:	e00a      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b04      	cmp	r3, #4
 800226a:	d102      	bne.n	8002272 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <HAL_RCC_GetSysClockFreq+0x110>)
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	e004      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b08      	cmp	r3, #8
 8002276:	d101      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002278:	4b23      	ldr	r3, [pc, #140]	; (8002308 <HAL_RCC_GetSysClockFreq+0x114>)
 800227a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d134      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002282:	4b1e      	ldr	r3, [pc, #120]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d003      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0xa6>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d003      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0xac>
 8002298:	e005      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800229a:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <HAL_RCC_GetSysClockFreq+0x110>)
 800229c:	617b      	str	r3, [r7, #20]
      break;
 800229e:	e005      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_GetSysClockFreq+0x114>)
 80022a2:	617b      	str	r3, [r7, #20]
      break;
 80022a4:	e002      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	617b      	str	r3, [r7, #20]
      break;
 80022aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022ac:	4b13      	ldr	r3, [pc, #76]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	3301      	adds	r3, #1
 80022b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	0a1b      	lsrs	r3, r3, #8
 80022c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	fb02 f203 	mul.w	r2, r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022d2:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_RCC_GetSysClockFreq+0x108>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	0e5b      	lsrs	r3, r3, #25
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	3301      	adds	r3, #1
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80022ec:	69bb      	ldr	r3, [r7, #24]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	0800a2e8 	.word	0x0800a2e8
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_GetHCLKFreq+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000000 	.word	0x20000000

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002328:	f7ff fff0 	bl	800230c <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4904      	ldr	r1, [pc, #16]	; (800234c <HAL_RCC_GetPCLK1Freq+0x28>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	f003 031f 	and.w	r3, r3, #31
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40021000 	.word	0x40021000
 800234c:	0800a2e0 	.word	0x0800a2e0

08002350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002354:	f7ff ffda 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b06      	ldr	r3, [pc, #24]	; (8002374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0adb      	lsrs	r3, r3, #11
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002370:	4618      	mov	r0, r3
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	0800a2e0 	.word	0x0800a2e0

0800237c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	220f      	movs	r2, #15
 800238a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <HAL_RCC_GetClockConfig+0x5c>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80023be:	4b07      	ldr	r3, [pc, #28]	; (80023dc <HAL_RCC_GetClockConfig+0x60>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 020f 	and.w	r2, r3, #15
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	601a      	str	r2, [r3, #0]
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40022000 	.word	0x40022000

080023e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023f8:	f7ff f8e6 	bl	80015c8 <HAL_PWREx_GetVoltageRange>
 80023fc:	6178      	str	r0, [r7, #20]
 80023fe:	e014      	b.n	800242a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b22      	ldr	r3, [pc, #136]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a21      	ldr	r2, [pc, #132]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002418:	f7ff f8d6 	bl	80015c8 <HAL_PWREx_GetVoltageRange>
 800241c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800241e:	4b1b      	ldr	r3, [pc, #108]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a1a      	ldr	r2, [pc, #104]	; (800248c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d10b      	bne.n	800244a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b80      	cmp	r3, #128	; 0x80
 8002436:	d913      	bls.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2ba0      	cmp	r3, #160	; 0xa0
 800243c:	d902      	bls.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800243e:	2302      	movs	r3, #2
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	e00d      	b.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	e00a      	b.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b7f      	cmp	r3, #127	; 0x7f
 800244e:	d902      	bls.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002450:	2302      	movs	r3, #2
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e004      	b.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b70      	cmp	r3, #112	; 0x70
 800245a:	d101      	bne.n	8002460 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800245c:	2301      	movs	r3, #1
 800245e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 020f 	bic.w	r2, r3, #15
 8002468:	4909      	ldr	r1, [pc, #36]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	429a      	cmp	r2, r3
 800247c:	d001      	beq.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3718      	adds	r7, #24
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40021000 	.word	0x40021000
 8002490:	40022000 	.word	0x40022000

08002494 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800249e:	4b2d      	ldr	r3, [pc, #180]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d118      	bne.n	80024dc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024b6:	4b27      	ldr	r3, [pc, #156]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	e005      	b.n	80024d2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024c6:	4b23      	ldr	r3, [pc, #140]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	091b      	lsrs	r3, r3, #4
 80024cc:	f003 030f 	and.w	r3, r3, #15
 80024d0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024d2:	4a21      	ldr	r2, [pc, #132]	; (8002558 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024da:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d003      	beq.n	80024f4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d003      	beq.n	80024fa <RCC_GetSysClockFreqFromPLLSource+0x66>
 80024f2:	e005      	b.n	8002500 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80024f4:	4b19      	ldr	r3, [pc, #100]	; (800255c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80024f6:	613b      	str	r3, [r7, #16]
    break;
 80024f8:	e005      	b.n	8002506 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80024fa:	4b19      	ldr	r3, [pc, #100]	; (8002560 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80024fc:	613b      	str	r3, [r7, #16]
    break;
 80024fe:	e002      	b.n	8002506 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	613b      	str	r3, [r7, #16]
    break;
 8002504:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	3301      	adds	r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	fb02 f203 	mul.w	r2, r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	fbb2 f3f3 	udiv	r3, r2, r3
 800252a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800252c:	4b09      	ldr	r3, [pc, #36]	; (8002554 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0e5b      	lsrs	r3, r3, #25
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	3301      	adds	r3, #1
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002546:	683b      	ldr	r3, [r7, #0]
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40021000 	.word	0x40021000
 8002558:	0800a2e8 	.word	0x0800a2e8
 800255c:	00f42400 	.word	0x00f42400
 8002560:	007a1200 	.word	0x007a1200

08002564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800256c:	2300      	movs	r3, #0
 800256e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002570:	2300      	movs	r3, #0
 8002572:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	2b00      	cmp	r3, #0
 800257e:	d040      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002584:	2b80      	cmp	r3, #128	; 0x80
 8002586:	d02a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d825      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800258c:	2b60      	cmp	r3, #96	; 0x60
 800258e:	d026      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002590:	2b60      	cmp	r3, #96	; 0x60
 8002592:	d821      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002594:	2b40      	cmp	r3, #64	; 0x40
 8002596:	d006      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d81d      	bhi.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	d010      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80025a4:	e018      	b.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025a6:	4b89      	ldr	r3, [pc, #548]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	4a88      	ldr	r2, [pc, #544]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025b2:	e015      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3304      	adds	r3, #4
 80025b8:	2100      	movs	r1, #0
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fb02 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 80025c0:	4603      	mov	r3, r0
 80025c2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025c4:	e00c      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3320      	adds	r3, #32
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fbed 	bl	8002dac <RCCEx_PLLSAI2_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d6:	e003      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	74fb      	strb	r3, [r7, #19]
      break;
 80025dc:	e000      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80025de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10b      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025e6:	4b79      	ldr	r3, [pc, #484]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025ec:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025f4:	4975      	ldr	r1, [pc, #468]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80025fc:	e001      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025fe:	7cfb      	ldrb	r3, [r7, #19]
 8002600:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d047      	beq.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d030      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261c:	d82a      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800261e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002622:	d02a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002628:	d824      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800262a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800262e:	d008      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002634:	d81e      	bhi.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800263a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800263e:	d010      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002640:	e018      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002642:	4b62      	ldr	r3, [pc, #392]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	4a61      	ldr	r2, [pc, #388]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800264e:	e015      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	3304      	adds	r3, #4
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fab4 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002660:	e00c      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3320      	adds	r3, #32
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fb9f 	bl	8002dac <RCCEx_PLLSAI2_Config>
 800266e:	4603      	mov	r3, r0
 8002670:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002672:	e003      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	74fb      	strb	r3, [r7, #19]
      break;
 8002678:	e000      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800267a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800267c:	7cfb      	ldrb	r3, [r7, #19]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10b      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002682:	4b52      	ldr	r3, [pc, #328]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002690:	494e      	ldr	r1, [pc, #312]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002698:	e001      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 809f 	beq.w	80027ea <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ac:	2300      	movs	r3, #0
 80026ae:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026b0:	4b46      	ldr	r3, [pc, #280]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00d      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	4a40      	ldr	r2, [pc, #256]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6593      	str	r3, [r2, #88]	; 0x58
 80026d2:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026de:	2301      	movs	r3, #1
 80026e0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a3a      	ldr	r2, [pc, #232]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80026e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ee:	f7fe fc17 	bl	8000f20 <HAL_GetTick>
 80026f2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026f4:	e009      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f6:	f7fe fc13 	bl	8000f20 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d902      	bls.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	74fb      	strb	r3, [r7, #19]
        break;
 8002708:	e005      	b.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0ef      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002716:	7cfb      	ldrb	r3, [r7, #19]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d15b      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002726:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d01f      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	429a      	cmp	r2, r3
 8002738:	d019      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800273a:	4b24      	ldr	r3, [pc, #144]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002744:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002746:	4b21      	ldr	r3, [pc, #132]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	4a1f      	ldr	r2, [pc, #124]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800274e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002752:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002756:	4b1d      	ldr	r3, [pc, #116]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	4a1b      	ldr	r2, [pc, #108]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800275e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002766:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d016      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe fbd2 	bl	8000f20 <HAL_GetTick>
 800277c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800277e:	e00b      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe fbce 	bl	8000f20 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d902      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	74fb      	strb	r3, [r7, #19]
            break;
 8002796:	e006      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ec      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027c4:	e008      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	74bb      	strb	r3, [r7, #18]
 80027ca:	e005      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d8:	7c7b      	ldrb	r3, [r7, #17]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d105      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4ba0      	ldr	r3, [pc, #640]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	4a9f      	ldr	r2, [pc, #636]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027f6:	4b9a      	ldr	r3, [pc, #616]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f023 0203 	bic.w	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	4996      	ldr	r1, [pc, #600]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002818:	4b91      	ldr	r3, [pc, #580]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 020c 	bic.w	r2, r3, #12
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	498e      	ldr	r1, [pc, #568]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800283a:	4b89      	ldr	r3, [pc, #548]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	4985      	ldr	r1, [pc, #532]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800285c:	4b80      	ldr	r3, [pc, #512]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800286a:	497d      	ldr	r1, [pc, #500]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800287e:	4b78      	ldr	r3, [pc, #480]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288c:	4974      	ldr	r1, [pc, #464]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028a0:	4b6f      	ldr	r3, [pc, #444]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ae:	496c      	ldr	r1, [pc, #432]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028c2:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d0:	4963      	ldr	r1, [pc, #396]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028e4:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f2:	495b      	ldr	r1, [pc, #364]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002906:	4b56      	ldr	r3, [pc, #344]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002914:	4952      	ldr	r1, [pc, #328]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002928:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	494a      	ldr	r1, [pc, #296]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00a      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800294a:	4b45      	ldr	r3, [pc, #276]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800294c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002958:	4941      	ldr	r1, [pc, #260]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800296c:	4b3c      	ldr	r3, [pc, #240]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800296e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800297a:	4939      	ldr	r1, [pc, #228]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d028      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800298e:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299c:	4930      	ldr	r1, [pc, #192]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ac:	d106      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ae:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4a2b      	ldr	r2, [pc, #172]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b8:	60d3      	str	r3, [r2, #12]
 80029ba:	e011      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 f8f9 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029d6:	7cfb      	ldrb	r3, [r7, #19]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80029dc:	7cfb      	ldrb	r3, [r7, #19]
 80029de:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d04d      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029f4:	d108      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80029f6:	4b1a      	ldr	r3, [pc, #104]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029fc:	4a18      	ldr	r2, [pc, #96]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80029fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a02:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a06:	e012      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a0e:	4a14      	ldr	r2, [pc, #80]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a14:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a26:	490e      	ldr	r1, [pc, #56]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a36:	d106      	bne.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a38:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a42:	60d3      	str	r3, [r2, #12]
 8002a44:	e020      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a4e:	d109      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a02      	ldr	r2, [pc, #8]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5a:	60d3      	str	r3, [r2, #12]
 8002a5c:	e014      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f8a5 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d028      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a94:	4b4a      	ldr	r3, [pc, #296]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa2:	4947      	ldr	r1, [pc, #284]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab4:	4b42      	ldr	r3, [pc, #264]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a41      	ldr	r2, [pc, #260]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002abe:	60d3      	str	r3, [r2, #12]
 8002ac0:	e011      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002aca:	d10c      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	2101      	movs	r1, #1
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 f876 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01e      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b02:	492f      	ldr	r1, [pc, #188]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b14:	d10c      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 f851 	bl	8002bc4 <RCCEx_PLLSAI1_Config>
 8002b22:	4603      	mov	r3, r0
 8002b24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002b2c:	7cfb      	ldrb	r3, [r7, #19]
 8002b2e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b3c:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b42:	f023 0204 	bic.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b4c:	491c      	ldr	r1, [pc, #112]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00b      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b66:	f023 0218 	bic.w	r2, r3, #24
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	4913      	ldr	r1, [pc, #76]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d017      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002b8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b94:	490a      	ldr	r1, [pc, #40]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd2:	4b72      	ldr	r3, [pc, #456]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bde:	4b6f      	ldr	r3, [pc, #444]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d103      	bne.n	8002bf6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
       ||
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d142      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
 8002bfa:	e03f      	b.n	8002c7c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d018      	beq.n	8002c36 <RCCEx_PLLSAI1_Config+0x72>
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d825      	bhi.n	8002c54 <RCCEx_PLLSAI1_Config+0x90>
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d002      	beq.n	8002c12 <RCCEx_PLLSAI1_Config+0x4e>
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d009      	beq.n	8002c24 <RCCEx_PLLSAI1_Config+0x60>
 8002c10:	e020      	b.n	8002c54 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c12:	4b62      	ldr	r3, [pc, #392]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d11d      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c22:	e01a      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c24:	4b5d      	ldr	r3, [pc, #372]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d116      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c34:	e013      	b.n	8002c5e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c36:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c42:	4b56      	ldr	r3, [pc, #344]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c52:	e006      	b.n	8002c62 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e004      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e002      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e000      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d108      	bne.n	8002c7c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002c6a:	4b4c      	ldr	r3, [pc, #304]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f023 0203 	bic.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4949      	ldr	r1, [pc, #292]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 8086 	bne.w	8002d90 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c84:	4b45      	ldr	r3, [pc, #276]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a44      	ldr	r2, [pc, #272]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002c8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c90:	f7fe f946 	bl	8000f20 <HAL_GetTick>
 8002c94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c96:	e009      	b.n	8002cac <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c98:	f7fe f942 	bl	8000f20 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b02      	cmp	r3, #2
 8002ca4:	d902      	bls.n	8002cac <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	73fb      	strb	r3, [r7, #15]
        break;
 8002caa:	e005      	b.n	8002cb8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cac:	4b3b      	ldr	r3, [pc, #236]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ef      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d168      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d113      	bne.n	8002cec <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	0211      	lsls	r1, r2, #8
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	06d2      	lsls	r2, r2, #27
 8002cd8:	4311      	orrs	r1, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	6852      	ldr	r2, [r2, #4]
 8002cde:	3a01      	subs	r2, #1
 8002ce0:	0112      	lsls	r2, r2, #4
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	492d      	ldr	r1, [pc, #180]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	610b      	str	r3, [r1, #16]
 8002cea:	e02d      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d115      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf2:	4b2a      	ldr	r3, [pc, #168]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6892      	ldr	r2, [r2, #8]
 8002cfe:	0211      	lsls	r1, r2, #8
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	6912      	ldr	r2, [r2, #16]
 8002d04:	0852      	lsrs	r2, r2, #1
 8002d06:	3a01      	subs	r2, #1
 8002d08:	0552      	lsls	r2, r2, #21
 8002d0a:	4311      	orrs	r1, r2
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6852      	ldr	r2, [r2, #4]
 8002d10:	3a01      	subs	r2, #1
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	430a      	orrs	r2, r1
 8002d16:	4921      	ldr	r1, [pc, #132]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	610b      	str	r3, [r1, #16]
 8002d1c:	e014      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d1e:	4b1f      	ldr	r3, [pc, #124]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	4b21      	ldr	r3, [pc, #132]	; (8002da8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	4013      	ands	r3, r2
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6892      	ldr	r2, [r2, #8]
 8002d2a:	0211      	lsls	r1, r2, #8
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6952      	ldr	r2, [r2, #20]
 8002d30:	0852      	lsrs	r2, r2, #1
 8002d32:	3a01      	subs	r2, #1
 8002d34:	0652      	lsls	r2, r2, #25
 8002d36:	4311      	orrs	r1, r2
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6852      	ldr	r2, [r2, #4]
 8002d3c:	3a01      	subs	r2, #1
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	430a      	orrs	r2, r1
 8002d42:	4916      	ldr	r1, [pc, #88]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d54:	f7fe f8e4 	bl	8000f20 <HAL_GetTick>
 8002d58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d5a:	e009      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d5c:	f7fe f8e0 	bl	8000f20 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d902      	bls.n	8002d70 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d6e:	e005      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d70:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ef      	beq.n	8002d5c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <RCCEx_PLLSAI1_Config+0x1d8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3710      	adds	r7, #16
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	07ff800f 	.word	0x07ff800f
 8002da4:	ff9f800f 	.word	0xff9f800f
 8002da8:	f9ff800f 	.word	0xf9ff800f

08002dac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00e      	beq.n	8002de4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dc6:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	f003 0203 	and.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d103      	bne.n	8002dde <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d142      	bne.n	8002e64 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
 8002de2:	e03f      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d018      	beq.n	8002e1e <RCCEx_PLLSAI2_Config+0x72>
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d825      	bhi.n	8002e3c <RCCEx_PLLSAI2_Config+0x90>
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d002      	beq.n	8002dfa <RCCEx_PLLSAI2_Config+0x4e>
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d009      	beq.n	8002e0c <RCCEx_PLLSAI2_Config+0x60>
 8002df8:	e020      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002dfa:	4b62      	ldr	r3, [pc, #392]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11d      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0a:	e01a      	b.n	8002e42 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e0c:	4b5d      	ldr	r3, [pc, #372]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d116      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e013      	b.n	8002e46 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e1e:	4b59      	ldr	r3, [pc, #356]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10f      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e2a:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e3a:	e006      	b.n	8002e4a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e004      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d108      	bne.n	8002e64 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002e52:	4b4c      	ldr	r3, [pc, #304]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f023 0203 	bic.w	r2, r3, #3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4949      	ldr	r1, [pc, #292]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 8086 	bne.w	8002f78 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e6c:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a44      	ldr	r2, [pc, #272]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e78:	f7fe f852 	bl	8000f20 <HAL_GetTick>
 8002e7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e7e:	e009      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e80:	f7fe f84e 	bl	8000f20 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d902      	bls.n	8002e94 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	73fb      	strb	r3, [r7, #15]
        break;
 8002e92:	e005      	b.n	8002ea0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e94:	4b3b      	ldr	r3, [pc, #236]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ef      	bne.n	8002e80 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d168      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d113      	bne.n	8002ed4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eac:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	4b35      	ldr	r3, [pc, #212]	; (8002f88 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6892      	ldr	r2, [r2, #8]
 8002eb8:	0211      	lsls	r1, r2, #8
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68d2      	ldr	r2, [r2, #12]
 8002ebe:	06d2      	lsls	r2, r2, #27
 8002ec0:	4311      	orrs	r1, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6852      	ldr	r2, [r2, #4]
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	492d      	ldr	r1, [pc, #180]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	614b      	str	r3, [r1, #20]
 8002ed2:	e02d      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d115      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eda:	4b2a      	ldr	r3, [pc, #168]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <RCCEx_PLLSAI2_Config+0x1e0>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6892      	ldr	r2, [r2, #8]
 8002ee6:	0211      	lsls	r1, r2, #8
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6912      	ldr	r2, [r2, #16]
 8002eec:	0852      	lsrs	r2, r2, #1
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	0552      	lsls	r2, r2, #21
 8002ef2:	4311      	orrs	r1, r2
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6852      	ldr	r2, [r2, #4]
 8002ef8:	3a01      	subs	r2, #1
 8002efa:	0112      	lsls	r2, r2, #4
 8002efc:	430a      	orrs	r2, r1
 8002efe:	4921      	ldr	r1, [pc, #132]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	614b      	str	r3, [r1, #20]
 8002f04:	e014      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f06:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6892      	ldr	r2, [r2, #8]
 8002f12:	0211      	lsls	r1, r2, #8
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6952      	ldr	r2, [r2, #20]
 8002f18:	0852      	lsrs	r2, r2, #1
 8002f1a:	3a01      	subs	r2, #1
 8002f1c:	0652      	lsls	r2, r2, #25
 8002f1e:	4311      	orrs	r1, r2
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	6852      	ldr	r2, [r2, #4]
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0112      	lsls	r2, r2, #4
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4916      	ldr	r1, [pc, #88]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fd fff0 	bl	8000f20 <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f44:	f7fd ffec 	bl	8000f20 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
          break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	07ff800f 	.word	0x07ff800f
 8002f8c:	ff9f800f 	.word	0xff9f800f
 8002f90:	f9ff800f 	.word	0xf9ff800f

08002f94 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d06c      	beq.n	8003080 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd fd8e 	bl	8000adc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	22ca      	movs	r2, #202	; 0xca
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2253      	movs	r2, #83	; 0x53
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f87c 	bl	80030d6 <RTC_EnterInitMode>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002fe2:	7bfb      	ldrb	r3, [r7, #15]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d14b      	bne.n	8003080 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6899      	ldr	r1, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	431a      	orrs	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	431a      	orrs	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68d2      	ldr	r2, [r2, #12]
 8003022:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6919      	ldr	r1, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	041a      	lsls	r2, r3, #16
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f87f 	bl	800313c <RTC_ExitInitMode>
 800303e:	4603      	mov	r3, r0
 8003040:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d11b      	bne.n	8003080 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0203 	bic.w	r2, r2, #3
 8003056:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030a0:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80030a2:	f7fd ff3d 	bl	8000f20 <HAL_GetTick>
 80030a6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030a8:	e009      	b.n	80030be <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80030aa:	f7fd ff39 	bl	8000f20 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b8:	d901      	bls.n	80030be <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e007      	b.n	80030ce <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0ee      	beq.n	80030aa <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030de:	2300      	movs	r3, #0
 80030e0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d120      	bne.n	8003132 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f04f 32ff 	mov.w	r2, #4294967295
 80030f8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80030fa:	f7fd ff11 	bl	8000f20 <HAL_GetTick>
 80030fe:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003100:	e00d      	b.n	800311e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003102:	f7fd ff0d 	bl	8000f20 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003110:	d905      	bls.n	800311e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2203      	movs	r2, #3
 800311a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <RTC_EnterInitMode+0x5c>
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d1e7      	bne.n	8003102 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <RTC_ExitInitMode+0x78>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <RTC_ExitInitMode+0x78>)
 800314e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003152:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003154:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <RTC_ExitInitMode+0x78>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff92 	bl	800308a <HAL_RTC_WaitForSynchro>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01e      	beq.n	80031aa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2203      	movs	r2, #3
 8003170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e017      	b.n	80031aa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <RTC_ExitInitMode+0x78>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <RTC_ExitInitMode+0x78>)
 8003180:	f023 0320 	bic.w	r3, r3, #32
 8003184:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ff7f 	bl	800308a <HAL_RTC_WaitForSynchro>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d005      	beq.n	800319e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2203      	movs	r2, #3
 8003196:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <RTC_ExitInitMode+0x78>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	4a04      	ldr	r2, [pc, #16]	; (80031b4 <RTC_ExitInitMode+0x78>)
 80031a4:	f043 0320 	orr.w	r3, r3, #32
 80031a8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40002800 	.word	0x40002800

080031b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e049      	b.n	800325e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f841 	bl	8003266 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f000 f9f8 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d001      	beq.n	8003294 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e04f      	b.n	8003334 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a23      	ldr	r2, [pc, #140]	; (8003340 <HAL_TIM_Base_Start_IT+0xc4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d01d      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0x76>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032be:	d018      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0x76>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <HAL_TIM_Base_Start_IT+0xc8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d013      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0x76>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <HAL_TIM_Base_Start_IT+0xcc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0x76>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a1c      	ldr	r2, [pc, #112]	; (800334c <HAL_TIM_Base_Start_IT+0xd0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d009      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0x76>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a1b      	ldr	r2, [pc, #108]	; (8003350 <HAL_TIM_Base_Start_IT+0xd4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d004      	beq.n	80032f2 <HAL_TIM_Base_Start_IT+0x76>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <HAL_TIM_Base_Start_IT+0xd8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d115      	bne.n	800331e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	4b17      	ldr	r3, [pc, #92]	; (8003358 <HAL_TIM_Base_Start_IT+0xdc>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b06      	cmp	r3, #6
 8003302:	d015      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0xb4>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330a:	d011      	beq.n	8003330 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800331c:	e008      	b.n	8003330 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0201 	orr.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e000      	b.n	8003332 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003330:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40012c00 	.word	0x40012c00
 8003344:	40000400 	.word	0x40000400
 8003348:	40000800 	.word	0x40000800
 800334c:	40000c00 	.word	0x40000c00
 8003350:	40013400 	.word	0x40013400
 8003354:	40014000 	.word	0x40014000
 8003358:	00010007 	.word	0x00010007

0800335c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b02      	cmp	r3, #2
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b02      	cmp	r3, #2
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0202 	mvn.w	r2, #2
 8003388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f003 0303 	and.w	r3, r3, #3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f905 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8f7 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f908 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d122      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d11b      	bne.n	800340c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0204 	mvn.w	r2, #4
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2202      	movs	r2, #2
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f8db 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f8cd 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8de 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b08      	cmp	r3, #8
 8003418:	d122      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	f003 0308 	and.w	r3, r3, #8
 8003424:	2b08      	cmp	r3, #8
 8003426:	d11b      	bne.n	8003460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0208 	mvn.w	r2, #8
 8003430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8b1 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f8a3 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8b4 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d122      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f003 0310 	and.w	r3, r3, #16
 8003478:	2b10      	cmp	r3, #16
 800347a:	d11b      	bne.n	80034b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f06f 0210 	mvn.w	r2, #16
 8003484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2208      	movs	r2, #8
 800348a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f887 	bl	80035ae <HAL_TIM_IC_CaptureCallback>
 80034a0:	e005      	b.n	80034ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f879 	bl	800359a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a8:	6878      	ldr	r0, [r7, #4]
 80034aa:	f000 f88a 	bl	80035c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d10e      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d107      	bne.n	80034e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f06f 0201 	mvn.w	r2, #1
 80034d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fac2 	bl	8000a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ea:	2b80      	cmp	r3, #128	; 0x80
 80034ec:	d10e      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f8:	2b80      	cmp	r3, #128	; 0x80
 80034fa:	d107      	bne.n	800350c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f914 	bl	8003734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351a:	d10e      	bne.n	800353a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b80      	cmp	r3, #128	; 0x80
 8003528:	d107      	bne.n	800353a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f907 	bl	8003748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	d10e      	bne.n	8003566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d107      	bne.n	8003566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800355e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f000 f838 	bl	80035d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b20      	cmp	r3, #32
 8003572:	d10e      	bne.n	8003592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b20      	cmp	r3, #32
 8003580:	d107      	bne.n	8003592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f06f 0220 	mvn.w	r2, #32
 800358a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f8c7 	bl	8003720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
	...

080035ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a40      	ldr	r2, [pc, #256]	; (8003700 <TIM_Base_SetConfig+0x114>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d00f      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a3d      	ldr	r2, [pc, #244]	; (8003704 <TIM_Base_SetConfig+0x118>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00b      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a3c      	ldr	r2, [pc, #240]	; (8003708 <TIM_Base_SetConfig+0x11c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d007      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a3b      	ldr	r2, [pc, #236]	; (800370c <TIM_Base_SetConfig+0x120>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_Base_SetConfig+0x40>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a3a      	ldr	r2, [pc, #232]	; (8003710 <TIM_Base_SetConfig+0x124>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d108      	bne.n	800363e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <TIM_Base_SetConfig+0x114>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d01f      	beq.n	8003686 <TIM_Base_SetConfig+0x9a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364c:	d01b      	beq.n	8003686 <TIM_Base_SetConfig+0x9a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <TIM_Base_SetConfig+0x118>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d017      	beq.n	8003686 <TIM_Base_SetConfig+0x9a>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <TIM_Base_SetConfig+0x11c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <TIM_Base_SetConfig+0x9a>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a2a      	ldr	r2, [pc, #168]	; (800370c <TIM_Base_SetConfig+0x120>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d00f      	beq.n	8003686 <TIM_Base_SetConfig+0x9a>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a29      	ldr	r2, [pc, #164]	; (8003710 <TIM_Base_SetConfig+0x124>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d00b      	beq.n	8003686 <TIM_Base_SetConfig+0x9a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a28      	ldr	r2, [pc, #160]	; (8003714 <TIM_Base_SetConfig+0x128>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d007      	beq.n	8003686 <TIM_Base_SetConfig+0x9a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <TIM_Base_SetConfig+0x12c>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d003      	beq.n	8003686 <TIM_Base_SetConfig+0x9a>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a26      	ldr	r2, [pc, #152]	; (800371c <TIM_Base_SetConfig+0x130>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d108      	bne.n	8003698 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800368c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a10      	ldr	r2, [pc, #64]	; (8003700 <TIM_Base_SetConfig+0x114>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00f      	beq.n	80036e4 <TIM_Base_SetConfig+0xf8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <TIM_Base_SetConfig+0x124>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00b      	beq.n	80036e4 <TIM_Base_SetConfig+0xf8>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a11      	ldr	r2, [pc, #68]	; (8003714 <TIM_Base_SetConfig+0x128>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d007      	beq.n	80036e4 <TIM_Base_SetConfig+0xf8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a10      	ldr	r2, [pc, #64]	; (8003718 <TIM_Base_SetConfig+0x12c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0xf8>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a0f      	ldr	r2, [pc, #60]	; (800371c <TIM_Base_SetConfig+0x130>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d103      	bne.n	80036ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	691a      	ldr	r2, [r3, #16]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	615a      	str	r2, [r3, #20]
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40013400 	.word	0x40013400
 8003714:	40014000 	.word	0x40014000
 8003718:	40014400 	.word	0x40014400
 800371c:	40014800 	.word	0x40014800

08003720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e042      	b.n	80037f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7fd f9dd 	bl	8000b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2224      	movs	r2, #36	; 0x24
 800378a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fbba 	bl	8003f18 <UART_SetConfig>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d101      	bne.n	80037ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e022      	b.n	80037f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fe76 	bl	80044a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fefd 	bl	80045ec <UART_CheckIdleState>
 80037f2:	4603      	mov	r3, r0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	4613      	mov	r3, r2
 8003808:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	2b20      	cmp	r3, #32
 8003812:	d142      	bne.n	800389a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_UART_Receive_IT+0x24>
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e03b      	b.n	800389c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_UART_Receive_IT+0x36>
 800382e:	2302      	movs	r3, #2
 8003830:	e034      	b.n	800389c <HAL_UART_Receive_IT+0xa0>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_UART_Receive_IT+0xa8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d018      	beq.n	800388a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	613b      	str	r3, [r7, #16]
   return(result);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	461a      	mov	r2, r3
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	69f9      	ldr	r1, [r7, #28]
 800387c:	6a3a      	ldr	r2, [r7, #32]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	61bb      	str	r3, [r7, #24]
   return(result);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e6      	bne.n	8003858 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800388a:	88fb      	ldrh	r3, [r7, #6]
 800388c:	461a      	mov	r2, r3
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 ffbf 	bl	8004814 <UART_Start_Receive_IT>
 8003896:	4603      	mov	r3, r0
 8003898:	e000      	b.n	800389c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800389a:	2302      	movs	r3, #2
  }
}
 800389c:	4618      	mov	r0, r3
 800389e:	3728      	adds	r7, #40	; 0x28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	40008000 	.word	0x40008000

080038a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b0ba      	sub	sp, #232	; 0xe8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80038ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80038d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80038d6:	4013      	ands	r3, r2
 80038d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80038dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d11b      	bne.n	800391c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80038fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 82d6 	beq.w	8003ebe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
      }
      return;
 800391a:	e2d0      	b.n	8003ebe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800391c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 811f 	beq.w	8003b64 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003926:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_UART_IRQHandler+0x2b0>)
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d106      	bne.n	8003940 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003932:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003936:	4b89      	ldr	r3, [pc, #548]	; (8003b5c <HAL_UART_IRQHandler+0x2b4>)
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 8112 	beq.w	8003b64 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d011      	beq.n	8003970 <HAL_UART_IRQHandler+0xc8>
 800394c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d011      	beq.n	80039a0 <HAL_UART_IRQHandler+0xf8>
 800397c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2202      	movs	r2, #2
 800398e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003996:	f043 0204 	orr.w	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d011      	beq.n	80039d0 <HAL_UART_IRQHandler+0x128>
 80039ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2204      	movs	r2, #4
 80039be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c6:	f043 0202 	orr.w	r2, r3, #2
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80039d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d017      	beq.n	8003a0c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80039e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80039ec:	4b5a      	ldr	r3, [pc, #360]	; (8003b58 <HAL_UART_IRQHandler+0x2b0>)
 80039ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00b      	beq.n	8003a0c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2208      	movs	r2, #8
 80039fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a02:	f043 0208 	orr.w	r2, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <HAL_UART_IRQHandler+0x196>
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00c      	beq.n	8003a3e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 823c 	beq.w	8003ec2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d013      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b40      	cmp	r3, #64	; 0x40
 8003a94:	d005      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003a9a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04f      	beq.n	8003b42 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 ffe0 	bl	8004a68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b40      	cmp	r3, #64	; 0x40
 8003ab4:	d141      	bne.n	8003b3a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	3308      	adds	r3, #8
 8003abc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003acc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3308      	adds	r3, #8
 8003ade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003aee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003afa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1d9      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d013      	beq.n	8003b32 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0e:	4a14      	ldr	r2, [pc, #80]	; (8003b60 <HAL_UART_IRQHandler+0x2b8>)
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd fb4c 	bl	80011b4 <HAL_DMA_Abort_IT>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d017      	beq.n	8003b52 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003b2c:	4610      	mov	r0, r2
 8003b2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b30:	e00f      	b.n	8003b52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9da 	bl	8003eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b38:	e00b      	b.n	8003b52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9d6 	bl	8003eec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b40:	e007      	b.n	8003b52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9d2 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003b50:	e1b7      	b.n	8003ec2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b52:	bf00      	nop
    return;
 8003b54:	e1b5      	b.n	8003ec2 <HAL_UART_IRQHandler+0x61a>
 8003b56:	bf00      	nop
 8003b58:	10000001 	.word	0x10000001
 8003b5c:	04000120 	.word	0x04000120
 8003b60:	08004b35 	.word	0x08004b35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 814a 	bne.w	8003e02 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8143 	beq.w	8003e02 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 813c 	beq.w	8003e02 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2210      	movs	r2, #16
 8003b90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	f040 80b5 	bne.w	8003d0c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8187 	beq.w	8003ec6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	f080 817f 	bcs.w	8003ec6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 8086 	bne.w	8003cf0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bf0:	e853 3f00 	ldrex	r3, [r3]
 8003bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1da      	bne.n	8003be4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3308      	adds	r3, #8
 8003c34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e1      	bne.n	8003c2e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3308      	adds	r3, #8
 8003c70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c74:	e853 3f00 	ldrex	r3, [r3]
 8003c78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3308      	adds	r3, #8
 8003c8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003c8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003c94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c96:	e841 2300 	strex	r3, r2, [r1]
 8003c9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003c9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1e3      	bne.n	8003c6a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc0:	f023 0310 	bic.w	r3, r3, #16
 8003cc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cda:	e841 2300 	strex	r3, r2, [r1]
 8003cde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1e4      	bne.n	8003cb0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fd fa06 	bl	80010fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8fb 	bl	8003f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003d0a:	e0dc      	b.n	8003ec6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80ce 	beq.w	8003eca <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003d2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80c9 	beq.w	8003eca <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	461a      	mov	r2, r3
 8003d56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e4      	bne.n	8003d38 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3308      	adds	r3, #8
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	3308      	adds	r3, #8
 8003d92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003d96:	633a      	str	r2, [r7, #48]	; 0x30
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d9e:	e841 2300 	strex	r3, r2, [r1]
 8003da2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e1      	bne.n	8003d6e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0310 	bic.w	r3, r3, #16
 8003dd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	69b9      	ldr	r1, [r7, #24]
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	617b      	str	r3, [r7, #20]
   return(result);
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e4      	bne.n	8003dbe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003df4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003df8:	4619      	mov	r1, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f880 	bl	8003f00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003e00:	e063      	b.n	8003eca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00e      	beq.n	8003e2c <HAL_UART_IRQHandler+0x584>
 8003e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d008      	beq.n	8003e2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003e22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f001 fb2b 	bl	8005480 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003e2a:	e051      	b.n	8003ed0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d014      	beq.n	8003e62 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d105      	bne.n	8003e50 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d03a      	beq.n	8003ece <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	4798      	blx	r3
    }
    return;
 8003e60:	e035      	b.n	8003ece <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d009      	beq.n	8003e82 <HAL_UART_IRQHandler+0x5da>
 8003e6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fe70 	bl	8004b60 <UART_EndTransmit_IT>
    return;
 8003e80:	e026      	b.n	8003ed0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x5fa>
 8003e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f001 fb04 	bl	80054a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ea0:	e016      	b.n	8003ed0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d010      	beq.n	8003ed0 <HAL_UART_IRQHandler+0x628>
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	da0c      	bge.n	8003ed0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f001 faec 	bl	8005494 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003ebc:	e008      	b.n	8003ed0 <HAL_UART_IRQHandler+0x628>
      return;
 8003ebe:	bf00      	nop
 8003ec0:	e006      	b.n	8003ed0 <HAL_UART_IRQHandler+0x628>
    return;
 8003ec2:	bf00      	nop
 8003ec4:	e004      	b.n	8003ed0 <HAL_UART_IRQHandler+0x628>
      return;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <HAL_UART_IRQHandler+0x628>
      return;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HAL_UART_IRQHandler+0x628>
    return;
 8003ece:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ed0:	37e8      	adds	r7, #232	; 0xe8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop

08003ed8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f18:	b5b0      	push	{r4, r5, r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4bb1      	ldr	r3, [pc, #708]	; (8004208 <UART_SetConfig+0x2f0>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	69f9      	ldr	r1, [r7, #28]
 8003f4c:	430b      	orrs	r3, r1
 8003f4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4aa6      	ldr	r2, [pc, #664]	; (800420c <UART_SetConfig+0x2f4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d004      	beq.n	8003f80 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	69f9      	ldr	r1, [r7, #28]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9e:	f023 010f 	bic.w	r1, r3, #15
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a97      	ldr	r2, [pc, #604]	; (8004210 <UART_SetConfig+0x2f8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d120      	bne.n	8003ffa <UART_SetConfig+0xe2>
 8003fb8:	4b96      	ldr	r3, [pc, #600]	; (8004214 <UART_SetConfig+0x2fc>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b03      	cmp	r3, #3
 8003fc4:	d816      	bhi.n	8003ff4 <UART_SetConfig+0xdc>
 8003fc6:	a201      	add	r2, pc, #4	; (adr r2, 8003fcc <UART_SetConfig+0xb4>)
 8003fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fcc:	08003fdd 	.word	0x08003fdd
 8003fd0:	08003fe9 	.word	0x08003fe9
 8003fd4:	08003fe3 	.word	0x08003fe3
 8003fd8:	08003fef 	.word	0x08003fef
 8003fdc:	2301      	movs	r3, #1
 8003fde:	76fb      	strb	r3, [r7, #27]
 8003fe0:	e0e7      	b.n	80041b2 <UART_SetConfig+0x29a>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	76fb      	strb	r3, [r7, #27]
 8003fe6:	e0e4      	b.n	80041b2 <UART_SetConfig+0x29a>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	76fb      	strb	r3, [r7, #27]
 8003fec:	e0e1      	b.n	80041b2 <UART_SetConfig+0x29a>
 8003fee:	2308      	movs	r3, #8
 8003ff0:	76fb      	strb	r3, [r7, #27]
 8003ff2:	e0de      	b.n	80041b2 <UART_SetConfig+0x29a>
 8003ff4:	2310      	movs	r3, #16
 8003ff6:	76fb      	strb	r3, [r7, #27]
 8003ff8:	e0db      	b.n	80041b2 <UART_SetConfig+0x29a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a86      	ldr	r2, [pc, #536]	; (8004218 <UART_SetConfig+0x300>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d132      	bne.n	800406a <UART_SetConfig+0x152>
 8004004:	4b83      	ldr	r3, [pc, #524]	; (8004214 <UART_SetConfig+0x2fc>)
 8004006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400a:	f003 030c 	and.w	r3, r3, #12
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d828      	bhi.n	8004064 <UART_SetConfig+0x14c>
 8004012:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <UART_SetConfig+0x100>)
 8004014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004018:	0800404d 	.word	0x0800404d
 800401c:	08004065 	.word	0x08004065
 8004020:	08004065 	.word	0x08004065
 8004024:	08004065 	.word	0x08004065
 8004028:	08004059 	.word	0x08004059
 800402c:	08004065 	.word	0x08004065
 8004030:	08004065 	.word	0x08004065
 8004034:	08004065 	.word	0x08004065
 8004038:	08004053 	.word	0x08004053
 800403c:	08004065 	.word	0x08004065
 8004040:	08004065 	.word	0x08004065
 8004044:	08004065 	.word	0x08004065
 8004048:	0800405f 	.word	0x0800405f
 800404c:	2300      	movs	r3, #0
 800404e:	76fb      	strb	r3, [r7, #27]
 8004050:	e0af      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004052:	2302      	movs	r3, #2
 8004054:	76fb      	strb	r3, [r7, #27]
 8004056:	e0ac      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004058:	2304      	movs	r3, #4
 800405a:	76fb      	strb	r3, [r7, #27]
 800405c:	e0a9      	b.n	80041b2 <UART_SetConfig+0x29a>
 800405e:	2308      	movs	r3, #8
 8004060:	76fb      	strb	r3, [r7, #27]
 8004062:	e0a6      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004064:	2310      	movs	r3, #16
 8004066:	76fb      	strb	r3, [r7, #27]
 8004068:	e0a3      	b.n	80041b2 <UART_SetConfig+0x29a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6b      	ldr	r2, [pc, #428]	; (800421c <UART_SetConfig+0x304>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d120      	bne.n	80040b6 <UART_SetConfig+0x19e>
 8004074:	4b67      	ldr	r3, [pc, #412]	; (8004214 <UART_SetConfig+0x2fc>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800407e:	2b30      	cmp	r3, #48	; 0x30
 8004080:	d013      	beq.n	80040aa <UART_SetConfig+0x192>
 8004082:	2b30      	cmp	r3, #48	; 0x30
 8004084:	d814      	bhi.n	80040b0 <UART_SetConfig+0x198>
 8004086:	2b20      	cmp	r3, #32
 8004088:	d009      	beq.n	800409e <UART_SetConfig+0x186>
 800408a:	2b20      	cmp	r3, #32
 800408c:	d810      	bhi.n	80040b0 <UART_SetConfig+0x198>
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <UART_SetConfig+0x180>
 8004092:	2b10      	cmp	r3, #16
 8004094:	d006      	beq.n	80040a4 <UART_SetConfig+0x18c>
 8004096:	e00b      	b.n	80040b0 <UART_SetConfig+0x198>
 8004098:	2300      	movs	r3, #0
 800409a:	76fb      	strb	r3, [r7, #27]
 800409c:	e089      	b.n	80041b2 <UART_SetConfig+0x29a>
 800409e:	2302      	movs	r3, #2
 80040a0:	76fb      	strb	r3, [r7, #27]
 80040a2:	e086      	b.n	80041b2 <UART_SetConfig+0x29a>
 80040a4:	2304      	movs	r3, #4
 80040a6:	76fb      	strb	r3, [r7, #27]
 80040a8:	e083      	b.n	80041b2 <UART_SetConfig+0x29a>
 80040aa:	2308      	movs	r3, #8
 80040ac:	76fb      	strb	r3, [r7, #27]
 80040ae:	e080      	b.n	80041b2 <UART_SetConfig+0x29a>
 80040b0:	2310      	movs	r3, #16
 80040b2:	76fb      	strb	r3, [r7, #27]
 80040b4:	e07d      	b.n	80041b2 <UART_SetConfig+0x29a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a59      	ldr	r2, [pc, #356]	; (8004220 <UART_SetConfig+0x308>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d120      	bne.n	8004102 <UART_SetConfig+0x1ea>
 80040c0:	4b54      	ldr	r3, [pc, #336]	; (8004214 <UART_SetConfig+0x2fc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040ca:	2bc0      	cmp	r3, #192	; 0xc0
 80040cc:	d013      	beq.n	80040f6 <UART_SetConfig+0x1de>
 80040ce:	2bc0      	cmp	r3, #192	; 0xc0
 80040d0:	d814      	bhi.n	80040fc <UART_SetConfig+0x1e4>
 80040d2:	2b80      	cmp	r3, #128	; 0x80
 80040d4:	d009      	beq.n	80040ea <UART_SetConfig+0x1d2>
 80040d6:	2b80      	cmp	r3, #128	; 0x80
 80040d8:	d810      	bhi.n	80040fc <UART_SetConfig+0x1e4>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <UART_SetConfig+0x1cc>
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d006      	beq.n	80040f0 <UART_SetConfig+0x1d8>
 80040e2:	e00b      	b.n	80040fc <UART_SetConfig+0x1e4>
 80040e4:	2300      	movs	r3, #0
 80040e6:	76fb      	strb	r3, [r7, #27]
 80040e8:	e063      	b.n	80041b2 <UART_SetConfig+0x29a>
 80040ea:	2302      	movs	r3, #2
 80040ec:	76fb      	strb	r3, [r7, #27]
 80040ee:	e060      	b.n	80041b2 <UART_SetConfig+0x29a>
 80040f0:	2304      	movs	r3, #4
 80040f2:	76fb      	strb	r3, [r7, #27]
 80040f4:	e05d      	b.n	80041b2 <UART_SetConfig+0x29a>
 80040f6:	2308      	movs	r3, #8
 80040f8:	76fb      	strb	r3, [r7, #27]
 80040fa:	e05a      	b.n	80041b2 <UART_SetConfig+0x29a>
 80040fc:	2310      	movs	r3, #16
 80040fe:	76fb      	strb	r3, [r7, #27]
 8004100:	e057      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a47      	ldr	r2, [pc, #284]	; (8004224 <UART_SetConfig+0x30c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d125      	bne.n	8004158 <UART_SetConfig+0x240>
 800410c:	4b41      	ldr	r3, [pc, #260]	; (8004214 <UART_SetConfig+0x2fc>)
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800411a:	d017      	beq.n	800414c <UART_SetConfig+0x234>
 800411c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004120:	d817      	bhi.n	8004152 <UART_SetConfig+0x23a>
 8004122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004126:	d00b      	beq.n	8004140 <UART_SetConfig+0x228>
 8004128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800412c:	d811      	bhi.n	8004152 <UART_SetConfig+0x23a>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <UART_SetConfig+0x222>
 8004132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004136:	d006      	beq.n	8004146 <UART_SetConfig+0x22e>
 8004138:	e00b      	b.n	8004152 <UART_SetConfig+0x23a>
 800413a:	2300      	movs	r3, #0
 800413c:	76fb      	strb	r3, [r7, #27]
 800413e:	e038      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004140:	2302      	movs	r3, #2
 8004142:	76fb      	strb	r3, [r7, #27]
 8004144:	e035      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004146:	2304      	movs	r3, #4
 8004148:	76fb      	strb	r3, [r7, #27]
 800414a:	e032      	b.n	80041b2 <UART_SetConfig+0x29a>
 800414c:	2308      	movs	r3, #8
 800414e:	76fb      	strb	r3, [r7, #27]
 8004150:	e02f      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004152:	2310      	movs	r3, #16
 8004154:	76fb      	strb	r3, [r7, #27]
 8004156:	e02c      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a2b      	ldr	r2, [pc, #172]	; (800420c <UART_SetConfig+0x2f4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d125      	bne.n	80041ae <UART_SetConfig+0x296>
 8004162:	4b2c      	ldr	r3, [pc, #176]	; (8004214 <UART_SetConfig+0x2fc>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800416c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004170:	d017      	beq.n	80041a2 <UART_SetConfig+0x28a>
 8004172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004176:	d817      	bhi.n	80041a8 <UART_SetConfig+0x290>
 8004178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800417c:	d00b      	beq.n	8004196 <UART_SetConfig+0x27e>
 800417e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004182:	d811      	bhi.n	80041a8 <UART_SetConfig+0x290>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <UART_SetConfig+0x278>
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418c:	d006      	beq.n	800419c <UART_SetConfig+0x284>
 800418e:	e00b      	b.n	80041a8 <UART_SetConfig+0x290>
 8004190:	2300      	movs	r3, #0
 8004192:	76fb      	strb	r3, [r7, #27]
 8004194:	e00d      	b.n	80041b2 <UART_SetConfig+0x29a>
 8004196:	2302      	movs	r3, #2
 8004198:	76fb      	strb	r3, [r7, #27]
 800419a:	e00a      	b.n	80041b2 <UART_SetConfig+0x29a>
 800419c:	2304      	movs	r3, #4
 800419e:	76fb      	strb	r3, [r7, #27]
 80041a0:	e007      	b.n	80041b2 <UART_SetConfig+0x29a>
 80041a2:	2308      	movs	r3, #8
 80041a4:	76fb      	strb	r3, [r7, #27]
 80041a6:	e004      	b.n	80041b2 <UART_SetConfig+0x29a>
 80041a8:	2310      	movs	r3, #16
 80041aa:	76fb      	strb	r3, [r7, #27]
 80041ac:	e001      	b.n	80041b2 <UART_SetConfig+0x29a>
 80041ae:	2310      	movs	r3, #16
 80041b0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a15      	ldr	r2, [pc, #84]	; (800420c <UART_SetConfig+0x2f4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	f040 809f 	bne.w	80042fc <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041be:	7efb      	ldrb	r3, [r7, #27]
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d837      	bhi.n	8004234 <UART_SetConfig+0x31c>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0x2b4>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	080041f1 	.word	0x080041f1
 80041d0:	08004235 	.word	0x08004235
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	08004235 	.word	0x08004235
 80041dc:	080041ff 	.word	0x080041ff
 80041e0:	08004235 	.word	0x08004235
 80041e4:	08004235 	.word	0x08004235
 80041e8:	08004235 	.word	0x08004235
 80041ec:	0800422d 	.word	0x0800422d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041f0:	f7fe f898 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 80041f4:	6178      	str	r0, [r7, #20]
        break;
 80041f6:	e022      	b.n	800423e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f8:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <UART_SetConfig+0x310>)
 80041fa:	617b      	str	r3, [r7, #20]
        break;
 80041fc:	e01f      	b.n	800423e <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fe:	f7fd fff9 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8004202:	6178      	str	r0, [r7, #20]
        break;
 8004204:	e01b      	b.n	800423e <UART_SetConfig+0x326>
 8004206:	bf00      	nop
 8004208:	cfff69f3 	.word	0xcfff69f3
 800420c:	40008000 	.word	0x40008000
 8004210:	40013800 	.word	0x40013800
 8004214:	40021000 	.word	0x40021000
 8004218:	40004400 	.word	0x40004400
 800421c:	40004800 	.word	0x40004800
 8004220:	40004c00 	.word	0x40004c00
 8004224:	40005000 	.word	0x40005000
 8004228:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004230:	617b      	str	r3, [r7, #20]
        break;
 8004232:	e004      	b.n	800423e <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	76bb      	strb	r3, [r7, #26]
        break;
 800423c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 8119 	beq.w	8004478 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	4a95      	ldr	r2, [pc, #596]	; (80044a0 <UART_SetConfig+0x588>)
 800424c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004250:	461a      	mov	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	fbb3 f3f2 	udiv	r3, r3, r2
 8004258:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	4413      	add	r3, r2
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	d305      	bcc.n	8004276 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d902      	bls.n	800427c <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	76bb      	strb	r3, [r7, #26]
 800427a:	e0fd      	b.n	8004478 <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4618      	mov	r0, r3
 8004280:	f04f 0100 	mov.w	r1, #0
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004288:	4a85      	ldr	r2, [pc, #532]	; (80044a0 <UART_SetConfig+0x588>)
 800428a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800428e:	b29a      	uxth	r2, r3
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	f7fb fffe 	bl	8000294 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4610      	mov	r0, r2
 800429e:	4619      	mov	r1, r3
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	020b      	lsls	r3, r1, #8
 80042aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80042ae:	0202      	lsls	r2, r0, #8
 80042b0:	6879      	ldr	r1, [r7, #4]
 80042b2:	6849      	ldr	r1, [r1, #4]
 80042b4:	0849      	lsrs	r1, r1, #1
 80042b6:	4608      	mov	r0, r1
 80042b8:	f04f 0100 	mov.w	r1, #0
 80042bc:	1814      	adds	r4, r2, r0
 80042be:	eb43 0501 	adc.w	r5, r3, r1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	461a      	mov	r2, r3
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	4620      	mov	r0, r4
 80042ce:	4629      	mov	r1, r5
 80042d0:	f7fb ffe0 	bl	8000294 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042e2:	d308      	bcc.n	80042f6 <UART_SetConfig+0x3de>
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ea:	d204      	bcs.n	80042f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	60da      	str	r2, [r3, #12]
 80042f4:	e0c0      	b.n	8004478 <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	76bb      	strb	r3, [r7, #26]
 80042fa:	e0bd      	b.n	8004478 <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004304:	d164      	bne.n	80043d0 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 8004306:	7efb      	ldrb	r3, [r7, #27]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d828      	bhi.n	800435e <UART_SetConfig+0x446>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <UART_SetConfig+0x3fc>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004339 	.word	0x08004339
 8004318:	08004341 	.word	0x08004341
 800431c:	08004349 	.word	0x08004349
 8004320:	0800435f 	.word	0x0800435f
 8004324:	0800434f 	.word	0x0800434f
 8004328:	0800435f 	.word	0x0800435f
 800432c:	0800435f 	.word	0x0800435f
 8004330:	0800435f 	.word	0x0800435f
 8004334:	08004357 	.word	0x08004357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004338:	f7fd fff4 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 800433c:	6178      	str	r0, [r7, #20]
        break;
 800433e:	e013      	b.n	8004368 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004340:	f7fe f806 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 8004344:	6178      	str	r0, [r7, #20]
        break;
 8004346:	e00f      	b.n	8004368 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004348:	4b56      	ldr	r3, [pc, #344]	; (80044a4 <UART_SetConfig+0x58c>)
 800434a:	617b      	str	r3, [r7, #20]
        break;
 800434c:	e00c      	b.n	8004368 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434e:	f7fd ff51 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8004352:	6178      	str	r0, [r7, #20]
        break;
 8004354:	e008      	b.n	8004368 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435a:	617b      	str	r3, [r7, #20]
        break;
 800435c:	e004      	b.n	8004368 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	76bb      	strb	r3, [r7, #26]
        break;
 8004366:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 8084 	beq.w	8004478 <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	4a4a      	ldr	r2, [pc, #296]	; (80044a0 <UART_SetConfig+0x588>)
 8004376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800437a:	461a      	mov	r2, r3
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004382:	005a      	lsls	r2, r3, #1
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	085b      	lsrs	r3, r3, #1
 800438a:	441a      	add	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b0f      	cmp	r3, #15
 800439a:	d916      	bls.n	80043ca <UART_SetConfig+0x4b2>
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a2:	d212      	bcs.n	80043ca <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	f023 030f 	bic.w	r3, r3, #15
 80043ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	b29a      	uxth	r2, r3
 80043ba:	89fb      	ldrh	r3, [r7, #14]
 80043bc:	4313      	orrs	r3, r2
 80043be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	89fa      	ldrh	r2, [r7, #14]
 80043c6:	60da      	str	r2, [r3, #12]
 80043c8:	e056      	b.n	8004478 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	76bb      	strb	r3, [r7, #26]
 80043ce:	e053      	b.n	8004478 <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043d0:	7efb      	ldrb	r3, [r7, #27]
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d827      	bhi.n	8004426 <UART_SetConfig+0x50e>
 80043d6:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x4c4>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004409 	.word	0x08004409
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004427 	.word	0x08004427
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004427 	.word	0x08004427
 80043f4:	08004427 	.word	0x08004427
 80043f8:	08004427 	.word	0x08004427
 80043fc:	0800441f 	.word	0x0800441f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7fd ff90 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 8004404:	6178      	str	r0, [r7, #20]
        break;
 8004406:	e013      	b.n	8004430 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7fd ffa2 	bl	8002350 <HAL_RCC_GetPCLK2Freq>
 800440c:	6178      	str	r0, [r7, #20]
        break;
 800440e:	e00f      	b.n	8004430 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004410:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <UART_SetConfig+0x58c>)
 8004412:	617b      	str	r3, [r7, #20]
        break;
 8004414:	e00c      	b.n	8004430 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004416:	f7fd feed 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800441a:	6178      	str	r0, [r7, #20]
        break;
 800441c:	e008      	b.n	8004430 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004422:	617b      	str	r3, [r7, #20]
        break;
 8004424:	e004      	b.n	8004430 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	76bb      	strb	r3, [r7, #26]
        break;
 800442e:	bf00      	nop
    }

    if (pclk != 0U)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d020      	beq.n	8004478 <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443a:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <UART_SetConfig+0x588>)
 800443c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004440:	461a      	mov	r2, r3
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	fbb3 f2f2 	udiv	r2, r3, r2
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	085b      	lsrs	r3, r3, #1
 800444e:	441a      	add	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	fbb2 f3f3 	udiv	r3, r2, r3
 8004458:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b0f      	cmp	r3, #15
 800445e:	d909      	bls.n	8004474 <UART_SetConfig+0x55c>
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004466:	d205      	bcs.n	8004474 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	b29a      	uxth	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60da      	str	r2, [r3, #12]
 8004472:	e001      	b.n	8004478 <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004494:	7ebb      	ldrb	r3, [r7, #26]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	bdb0      	pop	{r4, r5, r7, pc}
 800449e:	bf00      	nop
 80044a0:	0800a318 	.word	0x0800a318
 80044a4:	00f42400 	.word	0x00f42400

080044a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00a      	beq.n	80044d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00a      	beq.n	80044f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d00a      	beq.n	8004516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00a      	beq.n	800455a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00a      	beq.n	800457c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01a      	beq.n	80045be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a6:	d10a      	bne.n	80045be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  }
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b086      	sub	sp, #24
 80045f0:	af02      	add	r7, sp, #8
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045fc:	f7fc fc90 	bl	8000f20 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0308 	and.w	r3, r3, #8
 800460c:	2b08      	cmp	r3, #8
 800460e:	d10e      	bne.n	800462e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004614:	9300      	str	r3, [sp, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f82f 	bl	8004682 <UART_WaitOnFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e025      	b.n	800467a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d10e      	bne.n	800465a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800463c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f819 	bl	8004682 <UART_WaitOnFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e00f      	b.n	800467a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2220      	movs	r2, #32
 800465e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004678:	2300      	movs	r3, #0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b09c      	sub	sp, #112	; 0x70
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004692:	e0a9      	b.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	f000 80a5 	beq.w	80047e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469e:	f7fc fc3f 	bl	8000f20 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80046ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d140      	bne.n	8004736 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046c8:	667b      	str	r3, [r7, #100]	; 0x64
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1e6      	bne.n	80046b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3308      	adds	r3, #8
 80046ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f8:	f023 0301 	bic.w	r3, r3, #1
 80046fc:	663b      	str	r3, [r7, #96]	; 0x60
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3308      	adds	r3, #8
 8004704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004706:	64ba      	str	r2, [r7, #72]	; 0x48
 8004708:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800470c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800470e:	e841 2300 	strex	r3, r2, [r1]
 8004712:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1e5      	bne.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e069      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d051      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d149      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477c:	637b      	str	r3, [r7, #52]	; 0x34
 800477e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e6      	bne.n	800475e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3308      	adds	r3, #8
 8004796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	613b      	str	r3, [r7, #16]
   return(result);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3308      	adds	r3, #8
 80047ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047b0:	623a      	str	r2, [r7, #32]
 80047b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	69f9      	ldr	r1, [r7, #28]
 80047b6:	6a3a      	ldr	r2, [r7, #32]
 80047b8:	e841 2300 	strex	r3, r2, [r1]
 80047bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e5      	bne.n	8004790 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e010      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	429a      	cmp	r2, r3
 8004804:	f43f af46 	beq.w	8004694 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3770      	adds	r7, #112	; 0x70
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004814:	b480      	push	{r7}
 8004816:	b0a3      	sub	sp, #140	; 0x8c
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	88fa      	ldrh	r2, [r7, #6]
 800482c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	88fa      	ldrh	r2, [r7, #6]
 8004834:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2200      	movs	r2, #0
 800483c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004846:	d10e      	bne.n	8004866 <UART_Start_Receive_IT+0x52>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <UART_Start_Receive_IT+0x48>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004856:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800485a:	e02d      	b.n	80048b8 <UART_Start_Receive_IT+0xa4>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	22ff      	movs	r2, #255	; 0xff
 8004860:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004864:	e028      	b.n	80048b8 <UART_Start_Receive_IT+0xa4>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <UART_Start_Receive_IT+0x76>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d104      	bne.n	8004880 <UART_Start_Receive_IT+0x6c>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	22ff      	movs	r2, #255	; 0xff
 800487a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800487e:	e01b      	b.n	80048b8 <UART_Start_Receive_IT+0xa4>
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	227f      	movs	r2, #127	; 0x7f
 8004884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004888:	e016      	b.n	80048b8 <UART_Start_Receive_IT+0xa4>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004892:	d10d      	bne.n	80048b0 <UART_Start_Receive_IT+0x9c>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <UART_Start_Receive_IT+0x92>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	227f      	movs	r2, #127	; 0x7f
 80048a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80048a4:	e008      	b.n	80048b8 <UART_Start_Receive_IT+0xa4>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	223f      	movs	r2, #63	; 0x3f
 80048aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80048ae:	e003      	b.n	80048b8 <UART_Start_Receive_IT+0xa4>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2222      	movs	r2, #34	; 0x22
 80048c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80048d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3308      	adds	r3, #8
 80048e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80048ec:	673a      	str	r2, [r7, #112]	; 0x70
 80048ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80048f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80048fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e3      	bne.n	80048c8 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004908:	d153      	bne.n	80049b2 <UART_Start_Receive_IT+0x19e>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004910:	88fa      	ldrh	r2, [r7, #6]
 8004912:	429a      	cmp	r2, r3
 8004914:	d34d      	bcc.n	80049b2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800491e:	d107      	bne.n	8004930 <UART_Start_Receive_IT+0x11c>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d103      	bne.n	8004930 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a4b      	ldr	r2, [pc, #300]	; (8004a58 <UART_Start_Receive_IT+0x244>)
 800492c:	671a      	str	r2, [r3, #112]	; 0x70
 800492e:	e002      	b.n	8004936 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a4a      	ldr	r2, [pc, #296]	; (8004a5c <UART_Start_Receive_IT+0x248>)
 8004934:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d01a      	beq.n	800497c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004968:	65fb      	str	r3, [r7, #92]	; 0x5c
 800496a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800496e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e4      	bne.n	8004946 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3308      	adds	r3, #8
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004992:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3308      	adds	r3, #8
 800499a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800499c:	64ba      	str	r2, [r7, #72]	; 0x48
 800499e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e5      	bne.n	800497c <UART_Start_Receive_IT+0x168>
 80049b0:	e04a      	b.n	8004a48 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ba:	d107      	bne.n	80049cc <UART_Start_Receive_IT+0x1b8>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <UART_Start_Receive_IT+0x24c>)
 80049c8:	671a      	str	r2, [r3, #112]	; 0x70
 80049ca:	e002      	b.n	80049d2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <UART_Start_Receive_IT+0x250>)
 80049d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d019      	beq.n	8004a16 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	e853 3f00 	ldrex	r3, [r3]
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80049f6:	677b      	str	r3, [r7, #116]	; 0x74
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a00:	637b      	str	r3, [r7, #52]	; 0x34
 8004a02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a08:	e841 2300 	strex	r3, r2, [r1]
 8004a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1e6      	bne.n	80049e2 <UART_Start_Receive_IT+0x1ce>
 8004a14:	e018      	b.n	8004a48 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	613b      	str	r3, [r7, #16]
   return(result);
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	f043 0320 	orr.w	r3, r3, #32
 8004a2a:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a34:	623b      	str	r3, [r7, #32]
 8004a36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	69f9      	ldr	r1, [r7, #28]
 8004a3a:	6a3a      	ldr	r2, [r7, #32]
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e6      	bne.n	8004a16 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	378c      	adds	r7, #140	; 0x8c
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	0800517d 	.word	0x0800517d
 8004a5c:	08004e81 	.word	0x08004e81
 8004a60:	08004d1b 	.word	0x08004d1b
 8004a64:	08004bb7 	.word	0x08004bb7

08004a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b095      	sub	sp, #84	; 0x54
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8004a90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e6      	bne.n	8004a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ace:	e841 2300 	strex	r3, r2, [r1]
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1e3      	bne.n	8004aa2 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d118      	bne.n	8004b14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	f023 0310 	bic.w	r3, r3, #16
 8004af6:	647b      	str	r3, [r7, #68]	; 0x44
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6979      	ldr	r1, [r7, #20]
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004b28:	bf00      	nop
 8004b2a:	3754      	adds	r7, #84	; 0x54
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f7ff f9ca 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7c:	61fb      	str	r3, [r7, #28]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	461a      	mov	r2, r3
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	6979      	ldr	r1, [r7, #20]
 8004b8c:	69ba      	ldr	r2, [r7, #24]
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	613b      	str	r3, [r7, #16]
   return(result);
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e6      	bne.n	8004b68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2220      	movs	r2, #32
 8004b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f7ff f995 	bl	8003ed8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bae:	bf00      	nop
 8004bb0:	3720      	adds	r7, #32
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b096      	sub	sp, #88	; 0x58
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004bc4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bce:	2b22      	cmp	r3, #34	; 0x22
 8004bd0:	f040 8095 	bne.w	8004cfe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004bda:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004bde:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004be2:	b2d9      	uxtb	r1, r3
 8004be4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	400a      	ands	r2, r1
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d17a      	bne.n	8004d12 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c30:	653b      	str	r3, [r7, #80]	; 0x50
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	461a      	mov	r2, r3
 8004c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e6      	bne.n	8004c1c <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	3308      	adds	r3, #8
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c6e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d12e      	bne.n	8004cf6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	e853 3f00 	ldrex	r3, [r3]
 8004caa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f023 0310 	bic.w	r3, r3, #16
 8004cb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cbc:	61fb      	str	r3, [r7, #28]
 8004cbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc0:	69b9      	ldr	r1, [r7, #24]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	e841 2300 	strex	r3, r2, [r1]
 8004cc8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1e6      	bne.n	8004c9e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	2b10      	cmp	r3, #16
 8004cdc:	d103      	bne.n	8004ce6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2210      	movs	r2, #16
 8004ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004cec:	4619      	mov	r1, r3
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff f906 	bl	8003f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004cf4:	e00d      	b.n	8004d12 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fb fe72 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 8004cfc:	e009      	b.n	8004d12 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	8b1b      	ldrh	r3, [r3, #24]
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0208 	orr.w	r2, r2, #8
 8004d0e:	b292      	uxth	r2, r2
 8004d10:	831a      	strh	r2, [r3, #24]
}
 8004d12:	bf00      	nop
 8004d14:	3758      	adds	r7, #88	; 0x58
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b096      	sub	sp, #88	; 0x58
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004d28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	2b22      	cmp	r3, #34	; 0x22
 8004d34:	f040 8095 	bne.w	8004e62 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004d3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d46:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004d48:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004d4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004d50:	4013      	ands	r3, r2
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d56:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d5c:	1c9a      	adds	r2, r3, #2
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d17a      	bne.n	8004e76 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8004da0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e6      	bne.n	8004d80 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dd4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e5      	bne.n	8004db2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d12e      	bne.n	8004e5a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f023 0310 	bic.w	r3, r3, #16
 8004e16:	647b      	str	r3, [r7, #68]	; 0x44
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6979      	ldr	r1, [r7, #20]
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e6      	bne.n	8004e02 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d103      	bne.n	8004e4a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2210      	movs	r2, #16
 8004e48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004e50:	4619      	mov	r1, r3
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff f854 	bl	8003f00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e58:	e00d      	b.n	8004e76 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f7fb fdc0 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 8004e60:	e009      	b.n	8004e76 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	8b1b      	ldrh	r3, [r3, #24]
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0208 	orr.w	r2, r2, #8
 8004e72:	b292      	uxth	r2, r2
 8004e74:	831a      	strh	r2, [r3, #24]
}
 8004e76:	bf00      	nop
 8004e78:	3758      	adds	r7, #88	; 0x58
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b0a6      	sub	sp, #152	; 0x98
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e8e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	2b22      	cmp	r3, #34	; 0x22
 8004eb8:	f040 814f 	bne.w	800515a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004ec2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004ec6:	e0f6      	b.n	80050b6 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004ece:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ed2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8004ed6:	b2d9      	uxtb	r1, r3
 8004ed8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8004edc:	b2da      	uxtb	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee2:	400a      	ands	r2, r1
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	1c5a      	adds	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f12:	f003 0307 	and.w	r3, r3, #7
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d053      	beq.n	8004fc2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d011      	beq.n	8004f4a <UART_RxISR_8BIT_FIFOEN+0xca>
 8004f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f40:	f043 0201 	orr.w	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d011      	beq.n	8004f7a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8004f56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2202      	movs	r2, #2
 8004f68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f70:	f043 0204 	orr.w	r2, r3, #4
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004f7e:	f003 0304 	and.w	r3, r3, #4
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d011      	beq.n	8004faa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8004f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2204      	movs	r2, #4
 8004f98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa0:	f043 0202 	orr.w	r2, r3, #2
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d006      	beq.n	8004fc2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7fe ff99 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d173      	bne.n	80050b6 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fd6:	e853 3f00 	ldrex	r3, [r3]
 8004fda:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004fdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ff0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004ff6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e4      	bne.n	8004fce <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3308      	adds	r3, #8
 800500a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3308      	adds	r3, #8
 8005026:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005028:	657a      	str	r2, [r7, #84]	; 0x54
 800502a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800502e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e3      	bne.n	8005004 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d12e      	bne.n	80050b0 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005060:	e853 3f00 	ldrex	r3, [r3]
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	f023 0310 	bic.w	r3, r3, #16
 800506c:	67bb      	str	r3, [r7, #120]	; 0x78
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	461a      	mov	r2, r3
 8005074:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005076:	643b      	str	r3, [r7, #64]	; 0x40
 8005078:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800507c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e6      	bne.n	8005058 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b10      	cmp	r3, #16
 8005096:	d103      	bne.n	80050a0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2210      	movs	r2, #16
 800509e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fe ff29 	bl	8003f00 <HAL_UARTEx_RxEventCallback>
 80050ae:	e002      	b.n	80050b6 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fb fc95 	bl	80009e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d006      	beq.n	80050cc <UART_RxISR_8BIT_FIFOEN+0x24c>
 80050be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f47f aefe 	bne.w	8004ec8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050d2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80050d6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d047      	beq.n	800516e <UART_RxISR_8BIT_FIFOEN+0x2ee>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80050e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d240      	bcs.n	800516e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3308      	adds	r3, #8
 80050f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	e853 3f00 	ldrex	r3, [r3]
 80050fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005102:	673b      	str	r3, [r7, #112]	; 0x70
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3308      	adds	r3, #8
 800510a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800510c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800510e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005112:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005114:	e841 2300 	strex	r3, r2, [r1]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a15      	ldr	r2, [pc, #84]	; (8005178 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8005124:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	60bb      	str	r3, [r7, #8]
   return(result);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f043 0320 	orr.w	r3, r3, #32
 800513a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	461a      	mov	r2, r3
 8005142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005148:	6979      	ldr	r1, [r7, #20]
 800514a:	69ba      	ldr	r2, [r7, #24]
 800514c:	e841 2300 	strex	r3, r2, [r1]
 8005150:	613b      	str	r3, [r7, #16]
   return(result);
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1e6      	bne.n	8005126 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005158:	e009      	b.n	800516e <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	8b1b      	ldrh	r3, [r3, #24]
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0208 	orr.w	r2, r2, #8
 800516a:	b292      	uxth	r2, r2
 800516c:	831a      	strh	r2, [r3, #24]
}
 800516e:	bf00      	nop
 8005170:	3798      	adds	r7, #152	; 0x98
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	08004bb7 	.word	0x08004bb7

0800517c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0a8      	sub	sp, #160	; 0xa0
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800518a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b2:	2b22      	cmp	r3, #34	; 0x22
 80051b4:	f040 8153 	bne.w	800545e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80051be:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051c2:	e0fa      	b.n	80053ba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80051ca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80051d6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80051da:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80051de:	4013      	ands	r3, r2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	1c9a      	adds	r2, r3, #2
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800520e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d053      	beq.n	80052c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800521a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d011      	beq.n	800524a <UART_RxISR_16BIT_FIFOEN+0xce>
 8005226:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800522a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2201      	movs	r2, #1
 8005238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005240:	f043 0201 	orr.w	r2, r3, #1
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800524a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d011      	beq.n	800527a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2202      	movs	r2, #2
 8005268:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005270:	f043 0204 	orr.w	r2, r3, #4
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800527a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800527e:	f003 0304 	and.w	r3, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	d011      	beq.n	80052aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005286:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2204      	movs	r2, #4
 8005298:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052a0:	f043 0202 	orr.w	r2, r3, #2
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d006      	beq.n	80052c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f7fe fe19 	bl	8003eec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d175      	bne.n	80053ba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80052dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	461a      	mov	r2, r3
 80052ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052f8:	e841 2300 	strex	r3, r2, [r1]
 80052fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1e4      	bne.n	80052ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531a:	f023 0301 	bic.w	r3, r3, #1
 800531e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3308      	adds	r3, #8
 8005328:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800532c:	65ba      	str	r2, [r7, #88]	; 0x58
 800532e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005330:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005332:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005334:	e841 2300 	strex	r3, r2, [r1]
 8005338:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800533a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1e1      	bne.n	8005304 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d12e      	bne.n	80053b4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	f023 0310 	bic.w	r3, r3, #16
 8005370:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800537a:	647b      	str	r3, [r7, #68]	; 0x44
 800537c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005380:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e6      	bne.n	800535c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	f003 0310 	and.w	r3, r3, #16
 8005398:	2b10      	cmp	r3, #16
 800539a:	d103      	bne.n	80053a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2210      	movs	r2, #16
 80053a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7fe fda7 	bl	8003f00 <HAL_UARTEx_RxEventCallback>
 80053b2:	e002      	b.n	80053ba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7fb fb13 	bl	80009e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80053ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80053c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f47f aefa 	bne.w	80051c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80053d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80053da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d047      	beq.n	8005472 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80053e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d240      	bcs.n	8005472 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005406:	677b      	str	r3, [r7, #116]	; 0x74
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005410:	633a      	str	r2, [r7, #48]	; 0x30
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800541e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e5      	bne.n	80053f0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a15      	ldr	r2, [pc, #84]	; (800547c <UART_RxISR_16BIT_FIFOEN+0x300>)
 8005428:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	60fb      	str	r3, [r7, #12]
   return(result);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f043 0320 	orr.w	r3, r3, #32
 800543e:	673b      	str	r3, [r7, #112]	; 0x70
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	69b9      	ldr	r1, [r7, #24]
 800544e:	69fa      	ldr	r2, [r7, #28]
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	617b      	str	r3, [r7, #20]
   return(result);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800545c:	e009      	b.n	8005472 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	8b1b      	ldrh	r3, [r3, #24]
 8005464:	b29a      	uxth	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0208 	orr.w	r2, r2, #8
 800546e:	b292      	uxth	r2, r2
 8005470:	831a      	strh	r2, [r3, #24]
}
 8005472:	bf00      	nop
 8005474:	37a0      	adds	r7, #160	; 0xa0
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	08004d1b 	.word	0x08004d1b

08005480 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e027      	b.n	8005522 <HAL_UARTEx_DisableFifoMode+0x66>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2224      	movs	r2, #36	; 0x24
 80054de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005500:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2220      	movs	r2, #32
 8005514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
 8005536:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005542:	2302      	movs	r3, #2
 8005544:	e02d      	b.n	80055a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2224      	movs	r2, #36	; 0x24
 8005552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f850 	bl	8005628 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2220      	movs	r2, #32
 8005594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b084      	sub	sp, #16
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055be:	2302      	movs	r3, #2
 80055c0:	e02d      	b.n	800561e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2224      	movs	r2, #36	; 0x24
 80055ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0201 	bic.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f812 	bl	8005628 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
	...

08005628 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005634:	2b00      	cmp	r3, #0
 8005636:	d108      	bne.n	800564a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005648:	e031      	b.n	80056ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800564a:	2308      	movs	r3, #8
 800564c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800564e:	2308      	movs	r3, #8
 8005650:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	0e5b      	lsrs	r3, r3, #25
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	0f5b      	lsrs	r3, r3, #29
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005672:	7bbb      	ldrb	r3, [r7, #14]
 8005674:	7b3a      	ldrb	r2, [r7, #12]
 8005676:	4911      	ldr	r1, [pc, #68]	; (80056bc <UARTEx_SetNbDataToProcess+0x94>)
 8005678:	5c8a      	ldrb	r2, [r1, r2]
 800567a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800567e:	7b3a      	ldrb	r2, [r7, #12]
 8005680:	490f      	ldr	r1, [pc, #60]	; (80056c0 <UARTEx_SetNbDataToProcess+0x98>)
 8005682:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005684:	fb93 f3f2 	sdiv	r3, r3, r2
 8005688:	b29a      	uxth	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	7b7a      	ldrb	r2, [r7, #13]
 8005694:	4909      	ldr	r1, [pc, #36]	; (80056bc <UARTEx_SetNbDataToProcess+0x94>)
 8005696:	5c8a      	ldrb	r2, [r1, r2]
 8005698:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800569c:	7b7a      	ldrb	r2, [r7, #13]
 800569e:	4908      	ldr	r1, [pc, #32]	; (80056c0 <UARTEx_SetNbDataToProcess+0x98>)
 80056a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	0800a330 	.word	0x0800a330
 80056c0:	0800a338 	.word	0x0800a338

080056c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f103 0208 	add.w	r2, r3, #8
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f04f 32ff 	mov.w	r2, #4294967295
 80056dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f103 0208 	add.w	r2, r3, #8
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f103 0208 	add.w	r2, r3, #8
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	1c5a      	adds	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	601a      	str	r2, [r3, #0]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d103      	bne.n	8005786 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	60fb      	str	r3, [r7, #12]
 8005784:	e00c      	b.n	80057a0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	3308      	adds	r3, #8
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	e002      	b.n	8005794 <vListInsert+0x2e>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	429a      	cmp	r2, r3
 800579e:	d2f6      	bcs.n	800578e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685a      	ldr	r2, [r3, #4]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6892      	ldr	r2, [r2, #8]
 80057ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6852      	ldr	r2, [r2, #4]
 80057f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	429a      	cmp	r2, r3
 8005802:	d103      	bne.n	800580c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	1e5a      	subs	r2, r3, #1
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d10a      	bne.n	8005856 <xQueueGenericReset+0x2a>
        __asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60bb      	str	r3, [r7, #8]
    }
 8005852:	bf00      	nop
 8005854:	e7fe      	b.n	8005854 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005856:	f002 fb9d 	bl	8007f94 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	441a      	add	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005886:	3b01      	subs	r3, #1
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800588c:	fb01 f303 	mul.w	r3, r1, r3
 8005890:	441a      	add	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	22ff      	movs	r2, #255	; 0xff
 800589a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	22ff      	movs	r2, #255	; 0xff
 80058a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d114      	bne.n	80058d6 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d01a      	beq.n	80058ea <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3310      	adds	r3, #16
 80058b8:	4618      	mov	r0, r3
 80058ba:	f001 f963 	bl	8006b84 <xTaskRemoveFromEventList>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d012      	beq.n	80058ea <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80058c4:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <xQueueGenericReset+0xcc>)
 80058c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	e009      	b.n	80058ea <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3310      	adds	r3, #16
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fef2 	bl	80056c4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3324      	adds	r3, #36	; 0x24
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff feed 	bl	80056c4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80058ea:	f002 fb83 	bl	8007ff4 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80058ee:	2301      	movs	r3, #1
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08c      	sub	sp, #48	; 0x30
 8005900:	af02      	add	r7, sp, #8
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	4613      	mov	r3, r2
 8005908:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <xQueueGenericCreate+0x2a>
        __asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	61bb      	str	r3, [r7, #24]
    }
 8005922:	bf00      	nop
 8005924:	e7fe      	b.n	8005924 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	fb02 f303 	mul.w	r3, r2, r3
 800592e:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d006      	beq.n	8005944 <xQueueGenericCreate+0x48>
 8005936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	68fa      	ldr	r2, [r7, #12]
 8005940:	429a      	cmp	r2, r3
 8005942:	d101      	bne.n	8005948 <xQueueGenericCreate+0x4c>
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <xQueueGenericCreate+0x4e>
 8005948:	2300      	movs	r3, #0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10a      	bne.n	8005964 <xQueueGenericCreate+0x68>
        __asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	617b      	str	r3, [r7, #20]
    }
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800596a:	d90a      	bls.n	8005982 <xQueueGenericCreate+0x86>
        __asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	613b      	str	r3, [r7, #16]
    }
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	3350      	adds	r3, #80	; 0x50
 8005986:	4618      	mov	r0, r3
 8005988:	f002 fc28 	bl	80081dc <pvPortMalloc>
 800598c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	3350      	adds	r3, #80	; 0x50
 800599c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800599e:	79fa      	ldrb	r2, [r7, #7]
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	69fa      	ldr	r2, [r7, #28]
 80059a8:	68b9      	ldr	r1, [r7, #8]
 80059aa:	68f8      	ldr	r0, [r7, #12]
 80059ac:	f000 f805 	bl	80059ba <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80059b0:	6a3b      	ldr	r3, [r7, #32]
    }
 80059b2:	4618      	mov	r0, r3
 80059b4:	3728      	adds	r7, #40	; 0x28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e002      	b.n	80059dc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059e8:	2101      	movs	r1, #1
 80059ea:	69b8      	ldr	r0, [r7, #24]
 80059ec:	f7ff ff1e 	bl	800582c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	78fa      	ldrb	r2, [r7, #3]
 80059f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80059f8:	78fb      	ldrb	r3, [r7, #3]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	68f9      	ldr	r1, [r7, #12]
 80059fe:	2073      	movs	r0, #115	; 0x73
 8005a00:	f003 fc02 	bl	8009208 <SEGGER_SYSVIEW_RecordU32x3>
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b090      	sub	sp, #64	; 0x40
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10a      	bne.n	8005a3e <xQueueGenericSend+0x32>
        __asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <xQueueGenericSend+0x40>
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <xQueueGenericSend+0x44>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e000      	b.n	8005a52 <xQueueGenericSend+0x46>
 8005a50:	2300      	movs	r3, #0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10a      	bne.n	8005a6c <xQueueGenericSend+0x60>
        __asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005a68:	bf00      	nop
 8005a6a:	e7fe      	b.n	8005a6a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d103      	bne.n	8005a7a <xQueueGenericSend+0x6e>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <xQueueGenericSend+0x72>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <xQueueGenericSend+0x74>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <xQueueGenericSend+0x8e>
        __asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	623b      	str	r3, [r7, #32]
    }
 8005a96:	bf00      	nop
 8005a98:	e7fe      	b.n	8005a98 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a9a:	f001 fa13 	bl	8006ec4 <xTaskGetSchedulerState>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d102      	bne.n	8005aaa <xQueueGenericSend+0x9e>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d101      	bne.n	8005aae <xQueueGenericSend+0xa2>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <xQueueGenericSend+0xa4>
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10a      	bne.n	8005aca <xQueueGenericSend+0xbe>
        __asm volatile
 8005ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab8:	f383 8811 	msr	BASEPRI, r3
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f3bf 8f4f 	dsb	sy
 8005ac4:	61fb      	str	r3, [r7, #28]
    }
 8005ac6:	bf00      	nop
 8005ac8:	e7fe      	b.n	8005ac8 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005aca:	f002 fa63 	bl	8007f94 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d302      	bcc.n	8005ae0 <xQueueGenericSend+0xd4>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b02      	cmp	r3, #2
 8005ade:	d136      	bne.n	8005b4e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 8005ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f004 f9ca 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	460b      	mov	r3, r1
 8005af2:	4601      	mov	r1, r0
 8005af4:	205a      	movs	r0, #90	; 0x5a
 8005af6:	f003 fbfd 	bl	80092f4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	68b9      	ldr	r1, [r7, #8]
 8005afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b00:	f000 fa96 	bl	8006030 <prvCopyDataToQueue>
 8005b04:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d010      	beq.n	8005b30 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b10:	3324      	adds	r3, #36	; 0x24
 8005b12:	4618      	mov	r0, r3
 8005b14:	f001 f836 	bl	8006b84 <xTaskRemoveFromEventList>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d013      	beq.n	8005b46 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005b1e:	4b4d      	ldr	r3, [pc, #308]	; (8005c54 <xQueueGenericSend+0x248>)
 8005b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	e00a      	b.n	8005b46 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005b36:	4b47      	ldr	r3, [pc, #284]	; (8005c54 <xQueueGenericSend+0x248>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005b46:	f002 fa55 	bl	8007ff4 <vPortExitCritical>
                return pdPASS;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e07d      	b.n	8005c4a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d110      	bne.n	8005b76 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005b54:	f002 fa4e 	bl	8007ff4 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f004 f98e 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	9300      	str	r3, [sp, #0]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4601      	mov	r1, r0
 8005b6c:	205a      	movs	r0, #90	; 0x5a
 8005b6e:	f003 fbc1 	bl	80092f4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e069      	b.n	8005c4a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d106      	bne.n	8005b8a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005b7c:	f107 0314 	add.w	r3, r7, #20
 8005b80:	4618      	mov	r0, r3
 8005b82:	f001 f865 	bl	8006c50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005b86:	2301      	movs	r3, #1
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005b8a:	f002 fa33 	bl	8007ff4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005b8e:	f000 fdb1 	bl	80066f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005b92:	f002 f9ff 	bl	8007f94 <vPortEnterCritical>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d103      	bne.n	8005bac <xQueueGenericSend+0x1a0>
 8005ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bb2:	b25b      	sxtb	r3, r3
 8005bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb8:	d103      	bne.n	8005bc2 <xQueueGenericSend+0x1b6>
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bc2:	f002 fa17 	bl	8007ff4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bc6:	1d3a      	adds	r2, r7, #4
 8005bc8:	f107 0314 	add.w	r3, r7, #20
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f001 f854 	bl	8006c7c <xTaskCheckForTimeOut>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d124      	bne.n	8005c24 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bdc:	f000 fb20 	bl	8006220 <prvIsQueueFull>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d018      	beq.n	8005c18 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	3310      	adds	r3, #16
 8005bea:	687a      	ldr	r2, [r7, #4]
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 ff76 	bl	8006ae0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bf6:	f000 faab 	bl	8006150 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005bfa:	f000 fd89 	bl	8006710 <xTaskResumeAll>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f47f af62 	bne.w	8005aca <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8005c06:	4b13      	ldr	r3, [pc, #76]	; (8005c54 <xQueueGenericSend+0x248>)
 8005c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	e758      	b.n	8005aca <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c1a:	f000 fa99 	bl	8006150 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005c1e:	f000 fd77 	bl	8006710 <xTaskResumeAll>
 8005c22:	e752      	b.n	8005aca <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c26:	f000 fa93 	bl	8006150 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005c2a:	f000 fd71 	bl	8006710 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	4618      	mov	r0, r3
 8005c32:	f004 f923 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	9300      	str	r3, [sp, #0]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4601      	mov	r1, r0
 8005c42:	205a      	movs	r0, #90	; 0x5a
 8005c44:	f003 fb56 	bl	80092f4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8005c48:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3738      	adds	r7, #56	; 0x38
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b090      	sub	sp, #64	; 0x40
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d10a      	bne.n	8005c86 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8005c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c74:	f383 8811 	msr	BASEPRI, r3
 8005c78:	f3bf 8f6f 	isb	sy
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8005c82:	bf00      	nop
 8005c84:	e7fe      	b.n	8005c84 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d103      	bne.n	8005c94 <xQueueGenericSendFromISR+0x3c>
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <xQueueGenericSendFromISR+0x40>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <xQueueGenericSendFromISR+0x42>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d103      	bne.n	8005cc2 <xQueueGenericSendFromISR+0x6a>
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <xQueueGenericSendFromISR+0x6e>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <xQueueGenericSendFromISR+0x70>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d10a      	bne.n	8005ce2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8005ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd0:	f383 8811 	msr	BASEPRI, r3
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	f3bf 8f4f 	dsb	sy
 8005cdc:	623b      	str	r3, [r7, #32]
    }
 8005cde:	bf00      	nop
 8005ce0:	e7fe      	b.n	8005ce0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ce2:	f002 fa3b 	bl	800815c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005ce6:	f3ef 8211 	mrs	r2, BASEPRI
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	61fa      	str	r2, [r7, #28]
 8005cfc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005cfe:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d00:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d302      	bcc.n	8005d14 <xQueueGenericSendFromISR+0xbc>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d148      	bne.n	8005da6 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	4618      	mov	r0, r3
 8005d28:	f004 f8a8 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	461a      	mov	r2, r3
 8005d32:	2060      	movs	r0, #96	; 0x60
 8005d34:	f003 fa0e 	bl	8009154 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d3e:	f000 f977 	bl	8006030 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d112      	bne.n	8005d72 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d025      	beq.n	8005da0 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 ff13 	bl	8006b84 <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01d      	beq.n	8005da0 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d01a      	beq.n	8005da0 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e016      	b.n	8005da0 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005d72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d76:	2b7f      	cmp	r3, #127	; 0x7f
 8005d78:	d10a      	bne.n	8005d90 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	617b      	str	r3, [r7, #20]
    }
 8005d8c:	bf00      	nop
 8005d8e:	e7fe      	b.n	8005d8e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d94:	3301      	adds	r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	b25a      	sxtb	r2, r3
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8005da0:	2301      	movs	r3, #1
 8005da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8005da4:	e00b      	b.n	8005dbe <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	4618      	mov	r0, r3
 8005daa:	f004 f867 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005dae:	4601      	mov	r1, r0
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	461a      	mov	r2, r3
 8005db4:	2060      	movs	r0, #96	; 0x60
 8005db6:	f003 f9cd 	bl	8009154 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005dc8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3740      	adds	r7, #64	; 0x40
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005dd4:	b590      	push	{r4, r7, lr}
 8005dd6:	b08f      	sub	sp, #60	; 0x3c
 8005dd8:	af02      	add	r7, sp, #8
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005de0:	2300      	movs	r3, #0
 8005de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10a      	bne.n	8005e04 <xQueueReceive+0x30>
        __asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	623b      	str	r3, [r7, #32]
    }
 8005e00:	bf00      	nop
 8005e02:	e7fe      	b.n	8005e02 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <xQueueReceive+0x3e>
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <xQueueReceive+0x42>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <xQueueReceive+0x44>
 8005e16:	2300      	movs	r3, #0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <xQueueReceive+0x5e>
        __asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	61fb      	str	r3, [r7, #28]
    }
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e32:	f001 f847 	bl	8006ec4 <xTaskGetSchedulerState>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d102      	bne.n	8005e42 <xQueueReceive+0x6e>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <xQueueReceive+0x72>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <xQueueReceive+0x74>
 8005e46:	2300      	movs	r3, #0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10a      	bne.n	8005e62 <xQueueReceive+0x8e>
        __asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	61bb      	str	r3, [r7, #24]
    }
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005e62:	f002 f897 	bl	8007f94 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d02f      	beq.n	8005ed2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e76:	f000 f945 	bl	8006104 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f003 fffd 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005e82:	4604      	mov	r4, r0
 8005e84:	2000      	movs	r0, #0
 8005e86:	f003 fff9 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2101      	movs	r1, #1
 8005e90:	9100      	str	r1, [sp, #0]
 8005e92:	4621      	mov	r1, r4
 8005e94:	205c      	movs	r0, #92	; 0x5c
 8005e96:	f003 fa2d 	bl	80092f4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	1e5a      	subs	r2, r3, #1
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00f      	beq.n	8005eca <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eac:	3310      	adds	r3, #16
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f000 fe68 	bl	8006b84 <xTaskRemoveFromEventList>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d007      	beq.n	8005eca <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005eba:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <xQueueReceive+0x21c>)
 8005ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005eca:	f002 f893 	bl	8007ff4 <vPortExitCritical>
                return pdPASS;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e08a      	b.n	8005fe8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d113      	bne.n	8005f00 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005ed8:	f002 f88c 	bl	8007ff4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f003 ffcc 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f003 ffc8 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005eec:	4602      	mov	r2, r0
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	9100      	str	r1, [sp, #0]
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	205c      	movs	r0, #92	; 0x5c
 8005ef8:	f003 f9fc 	bl	80092f4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e073      	b.n	8005fe8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005f06:	f107 0310 	add.w	r3, r7, #16
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 fea0 	bl	8006c50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005f14:	f002 f86e 	bl	8007ff4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005f18:	f000 fbec 	bl	80066f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005f1c:	f002 f83a 	bl	8007f94 <vPortEnterCritical>
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f26:	b25b      	sxtb	r3, r3
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2c:	d103      	bne.n	8005f36 <xQueueReceive+0x162>
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d103      	bne.n	8005f4c <xQueueReceive+0x178>
 8005f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f4c:	f002 f852 	bl	8007ff4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f50:	1d3a      	adds	r2, r7, #4
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 fe8f 	bl	8006c7c <xTaskCheckForTimeOut>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d124      	bne.n	8005fae <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f66:	f000 f945 	bl	80061f4 <prvIsQueueEmpty>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d018      	beq.n	8005fa2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f72:	3324      	adds	r3, #36	; 0x24
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4611      	mov	r1, r2
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 fdb1 	bl	8006ae0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f80:	f000 f8e6 	bl	8006150 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005f84:	f000 fbc4 	bl	8006710 <xTaskResumeAll>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f47f af69 	bne.w	8005e62 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8005f90:	4b17      	ldr	r3, [pc, #92]	; (8005ff0 <xQueueReceive+0x21c>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	e75f      	b.n	8005e62 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005fa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa4:	f000 f8d4 	bl	8006150 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005fa8:	f000 fbb2 	bl	8006710 <xTaskResumeAll>
 8005fac:	e759      	b.n	8005e62 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005fae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb0:	f000 f8ce 	bl	8006150 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005fb4:	f000 fbac 	bl	8006710 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fba:	f000 f91b 	bl	80061f4 <prvIsQueueEmpty>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f43f af4e 	beq.w	8005e62 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f003 ff57 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005fce:	4604      	mov	r4, r0
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	f003 ff53 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2101      	movs	r1, #1
 8005fdc:	9100      	str	r1, [sp, #0]
 8005fde:	4621      	mov	r1, r4
 8005fe0:	205c      	movs	r0, #92	; 0x5c
 8005fe2:	f003 f987 	bl	80092f4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8005fe6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3734      	adds	r7, #52	; 0x34
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	e000ed04 	.word	0xe000ed04

08005ff4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10a      	bne.n	8006018 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	60bb      	str	r3, [r7, #8]
    }
 8006014:	bf00      	nop
 8006016:	e7fe      	b.n	8006016 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8006018:	f001 ffbc 	bl	8007f94 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8006022:	f001 ffe7 	bl	8007ff4 <vPortExitCritical>

    return uxReturn;
 8006026:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006044:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10d      	bne.n	800606a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d14d      	bne.n	80060f2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 ff50 	bl	8006f00 <xTaskPriorityDisinherit>
 8006060:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	e043      	b.n	80060f2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d119      	bne.n	80060a4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6858      	ldr	r0, [r3, #4]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006078:	461a      	mov	r2, r3
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	f004 f878 	bl	800a170 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	441a      	add	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	429a      	cmp	r2, r3
 8006098:	d32b      	bcc.n	80060f2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	605a      	str	r2, [r3, #4]
 80060a2:	e026      	b.n	80060f2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	68d8      	ldr	r0, [r3, #12]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	461a      	mov	r2, r3
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	f004 f85e 	bl	800a170 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	425b      	negs	r3, r3
 80060be:	441a      	add	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d207      	bcs.n	80060e0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	425b      	negs	r3, r3
 80060da:	441a      	add	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d105      	bne.n	80060f2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d002      	beq.n	80060f2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	1c5a      	adds	r2, r3, #1
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80060fa:	697b      	ldr	r3, [r7, #20]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d018      	beq.n	8006148 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	441a      	add	r2, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68da      	ldr	r2, [r3, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	429a      	cmp	r2, r3
 800612e:	d303      	bcc.n	8006138 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68d9      	ldr	r1, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006140:	461a      	mov	r2, r3
 8006142:	6838      	ldr	r0, [r7, #0]
 8006144:	f004 f814 	bl	800a170 <memcpy>
    }
}
 8006148:	bf00      	nop
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006158:	f001 ff1c 	bl	8007f94 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006162:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006164:	e011      	b.n	800618a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	d012      	beq.n	8006194 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3324      	adds	r3, #36	; 0x24
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fd06 	bl	8006b84 <xTaskRemoveFromEventList>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800617e:	f000 fde3 	bl	8006d48 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	3b01      	subs	r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800618a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	dce9      	bgt.n	8006166 <prvUnlockQueue+0x16>
 8006192:	e000      	b.n	8006196 <prvUnlockQueue+0x46>
                        break;
 8006194:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	22ff      	movs	r2, #255	; 0xff
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800619e:	f001 ff29 	bl	8007ff4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80061a2:	f001 fef7 	bl	8007f94 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80061ae:	e011      	b.n	80061d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	3310      	adds	r3, #16
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 fce1 	bl	8006b84 <xTaskRemoveFromEventList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80061c8:	f000 fdbe 	bl	8006d48 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80061cc:	7bbb      	ldrb	r3, [r7, #14]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80061d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	dce9      	bgt.n	80061b0 <prvUnlockQueue+0x60>
 80061dc:	e000      	b.n	80061e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80061de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	22ff      	movs	r2, #255	; 0xff
 80061e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80061e8:	f001 ff04 	bl	8007ff4 <vPortExitCritical>
}
 80061ec:	bf00      	nop
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80061fc:	f001 feca 	bl	8007f94 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006204:	2b00      	cmp	r3, #0
 8006206:	d102      	bne.n	800620e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006208:	2301      	movs	r3, #1
 800620a:	60fb      	str	r3, [r7, #12]
 800620c:	e001      	b.n	8006212 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006212:	f001 feef 	bl	8007ff4 <vPortExitCritical>

    return xReturn;
 8006216:	68fb      	ldr	r3, [r7, #12]
}
 8006218:	4618      	mov	r0, r3
 800621a:	3710      	adds	r7, #16
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006228:	f001 feb4 	bl	8007f94 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006234:	429a      	cmp	r2, r3
 8006236:	d102      	bne.n	800623e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006238:	2301      	movs	r3, #1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e001      	b.n	8006242 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800623e:	2300      	movs	r3, #0
 8006240:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006242:	f001 fed7 	bl	8007ff4 <vPortExitCritical>

    return xReturn;
 8006246:	68fb      	ldr	r3, [r7, #12]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <xQueueIsQueueFullFromISR+0x28>
        __asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	60fb      	str	r3, [r7, #12]
    }
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006280:	429a      	cmp	r2, r3
 8006282:	d102      	bne.n	800628a <xQueueIsQueueFullFromISR+0x3a>
    {
        xReturn = pdTRUE;
 8006284:	2301      	movs	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e001      	b.n	800628e <xQueueIsQueueFullFromISR+0x3e>
    }
    else
    {
        xReturn = pdFALSE;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800628e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006290:	4618      	mov	r0, r3
 8006292:	371c      	adds	r7, #28
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062a6:	2300      	movs	r3, #0
 80062a8:	60fb      	str	r3, [r7, #12]
 80062aa:	e01e      	b.n	80062ea <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <vQueueAddToRegistry+0x60>)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d115      	bne.n	80062e4 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062b8:	4910      	ldr	r1, [pc, #64]	; (80062fc <vQueueAddToRegistry+0x60>)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80062c2:	4a0e      	ldr	r2, [pc, #56]	; (80062fc <vQueueAddToRegistry+0x60>)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f003 fdd3 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 80062d6:	4601      	mov	r1, r0
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	2071      	movs	r0, #113	; 0x71
 80062de:	f002 ff39 	bl	8009154 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 80062e2:	e006      	b.n	80062f2 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b07      	cmp	r3, #7
 80062ee:	d9dd      	bls.n	80062ac <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80062f0:	bf00      	nop
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	2001c490 	.word	0x2001c490

08006300 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006310:	f001 fe40 	bl	8007f94 <vPortEnterCritical>
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800631a:	b25b      	sxtb	r3, r3
 800631c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006320:	d103      	bne.n	800632a <vQueueWaitForMessageRestricted+0x2a>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006330:	b25b      	sxtb	r3, r3
 8006332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006336:	d103      	bne.n	8006340 <vQueueWaitForMessageRestricted+0x40>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006340:	f001 fe58 	bl	8007ff4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	3324      	adds	r3, #36	; 0x24
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	68b9      	ldr	r1, [r7, #8]
 8006354:	4618      	mov	r0, r3
 8006356:	f000 fbe7 	bl	8006b28 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800635a:	6978      	ldr	r0, [r7, #20]
 800635c:	f7ff fef8 	bl	8006150 <prvUnlockQueue>
    }
 8006360:	bf00      	nop
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af04      	add	r7, sp, #16
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	4613      	mov	r3, r2
 8006376:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4618      	mov	r0, r3
 800637e:	f001 ff2d 	bl	80081dc <pvPortMalloc>
 8006382:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00e      	beq.n	80063a8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800638a:	2058      	movs	r0, #88	; 0x58
 800638c:	f001 ff26 	bl	80081dc <pvPortMalloc>
 8006390:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	631a      	str	r2, [r3, #48]	; 0x30
 800639e:	e005      	b.n	80063ac <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80063a0:	6978      	ldr	r0, [r7, #20]
 80063a2:	f001 fffb 	bl	800839c <vPortFree>
 80063a6:	e001      	b.n	80063ac <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80063a8:	2300      	movs	r3, #0
 80063aa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	2300      	movs	r3, #0
 80063b6:	9303      	str	r3, [sp, #12]
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	9302      	str	r3, [sp, #8]
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	9301      	str	r3, [sp, #4]
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	9300      	str	r3, [sp, #0]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f000 f80e 	bl	80063ea <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80063ce:	69f8      	ldr	r0, [r7, #28]
 80063d0:	f000 f8a2 	bl	8006518 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80063d4:	2301      	movs	r3, #1
 80063d6:	61bb      	str	r3, [r7, #24]
 80063d8:	e002      	b.n	80063e0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063da:	f04f 33ff 	mov.w	r3, #4294967295
 80063de:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80063e0:	69bb      	ldr	r3, [r7, #24]
    }
 80063e2:	4618      	mov	r0, r3
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b088      	sub	sp, #32
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	461a      	mov	r2, r3
 8006402:	21a5      	movs	r1, #165	; 0xa5
 8006404:	f003 fec2 	bl	800a18c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006412:	3b01      	subs	r3, #1
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f023 0307 	bic.w	r3, r3, #7
 8006420:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f003 0307 	and.w	r3, r3, #7
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <prvInitialiseNewTask+0x58>
        __asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	617b      	str	r3, [r7, #20]
    }
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01f      	beq.n	8006488 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006448:	2300      	movs	r3, #0
 800644a:	61fb      	str	r3, [r7, #28]
 800644c:	e012      	b.n	8006474 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	4413      	add	r3, r2
 8006454:	7819      	ldrb	r1, [r3, #0]
 8006456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	3334      	adds	r3, #52	; 0x34
 800645e:	460a      	mov	r2, r1
 8006460:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006462:	68ba      	ldr	r2, [r7, #8]
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	4413      	add	r3, r2
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d006      	beq.n	800647c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	3301      	adds	r3, #1
 8006472:	61fb      	str	r3, [r7, #28]
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b09      	cmp	r3, #9
 8006478:	d9e9      	bls.n	800644e <prvInitialiseNewTask+0x64>
 800647a:	e000      	b.n	800647e <prvInitialiseNewTask+0x94>
            {
                break;
 800647c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006486:	e003      	b.n	8006490 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	2b04      	cmp	r3, #4
 8006494:	d901      	bls.n	800649a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006496:	2304      	movs	r3, #4
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800649e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	2200      	movs	r2, #0
 80064aa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80064ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ae:	3304      	adds	r3, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff f927 	bl	8005704 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	3318      	adds	r3, #24
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff f922 	bl	8005704 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80064c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064c4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	f1c3 0205 	rsb	r2, r3, #5
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d4:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80064d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d8:	3350      	adds	r3, #80	; 0x50
 80064da:	2204      	movs	r2, #4
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f003 fe54 	bl	800a18c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80064e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e6:	3354      	adds	r3, #84	; 0x54
 80064e8:	2201      	movs	r2, #1
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f003 fe4d 	bl	800a18c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	68f9      	ldr	r1, [r7, #12]
 80064f6:	69b8      	ldr	r0, [r7, #24]
 80064f8:	f001 fb9c 	bl	8007c34 <pxPortInitialiseStack>
 80064fc:	4602      	mov	r2, r0
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800650c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800650e:	bf00      	nop
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006518:	b5b0      	push	{r4, r5, r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af02      	add	r7, sp, #8
 800651e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006520:	f001 fd38 	bl	8007f94 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006524:	4b3b      	ldr	r3, [pc, #236]	; (8006614 <prvAddNewTaskToReadyList+0xfc>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3301      	adds	r3, #1
 800652a:	4a3a      	ldr	r2, [pc, #232]	; (8006614 <prvAddNewTaskToReadyList+0xfc>)
 800652c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800652e:	4b3a      	ldr	r3, [pc, #232]	; (8006618 <prvAddNewTaskToReadyList+0x100>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006536:	4a38      	ldr	r2, [pc, #224]	; (8006618 <prvAddNewTaskToReadyList+0x100>)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800653c:	4b35      	ldr	r3, [pc, #212]	; (8006614 <prvAddNewTaskToReadyList+0xfc>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d110      	bne.n	8006566 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006544:	f000 fc24 	bl	8006d90 <prvInitialiseTaskLists>
 8006548:	e00d      	b.n	8006566 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800654a:	4b34      	ldr	r3, [pc, #208]	; (800661c <prvAddNewTaskToReadyList+0x104>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d109      	bne.n	8006566 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006552:	4b31      	ldr	r3, [pc, #196]	; (8006618 <prvAddNewTaskToReadyList+0x100>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	429a      	cmp	r2, r3
 800655e:	d802      	bhi.n	8006566 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006560:	4a2d      	ldr	r2, [pc, #180]	; (8006618 <prvAddNewTaskToReadyList+0x100>)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006566:	4b2e      	ldr	r3, [pc, #184]	; (8006620 <prvAddNewTaskToReadyList+0x108>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3301      	adds	r3, #1
 800656c:	4a2c      	ldr	r2, [pc, #176]	; (8006620 <prvAddNewTaskToReadyList+0x108>)
 800656e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006570:	4b2b      	ldr	r3, [pc, #172]	; (8006620 <prvAddNewTaskToReadyList+0x108>)
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d016      	beq.n	80065ac <prvAddNewTaskToReadyList+0x94>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4618      	mov	r0, r3
 8006582:	f003 fb55 	bl	8009c30 <SEGGER_SYSVIEW_OnTaskCreate>
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006596:	461d      	mov	r5, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	461c      	mov	r4, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	1ae3      	subs	r3, r4, r3
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	462b      	mov	r3, r5
 80065a8:	f002 f8c8 	bl	800873c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f003 fbc2 	bl	8009d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	2201      	movs	r2, #1
 80065ba:	409a      	lsls	r2, r3
 80065bc:	4b19      	ldr	r3, [pc, #100]	; (8006624 <prvAddNewTaskToReadyList+0x10c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	4a18      	ldr	r2, [pc, #96]	; (8006624 <prvAddNewTaskToReadyList+0x10c>)
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ca:	4613      	mov	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	4a15      	ldr	r2, [pc, #84]	; (8006628 <prvAddNewTaskToReadyList+0x110>)
 80065d4:	441a      	add	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3304      	adds	r3, #4
 80065da:	4619      	mov	r1, r3
 80065dc:	4610      	mov	r0, r2
 80065de:	f7ff f89e 	bl	800571e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80065e2:	f001 fd07 	bl	8007ff4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80065e6:	4b0d      	ldr	r3, [pc, #52]	; (800661c <prvAddNewTaskToReadyList+0x104>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00e      	beq.n	800660c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065ee:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <prvAddNewTaskToReadyList+0x100>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d207      	bcs.n	800660c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvAddNewTaskToReadyList+0x114>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800660c:	bf00      	nop
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bdb0      	pop	{r4, r5, r7, pc}
 8006614:	2000010c 	.word	0x2000010c
 8006618:	20000034 	.word	0x20000034
 800661c:	20000118 	.word	0x20000118
 8006620:	20000128 	.word	0x20000128
 8006624:	20000114 	.word	0x20000114
 8006628:	20000038 	.word	0x20000038
 800662c:	e000ed04 	.word	0xe000ed04

08006630 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8006636:	4b27      	ldr	r3, [pc, #156]	; (80066d4 <vTaskStartScheduler+0xa4>)
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	2300      	movs	r3, #0
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2300      	movs	r3, #0
 8006640:	2282      	movs	r2, #130	; 0x82
 8006642:	4925      	ldr	r1, [pc, #148]	; (80066d8 <vTaskStartScheduler+0xa8>)
 8006644:	4825      	ldr	r0, [pc, #148]	; (80066dc <vTaskStartScheduler+0xac>)
 8006646:	f7ff fe8f 	bl	8006368 <xTaskCreate>
 800664a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d102      	bne.n	8006658 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006652:	f000 ffdd 	bl	8007610 <xTimerCreateTimerTask>
 8006656:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d124      	bne.n	80066a8 <vTaskStartScheduler+0x78>
        __asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	60bb      	str	r3, [r7, #8]
    }
 8006670:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006672:	4b1b      	ldr	r3, [pc, #108]	; (80066e0 <vTaskStartScheduler+0xb0>)
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800667a:	4b1a      	ldr	r3, [pc, #104]	; (80066e4 <vTaskStartScheduler+0xb4>)
 800667c:	2201      	movs	r2, #1
 800667e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006680:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <vTaskStartScheduler+0xb8>)
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8006686:	4b19      	ldr	r3, [pc, #100]	; (80066ec <vTaskStartScheduler+0xbc>)
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <vTaskStartScheduler+0xa4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d102      	bne.n	8006698 <vTaskStartScheduler+0x68>
 8006692:	f003 fab1 	bl	8009bf8 <SEGGER_SYSVIEW_OnIdle>
 8006696:	e004      	b.n	80066a2 <vTaskStartScheduler+0x72>
 8006698:	4b14      	ldr	r3, [pc, #80]	; (80066ec <vTaskStartScheduler+0xbc>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4618      	mov	r0, r3
 800669e:	f003 fb09 	bl	8009cb4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80066a2:	f001 fb57 	bl	8007d54 <xPortStartScheduler>
 80066a6:	e00e      	b.n	80066c6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ae:	d10a      	bne.n	80066c6 <vTaskStartScheduler+0x96>
        __asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	607b      	str	r3, [r7, #4]
    }
 80066c2:	bf00      	nop
 80066c4:	e7fe      	b.n	80066c4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <vTaskStartScheduler+0xc0>)
 80066c8:	681b      	ldr	r3, [r3, #0]
}
 80066ca:	bf00      	nop
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000130 	.word	0x20000130
 80066d8:	0800a1f0 	.word	0x0800a1f0
 80066dc:	08006d61 	.word	0x08006d61
 80066e0:	2000012c 	.word	0x2000012c
 80066e4:	20000118 	.word	0x20000118
 80066e8:	20000110 	.word	0x20000110
 80066ec:	20000034 	.word	0x20000034
 80066f0:	2000000c 	.word	0x2000000c

080066f4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80066f8:	4b04      	ldr	r3, [pc, #16]	; (800670c <vTaskSuspendAll+0x18>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3301      	adds	r3, #1
 80066fe:	4a03      	ldr	r2, [pc, #12]	; (800670c <vTaskSuspendAll+0x18>)
 8006700:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006702:	bf00      	nop
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	20000134 	.word	0x20000134

08006710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006716:	2300      	movs	r3, #0
 8006718:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800671a:	2300      	movs	r3, #0
 800671c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800671e:	4b43      	ldr	r3, [pc, #268]	; (800682c <xTaskResumeAll+0x11c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <xTaskResumeAll+0x2c>
        __asm volatile
 8006726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	603b      	str	r3, [r7, #0]
    }
 8006738:	bf00      	nop
 800673a:	e7fe      	b.n	800673a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800673c:	f001 fc2a 	bl	8007f94 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006740:	4b3a      	ldr	r3, [pc, #232]	; (800682c <xTaskResumeAll+0x11c>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3b01      	subs	r3, #1
 8006746:	4a39      	ldr	r2, [pc, #228]	; (800682c <xTaskResumeAll+0x11c>)
 8006748:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674a:	4b38      	ldr	r3, [pc, #224]	; (800682c <xTaskResumeAll+0x11c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d165      	bne.n	800681e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006752:	4b37      	ldr	r3, [pc, #220]	; (8006830 <xTaskResumeAll+0x120>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d061      	beq.n	800681e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800675a:	e032      	b.n	80067c2 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800675c:	4b35      	ldr	r3, [pc, #212]	; (8006834 <xTaskResumeAll+0x124>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	3318      	adds	r3, #24
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff f835 	bl	80057d8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	3304      	adds	r3, #4
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff f830 	bl	80057d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4618      	mov	r0, r3
 800677c:	f003 fadc 	bl	8009d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006784:	2201      	movs	r2, #1
 8006786:	409a      	lsls	r2, r3
 8006788:	4b2b      	ldr	r3, [pc, #172]	; (8006838 <xTaskResumeAll+0x128>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4313      	orrs	r3, r2
 800678e:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <xTaskResumeAll+0x128>)
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006796:	4613      	mov	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4a27      	ldr	r2, [pc, #156]	; (800683c <xTaskResumeAll+0x12c>)
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3304      	adds	r3, #4
 80067a6:	4619      	mov	r1, r3
 80067a8:	4610      	mov	r0, r2
 80067aa:	f7fe ffb8 	bl	800571e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b2:	4b23      	ldr	r3, [pc, #140]	; (8006840 <xTaskResumeAll+0x130>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d302      	bcc.n	80067c2 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80067bc:	4b21      	ldr	r3, [pc, #132]	; (8006844 <xTaskResumeAll+0x134>)
 80067be:	2201      	movs	r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067c2:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <xTaskResumeAll+0x124>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1c8      	bne.n	800675c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80067d0:	f000 fb5c 	bl	8006e8c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80067d4:	4b1c      	ldr	r3, [pc, #112]	; (8006848 <xTaskResumeAll+0x138>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d010      	beq.n	8006802 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80067e0:	f000 f858 	bl	8006894 <xTaskIncrementTick>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d002      	beq.n	80067f0 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 80067ea:	4b16      	ldr	r3, [pc, #88]	; (8006844 <xTaskResumeAll+0x134>)
 80067ec:	2201      	movs	r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	3b01      	subs	r3, #1
 80067f4:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1f1      	bne.n	80067e0 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 80067fc:	4b12      	ldr	r3, [pc, #72]	; (8006848 <xTaskResumeAll+0x138>)
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006802:	4b10      	ldr	r3, [pc, #64]	; (8006844 <xTaskResumeAll+0x134>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d009      	beq.n	800681e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800680a:	2301      	movs	r3, #1
 800680c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800680e:	4b0f      	ldr	r3, [pc, #60]	; (800684c <xTaskResumeAll+0x13c>)
 8006810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	f3bf 8f4f 	dsb	sy
 800681a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800681e:	f001 fbe9 	bl	8007ff4 <vPortExitCritical>

    return xAlreadyYielded;
 8006822:	68bb      	ldr	r3, [r7, #8]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3710      	adds	r7, #16
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000134 	.word	0x20000134
 8006830:	2000010c 	.word	0x2000010c
 8006834:	200000cc 	.word	0x200000cc
 8006838:	20000114 	.word	0x20000114
 800683c:	20000038 	.word	0x20000038
 8006840:	20000034 	.word	0x20000034
 8006844:	20000120 	.word	0x20000120
 8006848:	2000011c 	.word	0x2000011c
 800684c:	e000ed04 	.word	0xe000ed04

08006850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <xTaskGetTickCount+0x1c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800685c:	687b      	ldr	r3, [r7, #4]
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	20000110 	.word	0x20000110

08006870 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006876:	f001 fc71 	bl	800815c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800687a:	2300      	movs	r3, #0
 800687c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800687e:	4b04      	ldr	r3, [pc, #16]	; (8006890 <xTaskGetTickCountFromISR+0x20>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006884:	683b      	ldr	r3, [r7, #0]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3708      	adds	r7, #8
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000110 	.word	0x20000110

08006894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800689a:	2300      	movs	r3, #0
 800689c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800689e:	4b50      	ldr	r3, [pc, #320]	; (80069e0 <xTaskIncrementTick+0x14c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f040 8092 	bne.w	80069cc <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068a8:	4b4e      	ldr	r3, [pc, #312]	; (80069e4 <xTaskIncrementTick+0x150>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80068b0:	4a4c      	ldr	r2, [pc, #304]	; (80069e4 <xTaskIncrementTick+0x150>)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d120      	bne.n	80068fe <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80068bc:	4b4a      	ldr	r3, [pc, #296]	; (80069e8 <xTaskIncrementTick+0x154>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00a      	beq.n	80068dc <xTaskIncrementTick+0x48>
        __asm volatile
 80068c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ca:	f383 8811 	msr	BASEPRI, r3
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f3bf 8f4f 	dsb	sy
 80068d6:	603b      	str	r3, [r7, #0]
    }
 80068d8:	bf00      	nop
 80068da:	e7fe      	b.n	80068da <xTaskIncrementTick+0x46>
 80068dc:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <xTaskIncrementTick+0x154>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	4b42      	ldr	r3, [pc, #264]	; (80069ec <xTaskIncrementTick+0x158>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a40      	ldr	r2, [pc, #256]	; (80069e8 <xTaskIncrementTick+0x154>)
 80068e8:	6013      	str	r3, [r2, #0]
 80068ea:	4a40      	ldr	r2, [pc, #256]	; (80069ec <xTaskIncrementTick+0x158>)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	4b3f      	ldr	r3, [pc, #252]	; (80069f0 <xTaskIncrementTick+0x15c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3301      	adds	r3, #1
 80068f6:	4a3e      	ldr	r2, [pc, #248]	; (80069f0 <xTaskIncrementTick+0x15c>)
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	f000 fac7 	bl	8006e8c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80068fe:	4b3d      	ldr	r3, [pc, #244]	; (80069f4 <xTaskIncrementTick+0x160>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	429a      	cmp	r2, r3
 8006906:	d34c      	bcc.n	80069a2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006908:	4b37      	ldr	r3, [pc, #220]	; (80069e8 <xTaskIncrementTick+0x154>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d104      	bne.n	800691c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006912:	4b38      	ldr	r3, [pc, #224]	; (80069f4 <xTaskIncrementTick+0x160>)
 8006914:	f04f 32ff 	mov.w	r2, #4294967295
 8006918:	601a      	str	r2, [r3, #0]
                    break;
 800691a:	e042      	b.n	80069a2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691c:	4b32      	ldr	r3, [pc, #200]	; (80069e8 <xTaskIncrementTick+0x154>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d203      	bcs.n	800693c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006934:	4a2f      	ldr	r2, [pc, #188]	; (80069f4 <xTaskIncrementTick+0x160>)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800693a:	e032      	b.n	80069a2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	3304      	adds	r3, #4
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe ff49 	bl	80057d8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	3318      	adds	r3, #24
 8006952:	4618      	mov	r0, r3
 8006954:	f7fe ff40 	bl	80057d8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4618      	mov	r0, r3
 800695c:	f003 f9ec 	bl	8009d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	2201      	movs	r2, #1
 8006966:	409a      	lsls	r2, r3
 8006968:	4b23      	ldr	r3, [pc, #140]	; (80069f8 <xTaskIncrementTick+0x164>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4313      	orrs	r3, r2
 800696e:	4a22      	ldr	r2, [pc, #136]	; (80069f8 <xTaskIncrementTick+0x164>)
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <xTaskIncrementTick+0x168>)
 8006980:	441a      	add	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	3304      	adds	r3, #4
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f7fe fec8 	bl	800571e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006992:	4b1b      	ldr	r3, [pc, #108]	; (8006a00 <xTaskIncrementTick+0x16c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006998:	429a      	cmp	r2, r3
 800699a:	d3b5      	bcc.n	8006908 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800699c:	2301      	movs	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069a0:	e7b2      	b.n	8006908 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069a2:	4b17      	ldr	r3, [pc, #92]	; (8006a00 <xTaskIncrementTick+0x16c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a8:	4914      	ldr	r1, [pc, #80]	; (80069fc <xTaskIncrementTick+0x168>)
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	440b      	add	r3, r1
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d901      	bls.n	80069be <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80069be:	4b11      	ldr	r3, [pc, #68]	; (8006a04 <xTaskIncrementTick+0x170>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d007      	beq.n	80069d6 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80069c6:	2301      	movs	r3, #1
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e004      	b.n	80069d6 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80069cc:	4b0e      	ldr	r3, [pc, #56]	; (8006a08 <xTaskIncrementTick+0x174>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	3301      	adds	r3, #1
 80069d2:	4a0d      	ldr	r2, [pc, #52]	; (8006a08 <xTaskIncrementTick+0x174>)
 80069d4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80069d6:	697b      	ldr	r3, [r7, #20]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20000134 	.word	0x20000134
 80069e4:	20000110 	.word	0x20000110
 80069e8:	200000c4 	.word	0x200000c4
 80069ec:	200000c8 	.word	0x200000c8
 80069f0:	20000124 	.word	0x20000124
 80069f4:	2000012c 	.word	0x2000012c
 80069f8:	20000114 	.word	0x20000114
 80069fc:	20000038 	.word	0x20000038
 8006a00:	20000034 	.word	0x20000034
 8006a04:	20000120 	.word	0x20000120
 8006a08:	2000011c 	.word	0x2000011c

08006a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a12:	4b2d      	ldr	r3, [pc, #180]	; (8006ac8 <vTaskSwitchContext+0xbc>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006a1a:	4b2c      	ldr	r3, [pc, #176]	; (8006acc <vTaskSwitchContext+0xc0>)
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006a20:	e04d      	b.n	8006abe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8006a22:	4b2a      	ldr	r3, [pc, #168]	; (8006acc <vTaskSwitchContext+0xc0>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a28:	4b29      	ldr	r3, [pc, #164]	; (8006ad0 <vTaskSwitchContext+0xc4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	fab3 f383 	clz	r3, r3
 8006a34:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006a36:	7afb      	ldrb	r3, [r7, #11]
 8006a38:	f1c3 031f 	rsb	r3, r3, #31
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	4925      	ldr	r1, [pc, #148]	; (8006ad4 <vTaskSwitchContext+0xc8>)
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4613      	mov	r3, r2
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	4413      	add	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10a      	bne.n	8006a68 <vTaskSwitchContext+0x5c>
        __asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	607b      	str	r3, [r7, #4]
    }
 8006a64:	bf00      	nop
 8006a66:	e7fe      	b.n	8006a66 <vTaskSwitchContext+0x5a>
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <vTaskSwitchContext+0xc8>)
 8006a74:	4413      	add	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d104      	bne.n	8006a98 <vTaskSwitchContext+0x8c>
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	605a      	str	r2, [r3, #4]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	4a0e      	ldr	r2, [pc, #56]	; (8006ad8 <vTaskSwitchContext+0xcc>)
 8006aa0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <vTaskSwitchContext+0xcc>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	4b0d      	ldr	r3, [pc, #52]	; (8006adc <vTaskSwitchContext+0xd0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d102      	bne.n	8006ab4 <vTaskSwitchContext+0xa8>
 8006aae:	f003 f8a3 	bl	8009bf8 <SEGGER_SYSVIEW_OnIdle>
}
 8006ab2:	e004      	b.n	8006abe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8006ab4:	4b08      	ldr	r3, [pc, #32]	; (8006ad8 <vTaskSwitchContext+0xcc>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f003 f8fb 	bl	8009cb4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000134 	.word	0x20000134
 8006acc:	20000120 	.word	0x20000120
 8006ad0:	20000114 	.word	0x20000114
 8006ad4:	20000038 	.word	0x20000038
 8006ad8:	20000034 	.word	0x20000034
 8006adc:	20000130 	.word	0x20000130

08006ae0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	60fb      	str	r3, [r7, #12]
    }
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b06:	4b07      	ldr	r3, [pc, #28]	; (8006b24 <vTaskPlaceOnEventList+0x44>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3318      	adds	r3, #24
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fe fe29 	bl	8005766 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b14:	2101      	movs	r1, #1
 8006b16:	6838      	ldr	r0, [r7, #0]
 8006b18:	f000 fd02 	bl	8007520 <prvAddCurrentTaskToDelayedList>
}
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20000034 	.word	0x20000034

08006b28 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10a      	bne.n	8006b50 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	617b      	str	r3, [r7, #20]
    }
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b50:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <vTaskPlaceOnEventListRestricted+0x58>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3318      	adds	r3, #24
 8006b56:	4619      	mov	r1, r3
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f7fe fde0 	bl	800571e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8006b64:	f04f 33ff 	mov.w	r3, #4294967295
 8006b68:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8006b6a:	2024      	movs	r0, #36	; 0x24
 8006b6c:	f002 fa98 	bl	80090a0 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b70:	6879      	ldr	r1, [r7, #4]
 8006b72:	68b8      	ldr	r0, [r7, #8]
 8006b74:	f000 fcd4 	bl	8007520 <prvAddCurrentTaskToDelayedList>
    }
 8006b78:	bf00      	nop
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	20000034 	.word	0x20000034

08006b84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10a      	bne.n	8006bb0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	60fb      	str	r3, [r7, #12]
    }
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	3318      	adds	r3, #24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fe0f 	bl	80057d8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bba:	4b1f      	ldr	r3, [pc, #124]	; (8006c38 <xTaskRemoveFromEventList+0xb4>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d120      	bne.n	8006c04 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fe06 	bl	80057d8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f003 f8b2 	bl	8009d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	2201      	movs	r2, #1
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	4b17      	ldr	r3, [pc, #92]	; (8006c3c <xTaskRemoveFromEventList+0xb8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	4a16      	ldr	r2, [pc, #88]	; (8006c3c <xTaskRemoveFromEventList+0xb8>)
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4a13      	ldr	r2, [pc, #76]	; (8006c40 <xTaskRemoveFromEventList+0xbc>)
 8006bf4:	441a      	add	r2, r3
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f7fe fd8e 	bl	800571e <vListInsertEnd>
 8006c02:	e005      	b.n	8006c10 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3318      	adds	r3, #24
 8006c08:	4619      	mov	r1, r3
 8006c0a:	480e      	ldr	r0, [pc, #56]	; (8006c44 <xTaskRemoveFromEventList+0xc0>)
 8006c0c:	f7fe fd87 	bl	800571e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c14:	4b0c      	ldr	r3, [pc, #48]	; (8006c48 <xTaskRemoveFromEventList+0xc4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d905      	bls.n	8006c2a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006c22:	4b0a      	ldr	r3, [pc, #40]	; (8006c4c <xTaskRemoveFromEventList+0xc8>)
 8006c24:	2201      	movs	r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e001      	b.n	8006c2e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006c2e:	697b      	ldr	r3, [r7, #20]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3718      	adds	r7, #24
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000134 	.word	0x20000134
 8006c3c:	20000114 	.word	0x20000114
 8006c40:	20000038 	.word	0x20000038
 8006c44:	200000cc 	.word	0x200000cc
 8006c48:	20000034 	.word	0x20000034
 8006c4c:	20000120 	.word	0x20000120

08006c50 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c58:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <vTaskInternalSetTimeOutState+0x24>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006c60:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <vTaskInternalSetTimeOutState+0x28>)
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	605a      	str	r2, [r3, #4]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	20000124 	.word	0x20000124
 8006c78:	20000110 	.word	0x20000110

08006c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b088      	sub	sp, #32
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	613b      	str	r3, [r7, #16]
    }
 8006c9e:	bf00      	nop
 8006ca0:	e7fe      	b.n	8006ca0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10a      	bne.n	8006cbe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	60fb      	str	r3, [r7, #12]
    }
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8006cbe:	f001 f969 	bl	8007f94 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006cc2:	4b1f      	ldr	r3, [pc, #124]	; (8006d40 <xTaskCheckForTimeOut+0xc4>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	d102      	bne.n	8006ce2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	61fb      	str	r3, [r7, #28]
 8006ce0:	e026      	b.n	8006d30 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	4b17      	ldr	r3, [pc, #92]	; (8006d44 <xTaskCheckForTimeOut+0xc8>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d00a      	beq.n	8006d04 <xTaskCheckForTimeOut+0x88>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d305      	bcc.n	8006d04 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	e015      	b.n	8006d30 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d20b      	bcs.n	8006d26 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	1ad2      	subs	r2, r2, r3
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff ff98 	bl	8006c50 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006d20:	2300      	movs	r3, #0
 8006d22:	61fb      	str	r3, [r7, #28]
 8006d24:	e004      	b.n	8006d30 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006d30:	f001 f960 	bl	8007ff4 <vPortExitCritical>

    return xReturn;
 8006d34:	69fb      	ldr	r3, [r7, #28]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000110 	.word	0x20000110
 8006d44:	20000124 	.word	0x20000124

08006d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006d4c:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <vTaskMissedYield+0x14>)
 8006d4e:	2201      	movs	r2, #1
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000120 	.word	0x20000120

08006d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006d68:	f000 f852 	bl	8006e10 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <prvIdleTask+0x28>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d9f9      	bls.n	8006d68 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006d74:	4b05      	ldr	r3, [pc, #20]	; (8006d8c <prvIdleTask+0x2c>)
 8006d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006d84:	e7f0      	b.n	8006d68 <prvIdleTask+0x8>
 8006d86:	bf00      	nop
 8006d88:	20000038 	.word	0x20000038
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d96:	2300      	movs	r3, #0
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	e00c      	b.n	8006db6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4a12      	ldr	r2, [pc, #72]	; (8006df0 <prvInitialiseTaskLists+0x60>)
 8006da8:	4413      	add	r3, r2
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fc8a 	bl	80056c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3301      	adds	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	d9ef      	bls.n	8006d9c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006dbc:	480d      	ldr	r0, [pc, #52]	; (8006df4 <prvInitialiseTaskLists+0x64>)
 8006dbe:	f7fe fc81 	bl	80056c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006dc2:	480d      	ldr	r0, [pc, #52]	; (8006df8 <prvInitialiseTaskLists+0x68>)
 8006dc4:	f7fe fc7e 	bl	80056c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006dc8:	480c      	ldr	r0, [pc, #48]	; (8006dfc <prvInitialiseTaskLists+0x6c>)
 8006dca:	f7fe fc7b 	bl	80056c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006dce:	480c      	ldr	r0, [pc, #48]	; (8006e00 <prvInitialiseTaskLists+0x70>)
 8006dd0:	f7fe fc78 	bl	80056c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006dd4:	480b      	ldr	r0, [pc, #44]	; (8006e04 <prvInitialiseTaskLists+0x74>)
 8006dd6:	f7fe fc75 	bl	80056c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006dda:	4b0b      	ldr	r3, [pc, #44]	; (8006e08 <prvInitialiseTaskLists+0x78>)
 8006ddc:	4a05      	ldr	r2, [pc, #20]	; (8006df4 <prvInitialiseTaskLists+0x64>)
 8006dde:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <prvInitialiseTaskLists+0x7c>)
 8006de2:	4a05      	ldr	r2, [pc, #20]	; (8006df8 <prvInitialiseTaskLists+0x68>)
 8006de4:	601a      	str	r2, [r3, #0]
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20000038 	.word	0x20000038
 8006df4:	2000009c 	.word	0x2000009c
 8006df8:	200000b0 	.word	0x200000b0
 8006dfc:	200000cc 	.word	0x200000cc
 8006e00:	200000e0 	.word	0x200000e0
 8006e04:	200000f8 	.word	0x200000f8
 8006e08:	200000c4 	.word	0x200000c4
 8006e0c:	200000c8 	.word	0x200000c8

08006e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e16:	e019      	b.n	8006e4c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006e18:	f001 f8bc 	bl	8007f94 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1c:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <prvCheckTasksWaitingTermination+0x50>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe fcd5 	bl	80057d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <prvCheckTasksWaitingTermination+0x54>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	4a0b      	ldr	r2, [pc, #44]	; (8006e64 <prvCheckTasksWaitingTermination+0x54>)
 8006e36:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006e38:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <prvCheckTasksWaitingTermination+0x58>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	4a0a      	ldr	r2, [pc, #40]	; (8006e68 <prvCheckTasksWaitingTermination+0x58>)
 8006e40:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006e42:	f001 f8d7 	bl	8007ff4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f810 	bl	8006e6c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <prvCheckTasksWaitingTermination+0x58>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e1      	bne.n	8006e18 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	200000e0 	.word	0x200000e0
 8006e64:	2000010c 	.word	0x2000010c
 8006e68:	200000f4 	.word	0x200000f4

08006e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b082      	sub	sp, #8
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 fa8f 	bl	800839c <vPortFree>
                vPortFree( pxTCB );
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fa8c 	bl	800839c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e90:	4b0a      	ldr	r3, [pc, #40]	; (8006ebc <prvResetNextTaskUnblockTime+0x30>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006e9a:	4b09      	ldr	r3, [pc, #36]	; (8006ec0 <prvResetNextTaskUnblockTime+0x34>)
 8006e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006ea2:	e005      	b.n	8006eb0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006ea4:	4b05      	ldr	r3, [pc, #20]	; (8006ebc <prvResetNextTaskUnblockTime+0x30>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a04      	ldr	r2, [pc, #16]	; (8006ec0 <prvResetNextTaskUnblockTime+0x34>)
 8006eae:	6013      	str	r3, [r2, #0]
}
 8006eb0:	bf00      	nop
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	200000c4 	.word	0x200000c4
 8006ec0:	2000012c 	.word	0x2000012c

08006ec4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006eca:	4b0b      	ldr	r3, [pc, #44]	; (8006ef8 <xTaskGetSchedulerState+0x34>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d102      	bne.n	8006ed8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	607b      	str	r3, [r7, #4]
 8006ed6:	e008      	b.n	8006eea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ed8:	4b08      	ldr	r3, [pc, #32]	; (8006efc <xTaskGetSchedulerState+0x38>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	607b      	str	r3, [r7, #4]
 8006ee4:	e001      	b.n	8006eea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006eea:	687b      	ldr	r3, [r7, #4]
    }
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	20000118 	.word	0x20000118
 8006efc:	20000134 	.word	0x20000134

08006f00 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d068      	beq.n	8006fe8 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006f16:	4b37      	ldr	r3, [pc, #220]	; (8006ff4 <xTaskPriorityDisinherit+0xf4>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	693a      	ldr	r2, [r7, #16]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d00a      	beq.n	8006f36 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60fb      	str	r3, [r7, #12]
    }
 8006f32:	bf00      	nop
 8006f34:	e7fe      	b.n	8006f34 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	60bb      	str	r3, [r7, #8]
    }
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f58:	1e5a      	subs	r2, r3, #1
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d03e      	beq.n	8006fe8 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d13a      	bne.n	8006fe8 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fe fc2e 	bl	80057d8 <uxListRemove>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10a      	bne.n	8006f98 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	2201      	movs	r2, #1
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	43da      	mvns	r2, r3
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ff8 <xTaskPriorityDisinherit+0xf8>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4013      	ands	r3, r2
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <xTaskPriorityDisinherit+0xf8>)
 8006f96:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	204a      	movs	r0, #74	; 0x4a
 8006f9e:	f002 f89d 	bl	80090dc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	f1c3 0205 	rsb	r2, r3, #5
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fba:	2201      	movs	r2, #1
 8006fbc:	409a      	lsls	r2, r3
 8006fbe:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <xTaskPriorityDisinherit+0xf8>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <xTaskPriorityDisinherit+0xf8>)
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4a09      	ldr	r2, [pc, #36]	; (8006ffc <xTaskPriorityDisinherit+0xfc>)
 8006fd6:	441a      	add	r2, r3
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	3304      	adds	r3, #4
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4610      	mov	r0, r2
 8006fe0:	f7fe fb9d 	bl	800571e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006fe8:	697b      	ldr	r3, [r7, #20]
    }
 8006fea:	4618      	mov	r0, r3
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20000034 	.word	0x20000034
 8006ff8:	20000114 	.word	0x20000114
 8006ffc:	20000038 	.word	0x20000038

08007000 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af02      	add	r7, sp, #8
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	613b      	str	r3, [r7, #16]
    }
 8007026:	bf00      	nop
 8007028:	e7fe      	b.n	8007028 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800702a:	f000 ffb3 	bl	8007f94 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800702e:	4b36      	ldr	r3, [pc, #216]	; (8007108 <xTaskGenericNotifyWait+0x108>)
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	3354      	adds	r3, #84	; 0x54
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d022      	beq.n	8007086 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8007040:	4b31      	ldr	r3, [pc, #196]	; (8007108 <xTaskGenericNotifyWait+0x108>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	3214      	adds	r2, #20
 8007048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	43d2      	mvns	r2, r2
 8007050:	4011      	ands	r1, r2
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	3214      	adds	r2, #20
 8007056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800705a:	4b2b      	ldr	r3, [pc, #172]	; (8007108 <xTaskGenericNotifyWait+0x108>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	4413      	add	r3, r2
 8007062:	3354      	adds	r3, #84	; 0x54
 8007064:	2201      	movs	r2, #1
 8007066:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800706e:	2101      	movs	r1, #1
 8007070:	6a38      	ldr	r0, [r7, #32]
 8007072:	f000 fa55 	bl	8007520 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8007076:	4b25      	ldr	r3, [pc, #148]	; (800710c <xTaskGenericNotifyWait+0x10c>)
 8007078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007086:	f000 ffb5 	bl	8007ff4 <vPortExitCritical>

        taskENTER_CRITICAL();
 800708a:	f000 ff83 	bl	8007f94 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	4613      	mov	r3, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	68b9      	ldr	r1, [r7, #8]
 800709a:	2040      	movs	r0, #64	; 0x40
 800709c:	f002 f92a 	bl	80092f4 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <xTaskGenericNotifyWait+0x108>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	3214      	adds	r2, #20
 80070ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80070b6:	4b14      	ldr	r3, [pc, #80]	; (8007108 <xTaskGenericNotifyWait+0x108>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	3354      	adds	r3, #84	; 0x54
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d002      	beq.n	80070ce <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	e00e      	b.n	80070ec <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80070ce:	4b0e      	ldr	r3, [pc, #56]	; (8007108 <xTaskGenericNotifyWait+0x108>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	3214      	adds	r2, #20
 80070d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	43d2      	mvns	r2, r2
 80070de:	4011      	ands	r1, r2
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	3214      	adds	r2, #20
 80070e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80070e8:	2301      	movs	r3, #1
 80070ea:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80070ec:	4b06      	ldr	r3, [pc, #24]	; (8007108 <xTaskGenericNotifyWait+0x108>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	4413      	add	r3, r2
 80070f4:	3354      	adds	r3, #84	; 0x54
 80070f6:	2200      	movs	r2, #0
 80070f8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80070fa:	f000 ff7b 	bl	8007ff4 <vPortExitCritical>

        return xReturn;
 80070fe:	697b      	ldr	r3, [r7, #20]
    }
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	20000034 	.word	0x20000034
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007110:	b580      	push	{r7, lr}
 8007112:	b08e      	sub	sp, #56	; 0x38
 8007114:	af02      	add	r7, sp, #8
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800711e:	2301      	movs	r3, #1
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00a      	beq.n	800713e <xTaskGenericNotify+0x2e>
        __asm volatile
 8007128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800712c:	f383 8811 	msr	BASEPRI, r3
 8007130:	f3bf 8f6f 	isb	sy
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	623b      	str	r3, [r7, #32]
    }
 800713a:	bf00      	nop
 800713c:	e7fe      	b.n	800713c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xTaskGenericNotify+0x4a>
        __asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	61fb      	str	r3, [r7, #28]
    }
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800715e:	f000 ff19 	bl	8007f94 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	2b00      	cmp	r3, #0
 8007166:	d006      	beq.n	8007176 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	3214      	adds	r2, #20
 800716e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	4413      	add	r3, r2
 800717c:	3354      	adds	r3, #84	; 0x54
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4413      	add	r3, r2
 800718a:	3354      	adds	r3, #84	; 0x54
 800718c:	2202      	movs	r2, #2
 800718e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	2b04      	cmp	r3, #4
 8007194:	d83b      	bhi.n	800720e <xTaskGenericNotify+0xfe>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <xTaskGenericNotify+0x8c>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	0800722d 	.word	0x0800722d
 80071a0:	080071b1 	.word	0x080071b1
 80071a4:	080071cd 	.word	0x080071cd
 80071a8:	080071e5 	.word	0x080071e5
 80071ac:	080071f3 	.word	0x080071f3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	68ba      	ldr	r2, [r7, #8]
 80071b4:	3214      	adds	r2, #20
 80071b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	ea42 0103 	orr.w	r1, r2, r3
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	3214      	adds	r2, #20
 80071c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80071ca:	e032      	b.n	8007232 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	3214      	adds	r2, #20
 80071d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d6:	1c59      	adds	r1, r3, #1
 80071d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	3214      	adds	r2, #20
 80071de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80071e2:	e026      	b.n	8007232 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80071e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	3214      	adds	r2, #20
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80071f0:	e01f      	b.n	8007232 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80071f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d006      	beq.n	8007208 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	3214      	adds	r2, #20
 8007200:	6879      	ldr	r1, [r7, #4]
 8007202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007206:	e014      	b.n	8007232 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8007208:	2300      	movs	r3, #0
 800720a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800720c:	e011      	b.n	8007232 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800720e:	4b34      	ldr	r3, [pc, #208]	; (80072e0 <xTaskGenericNotify+0x1d0>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00c      	beq.n	8007230 <xTaskGenericNotify+0x120>
        __asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	61bb      	str	r3, [r7, #24]
    }
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <xTaskGenericNotify+0x11a>
                    break;
 800722c:	bf00      	nop
 800722e:	e000      	b.n	8007232 <xTaskGenericNotify+0x122>

                    break;
 8007230:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	4618      	mov	r0, r3
 8007236:	f002 fe21 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 800723a:	4601      	mov	r1, r0
 800723c:	78fa      	ldrb	r2, [r7, #3]
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	203e      	movs	r0, #62	; 0x3e
 8007248:	f002 f854 	bl	80092f4 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800724c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007250:	2b01      	cmp	r3, #1
 8007252:	d13d      	bne.n	80072d0 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007256:	3304      	adds	r3, #4
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe fabd 	bl	80057d8 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	4618      	mov	r0, r3
 8007262:	f002 fd69 	bl	8009d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	2201      	movs	r2, #1
 800726c:	409a      	lsls	r2, r3
 800726e:	4b1d      	ldr	r3, [pc, #116]	; (80072e4 <xTaskGenericNotify+0x1d4>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4313      	orrs	r3, r2
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <xTaskGenericNotify+0x1d4>)
 8007276:	6013      	str	r3, [r2, #0]
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <xTaskGenericNotify+0x1d8>)
 8007286:	441a      	add	r2, r3
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	3304      	adds	r3, #4
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f7fe fa45 	bl	800571e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <xTaskGenericNotify+0x1a2>
        __asm volatile
 800729c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	617b      	str	r3, [r7, #20]
    }
 80072ae:	bf00      	nop
 80072b0:	e7fe      	b.n	80072b0 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072b6:	4b0d      	ldr	r3, [pc, #52]	; (80072ec <xTaskGenericNotify+0x1dc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	429a      	cmp	r2, r3
 80072be:	d907      	bls.n	80072d0 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <xTaskGenericNotify+0x1e0>)
 80072c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80072d0:	f000 fe90 	bl	8007ff4 <vPortExitCritical>

        return xReturn;
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 80072d6:	4618      	mov	r0, r3
 80072d8:	3730      	adds	r7, #48	; 0x30
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000110 	.word	0x20000110
 80072e4:	20000114 	.word	0x20000114
 80072e8:	20000038 	.word	0x20000038
 80072ec:	20000034 	.word	0x20000034
 80072f0:	e000ed04 	.word	0xe000ed04

080072f4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b092      	sub	sp, #72	; 0x48
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8007302:	2301      	movs	r3, #1
 8007304:	63fb      	str	r3, [r7, #60]	; 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800730c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 800731e:	bf00      	nop
 8007320:	e7fe      	b.n	8007320 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800733e:	f000 ff0d 	bl	800815c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	63bb      	str	r3, [r7, #56]	; 0x38
        __asm volatile
 8007346:	f3ef 8211 	mrs	r2, BASEPRI
 800734a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	627a      	str	r2, [r7, #36]	; 0x24
 800735c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8007362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	3214      	adds	r2, #20
 800736e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007374:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4413      	add	r3, r2
 800737c:	3354      	adds	r3, #84	; 0x54
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	4413      	add	r3, r2
 800738a:	3354      	adds	r3, #84	; 0x54
 800738c:	2202      	movs	r2, #2
 800738e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d83b      	bhi.n	800740e <xTaskGenericNotifyFromISR+0x11a>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <xTaskGenericNotifyFromISR+0xa8>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	0800742d 	.word	0x0800742d
 80073a0:	080073b1 	.word	0x080073b1
 80073a4:	080073cd 	.word	0x080073cd
 80073a8:	080073e5 	.word	0x080073e5
 80073ac:	080073f3 	.word	0x080073f3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	3214      	adds	r2, #20
 80073b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	ea42 0103 	orr.w	r1, r2, r3
 80073c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	3214      	adds	r2, #20
 80073c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80073ca:	e032      	b.n	8007432 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	3214      	adds	r2, #20
 80073d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d6:	1c59      	adds	r1, r3, #1
 80073d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	3214      	adds	r2, #20
 80073de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80073e2:	e026      	b.n	8007432 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	3214      	adds	r2, #20
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80073f0:	e01f      	b.n	8007432 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80073f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d006      	beq.n	8007408 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80073fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	3214      	adds	r2, #20
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007406:	e014      	b.n	8007432 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8007408:	2300      	movs	r3, #0
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800740c:	e011      	b.n	8007432 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800740e:	4b3d      	ldr	r3, [pc, #244]	; (8007504 <xTaskGenericNotifyFromISR+0x210>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00c      	beq.n	8007430 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	61fb      	str	r3, [r7, #28]
    }
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800742c:	bf00      	nop
 800742e:	e000      	b.n	8007432 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8007430:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8007432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007434:	4618      	mov	r0, r3
 8007436:	f002 fd21 	bl	8009e7c <SEGGER_SYSVIEW_ShrinkId>
 800743a:	78f9      	ldrb	r1, [r7, #3]
 800743c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800743e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007440:	9201      	str	r2, [sp, #4]
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	460b      	mov	r3, r1
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	4601      	mov	r1, r0
 800744a:	203f      	movs	r0, #63	; 0x3f
 800744c:	f001 ffe4 	bl	8009418 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007450:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007454:	2b01      	cmp	r3, #1
 8007456:	d149      	bne.n	80074ec <xTaskGenericNotifyFromISR+0x1f8>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00a      	beq.n	8007476 <xTaskGenericNotifyFromISR+0x182>
        __asm volatile
 8007460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007464:	f383 8811 	msr	BASEPRI, r3
 8007468:	f3bf 8f6f 	isb	sy
 800746c:	f3bf 8f4f 	dsb	sy
 8007470:	61bb      	str	r3, [r7, #24]
    }
 8007472:	bf00      	nop
 8007474:	e7fe      	b.n	8007474 <xTaskGenericNotifyFromISR+0x180>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007476:	4b24      	ldr	r3, [pc, #144]	; (8007508 <xTaskGenericNotifyFromISR+0x214>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d120      	bne.n	80074c0 <xTaskGenericNotifyFromISR+0x1cc>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	3304      	adds	r3, #4
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe f9a8 	bl	80057d8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748a:	4618      	mov	r0, r3
 800748c:	f002 fc54 	bl	8009d38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007494:	2201      	movs	r2, #1
 8007496:	409a      	lsls	r2, r3
 8007498:	4b1c      	ldr	r3, [pc, #112]	; (800750c <xTaskGenericNotifyFromISR+0x218>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4313      	orrs	r3, r2
 800749e:	4a1b      	ldr	r2, [pc, #108]	; (800750c <xTaskGenericNotifyFromISR+0x218>)
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074a6:	4613      	mov	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	4413      	add	r3, r2
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4a18      	ldr	r2, [pc, #96]	; (8007510 <xTaskGenericNotifyFromISR+0x21c>)
 80074b0:	441a      	add	r2, r3
 80074b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b4:	3304      	adds	r3, #4
 80074b6:	4619      	mov	r1, r3
 80074b8:	4610      	mov	r0, r2
 80074ba:	f7fe f930 	bl	800571e <vListInsertEnd>
 80074be:	e005      	b.n	80074cc <xTaskGenericNotifyFromISR+0x1d8>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	3318      	adds	r3, #24
 80074c4:	4619      	mov	r1, r3
 80074c6:	4813      	ldr	r0, [pc, #76]	; (8007514 <xTaskGenericNotifyFromISR+0x220>)
 80074c8:	f7fe f929 	bl	800571e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	4b11      	ldr	r3, [pc, #68]	; (8007518 <xTaskGenericNotifyFromISR+0x224>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d908      	bls.n	80074ec <xTaskGenericNotifyFromISR+0x1f8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80074da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <xTaskGenericNotifyFromISR+0x1f2>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80074e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e2:	2201      	movs	r2, #1
 80074e4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80074e6:	4b0d      	ldr	r3, [pc, #52]	; (800751c <xTaskGenericNotifyFromISR+0x228>)
 80074e8:	2201      	movs	r2, #1
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074ee:	617b      	str	r3, [r7, #20]
        __asm volatile
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f383 8811 	msr	BASEPRI, r3
    }
 80074f6:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80074f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    }
 80074fa:	4618      	mov	r0, r3
 80074fc:	3740      	adds	r7, #64	; 0x40
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	20000110 	.word	0x20000110
 8007508:	20000134 	.word	0x20000134
 800750c:	20000114 	.word	0x20000114
 8007510:	20000038 	.word	0x20000038
 8007514:	200000cc 	.word	0x200000cc
 8007518:	20000034 	.word	0x20000034
 800751c:	20000120 	.word	0x20000120

08007520 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800752a:	4b32      	ldr	r3, [pc, #200]	; (80075f4 <prvAddCurrentTaskToDelayedList+0xd4>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007530:	4b31      	ldr	r3, [pc, #196]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3304      	adds	r3, #4
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe f94e 	bl	80057d8 <uxListRemove>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10b      	bne.n	800755a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007542:	4b2d      	ldr	r3, [pc, #180]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	2201      	movs	r2, #1
 800754a:	fa02 f303 	lsl.w	r3, r2, r3
 800754e:	43da      	mvns	r2, r3
 8007550:	4b2a      	ldr	r3, [pc, #168]	; (80075fc <prvAddCurrentTaskToDelayedList+0xdc>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4013      	ands	r3, r2
 8007556:	4a29      	ldr	r2, [pc, #164]	; (80075fc <prvAddCurrentTaskToDelayedList+0xdc>)
 8007558:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d110      	bne.n	8007584 <prvAddCurrentTaskToDelayedList+0x64>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00d      	beq.n	8007584 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8007568:	4b23      	ldr	r3, [pc, #140]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	211b      	movs	r1, #27
 800756e:	4618      	mov	r0, r3
 8007570:	f002 fc24 	bl	8009dbc <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007574:	4b20      	ldr	r3, [pc, #128]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3304      	adds	r3, #4
 800757a:	4619      	mov	r1, r3
 800757c:	4820      	ldr	r0, [pc, #128]	; (8007600 <prvAddCurrentTaskToDelayedList+0xe0>)
 800757e:	f7fe f8ce 	bl	800571e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007582:	e032      	b.n	80075ea <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800758c:	4b1a      	ldr	r3, [pc, #104]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	429a      	cmp	r2, r3
 800759a:	d20f      	bcs.n	80075bc <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800759c:	4b16      	ldr	r3, [pc, #88]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2104      	movs	r1, #4
 80075a2:	4618      	mov	r0, r3
 80075a4:	f002 fc0a 	bl	8009dbc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075a8:	4b16      	ldr	r3, [pc, #88]	; (8007604 <prvAddCurrentTaskToDelayedList+0xe4>)
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3304      	adds	r3, #4
 80075b2:	4619      	mov	r1, r3
 80075b4:	4610      	mov	r0, r2
 80075b6:	f7fe f8d6 	bl	8005766 <vListInsert>
}
 80075ba:	e016      	b.n	80075ea <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80075bc:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2104      	movs	r1, #4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f002 fbfa 	bl	8009dbc <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075c8:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <prvAddCurrentTaskToDelayedList+0xe8>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4b0a      	ldr	r3, [pc, #40]	; (80075f8 <prvAddCurrentTaskToDelayedList+0xd8>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f7fe f8c6 	bl	8005766 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80075da:	4b0c      	ldr	r3, [pc, #48]	; (800760c <prvAddCurrentTaskToDelayedList+0xec>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d202      	bcs.n	80075ea <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80075e4:	4a09      	ldr	r2, [pc, #36]	; (800760c <prvAddCurrentTaskToDelayedList+0xec>)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	6013      	str	r3, [r2, #0]
}
 80075ea:	bf00      	nop
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000110 	.word	0x20000110
 80075f8:	20000034 	.word	0x20000034
 80075fc:	20000114 	.word	0x20000114
 8007600:	200000f8 	.word	0x200000f8
 8007604:	200000c8 	.word	0x200000c8
 8007608:	200000c4 	.word	0x200000c4
 800760c:	2000012c 	.word	0x2000012c

08007610 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800761a:	f000 fad5 	bl	8007bc8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800761e:	4b11      	ldr	r3, [pc, #68]	; (8007664 <xTimerCreateTimerTask+0x54>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00b      	beq.n	800763e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007626:	4b10      	ldr	r3, [pc, #64]	; (8007668 <xTimerCreateTimerTask+0x58>)
 8007628:	9301      	str	r3, [sp, #4]
 800762a:	2302      	movs	r3, #2
 800762c:	9300      	str	r3, [sp, #0]
 800762e:	2300      	movs	r3, #0
 8007630:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007634:	490d      	ldr	r1, [pc, #52]	; (800766c <xTimerCreateTimerTask+0x5c>)
 8007636:	480e      	ldr	r0, [pc, #56]	; (8007670 <xTimerCreateTimerTask+0x60>)
 8007638:	f7fe fe96 	bl	8006368 <xTaskCreate>
 800763c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	603b      	str	r3, [r7, #0]
    }
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800765a:	687b      	ldr	r3, [r7, #4]
    }
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	20000168 	.word	0x20000168
 8007668:	2000016c 	.word	0x2000016c
 800766c:	0800a1f8 	.word	0x0800a1f8
 8007670:	080077a9 	.word	0x080077a9

08007674 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007674:	b580      	push	{r7, lr}
 8007676:	b08a      	sub	sp, #40	; 0x28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
 8007680:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007682:	2300      	movs	r3, #0
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10a      	bne.n	80076a2 <xTimerGenericCommand+0x2e>
        __asm volatile
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	623b      	str	r3, [r7, #32]
    }
 800769e:	bf00      	nop
 80076a0:	e7fe      	b.n	80076a0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80076a2:	4b1a      	ldr	r3, [pc, #104]	; (800770c <xTimerGenericCommand+0x98>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d02a      	beq.n	8007700 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b05      	cmp	r3, #5
 80076ba:	dc18      	bgt.n	80076ee <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076bc:	f7ff fc02 	bl	8006ec4 <xTaskGetSchedulerState>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d109      	bne.n	80076da <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076c6:	4b11      	ldr	r3, [pc, #68]	; (800770c <xTimerGenericCommand+0x98>)
 80076c8:	6818      	ldr	r0, [r3, #0]
 80076ca:	f107 0114 	add.w	r1, r7, #20
 80076ce:	2300      	movs	r3, #0
 80076d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076d2:	f7fe f99b 	bl	8005a0c <xQueueGenericSend>
 80076d6:	6278      	str	r0, [r7, #36]	; 0x24
 80076d8:	e012      	b.n	8007700 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076da:	4b0c      	ldr	r3, [pc, #48]	; (800770c <xTimerGenericCommand+0x98>)
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	f107 0114 	add.w	r1, r7, #20
 80076e2:	2300      	movs	r3, #0
 80076e4:	2200      	movs	r2, #0
 80076e6:	f7fe f991 	bl	8005a0c <xQueueGenericSend>
 80076ea:	6278      	str	r0, [r7, #36]	; 0x24
 80076ec:	e008      	b.n	8007700 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076ee:	4b07      	ldr	r3, [pc, #28]	; (800770c <xTimerGenericCommand+0x98>)
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	f107 0114 	add.w	r1, r7, #20
 80076f6:	2300      	movs	r3, #0
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	f7fe faad 	bl	8005c58 <xQueueGenericSendFromISR>
 80076fe:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8007702:	4618      	mov	r0, r3
 8007704:	3728      	adds	r7, #40	; 0x28
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000168 	.word	0x20000168

08007710 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af02      	add	r7, sp, #8
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771a:	4b22      	ldr	r3, [pc, #136]	; (80077a4 <prvProcessExpiredTimer+0x94>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe f855 	bl	80057d8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d022      	beq.n	8007782 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	699a      	ldr	r2, [r3, #24]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	18d1      	adds	r1, r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	683a      	ldr	r2, [r7, #0]
 8007748:	6978      	ldr	r0, [r7, #20]
 800774a:	f000 f8d1 	bl	80078f0 <prvInsertTimerInActiveList>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d01f      	beq.n	8007794 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007754:	2300      	movs	r3, #0
 8007756:	9300      	str	r3, [sp, #0]
 8007758:	2300      	movs	r3, #0
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	2100      	movs	r1, #0
 800775e:	6978      	ldr	r0, [r7, #20]
 8007760:	f7ff ff88 	bl	8007674 <xTimerGenericCommand>
 8007764:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d113      	bne.n	8007794 <prvProcessExpiredTimer+0x84>
        __asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	60fb      	str	r3, [r7, #12]
    }
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007788:	f023 0301 	bic.w	r3, r3, #1
 800778c:	b2da      	uxtb	r2, r3
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	6978      	ldr	r0, [r7, #20]
 800779a:	4798      	blx	r3
    }
 800779c:	bf00      	nop
 800779e:	3718      	adds	r7, #24
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	20000160 	.word	0x20000160

080077a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077b0:	f107 0308 	add.w	r3, r7, #8
 80077b4:	4618      	mov	r0, r3
 80077b6:	f000 f857 	bl	8007868 <prvGetNextExpireTime>
 80077ba:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4619      	mov	r1, r3
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f803 	bl	80077cc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80077c6:	f000 f8d5 	bl	8007974 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077ca:	e7f1      	b.n	80077b0 <prvTimerTask+0x8>

080077cc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80077d6:	f7fe ff8d 	bl	80066f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077da:	f107 0308 	add.w	r3, r7, #8
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 f866 	bl	80078b0 <prvSampleTimeNow>
 80077e4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d130      	bne.n	800784e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10a      	bne.n	8007808 <prvProcessTimerOrBlockTask+0x3c>
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d806      	bhi.n	8007808 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80077fa:	f7fe ff89 	bl	8006710 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077fe:	68f9      	ldr	r1, [r7, #12]
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff85 	bl	8007710 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007806:	e024      	b.n	8007852 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d008      	beq.n	8007820 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <prvProcessTimerOrBlockTask+0x90>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d101      	bne.n	800781c <prvProcessTimerOrBlockTask+0x50>
 8007818:	2301      	movs	r3, #1
 800781a:	e000      	b.n	800781e <prvProcessTimerOrBlockTask+0x52>
 800781c:	2300      	movs	r3, #0
 800781e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <prvProcessTimerOrBlockTask+0x94>)
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	683a      	ldr	r2, [r7, #0]
 800782c:	4619      	mov	r1, r3
 800782e:	f7fe fd67 	bl	8006300 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007832:	f7fe ff6d 	bl	8006710 <xTaskResumeAll>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800783c:	4b09      	ldr	r3, [pc, #36]	; (8007864 <prvProcessTimerOrBlockTask+0x98>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	f3bf 8f6f 	isb	sy
    }
 800784c:	e001      	b.n	8007852 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800784e:	f7fe ff5f 	bl	8006710 <xTaskResumeAll>
    }
 8007852:	bf00      	nop
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000164 	.word	0x20000164
 8007860:	20000168 	.word	0x20000168
 8007864:	e000ed04 	.word	0xe000ed04

08007868 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007870:	4b0e      	ldr	r3, [pc, #56]	; (80078ac <prvGetNextExpireTime+0x44>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <prvGetNextExpireTime+0x16>
 800787a:	2201      	movs	r2, #1
 800787c:	e000      	b.n	8007880 <prvGetNextExpireTime+0x18>
 800787e:	2200      	movs	r2, #0
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d105      	bne.n	8007898 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800788c:	4b07      	ldr	r3, [pc, #28]	; (80078ac <prvGetNextExpireTime+0x44>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	60fb      	str	r3, [r7, #12]
 8007896:	e001      	b.n	800789c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800789c:	68fb      	ldr	r3, [r7, #12]
    }
 800789e:	4618      	mov	r0, r3
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	20000160 	.word	0x20000160

080078b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80078b8:	f7fe ffca 	bl	8006850 <xTaskGetTickCount>
 80078bc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80078be:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <prvSampleTimeNow+0x3c>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d205      	bcs.n	80078d4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80078c8:	f000 f91a 	bl	8007b00 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	e002      	b.n	80078da <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80078da:	4a04      	ldr	r2, [pc, #16]	; (80078ec <prvSampleTimeNow+0x3c>)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80078e0:	68fb      	ldr	r3, [r7, #12]
    }
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000170 	.word	0x20000170

080078f0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80078fe:	2300      	movs	r3, #0
 8007900:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d812      	bhi.n	800793c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	1ad2      	subs	r2, r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	429a      	cmp	r2, r3
 8007922:	d302      	bcc.n	800792a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007924:	2301      	movs	r3, #1
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	e01b      	b.n	8007962 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800792a:	4b10      	ldr	r3, [pc, #64]	; (800796c <prvInsertTimerInActiveList+0x7c>)
 800792c:	681a      	ldr	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4610      	mov	r0, r2
 8007936:	f7fd ff16 	bl	8005766 <vListInsert>
 800793a:	e012      	b.n	8007962 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d206      	bcs.n	8007952 <prvInsertTimerInActiveList+0x62>
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	429a      	cmp	r2, r3
 800794a:	d302      	bcc.n	8007952 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800794c:	2301      	movs	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	e007      	b.n	8007962 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007952:	4b07      	ldr	r3, [pc, #28]	; (8007970 <prvInsertTimerInActiveList+0x80>)
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3304      	adds	r3, #4
 800795a:	4619      	mov	r1, r3
 800795c:	4610      	mov	r0, r2
 800795e:	f7fd ff02 	bl	8005766 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007962:	697b      	ldr	r3, [r7, #20]
    }
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	20000164 	.word	0x20000164
 8007970:	20000160 	.word	0x20000160

08007974 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007974:	b580      	push	{r7, lr}
 8007976:	b08c      	sub	sp, #48	; 0x30
 8007978:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800797a:	e0ae      	b.n	8007ada <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	f2c0 80aa 	blt.w	8007ad8 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	695b      	ldr	r3, [r3, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d004      	beq.n	800799a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007992:	3304      	adds	r3, #4
 8007994:	4618      	mov	r0, r3
 8007996:	f7fd ff1f 	bl	80057d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800799a:	1d3b      	adds	r3, r7, #4
 800799c:	4618      	mov	r0, r3
 800799e:	f7ff ff87 	bl	80078b0 <prvSampleTimeNow>
 80079a2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b09      	cmp	r3, #9
 80079a8:	f200 8097 	bhi.w	8007ada <prvProcessReceivedCommands+0x166>
 80079ac:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <prvProcessReceivedCommands+0x40>)
 80079ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b2:	bf00      	nop
 80079b4:	080079dd 	.word	0x080079dd
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079dd 	.word	0x080079dd
 80079c0:	08007a51 	.word	0x08007a51
 80079c4:	08007a65 	.word	0x08007a65
 80079c8:	08007aaf 	.word	0x08007aaf
 80079cc:	080079dd 	.word	0x080079dd
 80079d0:	080079dd 	.word	0x080079dd
 80079d4:	08007a51 	.word	0x08007a51
 80079d8:	08007a65 	.word	0x08007a65
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	699b      	ldr	r3, [r3, #24]
 80079f4:	18d1      	adds	r1, r2, r3
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	6a3a      	ldr	r2, [r7, #32]
 80079fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079fc:	f7ff ff78 	bl	80078f0 <prvInsertTimerInActiveList>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d069      	beq.n	8007ada <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a0c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d05e      	beq.n	8007ada <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	441a      	add	r2, r3
 8007a24:	2300      	movs	r3, #0
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a2e:	f7ff fe21 	bl	8007674 <xTimerGenericCommand>
 8007a32:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d14f      	bne.n	8007ada <prvProcessReceivedCommands+0x166>
        __asm volatile
 8007a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3e:	f383 8811 	msr	BASEPRI, r3
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	f3bf 8f4f 	dsb	sy
 8007a4a:	61bb      	str	r3, [r7, #24]
    }
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a56:	f023 0301 	bic.w	r3, r3, #1
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007a62:	e03a      	b.n	8007ada <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10a      	bne.n	8007a9a <prvProcessReceivedCommands+0x126>
        __asm volatile
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	617b      	str	r3, [r7, #20]
    }
 8007a96:	bf00      	nop
 8007a98:	e7fe      	b.n	8007a98 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	18d1      	adds	r1, r2, r3
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	6a3a      	ldr	r2, [r7, #32]
 8007aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007aa8:	f7ff ff22 	bl	80078f0 <prvInsertTimerInActiveList>
                        break;
 8007aac:	e015      	b.n	8007ada <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d103      	bne.n	8007ac4 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8007abc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007abe:	f000 fc6d 	bl	800839c <vPortFree>
 8007ac2:	e00a      	b.n	8007ada <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007aca:	f023 0301 	bic.w	r3, r3, #1
 8007ace:	b2da      	uxtb	r2, r3
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007ad6:	e000      	b.n	8007ada <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007ad8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ada:	4b08      	ldr	r3, [pc, #32]	; (8007afc <prvProcessReceivedCommands+0x188>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f107 0108 	add.w	r1, r7, #8
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe f975 	bl	8005dd4 <xQueueReceive>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f47f af45 	bne.w	800797c <prvProcessReceivedCommands+0x8>
        }
    }
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	3728      	adds	r7, #40	; 0x28
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	20000168 	.word	0x20000168

08007b00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b088      	sub	sp, #32
 8007b04:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b06:	e048      	b.n	8007b9a <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b08:	4b2d      	ldr	r3, [pc, #180]	; (8007bc0 <prvSwitchTimerLists+0xc0>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b12:	4b2b      	ldr	r3, [pc, #172]	; (8007bc0 <prvSwitchTimerLists+0xc0>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	3304      	adds	r3, #4
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fe59 	bl	80057d8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b34:	f003 0304 	and.w	r3, r3, #4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d02e      	beq.n	8007b9a <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	4413      	add	r3, r2
 8007b44:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d90e      	bls.n	8007b6c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b5a:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <prvSwitchTimerLists+0xc0>)
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3304      	adds	r3, #4
 8007b62:	4619      	mov	r1, r3
 8007b64:	4610      	mov	r0, r2
 8007b66:	f7fd fdfe 	bl	8005766 <vListInsert>
 8007b6a:	e016      	b.n	8007b9a <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	2300      	movs	r3, #0
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	2100      	movs	r1, #0
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fd7c 	bl	8007674 <xTimerGenericCommand>
 8007b7c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10a      	bne.n	8007b9a <prvSwitchTimerLists+0x9a>
        __asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	603b      	str	r3, [r7, #0]
    }
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b9a:	4b09      	ldr	r3, [pc, #36]	; (8007bc0 <prvSwitchTimerLists+0xc0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d1b1      	bne.n	8007b08 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <prvSwitchTimerLists+0xc0>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <prvSwitchTimerLists+0xc4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a04      	ldr	r2, [pc, #16]	; (8007bc0 <prvSwitchTimerLists+0xc0>)
 8007bb0:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007bb2:	4a04      	ldr	r2, [pc, #16]	; (8007bc4 <prvSwitchTimerLists+0xc4>)
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	6013      	str	r3, [r2, #0]
    }
 8007bb8:	bf00      	nop
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20000160 	.word	0x20000160
 8007bc4:	20000164 	.word	0x20000164

08007bc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007bcc:	f000 f9e2 	bl	8007f94 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007bd0:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <prvCheckForValidListAndQueue+0x54>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d11d      	bne.n	8007c14 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007bd8:	4811      	ldr	r0, [pc, #68]	; (8007c20 <prvCheckForValidListAndQueue+0x58>)
 8007bda:	f7fd fd73 	bl	80056c4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007bde:	4811      	ldr	r0, [pc, #68]	; (8007c24 <prvCheckForValidListAndQueue+0x5c>)
 8007be0:	f7fd fd70 	bl	80056c4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007be4:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <prvCheckForValidListAndQueue+0x60>)
 8007be6:	4a0e      	ldr	r2, [pc, #56]	; (8007c20 <prvCheckForValidListAndQueue+0x58>)
 8007be8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007bea:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <prvCheckForValidListAndQueue+0x64>)
 8007bec:	4a0d      	ldr	r2, [pc, #52]	; (8007c24 <prvCheckForValidListAndQueue+0x5c>)
 8007bee:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	210c      	movs	r1, #12
 8007bf4:	200a      	movs	r0, #10
 8007bf6:	f7fd fe81 	bl	80058fc <xQueueGenericCreate>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	4a07      	ldr	r2, [pc, #28]	; (8007c1c <prvCheckForValidListAndQueue+0x54>)
 8007bfe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007c00:	4b06      	ldr	r3, [pc, #24]	; (8007c1c <prvCheckForValidListAndQueue+0x54>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d005      	beq.n	8007c14 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c08:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <prvCheckForValidListAndQueue+0x54>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4908      	ldr	r1, [pc, #32]	; (8007c30 <prvCheckForValidListAndQueue+0x68>)
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7fe fb44 	bl	800629c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007c14:	f000 f9ee 	bl	8007ff4 <vPortExitCritical>
    }
 8007c18:	bf00      	nop
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20000168 	.word	0x20000168
 8007c20:	20000138 	.word	0x20000138
 8007c24:	2000014c 	.word	0x2000014c
 8007c28:	20000160 	.word	0x20000160
 8007c2c:	20000164 	.word	0x20000164
 8007c30:	0800a200 	.word	0x0800a200

08007c34 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3b04      	subs	r3, #4
 8007c44:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3b04      	subs	r3, #4
 8007c52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f023 0201 	bic.w	r2, r3, #1
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3b04      	subs	r3, #4
 8007c62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007c64:	4a0c      	ldr	r2, [pc, #48]	; (8007c98 <pxPortInitialiseStack+0x64>)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3b14      	subs	r3, #20
 8007c6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	3b04      	subs	r3, #4
 8007c7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f06f 0202 	mvn.w	r2, #2
 8007c82:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3b20      	subs	r3, #32
 8007c88:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	08007c9d 	.word	0x08007c9d

08007c9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007ca6:	4b12      	ldr	r3, [pc, #72]	; (8007cf0 <prvTaskExitError+0x54>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cae:	d00a      	beq.n	8007cc6 <prvTaskExitError+0x2a>
        __asm volatile
 8007cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb4:	f383 8811 	msr	BASEPRI, r3
 8007cb8:	f3bf 8f6f 	isb	sy
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	60fb      	str	r3, [r7, #12]
    }
 8007cc2:	bf00      	nop
 8007cc4:	e7fe      	b.n	8007cc4 <prvTaskExitError+0x28>
        __asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	60bb      	str	r3, [r7, #8]
    }
 8007cd8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007cda:	bf00      	nop
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0fc      	beq.n	8007cdc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007ce2:	bf00      	nop
 8007ce4:	bf00      	nop
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr
 8007cf0:	20000010 	.word	0x20000010
	...

08007d00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007d00:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <pxCurrentTCBConst2>)
 8007d02:	6819      	ldr	r1, [r3, #0]
 8007d04:	6808      	ldr	r0, [r1, #0]
 8007d06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0a:	f380 8809 	msr	PSP, r0
 8007d0e:	f3bf 8f6f 	isb	sy
 8007d12:	f04f 0000 	mov.w	r0, #0
 8007d16:	f380 8811 	msr	BASEPRI, r0
 8007d1a:	4770      	bx	lr
 8007d1c:	f3af 8000 	nop.w

08007d20 <pxCurrentTCBConst2>:
 8007d20:	20000034 	.word	0x20000034
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop

08007d28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007d28:	4808      	ldr	r0, [pc, #32]	; (8007d4c <prvPortStartFirstTask+0x24>)
 8007d2a:	6800      	ldr	r0, [r0, #0]
 8007d2c:	6800      	ldr	r0, [r0, #0]
 8007d2e:	f380 8808 	msr	MSP, r0
 8007d32:	f04f 0000 	mov.w	r0, #0
 8007d36:	f380 8814 	msr	CONTROL, r0
 8007d3a:	b662      	cpsie	i
 8007d3c:	b661      	cpsie	f
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	df00      	svc	0
 8007d48:	bf00      	nop
 8007d4a:	0000      	.short	0x0000
 8007d4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007d50:	bf00      	nop
 8007d52:	bf00      	nop

08007d54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007d5a:	4b46      	ldr	r3, [pc, #280]	; (8007e74 <xPortStartScheduler+0x120>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a46      	ldr	r2, [pc, #280]	; (8007e78 <xPortStartScheduler+0x124>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d10a      	bne.n	8007d7a <xPortStartScheduler+0x26>
        __asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	613b      	str	r3, [r7, #16]
    }
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d7a:	4b3e      	ldr	r3, [pc, #248]	; (8007e74 <xPortStartScheduler+0x120>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a3f      	ldr	r2, [pc, #252]	; (8007e7c <xPortStartScheduler+0x128>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d10a      	bne.n	8007d9a <xPortStartScheduler+0x46>
        __asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	60fb      	str	r3, [r7, #12]
    }
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d9a:	4b39      	ldr	r3, [pc, #228]	; (8007e80 <xPortStartScheduler+0x12c>)
 8007d9c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	22ff      	movs	r2, #255	; 0xff
 8007daa:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007dbc:	b2da      	uxtb	r2, r3
 8007dbe:	4b31      	ldr	r3, [pc, #196]	; (8007e84 <xPortStartScheduler+0x130>)
 8007dc0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007dc2:	4b31      	ldr	r3, [pc, #196]	; (8007e88 <xPortStartScheduler+0x134>)
 8007dc4:	2207      	movs	r2, #7
 8007dc6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dc8:	e009      	b.n	8007dde <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007dca:	4b2f      	ldr	r3, [pc, #188]	; (8007e88 <xPortStartScheduler+0x134>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	4a2d      	ldr	r2, [pc, #180]	; (8007e88 <xPortStartScheduler+0x134>)
 8007dd2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007dde:	78fb      	ldrb	r3, [r7, #3]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de6:	2b80      	cmp	r3, #128	; 0x80
 8007de8:	d0ef      	beq.n	8007dca <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007dea:	4b27      	ldr	r3, [pc, #156]	; (8007e88 <xPortStartScheduler+0x134>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f1c3 0307 	rsb	r3, r3, #7
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d00a      	beq.n	8007e0c <xPortStartScheduler+0xb8>
        __asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	60bb      	str	r3, [r7, #8]
    }
 8007e08:	bf00      	nop
 8007e0a:	e7fe      	b.n	8007e0a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e0c:	4b1e      	ldr	r3, [pc, #120]	; (8007e88 <xPortStartScheduler+0x134>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	021b      	lsls	r3, r3, #8
 8007e12:	4a1d      	ldr	r2, [pc, #116]	; (8007e88 <xPortStartScheduler+0x134>)
 8007e14:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007e16:	4b1c      	ldr	r3, [pc, #112]	; (8007e88 <xPortStartScheduler+0x134>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007e1e:	4a1a      	ldr	r2, [pc, #104]	; (8007e88 <xPortStartScheduler+0x134>)
 8007e20:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	b2da      	uxtb	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007e2a:	4b18      	ldr	r3, [pc, #96]	; (8007e8c <xPortStartScheduler+0x138>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a17      	ldr	r2, [pc, #92]	; (8007e8c <xPortStartScheduler+0x138>)
 8007e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007e34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007e36:	4b15      	ldr	r3, [pc, #84]	; (8007e8c <xPortStartScheduler+0x138>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a14      	ldr	r2, [pc, #80]	; (8007e8c <xPortStartScheduler+0x138>)
 8007e3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007e42:	f000 f963 	bl	800810c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007e46:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <xPortStartScheduler+0x13c>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007e4c:	f000 f97a 	bl	8008144 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007e50:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <xPortStartScheduler+0x140>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a0f      	ldr	r2, [pc, #60]	; (8007e94 <xPortStartScheduler+0x140>)
 8007e56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007e5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007e5c:	f7ff ff64 	bl	8007d28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007e60:	f7fe fdd4 	bl	8006a0c <vTaskSwitchContext>
    prvTaskExitError();
 8007e64:	f7ff ff1a 	bl	8007c9c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	e000ed00 	.word	0xe000ed00
 8007e78:	410fc271 	.word	0x410fc271
 8007e7c:	410fc270 	.word	0x410fc270
 8007e80:	e000e400 	.word	0xe000e400
 8007e84:	20000174 	.word	0x20000174
 8007e88:	20000178 	.word	0x20000178
 8007e8c:	e000ed20 	.word	0xe000ed20
 8007e90:	20000010 	.word	0x20000010
 8007e94:	e000ef34 	.word	0xe000ef34

08007e98 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007e9e:	4b37      	ldr	r3, [pc, #220]	; (8007f7c <vInitPrioGroupValue+0xe4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a37      	ldr	r2, [pc, #220]	; (8007f80 <vInitPrioGroupValue+0xe8>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d10a      	bne.n	8007ebe <vInitPrioGroupValue+0x26>
        __asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	613b      	str	r3, [r7, #16]
    }
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007ebe:	4b2f      	ldr	r3, [pc, #188]	; (8007f7c <vInitPrioGroupValue+0xe4>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a30      	ldr	r2, [pc, #192]	; (8007f84 <vInitPrioGroupValue+0xec>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d10a      	bne.n	8007ede <vInitPrioGroupValue+0x46>
        __asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	60fb      	str	r3, [r7, #12]
    }
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ede:	4b2a      	ldr	r3, [pc, #168]	; (8007f88 <vInitPrioGroupValue+0xf0>)
 8007ee0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	22ff      	movs	r2, #255	; 0xff
 8007eee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	4b22      	ldr	r3, [pc, #136]	; (8007f8c <vInitPrioGroupValue+0xf4>)
 8007f04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007f06:	4b22      	ldr	r3, [pc, #136]	; (8007f90 <vInitPrioGroupValue+0xf8>)
 8007f08:	2207      	movs	r2, #7
 8007f0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f0c:	e009      	b.n	8007f22 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8007f0e:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <vInitPrioGroupValue+0xf8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	4a1e      	ldr	r2, [pc, #120]	; (8007f90 <vInitPrioGroupValue+0xf8>)
 8007f16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007f22:	78fb      	ldrb	r3, [r7, #3]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2a:	2b80      	cmp	r3, #128	; 0x80
 8007f2c:	d0ef      	beq.n	8007f0e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007f2e:	4b18      	ldr	r3, [pc, #96]	; (8007f90 <vInitPrioGroupValue+0xf8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f1c3 0307 	rsb	r3, r3, #7
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	d00a      	beq.n	8007f50 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8007f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3e:	f383 8811 	msr	BASEPRI, r3
 8007f42:	f3bf 8f6f 	isb	sy
 8007f46:	f3bf 8f4f 	dsb	sy
 8007f4a:	60bb      	str	r3, [r7, #8]
    }
 8007f4c:	bf00      	nop
 8007f4e:	e7fe      	b.n	8007f4e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007f50:	4b0f      	ldr	r3, [pc, #60]	; (8007f90 <vInitPrioGroupValue+0xf8>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	4a0e      	ldr	r2, [pc, #56]	; (8007f90 <vInitPrioGroupValue+0xf8>)
 8007f58:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	; (8007f90 <vInitPrioGroupValue+0xf8>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f62:	4a0b      	ldr	r2, [pc, #44]	; (8007f90 <vInitPrioGroupValue+0xf8>)
 8007f64:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	b2da      	uxtb	r2, r3
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8007f6e:	bf00      	nop
 8007f70:	371c      	adds	r7, #28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	e000ed00 	.word	0xe000ed00
 8007f80:	410fc271 	.word	0x410fc271
 8007f84:	410fc270 	.word	0x410fc270
 8007f88:	e000e400 	.word	0xe000e400
 8007f8c:	20000174 	.word	0x20000174
 8007f90:	20000178 	.word	0x20000178

08007f94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
        __asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	607b      	str	r3, [r7, #4]
    }
 8007fac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007fae:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <vPortEnterCritical+0x58>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	4a0d      	ldr	r2, [pc, #52]	; (8007fec <vPortEnterCritical+0x58>)
 8007fb6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007fb8:	4b0c      	ldr	r3, [pc, #48]	; (8007fec <vPortEnterCritical+0x58>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d10f      	bne.n	8007fe0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	; (8007ff0 <vPortEnterCritical+0x5c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <vPortEnterCritical+0x4c>
        __asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	603b      	str	r3, [r7, #0]
    }
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <vPortEnterCritical+0x4a>
    }
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	20000010 	.word	0x20000010
 8007ff0:	e000ed04 	.word	0xe000ed04

08007ff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <vPortExitCritical+0x50>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <vPortExitCritical+0x24>
        __asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	607b      	str	r3, [r7, #4]
    }
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8008018:	4b0a      	ldr	r3, [pc, #40]	; (8008044 <vPortExitCritical+0x50>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3b01      	subs	r3, #1
 800801e:	4a09      	ldr	r2, [pc, #36]	; (8008044 <vPortExitCritical+0x50>)
 8008020:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008022:	4b08      	ldr	r3, [pc, #32]	; (8008044 <vPortExitCritical+0x50>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d105      	bne.n	8008036 <vPortExitCritical+0x42>
 800802a:	2300      	movs	r3, #0
 800802c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	f383 8811 	msr	BASEPRI, r3
    }
 8008034:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20000010 	.word	0x20000010
	...

08008050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008050:	f3ef 8009 	mrs	r0, PSP
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <pxCurrentTCBConst>)
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	f01e 0f10 	tst.w	lr, #16
 8008060:	bf08      	it	eq
 8008062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800806a:	6010      	str	r0, [r2, #0]
 800806c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008070:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008074:	f380 8811 	msr	BASEPRI, r0
 8008078:	f3bf 8f4f 	dsb	sy
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f7fe fcc4 	bl	8006a0c <vTaskSwitchContext>
 8008084:	f04f 0000 	mov.w	r0, #0
 8008088:	f380 8811 	msr	BASEPRI, r0
 800808c:	bc09      	pop	{r0, r3}
 800808e:	6819      	ldr	r1, [r3, #0]
 8008090:	6808      	ldr	r0, [r1, #0]
 8008092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008096:	f01e 0f10 	tst.w	lr, #16
 800809a:	bf08      	it	eq
 800809c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80080a0:	f380 8809 	msr	PSP, r0
 80080a4:	f3bf 8f6f 	isb	sy
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	f3af 8000 	nop.w

080080b0 <pxCurrentTCBConst>:
 80080b0:	20000034 	.word	0x20000034
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop

080080b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
        __asm volatile
 80080be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c2:	f383 8811 	msr	BASEPRI, r3
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	607b      	str	r3, [r7, #4]
    }
 80080d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80080d2:	f001 fd17 	bl	8009b04 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80080d6:	f7fe fbdd 	bl	8006894 <xTaskIncrementTick>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d006      	beq.n	80080ee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80080e0:	f001 fd6e 	bl	8009bc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80080e4:	4b08      	ldr	r3, [pc, #32]	; (8008108 <SysTick_Handler+0x50>)
 80080e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	e001      	b.n	80080f2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80080ee:	f001 fd4b 	bl	8009b88 <SEGGER_SYSVIEW_RecordExitISR>
 80080f2:	2300      	movs	r3, #0
 80080f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	f383 8811 	msr	BASEPRI, r3
    }
 80080fc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80080fe:	bf00      	nop
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800810c:	b480      	push	{r7}
 800810e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008110:	4b08      	ldr	r3, [pc, #32]	; (8008134 <vPortSetupTimerInterrupt+0x28>)
 8008112:	2200      	movs	r2, #0
 8008114:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008116:	4b08      	ldr	r3, [pc, #32]	; (8008138 <vPortSetupTimerInterrupt+0x2c>)
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800811c:	4b07      	ldr	r3, [pc, #28]	; (800813c <vPortSetupTimerInterrupt+0x30>)
 800811e:	4a08      	ldr	r2, [pc, #32]	; (8008140 <vPortSetupTimerInterrupt+0x34>)
 8008120:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008122:	4b04      	ldr	r3, [pc, #16]	; (8008134 <vPortSetupTimerInterrupt+0x28>)
 8008124:	2207      	movs	r2, #7
 8008126:	601a      	str	r2, [r3, #0]
}
 8008128:	bf00      	nop
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	e000e010 	.word	0xe000e010
 8008138:	e000e018 	.word	0xe000e018
 800813c:	e000e014 	.word	0xe000e014
 8008140:	000752ff 	.word	0x000752ff

08008144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008154 <vPortEnableVFP+0x10>
 8008148:	6801      	ldr	r1, [r0, #0]
 800814a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800814e:	6001      	str	r1, [r0, #0]
 8008150:	4770      	bx	lr
 8008152:	0000      	.short	0x0000
 8008154:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008158:	bf00      	nop
 800815a:	bf00      	nop

0800815c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008162:	f3ef 8305 	mrs	r3, IPSR
 8008166:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b0f      	cmp	r3, #15
 800816c:	d914      	bls.n	8008198 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800816e:	4a17      	ldr	r2, [pc, #92]	; (80081cc <vPortValidateInterruptPriority+0x70>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008178:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <vPortValidateInterruptPriority+0x74>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	7afa      	ldrb	r2, [r7, #11]
 800817e:	429a      	cmp	r2, r3
 8008180:	d20a      	bcs.n	8008198 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8008182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008186:	f383 8811 	msr	BASEPRI, r3
 800818a:	f3bf 8f6f 	isb	sy
 800818e:	f3bf 8f4f 	dsb	sy
 8008192:	607b      	str	r3, [r7, #4]
    }
 8008194:	bf00      	nop
 8008196:	e7fe      	b.n	8008196 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008198:	4b0e      	ldr	r3, [pc, #56]	; (80081d4 <vPortValidateInterruptPriority+0x78>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80081a0:	4b0d      	ldr	r3, [pc, #52]	; (80081d8 <vPortValidateInterruptPriority+0x7c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d90a      	bls.n	80081be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	603b      	str	r3, [r7, #0]
    }
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <vPortValidateInterruptPriority+0x60>
    }
 80081be:	bf00      	nop
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	e000e3f0 	.word	0xe000e3f0
 80081d0:	20000174 	.word	0x20000174
 80081d4:	e000ed0c 	.word	0xe000ed0c
 80081d8:	20000178 	.word	0x20000178

080081dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	; 0x28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80081e4:	2300      	movs	r3, #0
 80081e6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80081e8:	f7fe fa84 	bl	80066f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80081ec:	4b65      	ldr	r3, [pc, #404]	; (8008384 <pvPortMalloc+0x1a8>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80081f4:	f000 f934 	bl	8008460 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80081f8:	4b63      	ldr	r3, [pc, #396]	; (8008388 <pvPortMalloc+0x1ac>)
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4013      	ands	r3, r2
 8008200:	2b00      	cmp	r3, #0
 8008202:	f040 80a7 	bne.w	8008354 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d02d      	beq.n	8008268 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800820c:	2208      	movs	r2, #8
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	429a      	cmp	r2, r3
 8008216:	d227      	bcs.n	8008268 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8008218:	2208      	movs	r2, #8
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4413      	add	r3, r2
 800821e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f003 0307 	and.w	r3, r3, #7
 8008226:	2b00      	cmp	r3, #0
 8008228:	d021      	beq.n	800826e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f023 0307 	bic.w	r3, r3, #7
 8008230:	3308      	adds	r3, #8
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d214      	bcs.n	8008262 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	3308      	adds	r3, #8
 8008240:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	2b00      	cmp	r3, #0
 800824a:	d010      	beq.n	800826e <pvPortMalloc+0x92>
        __asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	617b      	str	r3, [r7, #20]
    }
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008266:	e002      	b.n	800826e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8008268:	2300      	movs	r3, #0
 800826a:	607b      	str	r3, [r7, #4]
 800826c:	e000      	b.n	8008270 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800826e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d06e      	beq.n	8008354 <pvPortMalloc+0x178>
 8008276:	4b45      	ldr	r3, [pc, #276]	; (800838c <pvPortMalloc+0x1b0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	687a      	ldr	r2, [r7, #4]
 800827c:	429a      	cmp	r2, r3
 800827e:	d869      	bhi.n	8008354 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008280:	4b43      	ldr	r3, [pc, #268]	; (8008390 <pvPortMalloc+0x1b4>)
 8008282:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8008284:	4b42      	ldr	r3, [pc, #264]	; (8008390 <pvPortMalloc+0x1b4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800828a:	e004      	b.n	8008296 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d903      	bls.n	80082a8 <pvPortMalloc+0xcc>
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1f1      	bne.n	800828c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80082a8:	4b36      	ldr	r3, [pc, #216]	; (8008384 <pvPortMalloc+0x1a8>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d050      	beq.n	8008354 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2208      	movs	r2, #8
 80082b8:	4413      	add	r3, r2
 80082ba:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	6a3b      	ldr	r3, [r7, #32]
 80082c2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80082c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	1ad2      	subs	r2, r2, r3
 80082cc:	2308      	movs	r3, #8
 80082ce:	005b      	lsls	r3, r3, #1
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d91f      	bls.n	8008314 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80082d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4413      	add	r3, r2
 80082da:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <pvPortMalloc+0x120>
        __asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	613b      	str	r3, [r7, #16]
    }
 80082f8:	bf00      	nop
 80082fa:	e7fe      	b.n	80082fa <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80082fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	1ad2      	subs	r2, r2, r3
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800830e:	69b8      	ldr	r0, [r7, #24]
 8008310:	f000 f908 	bl	8008524 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <pvPortMalloc+0x1b0>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	4a1b      	ldr	r2, [pc, #108]	; (800838c <pvPortMalloc+0x1b0>)
 8008320:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008322:	4b1a      	ldr	r3, [pc, #104]	; (800838c <pvPortMalloc+0x1b0>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	4b1b      	ldr	r3, [pc, #108]	; (8008394 <pvPortMalloc+0x1b8>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d203      	bcs.n	8008336 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800832e:	4b17      	ldr	r3, [pc, #92]	; (800838c <pvPortMalloc+0x1b0>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a18      	ldr	r2, [pc, #96]	; (8008394 <pvPortMalloc+0x1b8>)
 8008334:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	4b13      	ldr	r3, [pc, #76]	; (8008388 <pvPortMalloc+0x1ac>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	431a      	orrs	r2, r3
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008346:	2200      	movs	r2, #0
 8008348:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800834a:	4b13      	ldr	r3, [pc, #76]	; (8008398 <pvPortMalloc+0x1bc>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3301      	adds	r3, #1
 8008350:	4a11      	ldr	r2, [pc, #68]	; (8008398 <pvPortMalloc+0x1bc>)
 8008352:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008354:	f7fe f9dc 	bl	8006710 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <pvPortMalloc+0x19c>
        __asm volatile
 8008362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008366:	f383 8811 	msr	BASEPRI, r3
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	f3bf 8f4f 	dsb	sy
 8008372:	60fb      	str	r3, [r7, #12]
    }
 8008374:	bf00      	nop
 8008376:	e7fe      	b.n	8008376 <pvPortMalloc+0x19a>
    return pvReturn;
 8008378:	69fb      	ldr	r3, [r7, #28]
}
 800837a:	4618      	mov	r0, r3
 800837c:	3728      	adds	r7, #40	; 0x28
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	20012d84 	.word	0x20012d84
 8008388:	20012d98 	.word	0x20012d98
 800838c:	20012d88 	.word	0x20012d88
 8008390:	20012d7c 	.word	0x20012d7c
 8008394:	20012d8c 	.word	0x20012d8c
 8008398:	20012d90 	.word	0x20012d90

0800839c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d04d      	beq.n	800844a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80083ae:	2308      	movs	r3, #8
 80083b0:	425b      	negs	r3, r3
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4413      	add	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	685a      	ldr	r2, [r3, #4]
 80083c0:	4b24      	ldr	r3, [pc, #144]	; (8008454 <vPortFree+0xb8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4013      	ands	r3, r2
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <vPortFree+0x44>
        __asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	60fb      	str	r3, [r7, #12]
    }
 80083dc:	bf00      	nop
 80083de:	e7fe      	b.n	80083de <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00a      	beq.n	80083fe <vPortFree+0x62>
        __asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	60bb      	str	r3, [r7, #8]
    }
 80083fa:	bf00      	nop
 80083fc:	e7fe      	b.n	80083fc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	4b14      	ldr	r3, [pc, #80]	; (8008454 <vPortFree+0xb8>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4013      	ands	r3, r2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d01e      	beq.n	800844a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d11a      	bne.n	800844a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	4b0e      	ldr	r3, [pc, #56]	; (8008454 <vPortFree+0xb8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	43db      	mvns	r3, r3
 800841e:	401a      	ands	r2, r3
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008424:	f7fe f966 	bl	80066f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	4b0a      	ldr	r3, [pc, #40]	; (8008458 <vPortFree+0xbc>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4413      	add	r3, r2
 8008432:	4a09      	ldr	r2, [pc, #36]	; (8008458 <vPortFree+0xbc>)
 8008434:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008436:	6938      	ldr	r0, [r7, #16]
 8008438:	f000 f874 	bl	8008524 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800843c:	4b07      	ldr	r3, [pc, #28]	; (800845c <vPortFree+0xc0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3301      	adds	r3, #1
 8008442:	4a06      	ldr	r2, [pc, #24]	; (800845c <vPortFree+0xc0>)
 8008444:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008446:	f7fe f963 	bl	8006710 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800844a:	bf00      	nop
 800844c:	3718      	adds	r7, #24
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
 8008452:	bf00      	nop
 8008454:	20012d98 	.word	0x20012d98
 8008458:	20012d88 	.word	0x20012d88
 800845c:	20012d94 	.word	0x20012d94

08008460 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008466:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800846a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800846c:	4b27      	ldr	r3, [pc, #156]	; (800850c <prvHeapInit+0xac>)
 800846e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f003 0307 	and.w	r3, r3, #7
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00c      	beq.n	8008494 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3307      	adds	r3, #7
 800847e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0307 	bic.w	r3, r3, #7
 8008486:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	4a1f      	ldr	r2, [pc, #124]	; (800850c <prvHeapInit+0xac>)
 8008490:	4413      	add	r3, r2
 8008492:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008498:	4a1d      	ldr	r2, [pc, #116]	; (8008510 <prvHeapInit+0xb0>)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800849e:	4b1c      	ldr	r3, [pc, #112]	; (8008510 <prvHeapInit+0xb0>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68ba      	ldr	r2, [r7, #8]
 80084a8:	4413      	add	r3, r2
 80084aa:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80084ac:	2208      	movs	r2, #8
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	1a9b      	subs	r3, r3, r2
 80084b2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f023 0307 	bic.w	r3, r3, #7
 80084ba:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4a15      	ldr	r2, [pc, #84]	; (8008514 <prvHeapInit+0xb4>)
 80084c0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80084c2:	4b14      	ldr	r3, [pc, #80]	; (8008514 <prvHeapInit+0xb4>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2200      	movs	r2, #0
 80084c8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80084ca:	4b12      	ldr	r3, [pc, #72]	; (8008514 <prvHeapInit+0xb4>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	1ad2      	subs	r2, r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80084e0:	4b0c      	ldr	r3, [pc, #48]	; (8008514 <prvHeapInit+0xb4>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	4a0a      	ldr	r2, [pc, #40]	; (8008518 <prvHeapInit+0xb8>)
 80084ee:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	4a09      	ldr	r2, [pc, #36]	; (800851c <prvHeapInit+0xbc>)
 80084f6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80084f8:	4b09      	ldr	r3, [pc, #36]	; (8008520 <prvHeapInit+0xc0>)
 80084fa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80084fe:	601a      	str	r2, [r3, #0]
}
 8008500:	bf00      	nop
 8008502:	3714      	adds	r7, #20
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	2000017c 	.word	0x2000017c
 8008510:	20012d7c 	.word	0x20012d7c
 8008514:	20012d84 	.word	0x20012d84
 8008518:	20012d8c 	.word	0x20012d8c
 800851c:	20012d88 	.word	0x20012d88
 8008520:	20012d98 	.word	0x20012d98

08008524 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800852c:	4b28      	ldr	r3, [pc, #160]	; (80085d0 <prvInsertBlockIntoFreeList+0xac>)
 800852e:	60fb      	str	r3, [r7, #12]
 8008530:	e002      	b.n	8008538 <prvInsertBlockIntoFreeList+0x14>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60fb      	str	r3, [r7, #12]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	429a      	cmp	r2, r3
 8008540:	d8f7      	bhi.n	8008532 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	4413      	add	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d108      	bne.n	8008566 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	441a      	add	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	68ba      	ldr	r2, [r7, #8]
 8008570:	441a      	add	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d118      	bne.n	80085ac <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	4b15      	ldr	r3, [pc, #84]	; (80085d4 <prvInsertBlockIntoFreeList+0xb0>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d00d      	beq.n	80085a2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	441a      	add	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	e008      	b.n	80085b4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085a2:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <prvInsertBlockIntoFreeList+0xb0>)
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	e003      	b.n	80085b4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d002      	beq.n	80085c2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80085c2:	bf00      	nop
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	20012d7c 	.word	0x20012d7c
 80085d4:	20012d84 	.word	0x20012d84

080085d8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80085d8:	b580      	push	{r7, lr}
 80085da:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80085dc:	4803      	ldr	r0, [pc, #12]	; (80085ec <_cbSendSystemDesc+0x14>)
 80085de:	f001 fa3b 	bl	8009a58 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80085e2:	4803      	ldr	r0, [pc, #12]	; (80085f0 <_cbSendSystemDesc+0x18>)
 80085e4:	f001 fa38 	bl	8009a58 <SEGGER_SYSVIEW_SendSysDesc>
}
 80085e8:	bf00      	nop
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	0800a208 	.word	0x0800a208
 80085f0:	0800a248 	.word	0x0800a248

080085f4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80085f8:	4b05      	ldr	r3, [pc, #20]	; (8008610 <SEGGER_SYSVIEW_Conf+0x1c>)
 80085fa:	4a06      	ldr	r2, [pc, #24]	; (8008614 <SEGGER_SYSVIEW_Conf+0x20>)
 80085fc:	4906      	ldr	r1, [pc, #24]	; (8008618 <SEGGER_SYSVIEW_Conf+0x24>)
 80085fe:	4806      	ldr	r0, [pc, #24]	; (8008618 <SEGGER_SYSVIEW_Conf+0x24>)
 8008600:	f000 fcfa 	bl	8008ff8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008604:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008608:	f000 fd3a 	bl	8009080 <SEGGER_SYSVIEW_SetRAMBase>
}
 800860c:	bf00      	nop
 800860e:	bd80      	pop	{r7, pc}
 8008610:	080085d9 	.word	0x080085d9
 8008614:	0800a340 	.word	0x0800a340
 8008618:	07270e00 	.word	0x07270e00

0800861c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800861c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800861e:	b085      	sub	sp, #20
 8008620:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008622:	2300      	movs	r3, #0
 8008624:	607b      	str	r3, [r7, #4]
 8008626:	e033      	b.n	8008690 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008628:	491e      	ldr	r1, [pc, #120]	; (80086a4 <_cbSendTaskList+0x88>)
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	440b      	add	r3, r1
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	491a      	ldr	r1, [pc, #104]	; (80086a4 <_cbSendTaskList+0x88>)
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	3304      	adds	r3, #4
 8008648:	6819      	ldr	r1, [r3, #0]
 800864a:	4c16      	ldr	r4, [pc, #88]	; (80086a4 <_cbSendTaskList+0x88>)
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	4413      	add	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4423      	add	r3, r4
 8008658:	3308      	adds	r3, #8
 800865a:	681c      	ldr	r4, [r3, #0]
 800865c:	4d11      	ldr	r5, [pc, #68]	; (80086a4 <_cbSendTaskList+0x88>)
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	4613      	mov	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	4413      	add	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	442b      	add	r3, r5
 800866a:	330c      	adds	r3, #12
 800866c:	681d      	ldr	r5, [r3, #0]
 800866e:	4e0d      	ldr	r6, [pc, #52]	; (80086a4 <_cbSendTaskList+0x88>)
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4433      	add	r3, r6
 800867c:	3310      	adds	r3, #16
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	462b      	mov	r3, r5
 8008684:	4622      	mov	r2, r4
 8008686:	f000 f8c1 	bl	800880c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	3301      	adds	r3, #1
 800868e:	607b      	str	r3, [r7, #4]
 8008690:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <_cbSendTaskList+0x8c>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	429a      	cmp	r2, r3
 8008698:	d3c6      	bcc.n	8008628 <_cbSendTaskList+0xc>
  }
}
 800869a:	bf00      	nop
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a4:	20012d9c 	.word	0x20012d9c
 80086a8:	20012e3c 	.word	0x20012e3c

080086ac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80086ac:	b5b0      	push	{r4, r5, r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80086b2:	f7fe f8dd 	bl	8006870 <xTaskGetTickCountFromISR>
 80086b6:	4603      	mov	r3, r0
 80086b8:	461a      	mov	r2, r3
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
 80086c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086c6:	f04f 0200 	mov.w	r2, #0
 80086ca:	f04f 0300 	mov.w	r3, #0
 80086ce:	008b      	lsls	r3, r1, #2
 80086d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80086d4:	0082      	lsls	r2, r0, #2
 80086d6:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= 1000;
 80086da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086de:	4602      	mov	r2, r0
 80086e0:	460b      	mov	r3, r1
 80086e2:	f04f 0400 	mov.w	r4, #0
 80086e6:	f04f 0500 	mov.w	r5, #0
 80086ea:	015d      	lsls	r5, r3, #5
 80086ec:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80086f0:	0154      	lsls	r4, r2, #5
 80086f2:	4622      	mov	r2, r4
 80086f4:	462b      	mov	r3, r5
 80086f6:	1a12      	subs	r2, r2, r0
 80086f8:	eb63 0301 	sbc.w	r3, r3, r1
 80086fc:	f04f 0400 	mov.w	r4, #0
 8008700:	f04f 0500 	mov.w	r5, #0
 8008704:	009d      	lsls	r5, r3, #2
 8008706:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800870a:	0094      	lsls	r4, r2, #2
 800870c:	4622      	mov	r2, r4
 800870e:	462b      	mov	r3, r5
 8008710:	1812      	adds	r2, r2, r0
 8008712:	eb41 0303 	adc.w	r3, r1, r3
 8008716:	f04f 0000 	mov.w	r0, #0
 800871a:	f04f 0100 	mov.w	r1, #0
 800871e:	00d9      	lsls	r1, r3, #3
 8008720:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008724:	00d0      	lsls	r0, r2, #3
 8008726:	4602      	mov	r2, r0
 8008728:	460b      	mov	r3, r1
 800872a:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800872e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008732:	4610      	mov	r0, r2
 8008734:	4619      	mov	r1, r3
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bdb0      	pop	{r4, r5, r7, pc}

0800873c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af02      	add	r7, sp, #8
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800874a:	2205      	movs	r2, #5
 800874c:	492b      	ldr	r1, [pc, #172]	; (80087fc <SYSVIEW_AddTask+0xc0>)
 800874e:	68b8      	ldr	r0, [r7, #8]
 8008750:	f001 fd00 	bl	800a154 <memcmp>
 8008754:	4603      	mov	r3, r0
 8008756:	2b00      	cmp	r3, #0
 8008758:	d04b      	beq.n	80087f2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800875a:	4b29      	ldr	r3, [pc, #164]	; (8008800 <SYSVIEW_AddTask+0xc4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b07      	cmp	r3, #7
 8008760:	d903      	bls.n	800876a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008762:	4828      	ldr	r0, [pc, #160]	; (8008804 <SYSVIEW_AddTask+0xc8>)
 8008764:	f001 fc76 	bl	800a054 <SEGGER_SYSVIEW_Warn>
    return;
 8008768:	e044      	b.n	80087f4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800876a:	4b25      	ldr	r3, [pc, #148]	; (8008800 <SYSVIEW_AddTask+0xc4>)
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	4926      	ldr	r1, [pc, #152]	; (8008808 <SYSVIEW_AddTask+0xcc>)
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	68fa      	ldr	r2, [r7, #12]
 800877c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800877e:	4b20      	ldr	r3, [pc, #128]	; (8008800 <SYSVIEW_AddTask+0xc4>)
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4921      	ldr	r1, [pc, #132]	; (8008808 <SYSVIEW_AddTask+0xcc>)
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	440b      	add	r3, r1
 800878e:	3304      	adds	r3, #4
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008794:	4b1a      	ldr	r3, [pc, #104]	; (8008800 <SYSVIEW_AddTask+0xc4>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	491b      	ldr	r1, [pc, #108]	; (8008808 <SYSVIEW_AddTask+0xcc>)
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	3308      	adds	r3, #8
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80087aa:	4b15      	ldr	r3, [pc, #84]	; (8008800 <SYSVIEW_AddTask+0xc4>)
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	4916      	ldr	r1, [pc, #88]	; (8008808 <SYSVIEW_AddTask+0xcc>)
 80087b0:	4613      	mov	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	330c      	adds	r3, #12
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80087c0:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <SYSVIEW_AddTask+0xc4>)
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	4910      	ldr	r1, [pc, #64]	; (8008808 <SYSVIEW_AddTask+0xcc>)
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	440b      	add	r3, r1
 80087d0:	3310      	adds	r3, #16
 80087d2:	69ba      	ldr	r2, [r7, #24]
 80087d4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80087d6:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <SYSVIEW_AddTask+0xc4>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	3301      	adds	r3, #1
 80087dc:	4a08      	ldr	r2, [pc, #32]	; (8008800 <SYSVIEW_AddTask+0xc4>)
 80087de:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f000 f80e 	bl	800880c <SYSVIEW_SendTaskInfo>
 80087f0:	e000      	b.n	80087f4 <SYSVIEW_AddTask+0xb8>
    return;
 80087f2:	bf00      	nop

}
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	0800a258 	.word	0x0800a258
 8008800:	20012e3c 	.word	0x20012e3c
 8008804:	0800a260 	.word	0x0800a260
 8008808:	20012d9c 	.word	0x20012d9c

0800880c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800880c:	b580      	push	{r7, lr}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800881a:	f107 0314 	add.w	r3, r7, #20
 800881e:	2214      	movs	r2, #20
 8008820:	2100      	movs	r1, #0
 8008822:	4618      	mov	r0, r3
 8008824:	f001 fcb2 	bl	800a18c <memset>
  TaskInfo.TaskID     = TaskID;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8008838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800883c:	f107 0314 	add.w	r3, r7, #20
 8008840:	4618      	mov	r0, r3
 8008842:	f001 f811 	bl	8009868 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008846:	bf00      	nop
 8008848:	3728      	adds	r7, #40	; 0x28
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008856:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <_DoInit+0x98>)
 8008858:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2203      	movs	r2, #3
 800885e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2203      	movs	r2, #3
 8008864:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a20      	ldr	r2, [pc, #128]	; (80088ec <_DoInit+0x9c>)
 800886a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a20      	ldr	r2, [pc, #128]	; (80088f0 <_DoInit+0xa0>)
 8008870:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008878:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a17      	ldr	r2, [pc, #92]	; (80088ec <_DoInit+0x9c>)
 8008890:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a17      	ldr	r2, [pc, #92]	; (80088f4 <_DoInit+0xa4>)
 8008896:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2210      	movs	r2, #16
 800889c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3307      	adds	r3, #7
 80088b4:	4a10      	ldr	r2, [pc, #64]	; (80088f8 <_DoInit+0xa8>)
 80088b6:	6810      	ldr	r0, [r2, #0]
 80088b8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80088ba:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	4a0e      	ldr	r2, [pc, #56]	; (80088fc <_DoInit+0xac>)
 80088c2:	6810      	ldr	r0, [r2, #0]
 80088c4:	6018      	str	r0, [r3, #0]
 80088c6:	8891      	ldrh	r1, [r2, #4]
 80088c8:	7992      	ldrb	r2, [r2, #6]
 80088ca:	8099      	strh	r1, [r3, #4]
 80088cc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80088ce:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80088d8:	f3bf 8f5f 	dmb	sy
}
 80088dc:	bf00      	nop
 80088de:	370c      	adds	r7, #12
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	2001c4d0 	.word	0x2001c4d0
 80088ec:	0800a2b0 	.word	0x0800a2b0
 80088f0:	20012e40 	.word	0x20012e40
 80088f4:	20013240 	.word	0x20013240
 80088f8:	0800a2bc 	.word	0x0800a2bc
 80088fc:	0800a2c0 	.word	0x0800a2c0

08008900 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008900:	b580      	push	{r7, lr}
 8008902:	b08c      	sub	sp, #48	; 0x30
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800890c:	4b3e      	ldr	r3, [pc, #248]	; (8008a08 <SEGGER_RTT_ReadNoLock+0x108>)
 800890e:	623b      	str	r3, [r7, #32]
 8008910:	6a3b      	ldr	r3, [r7, #32]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <SEGGER_RTT_ReadNoLock+0x1e>
 800891a:	f7ff ff99 	bl	8008850 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	4613      	mov	r3, r2
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	4413      	add	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	3360      	adds	r3, #96	; 0x60
 800892a:	4a37      	ldr	r2, [pc, #220]	; (8008a08 <SEGGER_RTT_ReadNoLock+0x108>)
 800892c:	4413      	add	r3, r2
 800892e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008940:	2300      	movs	r3, #0
 8008942:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	429a      	cmp	r2, r3
 800894a:	d92b      	bls.n	80089a4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008956:	697a      	ldr	r2, [r7, #20]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	4293      	cmp	r3, r2
 800895c:	bf28      	it	cs
 800895e:	4613      	movcs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	685a      	ldr	r2, [r3, #4]
 8008966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008968:	4413      	add	r3, r2
 800896a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	6939      	ldr	r1, [r7, #16]
 8008970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008972:	f001 fbfd 	bl	800a170 <memcpy>
    NumBytesRead += NumBytesRem;
 8008976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	4413      	add	r3, r2
 800897c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800897e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	4413      	add	r3, r2
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800898e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	4413      	add	r3, r2
 8008994:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800899c:	429a      	cmp	r2, r3
 800899e:	d101      	bne.n	80089a4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80089a0:	2300      	movs	r3, #0
 80089a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4293      	cmp	r3, r2
 80089b2:	bf28      	it	cs
 80089b4:	4613      	movcs	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d019      	beq.n	80089f2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c4:	4413      	add	r3, r2
 80089c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	6939      	ldr	r1, [r7, #16]
 80089cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089ce:	f001 fbcf 	bl	800a170 <memcpy>
    NumBytesRead += NumBytesRem;
 80089d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	4413      	add	r3, r2
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80089da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4413      	add	r3, r2
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	1ad3      	subs	r3, r2, r3
 80089e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80089ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	4413      	add	r3, r2
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80089f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d002      	beq.n	80089fe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80089fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3730      	adds	r7, #48	; 0x30
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2001c4d0 	.word	0x2001c4d0

08008a0c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8008a1a:	4b3d      	ldr	r3, [pc, #244]	; (8008b10 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008a1c:	61bb      	str	r3, [r7, #24]
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <SEGGER_RTT_AllocUpBuffer+0x20>
 8008a28:	f7ff ff12 	bl	8008850 <_DoInit>
  SEGGER_RTT_LOCK();
 8008a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8008a30:	f04f 0120 	mov.w	r1, #32
 8008a34:	f381 8811 	msr	BASEPRI, r1
 8008a38:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008a3a:	4b35      	ldr	r3, [pc, #212]	; (8008b10 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8008a3c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8008a42:	6939      	ldr	r1, [r7, #16]
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	4613      	mov	r3, r2
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	4413      	add	r3, r2
 8008a4e:	00db      	lsls	r3, r3, #3
 8008a50:	440b      	add	r3, r1
 8008a52:	3304      	adds	r3, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d008      	beq.n	8008a6c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	dbeb      	blt.n	8008a42 <SEGGER_RTT_AllocUpBuffer+0x36>
 8008a6a:	e000      	b.n	8008a6e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8008a6c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	69fa      	ldr	r2, [r7, #28]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	da3f      	bge.n	8008af8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8008a78:	6939      	ldr	r1, [r7, #16]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	4613      	mov	r3, r2
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	4413      	add	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	440b      	add	r3, r1
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8008a8c:	6939      	ldr	r1, [r7, #16]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	1c5a      	adds	r2, r3, #1
 8008a92:	4613      	mov	r3, r2
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	4413      	add	r3, r2
 8008a98:	00db      	lsls	r3, r3, #3
 8008a9a:	440b      	add	r3, r1
 8008a9c:	3304      	adds	r3, #4
 8008a9e:	68ba      	ldr	r2, [r7, #8]
 8008aa0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8008aa2:	6939      	ldr	r1, [r7, #16]
 8008aa4:	69fa      	ldr	r2, [r7, #28]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	00db      	lsls	r3, r3, #3
 8008aae:	440b      	add	r3, r1
 8008ab0:	3320      	adds	r3, #32
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8008ab6:	6939      	ldr	r1, [r7, #16]
 8008ab8:	69fa      	ldr	r2, [r7, #28]
 8008aba:	4613      	mov	r3, r2
 8008abc:	005b      	lsls	r3, r3, #1
 8008abe:	4413      	add	r3, r2
 8008ac0:	00db      	lsls	r3, r3, #3
 8008ac2:	440b      	add	r3, r1
 8008ac4:	3328      	adds	r3, #40	; 0x28
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8008aca:	6939      	ldr	r1, [r7, #16]
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	4413      	add	r3, r2
 8008ad4:	00db      	lsls	r3, r3, #3
 8008ad6:	440b      	add	r3, r1
 8008ad8:	3324      	adds	r3, #36	; 0x24
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8008ade:	6939      	ldr	r1, [r7, #16]
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	4413      	add	r3, r2
 8008ae8:	00db      	lsls	r3, r3, #3
 8008aea:	440b      	add	r3, r1
 8008aec:	332c      	adds	r3, #44	; 0x2c
 8008aee:	683a      	ldr	r2, [r7, #0]
 8008af0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008af2:	f3bf 8f5f 	dmb	sy
 8008af6:	e002      	b.n	8008afe <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8008af8:	f04f 33ff 	mov.w	r3, #4294967295
 8008afc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8008b04:	69fb      	ldr	r3, [r7, #28]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop
 8008b10:	2001c4d0 	.word	0x2001c4d0

08008b14 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b08a      	sub	sp, #40	; 0x28
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	60b9      	str	r1, [r7, #8]
 8008b1e:	607a      	str	r2, [r7, #4]
 8008b20:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8008b22:	4b21      	ldr	r3, [pc, #132]	; (8008ba8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008b24:	623b      	str	r3, [r7, #32]
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8008b30:	f7ff fe8e 	bl	8008850 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008b34:	4b1c      	ldr	r3, [pc, #112]	; (8008ba8 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8008b36:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d82c      	bhi.n	8008b98 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8008b3e:	f3ef 8311 	mrs	r3, BASEPRI
 8008b42:	f04f 0120 	mov.w	r1, #32
 8008b46:	f381 8811 	msr	BASEPRI, r1
 8008b4a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8008b4c:	68fa      	ldr	r2, [r7, #12]
 8008b4e:	4613      	mov	r3, r2
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	4413      	add	r3, r2
 8008b54:	00db      	lsls	r3, r3, #3
 8008b56:	3360      	adds	r3, #96	; 0x60
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d00e      	beq.n	8008b82 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b86:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008b88:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8008b92:	2300      	movs	r3, #0
 8008b94:	627b      	str	r3, [r7, #36]	; 0x24
 8008b96:	e002      	b.n	8008b9e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8008b98:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9c:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3728      	adds	r7, #40	; 0x28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	2001c4d0 	.word	0x2001c4d0

08008bac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8008bac:	b480      	push	{r7}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00f      	beq.n	8008be2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8008bc2:	e002      	b.n	8008bca <_EncodeStr+0x1e>
      Len++;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1f6      	bne.n	8008bc4 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d901      	bls.n	8008be2 <_EncodeStr+0x36>
      Len = Limit;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	2bfe      	cmp	r3, #254	; 0xfe
 8008be6:	d806      	bhi.n	8008bf6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	1c5a      	adds	r2, r3, #1
 8008bec:	60fa      	str	r2, [r7, #12]
 8008bee:	693a      	ldr	r2, [r7, #16]
 8008bf0:	b2d2      	uxtb	r2, r2
 8008bf2:	701a      	strb	r2, [r3, #0]
 8008bf4:	e011      	b.n	8008c1a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	60fa      	str	r2, [r7, #12]
 8008bfc:	22ff      	movs	r2, #255	; 0xff
 8008bfe:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	1c5a      	adds	r2, r3, #1
 8008c04:	60fa      	str	r2, [r7, #12]
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	b2d2      	uxtb	r2, r2
 8008c0a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	0a19      	lsrs	r1, r3, #8
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	1c5a      	adds	r2, r3, #1
 8008c14:	60fa      	str	r2, [r7, #12]
 8008c16:	b2ca      	uxtb	r2, r1
 8008c18:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008c1e:	e00a      	b.n	8008c36 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	1c53      	adds	r3, r2, #1
 8008c24:	60bb      	str	r3, [r7, #8]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	1c59      	adds	r1, r3, #1
 8008c2a:	60f9      	str	r1, [r7, #12]
 8008c2c:	7812      	ldrb	r2, [r2, #0]
 8008c2e:	701a      	strb	r2, [r3, #0]
    n++;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	3301      	adds	r3, #1
 8008c34:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d3f0      	bcc.n	8008c20 <_EncodeStr+0x74>
  }
  return pPayload;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	371c      	adds	r7, #28
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	3304      	adds	r3, #4
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008c6a:	4b36      	ldr	r3, [pc, #216]	; (8008d44 <_HandleIncomingPacket+0xe0>)
 8008c6c:	7e1b      	ldrb	r3, [r3, #24]
 8008c6e:	4618      	mov	r0, r3
 8008c70:	1cfb      	adds	r3, r7, #3
 8008c72:	2201      	movs	r2, #1
 8008c74:	4619      	mov	r1, r3
 8008c76:	f7ff fe43 	bl	8008900 <SEGGER_RTT_ReadNoLock>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	dd54      	ble.n	8008d2e <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8008c84:	78fb      	ldrb	r3, [r7, #3]
 8008c86:	2b80      	cmp	r3, #128	; 0x80
 8008c88:	d032      	beq.n	8008cf0 <_HandleIncomingPacket+0x8c>
 8008c8a:	2b80      	cmp	r3, #128	; 0x80
 8008c8c:	dc42      	bgt.n	8008d14 <_HandleIncomingPacket+0xb0>
 8008c8e:	2b07      	cmp	r3, #7
 8008c90:	dc16      	bgt.n	8008cc0 <_HandleIncomingPacket+0x5c>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	dd3e      	ble.n	8008d14 <_HandleIncomingPacket+0xb0>
 8008c96:	3b01      	subs	r3, #1
 8008c98:	2b06      	cmp	r3, #6
 8008c9a:	d83b      	bhi.n	8008d14 <_HandleIncomingPacket+0xb0>
 8008c9c:	a201      	add	r2, pc, #4	; (adr r2, 8008ca4 <_HandleIncomingPacket+0x40>)
 8008c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca2:	bf00      	nop
 8008ca4:	08008cc7 	.word	0x08008cc7
 8008ca8:	08008ccd 	.word	0x08008ccd
 8008cac:	08008cd3 	.word	0x08008cd3
 8008cb0:	08008cd9 	.word	0x08008cd9
 8008cb4:	08008cdf 	.word	0x08008cdf
 8008cb8:	08008ce5 	.word	0x08008ce5
 8008cbc:	08008ceb 	.word	0x08008ceb
 8008cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8008cc2:	d036      	beq.n	8008d32 <_HandleIncomingPacket+0xce>
 8008cc4:	e026      	b.n	8008d14 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8008cc6:	f000 fc55 	bl	8009574 <SEGGER_SYSVIEW_Start>
      break;
 8008cca:	e037      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8008ccc:	f000 fd0c 	bl	80096e8 <SEGGER_SYSVIEW_Stop>
      break;
 8008cd0:	e034      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8008cd2:	f000 fee5 	bl	8009aa0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8008cd6:	e031      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8008cd8:	f000 feaa 	bl	8009a30 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8008cdc:	e02e      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8008cde:	f000 fd29 	bl	8009734 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8008ce2:	e02b      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8008ce4:	f001 f978 	bl	8009fd8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8008ce8:	e028      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8008cea:	f001 f957 	bl	8009f9c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8008cee:	e025      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008cf0:	4b14      	ldr	r3, [pc, #80]	; (8008d44 <_HandleIncomingPacket+0xe0>)
 8008cf2:	7e1b      	ldrb	r3, [r3, #24]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	1cfb      	adds	r3, r7, #3
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	f7ff fe00 	bl	8008900 <SEGGER_RTT_ReadNoLock>
 8008d00:	4603      	mov	r3, r0
 8008d02:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	dd15      	ble.n	8008d36 <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f001 f8c5 	bl	8009e9c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8008d12:	e010      	b.n	8008d36 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	b25b      	sxtb	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da0e      	bge.n	8008d3a <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8008d1c:	4b09      	ldr	r3, [pc, #36]	; (8008d44 <_HandleIncomingPacket+0xe0>)
 8008d1e:	7e1b      	ldrb	r3, [r3, #24]
 8008d20:	4618      	mov	r0, r3
 8008d22:	1cfb      	adds	r3, r7, #3
 8008d24:	2201      	movs	r2, #1
 8008d26:	4619      	mov	r1, r3
 8008d28:	f7ff fdea 	bl	8008900 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8008d2c:	e005      	b.n	8008d3a <_HandleIncomingPacket+0xd6>
    }
  }
 8008d2e:	bf00      	nop
 8008d30:	e004      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
      break;
 8008d32:	bf00      	nop
 8008d34:	e002      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
      break;
 8008d36:	bf00      	nop
 8008d38:	e000      	b.n	8008d3c <_HandleIncomingPacket+0xd8>
      break;
 8008d3a:	bf00      	nop
}
 8008d3c:	bf00      	nop
 8008d3e:	3708      	adds	r7, #8
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	2001c258 	.word	0x2001c258

08008d48 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08c      	sub	sp, #48	; 0x30
 8008d4c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8008d4e:	2301      	movs	r3, #1
 8008d50:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	3301      	adds	r3, #1
 8008d56:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d5c:	4b31      	ldr	r3, [pc, #196]	; (8008e24 <_TrySendOverflowPacket+0xdc>)
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d62:	e00b      	b.n	8008d7c <_TrySendOverflowPacket+0x34>
 8008d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6a:	1c59      	adds	r1, r3, #1
 8008d6c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008d6e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d72:	b2d2      	uxtb	r2, r2
 8008d74:	701a      	strb	r2, [r3, #0]
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	09db      	lsrs	r3, r3, #7
 8008d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d80:	d8f0      	bhi.n	8008d64 <_TrySendOverflowPacket+0x1c>
 8008d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d8a:	b2d2      	uxtb	r2, r2
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d90:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008d92:	4b25      	ldr	r3, [pc, #148]	; (8008e28 <_TrySendOverflowPacket+0xe0>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008d98:	4b22      	ldr	r3, [pc, #136]	; (8008e24 <_TrySendOverflowPacket+0xdc>)
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	e00b      	b.n	8008dc4 <_TrySendOverflowPacket+0x7c>
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	b2da      	uxtb	r2, r3
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	1c59      	adds	r1, r3, #1
 8008db4:	6279      	str	r1, [r7, #36]	; 0x24
 8008db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	701a      	strb	r2, [r3, #0]
 8008dbe:	6a3b      	ldr	r3, [r7, #32]
 8008dc0:	09db      	lsrs	r3, r3, #7
 8008dc2:	623b      	str	r3, [r7, #32]
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8008dc8:	d8f0      	bhi.n	8008dac <_TrySendOverflowPacket+0x64>
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	1c5a      	adds	r2, r3, #1
 8008dce:	627a      	str	r2, [r7, #36]	; 0x24
 8008dd0:	6a3a      	ldr	r2, [r7, #32]
 8008dd2:	b2d2      	uxtb	r2, r2
 8008dd4:	701a      	strb	r2, [r3, #0]
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8008dda:	4b12      	ldr	r3, [pc, #72]	; (8008e24 <_TrySendOverflowPacket+0xdc>)
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	4618      	mov	r0, r3
 8008de0:	1d3b      	adds	r3, r7, #4
 8008de2:	69fa      	ldr	r2, [r7, #28]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	461a      	mov	r2, r3
 8008de8:	1d3b      	adds	r3, r7, #4
 8008dea:	4619      	mov	r1, r3
 8008dec:	f7f7 fa08 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008df0:	4603      	mov	r3, r0
 8008df2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d009      	beq.n	8008e0e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008dfa:	4a0a      	ldr	r2, [pc, #40]	; (8008e24 <_TrySendOverflowPacket+0xdc>)
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8008e00:	4b08      	ldr	r3, [pc, #32]	; (8008e24 <_TrySendOverflowPacket+0xdc>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b2da      	uxtb	r2, r3
 8008e08:	4b06      	ldr	r3, [pc, #24]	; (8008e24 <_TrySendOverflowPacket+0xdc>)
 8008e0a:	701a      	strb	r2, [r3, #0]
 8008e0c:	e004      	b.n	8008e18 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8008e0e:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <_TrySendOverflowPacket+0xdc>)
 8008e10:	695b      	ldr	r3, [r3, #20]
 8008e12:	3301      	adds	r3, #1
 8008e14:	4a03      	ldr	r2, [pc, #12]	; (8008e24 <_TrySendOverflowPacket+0xdc>)
 8008e16:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8008e18:	693b      	ldr	r3, [r7, #16]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3730      	adds	r7, #48	; 0x30
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	2001c258 	.word	0x2001c258
 8008e28:	e0001004 	.word	0xe0001004

08008e2c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b08a      	sub	sp, #40	; 0x28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8008e38:	4b6c      	ldr	r3, [pc, #432]	; (8008fec <_SendPacket+0x1c0>)
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d010      	beq.n	8008e62 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8008e40:	4b6a      	ldr	r3, [pc, #424]	; (8008fec <_SendPacket+0x1c0>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 80a3 	beq.w	8008f90 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8008e4a:	4b68      	ldr	r3, [pc, #416]	; (8008fec <_SendPacket+0x1c0>)
 8008e4c:	781b      	ldrb	r3, [r3, #0]
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d109      	bne.n	8008e66 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8008e52:	f7ff ff79 	bl	8008d48 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8008e56:	4b65      	ldr	r3, [pc, #404]	; (8008fec <_SendPacket+0x1c0>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	f040 809a 	bne.w	8008f94 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8008e60:	e001      	b.n	8008e66 <_SendPacket+0x3a>
    goto Send;
 8008e62:	bf00      	nop
 8008e64:	e000      	b.n	8008e68 <_SendPacket+0x3c>
Send:
 8008e66:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b1f      	cmp	r3, #31
 8008e6c:	d809      	bhi.n	8008e82 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8008e6e:	4b5f      	ldr	r3, [pc, #380]	; (8008fec <_SendPacket+0x1c0>)
 8008e70:	69da      	ldr	r2, [r3, #28]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	fa22 f303 	lsr.w	r3, r2, r3
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f040 808b 	bne.w	8008f98 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2b17      	cmp	r3, #23
 8008e86:	d807      	bhi.n	8008e98 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	701a      	strb	r2, [r3, #0]
 8008e96:	e03d      	b.n	8008f14 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	2b7f      	cmp	r3, #127	; 0x7f
 8008ea4:	d912      	bls.n	8008ecc <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	09da      	lsrs	r2, r3, #7
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	b2d2      	uxtb	r2, r2
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	68fa      	ldr	r2, [r7, #12]
 8008ebc:	3a01      	subs	r2, #1
 8008ebe:	60fa      	str	r2, [r7, #12]
 8008ec0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ec4:	b2da      	uxtb	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	701a      	strb	r2, [r3, #0]
 8008eca:	e006      	b.n	8008eda <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b7f      	cmp	r3, #127	; 0x7f
 8008ede:	d912      	bls.n	8008f06 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	09da      	lsrs	r2, r3, #7
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	b2d2      	uxtb	r2, r2
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	3a01      	subs	r2, #1
 8008ef8:	60fa      	str	r2, [r7, #12]
 8008efa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	701a      	strb	r2, [r3, #0]
 8008f04:	e006      	b.n	8008f14 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	3b01      	subs	r3, #1
 8008f0a:	60fb      	str	r3, [r7, #12]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	b2da      	uxtb	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8008f14:	4b36      	ldr	r3, [pc, #216]	; (8008ff0 <_SendPacket+0x1c4>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8008f1a:	4b34      	ldr	r3, [pc, #208]	; (8008fec <_SendPacket+0x1c0>)
 8008f1c:	68db      	ldr	r3, [r3, #12]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	627b      	str	r3, [r7, #36]	; 0x24
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	623b      	str	r3, [r7, #32]
 8008f2c:	e00b      	b.n	8008f46 <_SendPacket+0x11a>
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	b2da      	uxtb	r2, r3
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	1c59      	adds	r1, r3, #1
 8008f36:	6279      	str	r1, [r7, #36]	; 0x24
 8008f38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008f3c:	b2d2      	uxtb	r2, r2
 8008f3e:	701a      	strb	r2, [r3, #0]
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	09db      	lsrs	r3, r3, #7
 8008f44:	623b      	str	r3, [r7, #32]
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	2b7f      	cmp	r3, #127	; 0x7f
 8008f4a:	d8f0      	bhi.n	8008f2e <_SendPacket+0x102>
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	1c5a      	adds	r2, r3, #1
 8008f50:	627a      	str	r2, [r7, #36]	; 0x24
 8008f52:	6a3a      	ldr	r2, [r7, #32]
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8008f5c:	4b23      	ldr	r3, [pc, #140]	; (8008fec <_SendPacket+0x1c0>)
 8008f5e:	785b      	ldrb	r3, [r3, #1]
 8008f60:	4618      	mov	r0, r3
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68f9      	ldr	r1, [r7, #12]
 8008f6c:	f7f7 f948 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8008f70:	4603      	mov	r3, r0
 8008f72:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d003      	beq.n	8008f82 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8008f7a:	4a1c      	ldr	r2, [pc, #112]	; (8008fec <_SendPacket+0x1c0>)
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	60d3      	str	r3, [r2, #12]
 8008f80:	e00b      	b.n	8008f9a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8008f82:	4b1a      	ldr	r3, [pc, #104]	; (8008fec <_SendPacket+0x1c0>)
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	3301      	adds	r3, #1
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	4b18      	ldr	r3, [pc, #96]	; (8008fec <_SendPacket+0x1c0>)
 8008f8c:	701a      	strb	r2, [r3, #0]
 8008f8e:	e004      	b.n	8008f9a <_SendPacket+0x16e>
    goto SendDone;
 8008f90:	bf00      	nop
 8008f92:	e002      	b.n	8008f9a <_SendPacket+0x16e>
      goto SendDone;
 8008f94:	bf00      	nop
 8008f96:	e000      	b.n	8008f9a <_SendPacket+0x16e>
      goto SendDone;
 8008f98:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8008f9a:	4b14      	ldr	r3, [pc, #80]	; (8008fec <_SendPacket+0x1c0>)
 8008f9c:	7e1b      	ldrb	r3, [r3, #24]
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	4a14      	ldr	r2, [pc, #80]	; (8008ff4 <_SendPacket+0x1c8>)
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	440b      	add	r3, r1
 8008fa8:	00db      	lsls	r3, r3, #3
 8008faa:	4413      	add	r3, r2
 8008fac:	336c      	adds	r3, #108	; 0x6c
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	4b0e      	ldr	r3, [pc, #56]	; (8008fec <_SendPacket+0x1c0>)
 8008fb2:	7e1b      	ldrb	r3, [r3, #24]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	490f      	ldr	r1, [pc, #60]	; (8008ff4 <_SendPacket+0x1c8>)
 8008fb8:	4603      	mov	r3, r0
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	4403      	add	r3, r0
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	440b      	add	r3, r1
 8008fc2:	3370      	adds	r3, #112	; 0x70
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d00b      	beq.n	8008fe2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8008fca:	4b08      	ldr	r3, [pc, #32]	; (8008fec <_SendPacket+0x1c0>)
 8008fcc:	789b      	ldrb	r3, [r3, #2]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d107      	bne.n	8008fe2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8008fd2:	4b06      	ldr	r3, [pc, #24]	; (8008fec <_SendPacket+0x1c0>)
 8008fd4:	2201      	movs	r2, #1
 8008fd6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8008fd8:	f7ff fe44 	bl	8008c64 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8008fdc:	4b03      	ldr	r3, [pc, #12]	; (8008fec <_SendPacket+0x1c0>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8008fe2:	bf00      	nop
 8008fe4:	3728      	adds	r7, #40	; 0x28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	2001c258 	.word	0x2001c258
 8008ff0:	e0001004 	.word	0xe0001004
 8008ff4:	2001c4d0 	.word	0x2001c4d0

08008ff8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af02      	add	r7, sp, #8
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009006:	2300      	movs	r3, #0
 8009008:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 800900c:	4917      	ldr	r1, [pc, #92]	; (800906c <SEGGER_SYSVIEW_Init+0x74>)
 800900e:	4818      	ldr	r0, [pc, #96]	; (8009070 <SEGGER_SYSVIEW_Init+0x78>)
 8009010:	f7ff fcfc 	bl	8008a0c <SEGGER_RTT_AllocUpBuffer>
 8009014:	4603      	mov	r3, r0
 8009016:	b2da      	uxtb	r2, r3
 8009018:	4b16      	ldr	r3, [pc, #88]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 800901a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800901c:	4b15      	ldr	r3, [pc, #84]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 800901e:	785a      	ldrb	r2, [r3, #1]
 8009020:	4b14      	ldr	r3, [pc, #80]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 8009022:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009024:	4b13      	ldr	r3, [pc, #76]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 8009026:	7e1b      	ldrb	r3, [r3, #24]
 8009028:	4618      	mov	r0, r3
 800902a:	2300      	movs	r3, #0
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	2308      	movs	r3, #8
 8009030:	4a11      	ldr	r2, [pc, #68]	; (8009078 <SEGGER_SYSVIEW_Init+0x80>)
 8009032:	490f      	ldr	r1, [pc, #60]	; (8009070 <SEGGER_SYSVIEW_Init+0x78>)
 8009034:	f7ff fd6e 	bl	8008b14 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8009038:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 800903a:	2200      	movs	r2, #0
 800903c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800903e:	4b0f      	ldr	r3, [pc, #60]	; (800907c <SEGGER_SYSVIEW_Init+0x84>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a0c      	ldr	r2, [pc, #48]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 8009044:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8009046:	4a0b      	ldr	r2, [pc, #44]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800904c:	4a09      	ldr	r2, [pc, #36]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009052:	4a08      	ldr	r2, [pc, #32]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8009058:	4a06      	ldr	r2, [pc, #24]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800905e:	4b05      	ldr	r3, [pc, #20]	; (8009074 <SEGGER_SYSVIEW_Init+0x7c>)
 8009060:	2200      	movs	r2, #0
 8009062:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8009064:	bf00      	nop
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20013250 	.word	0x20013250
 8009070:	0800a2c8 	.word	0x0800a2c8
 8009074:	2001c258 	.word	0x2001c258
 8009078:	2001c250 	.word	0x2001c250
 800907c:	e0001004 	.word	0xe0001004

08009080 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8009088:	4a04      	ldr	r2, [pc, #16]	; (800909c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6113      	str	r3, [r2, #16]
}
 800908e:	bf00      	nop
 8009090:	370c      	adds	r7, #12
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	2001c258 	.word	0x2001c258

080090a0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80090a8:	f3ef 8311 	mrs	r3, BASEPRI
 80090ac:	f04f 0120 	mov.w	r1, #32
 80090b0:	f381 8811 	msr	BASEPRI, r1
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	4808      	ldr	r0, [pc, #32]	; (80090d8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80090b8:	f7ff fdc8 	bl	8008c4c <_PreparePacket>
 80090bc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	68b9      	ldr	r1, [r7, #8]
 80090c2:	68b8      	ldr	r0, [r7, #8]
 80090c4:	f7ff feb2 	bl	8008e2c <_SendPacket>
  RECORD_END();
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f383 8811 	msr	BASEPRI, r3
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	2001c288 	.word	0x2001c288

080090dc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80090dc:	b580      	push	{r7, lr}
 80090de:	b088      	sub	sp, #32
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80090e6:	f3ef 8311 	mrs	r3, BASEPRI
 80090ea:	f04f 0120 	mov.w	r1, #32
 80090ee:	f381 8811 	msr	BASEPRI, r1
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	4816      	ldr	r0, [pc, #88]	; (8009150 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80090f6:	f7ff fda9 	bl	8008c4c <_PreparePacket>
 80090fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	61fb      	str	r3, [r7, #28]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	61bb      	str	r3, [r7, #24]
 8009108:	e00b      	b.n	8009122 <SEGGER_SYSVIEW_RecordU32+0x46>
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	b2da      	uxtb	r2, r3
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	1c59      	adds	r1, r3, #1
 8009112:	61f9      	str	r1, [r7, #28]
 8009114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009118:	b2d2      	uxtb	r2, r2
 800911a:	701a      	strb	r2, [r3, #0]
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	09db      	lsrs	r3, r3, #7
 8009120:	61bb      	str	r3, [r7, #24]
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2b7f      	cmp	r3, #127	; 0x7f
 8009126:	d8f0      	bhi.n	800910a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	61fa      	str	r2, [r7, #28]
 800912e:	69ba      	ldr	r2, [r7, #24]
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	701a      	strb	r2, [r3, #0]
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	6938      	ldr	r0, [r7, #16]
 800913e:	f7ff fe75 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f383 8811 	msr	BASEPRI, r3
}
 8009148:	bf00      	nop
 800914a:	3720      	adds	r7, #32
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	2001c288 	.word	0x2001c288

08009154 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b08c      	sub	sp, #48	; 0x30
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009160:	f3ef 8311 	mrs	r3, BASEPRI
 8009164:	f04f 0120 	mov.w	r1, #32
 8009168:	f381 8811 	msr	BASEPRI, r1
 800916c:	61fb      	str	r3, [r7, #28]
 800916e:	4825      	ldr	r0, [pc, #148]	; (8009204 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8009170:	f7ff fd6c 	bl	8008c4c <_PreparePacket>
 8009174:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009176:	69bb      	ldr	r3, [r7, #24]
 8009178:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	62bb      	str	r3, [r7, #40]	; 0x28
 8009182:	e00b      	b.n	800919c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	b2da      	uxtb	r2, r3
 8009188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918a:	1c59      	adds	r1, r3, #1
 800918c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800918e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]
 8009196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009198:	09db      	lsrs	r3, r3, #7
 800919a:	62bb      	str	r3, [r7, #40]	; 0x28
 800919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800919e:	2b7f      	cmp	r3, #127	; 0x7f
 80091a0:	d8f0      	bhi.n	8009184 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80091a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80091a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	623b      	str	r3, [r7, #32]
 80091ba:	e00b      	b.n	80091d4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c2:	1c59      	adds	r1, r3, #1
 80091c4:	6279      	str	r1, [r7, #36]	; 0x24
 80091c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80091ca:	b2d2      	uxtb	r2, r2
 80091cc:	701a      	strb	r2, [r3, #0]
 80091ce:	6a3b      	ldr	r3, [r7, #32]
 80091d0:	09db      	lsrs	r3, r3, #7
 80091d2:	623b      	str	r3, [r7, #32]
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	2b7f      	cmp	r3, #127	; 0x7f
 80091d8:	d8f0      	bhi.n	80091bc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	1c5a      	adds	r2, r3, #1
 80091de:	627a      	str	r2, [r7, #36]	; 0x24
 80091e0:	6a3a      	ldr	r2, [r7, #32]
 80091e2:	b2d2      	uxtb	r2, r2
 80091e4:	701a      	strb	r2, [r3, #0]
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	6979      	ldr	r1, [r7, #20]
 80091ee:	69b8      	ldr	r0, [r7, #24]
 80091f0:	f7ff fe1c 	bl	8008e2c <_SendPacket>
  RECORD_END();
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	f383 8811 	msr	BASEPRI, r3
}
 80091fa:	bf00      	nop
 80091fc:	3730      	adds	r7, #48	; 0x30
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	2001c288 	.word	0x2001c288

08009208 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8009208:	b580      	push	{r7, lr}
 800920a:	b08e      	sub	sp, #56	; 0x38
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	607a      	str	r2, [r7, #4]
 8009214:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8009216:	f3ef 8311 	mrs	r3, BASEPRI
 800921a:	f04f 0120 	mov.w	r1, #32
 800921e:	f381 8811 	msr	BASEPRI, r1
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	4832      	ldr	r0, [pc, #200]	; (80092f0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8009226:	f7ff fd11 	bl	8008c4c <_PreparePacket>
 800922a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	633b      	str	r3, [r7, #48]	; 0x30
 8009238:	e00b      	b.n	8009252 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	b2da      	uxtb	r2, r3
 800923e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009240:	1c59      	adds	r1, r3, #1
 8009242:	6379      	str	r1, [r7, #52]	; 0x34
 8009244:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	701a      	strb	r2, [r3, #0]
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	09db      	lsrs	r3, r3, #7
 8009250:	633b      	str	r3, [r7, #48]	; 0x30
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	2b7f      	cmp	r3, #127	; 0x7f
 8009256:	d8f0      	bhi.n	800923a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	1c5a      	adds	r2, r3, #1
 800925c:	637a      	str	r2, [r7, #52]	; 0x34
 800925e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009260:	b2d2      	uxtb	r2, r2
 8009262:	701a      	strb	r2, [r3, #0]
 8009264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009266:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009270:	e00b      	b.n	800928a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	b2da      	uxtb	r2, r3
 8009276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009278:	1c59      	adds	r1, r3, #1
 800927a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800927c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	701a      	strb	r2, [r3, #0]
 8009284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009286:	09db      	lsrs	r3, r3, #7
 8009288:	62bb      	str	r3, [r7, #40]	; 0x28
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	2b7f      	cmp	r3, #127	; 0x7f
 800928e:	d8f0      	bhi.n	8009272 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8009290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009298:	b2d2      	uxtb	r2, r2
 800929a:	701a      	strb	r2, [r3, #0]
 800929c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	623b      	str	r3, [r7, #32]
 80092a8:	e00b      	b.n	80092c2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80092aa:	6a3b      	ldr	r3, [r7, #32]
 80092ac:	b2da      	uxtb	r2, r3
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	1c59      	adds	r1, r3, #1
 80092b2:	6279      	str	r1, [r7, #36]	; 0x24
 80092b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	09db      	lsrs	r3, r3, #7
 80092c0:	623b      	str	r3, [r7, #32]
 80092c2:	6a3b      	ldr	r3, [r7, #32]
 80092c4:	2b7f      	cmp	r3, #127	; 0x7f
 80092c6:	d8f0      	bhi.n	80092aa <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	1c5a      	adds	r2, r3, #1
 80092cc:	627a      	str	r2, [r7, #36]	; 0x24
 80092ce:	6a3a      	ldr	r2, [r7, #32]
 80092d0:	b2d2      	uxtb	r2, r2
 80092d2:	701a      	strb	r2, [r3, #0]
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	6979      	ldr	r1, [r7, #20]
 80092dc:	69b8      	ldr	r0, [r7, #24]
 80092de:	f7ff fda5 	bl	8008e2c <_SendPacket>
  RECORD_END();
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	f383 8811 	msr	BASEPRI, r3
}
 80092e8:	bf00      	nop
 80092ea:	3738      	adds	r7, #56	; 0x38
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	2001c288 	.word	0x2001c288

080092f4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b090      	sub	sp, #64	; 0x40
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	60f8      	str	r0, [r7, #12]
 80092fc:	60b9      	str	r1, [r7, #8]
 80092fe:	607a      	str	r2, [r7, #4]
 8009300:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009302:	f3ef 8311 	mrs	r3, BASEPRI
 8009306:	f04f 0120 	mov.w	r1, #32
 800930a:	f381 8811 	msr	BASEPRI, r1
 800930e:	61fb      	str	r3, [r7, #28]
 8009310:	4840      	ldr	r0, [pc, #256]	; (8009414 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8009312:	f7ff fc9b 	bl	8008c4c <_PreparePacket>
 8009316:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8009318:	69bb      	ldr	r3, [r7, #24]
 800931a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	63bb      	str	r3, [r7, #56]	; 0x38
 8009324:	e00b      	b.n	800933e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8009326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009328:	b2da      	uxtb	r2, r3
 800932a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800932c:	1c59      	adds	r1, r3, #1
 800932e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8009330:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009334:	b2d2      	uxtb	r2, r2
 8009336:	701a      	strb	r2, [r3, #0]
 8009338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933a:	09db      	lsrs	r3, r3, #7
 800933c:	63bb      	str	r3, [r7, #56]	; 0x38
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	2b7f      	cmp	r3, #127	; 0x7f
 8009342:	d8f0      	bhi.n	8009326 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8009344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	63fa      	str	r2, [r7, #60]	; 0x3c
 800934a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800934c:	b2d2      	uxtb	r2, r2
 800934e:	701a      	strb	r2, [r3, #0]
 8009350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009352:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	637b      	str	r3, [r7, #52]	; 0x34
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	633b      	str	r3, [r7, #48]	; 0x30
 800935c:	e00b      	b.n	8009376 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	b2da      	uxtb	r2, r3
 8009362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009364:	1c59      	adds	r1, r3, #1
 8009366:	6379      	str	r1, [r7, #52]	; 0x34
 8009368:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800936c:	b2d2      	uxtb	r2, r2
 800936e:	701a      	strb	r2, [r3, #0]
 8009370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009372:	09db      	lsrs	r3, r3, #7
 8009374:	633b      	str	r3, [r7, #48]	; 0x30
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	2b7f      	cmp	r3, #127	; 0x7f
 800937a:	d8f0      	bhi.n	800935e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800937c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800937e:	1c5a      	adds	r2, r3, #1
 8009380:	637a      	str	r2, [r7, #52]	; 0x34
 8009382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009384:	b2d2      	uxtb	r2, r2
 8009386:	701a      	strb	r2, [r3, #0]
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	62bb      	str	r3, [r7, #40]	; 0x28
 8009394:	e00b      	b.n	80093ae <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8009396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009398:	b2da      	uxtb	r2, r3
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	1c59      	adds	r1, r3, #1
 800939e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80093a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093a4:	b2d2      	uxtb	r2, r2
 80093a6:	701a      	strb	r2, [r3, #0]
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	09db      	lsrs	r3, r3, #7
 80093ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b0:	2b7f      	cmp	r3, #127	; 0x7f
 80093b2:	d8f0      	bhi.n	8009396 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80093b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093bc:	b2d2      	uxtb	r2, r2
 80093be:	701a      	strb	r2, [r3, #0]
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
 80093c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093ca:	623b      	str	r3, [r7, #32]
 80093cc:	e00b      	b.n	80093e6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d4:	1c59      	adds	r1, r3, #1
 80093d6:	6279      	str	r1, [r7, #36]	; 0x24
 80093d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80093dc:	b2d2      	uxtb	r2, r2
 80093de:	701a      	strb	r2, [r3, #0]
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	09db      	lsrs	r3, r3, #7
 80093e4:	623b      	str	r3, [r7, #32]
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	2b7f      	cmp	r3, #127	; 0x7f
 80093ea:	d8f0      	bhi.n	80093ce <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	627a      	str	r2, [r7, #36]	; 0x24
 80093f2:	6a3a      	ldr	r2, [r7, #32]
 80093f4:	b2d2      	uxtb	r2, r2
 80093f6:	701a      	strb	r2, [r3, #0]
 80093f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	6979      	ldr	r1, [r7, #20]
 8009400:	69b8      	ldr	r0, [r7, #24]
 8009402:	f7ff fd13 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	f383 8811 	msr	BASEPRI, r3
}
 800940c:	bf00      	nop
 800940e:	3740      	adds	r7, #64	; 0x40
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	2001c288 	.word	0x2001c288

08009418 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8009418:	b580      	push	{r7, lr}
 800941a:	b092      	sub	sp, #72	; 0x48
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8009426:	f3ef 8311 	mrs	r3, BASEPRI
 800942a:	f04f 0120 	mov.w	r1, #32
 800942e:	f381 8811 	msr	BASEPRI, r1
 8009432:	61fb      	str	r3, [r7, #28]
 8009434:	484e      	ldr	r0, [pc, #312]	; (8009570 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8009436:	f7ff fc09 	bl	8008c4c <_PreparePacket>
 800943a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800943c:	69bb      	ldr	r3, [r7, #24]
 800943e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	647b      	str	r3, [r7, #68]	; 0x44
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	643b      	str	r3, [r7, #64]	; 0x40
 8009448:	e00b      	b.n	8009462 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800944a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800944c:	b2da      	uxtb	r2, r3
 800944e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009450:	1c59      	adds	r1, r3, #1
 8009452:	6479      	str	r1, [r7, #68]	; 0x44
 8009454:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009458:	b2d2      	uxtb	r2, r2
 800945a:	701a      	strb	r2, [r3, #0]
 800945c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800945e:	09db      	lsrs	r3, r3, #7
 8009460:	643b      	str	r3, [r7, #64]	; 0x40
 8009462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009464:	2b7f      	cmp	r3, #127	; 0x7f
 8009466:	d8f0      	bhi.n	800944a <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8009468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	647a      	str	r2, [r7, #68]	; 0x44
 800946e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009470:	b2d2      	uxtb	r2, r2
 8009472:	701a      	strb	r2, [r3, #0]
 8009474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009476:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009480:	e00b      	b.n	800949a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8009482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009484:	b2da      	uxtb	r2, r3
 8009486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009488:	1c59      	adds	r1, r3, #1
 800948a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800948c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009490:	b2d2      	uxtb	r2, r2
 8009492:	701a      	strb	r2, [r3, #0]
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	09db      	lsrs	r3, r3, #7
 8009498:	63bb      	str	r3, [r7, #56]	; 0x38
 800949a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949c:	2b7f      	cmp	r3, #127	; 0x7f
 800949e:	d8f0      	bhi.n	8009482 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 80094a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80094a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094a8:	b2d2      	uxtb	r2, r2
 80094aa:	701a      	strb	r2, [r3, #0]
 80094ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	637b      	str	r3, [r7, #52]	; 0x34
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	633b      	str	r3, [r7, #48]	; 0x30
 80094b8:	e00b      	b.n	80094d2 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	b2da      	uxtb	r2, r3
 80094be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c0:	1c59      	adds	r1, r3, #1
 80094c2:	6379      	str	r1, [r7, #52]	; 0x34
 80094c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80094c8:	b2d2      	uxtb	r2, r2
 80094ca:	701a      	strb	r2, [r3, #0]
 80094cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ce:	09db      	lsrs	r3, r3, #7
 80094d0:	633b      	str	r3, [r7, #48]	; 0x30
 80094d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d4:	2b7f      	cmp	r3, #127	; 0x7f
 80094d6:	d8f0      	bhi.n	80094ba <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 80094d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	637a      	str	r2, [r7, #52]	; 0x34
 80094de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094e0:	b2d2      	uxtb	r2, r2
 80094e2:	701a      	strb	r2, [r3, #0]
 80094e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80094f0:	e00b      	b.n	800950a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f8:	1c59      	adds	r1, r3, #1
 80094fa:	62f9      	str	r1, [r7, #44]	; 0x2c
 80094fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009500:	b2d2      	uxtb	r2, r2
 8009502:	701a      	strb	r2, [r3, #0]
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	09db      	lsrs	r3, r3, #7
 8009508:	62bb      	str	r3, [r7, #40]	; 0x28
 800950a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950c:	2b7f      	cmp	r3, #127	; 0x7f
 800950e:	d8f0      	bhi.n	80094f2 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8009510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009512:	1c5a      	adds	r2, r3, #1
 8009514:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009518:	b2d2      	uxtb	r2, r2
 800951a:	701a      	strb	r2, [r3, #0]
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	627b      	str	r3, [r7, #36]	; 0x24
 8009524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009526:	623b      	str	r3, [r7, #32]
 8009528:	e00b      	b.n	8009542 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	b2da      	uxtb	r2, r3
 800952e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009530:	1c59      	adds	r1, r3, #1
 8009532:	6279      	str	r1, [r7, #36]	; 0x24
 8009534:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009538:	b2d2      	uxtb	r2, r2
 800953a:	701a      	strb	r2, [r3, #0]
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	09db      	lsrs	r3, r3, #7
 8009540:	623b      	str	r3, [r7, #32]
 8009542:	6a3b      	ldr	r3, [r7, #32]
 8009544:	2b7f      	cmp	r3, #127	; 0x7f
 8009546:	d8f0      	bhi.n	800952a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8009548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	627a      	str	r2, [r7, #36]	; 0x24
 800954e:	6a3a      	ldr	r2, [r7, #32]
 8009550:	b2d2      	uxtb	r2, r2
 8009552:	701a      	strb	r2, [r3, #0]
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009558:	68fa      	ldr	r2, [r7, #12]
 800955a:	6979      	ldr	r1, [r7, #20]
 800955c:	69b8      	ldr	r0, [r7, #24]
 800955e:	f7ff fc65 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	f383 8811 	msr	BASEPRI, r3
}
 8009568:	bf00      	nop
 800956a:	3748      	adds	r7, #72	; 0x48
 800956c:	46bd      	mov	sp, r7
 800956e:	bd80      	pop	{r7, pc}
 8009570:	2001c288 	.word	0x2001c288

08009574 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009574:	b580      	push	{r7, lr}
 8009576:	b08c      	sub	sp, #48	; 0x30
 8009578:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800957a:	4b58      	ldr	r3, [pc, #352]	; (80096dc <SEGGER_SYSVIEW_Start+0x168>)
 800957c:	2201      	movs	r2, #1
 800957e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009580:	f3ef 8311 	mrs	r3, BASEPRI
 8009584:	f04f 0120 	mov.w	r1, #32
 8009588:	f381 8811 	msr	BASEPRI, r1
 800958c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800958e:	4b53      	ldr	r3, [pc, #332]	; (80096dc <SEGGER_SYSVIEW_Start+0x168>)
 8009590:	785b      	ldrb	r3, [r3, #1]
 8009592:	220a      	movs	r2, #10
 8009594:	4952      	ldr	r1, [pc, #328]	; (80096e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8009596:	4618      	mov	r0, r3
 8009598:	f7f6 fe32 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80095a2:	200a      	movs	r0, #10
 80095a4:	f7ff fd7c 	bl	80090a0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80095a8:	f3ef 8311 	mrs	r3, BASEPRI
 80095ac:	f04f 0120 	mov.w	r1, #32
 80095b0:	f381 8811 	msr	BASEPRI, r1
 80095b4:	60bb      	str	r3, [r7, #8]
 80095b6:	484b      	ldr	r0, [pc, #300]	; (80096e4 <SEGGER_SYSVIEW_Start+0x170>)
 80095b8:	f7ff fb48 	bl	8008c4c <_PreparePacket>
 80095bc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095c6:	4b45      	ldr	r3, [pc, #276]	; (80096dc <SEGGER_SYSVIEW_Start+0x168>)
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80095cc:	e00b      	b.n	80095e6 <SEGGER_SYSVIEW_Start+0x72>
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095d4:	1c59      	adds	r1, r3, #1
 80095d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80095d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80095dc:	b2d2      	uxtb	r2, r2
 80095de:	701a      	strb	r2, [r3, #0]
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	09db      	lsrs	r3, r3, #7
 80095e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80095e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e8:	2b7f      	cmp	r3, #127	; 0x7f
 80095ea:	d8f0      	bhi.n	80095ce <SEGGER_SYSVIEW_Start+0x5a>
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	1c5a      	adds	r2, r3, #1
 80095f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80095f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095f4:	b2d2      	uxtb	r2, r2
 80095f6:	701a      	strb	r2, [r3, #0]
 80095f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009600:	4b36      	ldr	r3, [pc, #216]	; (80096dc <SEGGER_SYSVIEW_Start+0x168>)
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	623b      	str	r3, [r7, #32]
 8009606:	e00b      	b.n	8009620 <SEGGER_SYSVIEW_Start+0xac>
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	b2da      	uxtb	r2, r3
 800960c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960e:	1c59      	adds	r1, r3, #1
 8009610:	6279      	str	r1, [r7, #36]	; 0x24
 8009612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009616:	b2d2      	uxtb	r2, r2
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	09db      	lsrs	r3, r3, #7
 800961e:	623b      	str	r3, [r7, #32]
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	2b7f      	cmp	r3, #127	; 0x7f
 8009624:	d8f0      	bhi.n	8009608 <SEGGER_SYSVIEW_Start+0x94>
 8009626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009628:	1c5a      	adds	r2, r3, #1
 800962a:	627a      	str	r2, [r7, #36]	; 0x24
 800962c:	6a3a      	ldr	r2, [r7, #32]
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	61fb      	str	r3, [r7, #28]
 800963a:	4b28      	ldr	r3, [pc, #160]	; (80096dc <SEGGER_SYSVIEW_Start+0x168>)
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	61bb      	str	r3, [r7, #24]
 8009640:	e00b      	b.n	800965a <SEGGER_SYSVIEW_Start+0xe6>
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	b2da      	uxtb	r2, r3
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	1c59      	adds	r1, r3, #1
 800964a:	61f9      	str	r1, [r7, #28]
 800964c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	701a      	strb	r2, [r3, #0]
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	09db      	lsrs	r3, r3, #7
 8009658:	61bb      	str	r3, [r7, #24]
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2b7f      	cmp	r3, #127	; 0x7f
 800965e:	d8f0      	bhi.n	8009642 <SEGGER_SYSVIEW_Start+0xce>
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	1c5a      	adds	r2, r3, #1
 8009664:	61fa      	str	r2, [r7, #28]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	b2d2      	uxtb	r2, r2
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	69fb      	ldr	r3, [r7, #28]
 800966e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	2300      	movs	r3, #0
 8009676:	613b      	str	r3, [r7, #16]
 8009678:	e00b      	b.n	8009692 <SEGGER_SYSVIEW_Start+0x11e>
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	b2da      	uxtb	r2, r3
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	1c59      	adds	r1, r3, #1
 8009682:	6179      	str	r1, [r7, #20]
 8009684:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009688:	b2d2      	uxtb	r2, r2
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	09db      	lsrs	r3, r3, #7
 8009690:	613b      	str	r3, [r7, #16]
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b7f      	cmp	r3, #127	; 0x7f
 8009696:	d8f0      	bhi.n	800967a <SEGGER_SYSVIEW_Start+0x106>
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	617a      	str	r2, [r7, #20]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	b2d2      	uxtb	r2, r2
 80096a2:	701a      	strb	r2, [r3, #0]
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80096a8:	2218      	movs	r2, #24
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7ff fbbd 	bl	8008e2c <_SendPacket>
      RECORD_END();
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80096b8:	4b08      	ldr	r3, [pc, #32]	; (80096dc <SEGGER_SYSVIEW_Start+0x168>)
 80096ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d002      	beq.n	80096c6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80096c0:	4b06      	ldr	r3, [pc, #24]	; (80096dc <SEGGER_SYSVIEW_Start+0x168>)
 80096c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80096c6:	f000 f9eb 	bl	8009aa0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80096ca:	f000 f9b1 	bl	8009a30 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80096ce:	f000 fc83 	bl	8009fd8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80096d2:	bf00      	nop
 80096d4:	3730      	adds	r7, #48	; 0x30
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	2001c258 	.word	0x2001c258
 80096e0:	0800a348 	.word	0x0800a348
 80096e4:	2001c288 	.word	0x2001c288

080096e8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80096ee:	f3ef 8311 	mrs	r3, BASEPRI
 80096f2:	f04f 0120 	mov.w	r1, #32
 80096f6:	f381 8811 	msr	BASEPRI, r1
 80096fa:	607b      	str	r3, [r7, #4]
 80096fc:	480b      	ldr	r0, [pc, #44]	; (800972c <SEGGER_SYSVIEW_Stop+0x44>)
 80096fe:	f7ff faa5 	bl	8008c4c <_PreparePacket>
 8009702:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009704:	4b0a      	ldr	r3, [pc, #40]	; (8009730 <SEGGER_SYSVIEW_Stop+0x48>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d007      	beq.n	800971c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800970c:	220b      	movs	r2, #11
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	6838      	ldr	r0, [r7, #0]
 8009712:	f7ff fb8b 	bl	8008e2c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009716:	4b06      	ldr	r3, [pc, #24]	; (8009730 <SEGGER_SYSVIEW_Stop+0x48>)
 8009718:	2200      	movs	r2, #0
 800971a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f383 8811 	msr	BASEPRI, r3
}
 8009722:	bf00      	nop
 8009724:	3708      	adds	r7, #8
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	2001c288 	.word	0x2001c288
 8009730:	2001c258 	.word	0x2001c258

08009734 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009734:	b580      	push	{r7, lr}
 8009736:	b08c      	sub	sp, #48	; 0x30
 8009738:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800973a:	f3ef 8311 	mrs	r3, BASEPRI
 800973e:	f04f 0120 	mov.w	r1, #32
 8009742:	f381 8811 	msr	BASEPRI, r1
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	4845      	ldr	r0, [pc, #276]	; (8009860 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800974a:	f7ff fa7f 	bl	8008c4c <_PreparePacket>
 800974e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009758:	4b42      	ldr	r3, [pc, #264]	; (8009864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	62bb      	str	r3, [r7, #40]	; 0x28
 800975e:	e00b      	b.n	8009778 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	b2da      	uxtb	r2, r3
 8009764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009766:	1c59      	adds	r1, r3, #1
 8009768:	62f9      	str	r1, [r7, #44]	; 0x2c
 800976a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009774:	09db      	lsrs	r3, r3, #7
 8009776:	62bb      	str	r3, [r7, #40]	; 0x28
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	2b7f      	cmp	r3, #127	; 0x7f
 800977c:	d8f0      	bhi.n	8009760 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800977e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]
 800978a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	627b      	str	r3, [r7, #36]	; 0x24
 8009792:	4b34      	ldr	r3, [pc, #208]	; (8009864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	623b      	str	r3, [r7, #32]
 8009798:	e00b      	b.n	80097b2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800979a:	6a3b      	ldr	r3, [r7, #32]
 800979c:	b2da      	uxtb	r2, r3
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	1c59      	adds	r1, r3, #1
 80097a2:	6279      	str	r1, [r7, #36]	; 0x24
 80097a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097a8:	b2d2      	uxtb	r2, r2
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	09db      	lsrs	r3, r3, #7
 80097b0:	623b      	str	r3, [r7, #32]
 80097b2:	6a3b      	ldr	r3, [r7, #32]
 80097b4:	2b7f      	cmp	r3, #127	; 0x7f
 80097b6:	d8f0      	bhi.n	800979a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80097b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	627a      	str	r2, [r7, #36]	; 0x24
 80097be:	6a3a      	ldr	r2, [r7, #32]
 80097c0:	b2d2      	uxtb	r2, r2
 80097c2:	701a      	strb	r2, [r3, #0]
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	4b25      	ldr	r3, [pc, #148]	; (8009864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	61bb      	str	r3, [r7, #24]
 80097d2:	e00b      	b.n	80097ec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	1c59      	adds	r1, r3, #1
 80097dc:	61f9      	str	r1, [r7, #28]
 80097de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80097e2:	b2d2      	uxtb	r2, r2
 80097e4:	701a      	strb	r2, [r3, #0]
 80097e6:	69bb      	ldr	r3, [r7, #24]
 80097e8:	09db      	lsrs	r3, r3, #7
 80097ea:	61bb      	str	r3, [r7, #24]
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	2b7f      	cmp	r3, #127	; 0x7f
 80097f0:	d8f0      	bhi.n	80097d4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	61fa      	str	r2, [r7, #28]
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	b2d2      	uxtb	r2, r2
 80097fc:	701a      	strb	r2, [r3, #0]
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	617b      	str	r3, [r7, #20]
 8009806:	2300      	movs	r3, #0
 8009808:	613b      	str	r3, [r7, #16]
 800980a:	e00b      	b.n	8009824 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	b2da      	uxtb	r2, r3
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	1c59      	adds	r1, r3, #1
 8009814:	6179      	str	r1, [r7, #20]
 8009816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	701a      	strb	r2, [r3, #0]
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	09db      	lsrs	r3, r3, #7
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	2b7f      	cmp	r3, #127	; 0x7f
 8009828:	d8f0      	bhi.n	800980c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	617a      	str	r2, [r7, #20]
 8009830:	693a      	ldr	r2, [r7, #16]
 8009832:	b2d2      	uxtb	r2, r2
 8009834:	701a      	strb	r2, [r3, #0]
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800983a:	2218      	movs	r2, #24
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	68b8      	ldr	r0, [r7, #8]
 8009840:	f7ff faf4 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800984a:	4b06      	ldr	r3, [pc, #24]	; (8009864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009852:	4b04      	ldr	r3, [pc, #16]	; (8009864 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009856:	4798      	blx	r3
  }
}
 8009858:	bf00      	nop
 800985a:	3730      	adds	r7, #48	; 0x30
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	2001c288 	.word	0x2001c288
 8009864:	2001c258 	.word	0x2001c258

08009868 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009868:	b580      	push	{r7, lr}
 800986a:	b092      	sub	sp, #72	; 0x48
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009870:	f3ef 8311 	mrs	r3, BASEPRI
 8009874:	f04f 0120 	mov.w	r1, #32
 8009878:	f381 8811 	msr	BASEPRI, r1
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	486a      	ldr	r0, [pc, #424]	; (8009a28 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009880:	f7ff f9e4 	bl	8008c4c <_PreparePacket>
 8009884:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	647b      	str	r3, [r7, #68]	; 0x44
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	4b66      	ldr	r3, [pc, #408]	; (8009a2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	643b      	str	r3, [r7, #64]	; 0x40
 800989a:	e00b      	b.n	80098b4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800989c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800989e:	b2da      	uxtb	r2, r3
 80098a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098a2:	1c59      	adds	r1, r3, #1
 80098a4:	6479      	str	r1, [r7, #68]	; 0x44
 80098a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	701a      	strb	r2, [r3, #0]
 80098ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b0:	09db      	lsrs	r3, r3, #7
 80098b2:	643b      	str	r3, [r7, #64]	; 0x40
 80098b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098b6:	2b7f      	cmp	r3, #127	; 0x7f
 80098b8:	d8f0      	bhi.n	800989c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80098ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	647a      	str	r2, [r7, #68]	; 0x44
 80098c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80098c2:	b2d2      	uxtb	r2, r2
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80098d4:	e00b      	b.n	80098ee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80098d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d8:	b2da      	uxtb	r2, r3
 80098da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098dc:	1c59      	adds	r1, r3, #1
 80098de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80098e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80098e4:	b2d2      	uxtb	r2, r2
 80098e6:	701a      	strb	r2, [r3, #0]
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	09db      	lsrs	r3, r3, #7
 80098ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	2b7f      	cmp	r3, #127	; 0x7f
 80098f2:	d8f0      	bhi.n	80098d6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80098f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f6:	1c5a      	adds	r2, r3, #1
 80098f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80098fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	701a      	strb	r2, [r3, #0]
 8009900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009902:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	2220      	movs	r2, #32
 800990a:	4619      	mov	r1, r3
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f7ff f94d 	bl	8008bac <_EncodeStr>
 8009912:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009914:	2209      	movs	r2, #9
 8009916:	68f9      	ldr	r1, [r7, #12]
 8009918:	6938      	ldr	r0, [r7, #16]
 800991a:	f7ff fa87 	bl	8008e2c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	637b      	str	r3, [r7, #52]	; 0x34
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	4b40      	ldr	r3, [pc, #256]	; (8009a2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	633b      	str	r3, [r7, #48]	; 0x30
 8009932:	e00b      	b.n	800994c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	b2da      	uxtb	r2, r3
 8009938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993a:	1c59      	adds	r1, r3, #1
 800993c:	6379      	str	r1, [r7, #52]	; 0x34
 800993e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]
 8009946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009948:	09db      	lsrs	r3, r3, #7
 800994a:	633b      	str	r3, [r7, #48]	; 0x30
 800994c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994e:	2b7f      	cmp	r3, #127	; 0x7f
 8009950:	d8f0      	bhi.n	8009934 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	637a      	str	r2, [r7, #52]	; 0x34
 8009958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995a:	b2d2      	uxtb	r2, r2
 800995c:	701a      	strb	r2, [r3, #0]
 800995e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009960:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	68db      	ldr	r3, [r3, #12]
 800996a:	62bb      	str	r3, [r7, #40]	; 0x28
 800996c:	e00b      	b.n	8009986 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009970:	b2da      	uxtb	r2, r3
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	1c59      	adds	r1, r3, #1
 8009976:	62f9      	str	r1, [r7, #44]	; 0x2c
 8009978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800997c:	b2d2      	uxtb	r2, r2
 800997e:	701a      	strb	r2, [r3, #0]
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	09db      	lsrs	r3, r3, #7
 8009984:	62bb      	str	r3, [r7, #40]	; 0x28
 8009986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009988:	2b7f      	cmp	r3, #127	; 0x7f
 800998a:	d8f0      	bhi.n	800996e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800998c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009994:	b2d2      	uxtb	r2, r2
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	623b      	str	r3, [r7, #32]
 80099a6:	e00b      	b.n	80099c0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ae:	1c59      	adds	r1, r3, #1
 80099b0:	6279      	str	r1, [r7, #36]	; 0x24
 80099b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]
 80099ba:	6a3b      	ldr	r3, [r7, #32]
 80099bc:	09db      	lsrs	r3, r3, #7
 80099be:	623b      	str	r3, [r7, #32]
 80099c0:	6a3b      	ldr	r3, [r7, #32]
 80099c2:	2b7f      	cmp	r3, #127	; 0x7f
 80099c4:	d8f0      	bhi.n	80099a8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80099c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c8:	1c5a      	adds	r2, r3, #1
 80099ca:	627a      	str	r2, [r7, #36]	; 0x24
 80099cc:	6a3a      	ldr	r2, [r7, #32]
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	61fb      	str	r3, [r7, #28]
 80099da:	2300      	movs	r3, #0
 80099dc:	61bb      	str	r3, [r7, #24]
 80099de:	e00b      	b.n	80099f8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	1c59      	adds	r1, r3, #1
 80099e8:	61f9      	str	r1, [r7, #28]
 80099ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	701a      	strb	r2, [r3, #0]
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	09db      	lsrs	r3, r3, #7
 80099f6:	61bb      	str	r3, [r7, #24]
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	2b7f      	cmp	r3, #127	; 0x7f
 80099fc:	d8f0      	bhi.n	80099e0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	1c5a      	adds	r2, r3, #1
 8009a02:	61fa      	str	r2, [r7, #28]
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	b2d2      	uxtb	r2, r2
 8009a08:	701a      	strb	r2, [r3, #0]
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8009a0e:	2215      	movs	r2, #21
 8009a10:	68f9      	ldr	r1, [r7, #12]
 8009a12:	6938      	ldr	r0, [r7, #16]
 8009a14:	f7ff fa0a 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	f383 8811 	msr	BASEPRI, r3
}
 8009a1e:	bf00      	nop
 8009a20:	3748      	adds	r7, #72	; 0x48
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	2001c288 	.word	0x2001c288
 8009a2c:	2001c258 	.word	0x2001c258

08009a30 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009a34:	4b07      	ldr	r3, [pc, #28]	; (8009a54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d008      	beq.n	8009a4e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009a3c:	4b05      	ldr	r3, [pc, #20]	; (8009a54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8009a46:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	4798      	blx	r3
  }
}
 8009a4e:	bf00      	nop
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	2001c258 	.word	0x2001c258

08009a58 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009a60:	f3ef 8311 	mrs	r3, BASEPRI
 8009a64:	f04f 0120 	mov.w	r1, #32
 8009a68:	f381 8811 	msr	BASEPRI, r1
 8009a6c:	617b      	str	r3, [r7, #20]
 8009a6e:	480b      	ldr	r0, [pc, #44]	; (8009a9c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009a70:	f7ff f8ec 	bl	8008c4c <_PreparePacket>
 8009a74:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009a76:	2280      	movs	r2, #128	; 0x80
 8009a78:	6879      	ldr	r1, [r7, #4]
 8009a7a:	6938      	ldr	r0, [r7, #16]
 8009a7c:	f7ff f896 	bl	8008bac <_EncodeStr>
 8009a80:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009a82:	220e      	movs	r2, #14
 8009a84:	68f9      	ldr	r1, [r7, #12]
 8009a86:	6938      	ldr	r0, [r7, #16]
 8009a88:	f7ff f9d0 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f383 8811 	msr	BASEPRI, r3
}
 8009a92:	bf00      	nop
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	2001c288 	.word	0x2001c288

08009aa0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009aa0:	b590      	push	{r4, r7, lr}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8009aa6:	4b15      	ldr	r3, [pc, #84]	; (8009afc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009aa8:	6a1b      	ldr	r3, [r3, #32]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d01a      	beq.n	8009ae4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8009aae:	4b13      	ldr	r3, [pc, #76]	; (8009afc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d015      	beq.n	8009ae4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009ab8:	4b10      	ldr	r3, [pc, #64]	; (8009afc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009aba:	6a1b      	ldr	r3, [r3, #32]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4798      	blx	r3
 8009ac0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009ac4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009aca:	f04f 0200 	mov.w	r2, #0
 8009ace:	f04f 0300 	mov.w	r3, #0
 8009ad2:	000a      	movs	r2, r1
 8009ad4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	461a      	mov	r2, r3
 8009ada:	4621      	mov	r1, r4
 8009adc:	200d      	movs	r0, #13
 8009ade:	f7ff fb39 	bl	8009154 <SEGGER_SYSVIEW_RecordU32x2>
 8009ae2:	e006      	b.n	8009af2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009ae4:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4619      	mov	r1, r3
 8009aea:	200c      	movs	r0, #12
 8009aec:	f7ff faf6 	bl	80090dc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8009af0:	bf00      	nop
 8009af2:	bf00      	nop
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd90      	pop	{r4, r7, pc}
 8009afa:	bf00      	nop
 8009afc:	2001c258 	.word	0x2001c258
 8009b00:	e0001004 	.word	0xe0001004

08009b04 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8009b0e:	f04f 0120 	mov.w	r1, #32
 8009b12:	f381 8811 	msr	BASEPRI, r1
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	4819      	ldr	r0, [pc, #100]	; (8009b80 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009b1a:	f7ff f897 	bl	8008c4c <_PreparePacket>
 8009b1e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009b24:	4b17      	ldr	r3, [pc, #92]	; (8009b84 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b2c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	617b      	str	r3, [r7, #20]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	613b      	str	r3, [r7, #16]
 8009b36:	e00b      	b.n	8009b50 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	1c59      	adds	r1, r3, #1
 8009b40:	6179      	str	r1, [r7, #20]
 8009b42:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	09db      	lsrs	r3, r3, #7
 8009b4e:	613b      	str	r3, [r7, #16]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b7f      	cmp	r3, #127	; 0x7f
 8009b54:	d8f0      	bhi.n	8009b38 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	617a      	str	r2, [r7, #20]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	b2d2      	uxtb	r2, r2
 8009b60:	701a      	strb	r2, [r3, #0]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8009b66:	2202      	movs	r2, #2
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	68b8      	ldr	r0, [r7, #8]
 8009b6c:	f7ff f95e 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f383 8811 	msr	BASEPRI, r3
}
 8009b76:	bf00      	nop
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	2001c288 	.word	0x2001c288
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009b8e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b92:	f04f 0120 	mov.w	r1, #32
 8009b96:	f381 8811 	msr	BASEPRI, r1
 8009b9a:	607b      	str	r3, [r7, #4]
 8009b9c:	4807      	ldr	r0, [pc, #28]	; (8009bbc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8009b9e:	f7ff f855 	bl	8008c4c <_PreparePacket>
 8009ba2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	6839      	ldr	r1, [r7, #0]
 8009ba8:	6838      	ldr	r0, [r7, #0]
 8009baa:	f7ff f93f 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f383 8811 	msr	BASEPRI, r3
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	2001c288 	.word	0x2001c288

08009bc0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009bc6:	f3ef 8311 	mrs	r3, BASEPRI
 8009bca:	f04f 0120 	mov.w	r1, #32
 8009bce:	f381 8811 	msr	BASEPRI, r1
 8009bd2:	607b      	str	r3, [r7, #4]
 8009bd4:	4807      	ldr	r0, [pc, #28]	; (8009bf4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8009bd6:	f7ff f839 	bl	8008c4c <_PreparePacket>
 8009bda:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009bdc:	2212      	movs	r2, #18
 8009bde:	6839      	ldr	r1, [r7, #0]
 8009be0:	6838      	ldr	r0, [r7, #0]
 8009be2:	f7ff f923 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f383 8811 	msr	BASEPRI, r3
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	2001c288 	.word	0x2001c288

08009bf8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009bfe:	f3ef 8311 	mrs	r3, BASEPRI
 8009c02:	f04f 0120 	mov.w	r1, #32
 8009c06:	f381 8811 	msr	BASEPRI, r1
 8009c0a:	607b      	str	r3, [r7, #4]
 8009c0c:	4807      	ldr	r0, [pc, #28]	; (8009c2c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8009c0e:	f7ff f81d 	bl	8008c4c <_PreparePacket>
 8009c12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8009c14:	2211      	movs	r2, #17
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6838      	ldr	r0, [r7, #0]
 8009c1a:	f7ff f907 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f383 8811 	msr	BASEPRI, r3
}
 8009c24:	bf00      	nop
 8009c26:	3708      	adds	r7, #8
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	2001c288 	.word	0x2001c288

08009c30 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b088      	sub	sp, #32
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009c38:	f3ef 8311 	mrs	r3, BASEPRI
 8009c3c:	f04f 0120 	mov.w	r1, #32
 8009c40:	f381 8811 	msr	BASEPRI, r1
 8009c44:	617b      	str	r3, [r7, #20]
 8009c46:	4819      	ldr	r0, [pc, #100]	; (8009cac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8009c48:	f7ff f800 	bl	8008c4c <_PreparePacket>
 8009c4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009c52:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	61fb      	str	r3, [r7, #28]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	61bb      	str	r3, [r7, #24]
 8009c64:	e00b      	b.n	8009c7e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	1c59      	adds	r1, r3, #1
 8009c6e:	61f9      	str	r1, [r7, #28]
 8009c70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009c74:	b2d2      	uxtb	r2, r2
 8009c76:	701a      	strb	r2, [r3, #0]
 8009c78:	69bb      	ldr	r3, [r7, #24]
 8009c7a:	09db      	lsrs	r3, r3, #7
 8009c7c:	61bb      	str	r3, [r7, #24]
 8009c7e:	69bb      	ldr	r3, [r7, #24]
 8009c80:	2b7f      	cmp	r3, #127	; 0x7f
 8009c82:	d8f0      	bhi.n	8009c66 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	61fa      	str	r2, [r7, #28]
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8009c94:	2208      	movs	r2, #8
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	6938      	ldr	r0, [r7, #16]
 8009c9a:	f7ff f8c7 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f383 8811 	msr	BASEPRI, r3
}
 8009ca4:	bf00      	nop
 8009ca6:	3720      	adds	r7, #32
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	2001c288 	.word	0x2001c288
 8009cb0:	2001c258 	.word	0x2001c258

08009cb4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009cbc:	f3ef 8311 	mrs	r3, BASEPRI
 8009cc0:	f04f 0120 	mov.w	r1, #32
 8009cc4:	f381 8811 	msr	BASEPRI, r1
 8009cc8:	617b      	str	r3, [r7, #20]
 8009cca:	4819      	ldr	r0, [pc, #100]	; (8009d30 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8009ccc:	f7fe ffbe 	bl	8008c4c <_PreparePacket>
 8009cd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009cd6:	4b17      	ldr	r3, [pc, #92]	; (8009d34 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8009cd8:	691b      	ldr	r3, [r3, #16]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	61fb      	str	r3, [r7, #28]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	61bb      	str	r3, [r7, #24]
 8009ce8:	e00b      	b.n	8009d02 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	b2da      	uxtb	r2, r3
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	1c59      	adds	r1, r3, #1
 8009cf2:	61f9      	str	r1, [r7, #28]
 8009cf4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009cf8:	b2d2      	uxtb	r2, r2
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	09db      	lsrs	r3, r3, #7
 8009d00:	61bb      	str	r3, [r7, #24]
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	2b7f      	cmp	r3, #127	; 0x7f
 8009d06:	d8f0      	bhi.n	8009cea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8009d08:	69fb      	ldr	r3, [r7, #28]
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	61fa      	str	r2, [r7, #28]
 8009d0e:	69ba      	ldr	r2, [r7, #24]
 8009d10:	b2d2      	uxtb	r2, r2
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8009d18:	2204      	movs	r2, #4
 8009d1a:	68f9      	ldr	r1, [r7, #12]
 8009d1c:	6938      	ldr	r0, [r7, #16]
 8009d1e:	f7ff f885 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	f383 8811 	msr	BASEPRI, r3
}
 8009d28:	bf00      	nop
 8009d2a:	3720      	adds	r7, #32
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	2001c288 	.word	0x2001c288
 8009d34:	2001c258 	.word	0x2001c258

08009d38 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009d40:	f3ef 8311 	mrs	r3, BASEPRI
 8009d44:	f04f 0120 	mov.w	r1, #32
 8009d48:	f381 8811 	msr	BASEPRI, r1
 8009d4c:	617b      	str	r3, [r7, #20]
 8009d4e:	4819      	ldr	r0, [pc, #100]	; (8009db4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8009d50:	f7fe ff7c 	bl	8008c4c <_PreparePacket>
 8009d54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009d5a:	4b17      	ldr	r3, [pc, #92]	; (8009db8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8009d5c:	691b      	ldr	r3, [r3, #16]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	61fb      	str	r3, [r7, #28]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	61bb      	str	r3, [r7, #24]
 8009d6c:	e00b      	b.n	8009d86 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	1c59      	adds	r1, r3, #1
 8009d76:	61f9      	str	r1, [r7, #28]
 8009d78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009d7c:	b2d2      	uxtb	r2, r2
 8009d7e:	701a      	strb	r2, [r3, #0]
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	09db      	lsrs	r3, r3, #7
 8009d84:	61bb      	str	r3, [r7, #24]
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b7f      	cmp	r3, #127	; 0x7f
 8009d8a:	d8f0      	bhi.n	8009d6e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	1c5a      	adds	r2, r3, #1
 8009d90:	61fa      	str	r2, [r7, #28]
 8009d92:	69ba      	ldr	r2, [r7, #24]
 8009d94:	b2d2      	uxtb	r2, r2
 8009d96:	701a      	strb	r2, [r3, #0]
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8009d9c:	2206      	movs	r2, #6
 8009d9e:	68f9      	ldr	r1, [r7, #12]
 8009da0:	6938      	ldr	r0, [r7, #16]
 8009da2:	f7ff f843 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f383 8811 	msr	BASEPRI, r3
}
 8009dac:	bf00      	nop
 8009dae:	3720      	adds	r7, #32
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	2001c288 	.word	0x2001c288
 8009db8:	2001c258 	.word	0x2001c258

08009dbc <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08a      	sub	sp, #40	; 0x28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8009dc6:	f3ef 8311 	mrs	r3, BASEPRI
 8009dca:	f04f 0120 	mov.w	r1, #32
 8009dce:	f381 8811 	msr	BASEPRI, r1
 8009dd2:	617b      	str	r3, [r7, #20]
 8009dd4:	4827      	ldr	r0, [pc, #156]	; (8009e74 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8009dd6:	f7fe ff39 	bl	8008c4c <_PreparePacket>
 8009dda:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8009de0:	4b25      	ldr	r3, [pc, #148]	; (8009e78 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	627b      	str	r3, [r7, #36]	; 0x24
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	623b      	str	r3, [r7, #32]
 8009df2:	e00b      	b.n	8009e0c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	1c59      	adds	r1, r3, #1
 8009dfc:	6279      	str	r1, [r7, #36]	; 0x24
 8009dfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	09db      	lsrs	r3, r3, #7
 8009e0a:	623b      	str	r3, [r7, #32]
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	2b7f      	cmp	r3, #127	; 0x7f
 8009e10:	d8f0      	bhi.n	8009df4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	1c5a      	adds	r2, r3, #1
 8009e16:	627a      	str	r2, [r7, #36]	; 0x24
 8009e18:	6a3a      	ldr	r2, [r7, #32]
 8009e1a:	b2d2      	uxtb	r2, r2
 8009e1c:	701a      	strb	r2, [r3, #0]
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	61fb      	str	r3, [r7, #28]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	61bb      	str	r3, [r7, #24]
 8009e2a:	e00b      	b.n	8009e44 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8009e2c:	69bb      	ldr	r3, [r7, #24]
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	1c59      	adds	r1, r3, #1
 8009e34:	61f9      	str	r1, [r7, #28]
 8009e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	701a      	strb	r2, [r3, #0]
 8009e3e:	69bb      	ldr	r3, [r7, #24]
 8009e40:	09db      	lsrs	r3, r3, #7
 8009e42:	61bb      	str	r3, [r7, #24]
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	2b7f      	cmp	r3, #127	; 0x7f
 8009e48:	d8f0      	bhi.n	8009e2c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	1c5a      	adds	r2, r3, #1
 8009e4e:	61fa      	str	r2, [r7, #28]
 8009e50:	69ba      	ldr	r2, [r7, #24]
 8009e52:	b2d2      	uxtb	r2, r2
 8009e54:	701a      	strb	r2, [r3, #0]
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8009e5a:	2207      	movs	r2, #7
 8009e5c:	68f9      	ldr	r1, [r7, #12]
 8009e5e:	6938      	ldr	r0, [r7, #16]
 8009e60:	f7fe ffe4 	bl	8008e2c <_SendPacket>
  RECORD_END();
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f383 8811 	msr	BASEPRI, r3
}
 8009e6a:	bf00      	nop
 8009e6c:	3728      	adds	r7, #40	; 0x28
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	2001c288 	.word	0x2001c288
 8009e78:	2001c258 	.word	0x2001c258

08009e7c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8009e84:	4b04      	ldr	r3, [pc, #16]	; (8009e98 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	1ad3      	subs	r3, r2, r3
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr
 8009e98:	2001c258 	.word	0x2001c258

08009e9c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08c      	sub	sp, #48	; 0x30
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8009ea6:	4b3b      	ldr	r3, [pc, #236]	; (8009f94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d06d      	beq.n	8009f8a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8009eae:	4b39      	ldr	r3, [pc, #228]	; (8009f94 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009eb8:	e008      	b.n	8009ecc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8009ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	3301      	adds	r3, #1
 8009eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ecc:	79fb      	ldrb	r3, [r7, #7]
 8009ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d3f2      	bcc.n	8009eba <SEGGER_SYSVIEW_SendModule+0x1e>
 8009ed4:	e000      	b.n	8009ed8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8009ed6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8009ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d055      	beq.n	8009f8a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009ede:	f3ef 8311 	mrs	r3, BASEPRI
 8009ee2:	f04f 0120 	mov.w	r1, #32
 8009ee6:	f381 8811 	msr	BASEPRI, r1
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	482a      	ldr	r0, [pc, #168]	; (8009f98 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8009eee:	f7fe fead 	bl	8008c4c <_PreparePacket>
 8009ef2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	627b      	str	r3, [r7, #36]	; 0x24
 8009efc:	79fb      	ldrb	r3, [r7, #7]
 8009efe:	623b      	str	r3, [r7, #32]
 8009f00:	e00b      	b.n	8009f1a <SEGGER_SYSVIEW_SendModule+0x7e>
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	1c59      	adds	r1, r3, #1
 8009f0a:	6279      	str	r1, [r7, #36]	; 0x24
 8009f0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	09db      	lsrs	r3, r3, #7
 8009f18:	623b      	str	r3, [r7, #32]
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8009f1e:	d8f0      	bhi.n	8009f02 <SEGGER_SYSVIEW_SendModule+0x66>
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	1c5a      	adds	r2, r3, #1
 8009f24:	627a      	str	r2, [r7, #36]	; 0x24
 8009f26:	6a3a      	ldr	r2, [r7, #32]
 8009f28:	b2d2      	uxtb	r2, r2
 8009f2a:	701a      	strb	r2, [r3, #0]
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	61fb      	str	r3, [r7, #28]
 8009f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	61bb      	str	r3, [r7, #24]
 8009f3a:	e00b      	b.n	8009f54 <SEGGER_SYSVIEW_SendModule+0xb8>
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	69fb      	ldr	r3, [r7, #28]
 8009f42:	1c59      	adds	r1, r3, #1
 8009f44:	61f9      	str	r1, [r7, #28]
 8009f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8009f4a:	b2d2      	uxtb	r2, r2
 8009f4c:	701a      	strb	r2, [r3, #0]
 8009f4e:	69bb      	ldr	r3, [r7, #24]
 8009f50:	09db      	lsrs	r3, r3, #7
 8009f52:	61bb      	str	r3, [r7, #24]
 8009f54:	69bb      	ldr	r3, [r7, #24]
 8009f56:	2b7f      	cmp	r3, #127	; 0x7f
 8009f58:	d8f0      	bhi.n	8009f3c <SEGGER_SYSVIEW_SendModule+0xa0>
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	1c5a      	adds	r2, r3, #1
 8009f5e:	61fa      	str	r2, [r7, #28]
 8009f60:	69ba      	ldr	r2, [r7, #24]
 8009f62:	b2d2      	uxtb	r2, r2
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2280      	movs	r2, #128	; 0x80
 8009f70:	4619      	mov	r1, r3
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f7fe fe1a 	bl	8008bac <_EncodeStr>
 8009f78:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8009f7a:	2216      	movs	r2, #22
 8009f7c:	68f9      	ldr	r1, [r7, #12]
 8009f7e:	6938      	ldr	r0, [r7, #16]
 8009f80:	f7fe ff54 	bl	8008e2c <_SendPacket>
      RECORD_END();
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8009f8a:	bf00      	nop
 8009f8c:	3730      	adds	r7, #48	; 0x30
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	2001c280 	.word	0x2001c280
 8009f98:	2001c288 	.word	0x2001c288

08009f9c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8009fa2:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00f      	beq.n	8009fca <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8009faa:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d1f2      	bne.n	8009fb0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	2001c280 	.word	0x2001c280

08009fd8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8009fde:	f3ef 8311 	mrs	r3, BASEPRI
 8009fe2:	f04f 0120 	mov.w	r1, #32
 8009fe6:	f381 8811 	msr	BASEPRI, r1
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	4817      	ldr	r0, [pc, #92]	; (800a04c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8009fee:	f7fe fe2d 	bl	8008c4c <_PreparePacket>
 8009ff2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	617b      	str	r3, [r7, #20]
 8009ffc:	4b14      	ldr	r3, [pc, #80]	; (800a050 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	e00b      	b.n	800a01c <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	b2da      	uxtb	r2, r3
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	1c59      	adds	r1, r3, #1
 800a00c:	6179      	str	r1, [r7, #20]
 800a00e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a012:	b2d2      	uxtb	r2, r2
 800a014:	701a      	strb	r2, [r3, #0]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	09db      	lsrs	r3, r3, #7
 800a01a:	613b      	str	r3, [r7, #16]
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	2b7f      	cmp	r3, #127	; 0x7f
 800a020:	d8f0      	bhi.n	800a004 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	1c5a      	adds	r2, r3, #1
 800a026:	617a      	str	r2, [r7, #20]
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	b2d2      	uxtb	r2, r2
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a032:	221b      	movs	r2, #27
 800a034:	6879      	ldr	r1, [r7, #4]
 800a036:	68b8      	ldr	r0, [r7, #8]
 800a038:	f7fe fef8 	bl	8008e2c <_SendPacket>
  RECORD_END();
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f383 8811 	msr	BASEPRI, r3
}
 800a042:	bf00      	nop
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	2001c288 	.word	0x2001c288
 800a050:	2001c284 	.word	0x2001c284

0800a054 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a054:	b580      	push	{r7, lr}
 800a056:	b08a      	sub	sp, #40	; 0x28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a05c:	f3ef 8311 	mrs	r3, BASEPRI
 800a060:	f04f 0120 	mov.w	r1, #32
 800a064:	f381 8811 	msr	BASEPRI, r1
 800a068:	617b      	str	r3, [r7, #20]
 800a06a:	4827      	ldr	r0, [pc, #156]	; (800a108 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a06c:	f7fe fdee 	bl	8008c4c <_PreparePacket>
 800a070:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a072:	2280      	movs	r2, #128	; 0x80
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	6938      	ldr	r0, [r7, #16]
 800a078:	f7fe fd98 	bl	8008bac <_EncodeStr>
 800a07c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	627b      	str	r3, [r7, #36]	; 0x24
 800a082:	2301      	movs	r3, #1
 800a084:	623b      	str	r3, [r7, #32]
 800a086:	e00b      	b.n	800a0a0 <SEGGER_SYSVIEW_Warn+0x4c>
 800a088:	6a3b      	ldr	r3, [r7, #32]
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	1c59      	adds	r1, r3, #1
 800a090:	6279      	str	r1, [r7, #36]	; 0x24
 800a092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a096:	b2d2      	uxtb	r2, r2
 800a098:	701a      	strb	r2, [r3, #0]
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	09db      	lsrs	r3, r3, #7
 800a09e:	623b      	str	r3, [r7, #32]
 800a0a0:	6a3b      	ldr	r3, [r7, #32]
 800a0a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a0a4:	d8f0      	bhi.n	800a088 <SEGGER_SYSVIEW_Warn+0x34>
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	627a      	str	r2, [r7, #36]	; 0x24
 800a0ac:	6a3a      	ldr	r2, [r7, #32]
 800a0ae:	b2d2      	uxtb	r2, r2
 800a0b0:	701a      	strb	r2, [r3, #0]
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	61fb      	str	r3, [r7, #28]
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61bb      	str	r3, [r7, #24]
 800a0be:	e00b      	b.n	800a0d8 <SEGGER_SYSVIEW_Warn+0x84>
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	b2da      	uxtb	r2, r3
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	1c59      	adds	r1, r3, #1
 800a0c8:	61f9      	str	r1, [r7, #28]
 800a0ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	701a      	strb	r2, [r3, #0]
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	09db      	lsrs	r3, r3, #7
 800a0d6:	61bb      	str	r3, [r7, #24]
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	2b7f      	cmp	r3, #127	; 0x7f
 800a0dc:	d8f0      	bhi.n	800a0c0 <SEGGER_SYSVIEW_Warn+0x6c>
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	61fa      	str	r2, [r7, #28]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	b2d2      	uxtb	r2, r2
 800a0e8:	701a      	strb	r2, [r3, #0]
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a0ee:	221a      	movs	r2, #26
 800a0f0:	68f9      	ldr	r1, [r7, #12]
 800a0f2:	6938      	ldr	r0, [r7, #16]
 800a0f4:	f7fe fe9a 	bl	8008e2c <_SendPacket>
  RECORD_END();
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	f383 8811 	msr	BASEPRI, r3
}
 800a0fe:	bf00      	nop
 800a100:	3728      	adds	r7, #40	; 0x28
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	2001c288 	.word	0x2001c288

0800a10c <__libc_init_array>:
 800a10c:	b570      	push	{r4, r5, r6, lr}
 800a10e:	4d0d      	ldr	r5, [pc, #52]	; (800a144 <__libc_init_array+0x38>)
 800a110:	4c0d      	ldr	r4, [pc, #52]	; (800a148 <__libc_init_array+0x3c>)
 800a112:	1b64      	subs	r4, r4, r5
 800a114:	10a4      	asrs	r4, r4, #2
 800a116:	2600      	movs	r6, #0
 800a118:	42a6      	cmp	r6, r4
 800a11a:	d109      	bne.n	800a130 <__libc_init_array+0x24>
 800a11c:	4d0b      	ldr	r5, [pc, #44]	; (800a14c <__libc_init_array+0x40>)
 800a11e:	4c0c      	ldr	r4, [pc, #48]	; (800a150 <__libc_init_array+0x44>)
 800a120:	f000 f83c 	bl	800a19c <_init>
 800a124:	1b64      	subs	r4, r4, r5
 800a126:	10a4      	asrs	r4, r4, #2
 800a128:	2600      	movs	r6, #0
 800a12a:	42a6      	cmp	r6, r4
 800a12c:	d105      	bne.n	800a13a <__libc_init_array+0x2e>
 800a12e:	bd70      	pop	{r4, r5, r6, pc}
 800a130:	f855 3b04 	ldr.w	r3, [r5], #4
 800a134:	4798      	blx	r3
 800a136:	3601      	adds	r6, #1
 800a138:	e7ee      	b.n	800a118 <__libc_init_array+0xc>
 800a13a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a13e:	4798      	blx	r3
 800a140:	3601      	adds	r6, #1
 800a142:	e7f2      	b.n	800a12a <__libc_init_array+0x1e>
 800a144:	0800a35c 	.word	0x0800a35c
 800a148:	0800a35c 	.word	0x0800a35c
 800a14c:	0800a35c 	.word	0x0800a35c
 800a150:	0800a360 	.word	0x0800a360

0800a154 <memcmp>:
 800a154:	b530      	push	{r4, r5, lr}
 800a156:	3901      	subs	r1, #1
 800a158:	2400      	movs	r4, #0
 800a15a:	42a2      	cmp	r2, r4
 800a15c:	d101      	bne.n	800a162 <memcmp+0xe>
 800a15e:	2000      	movs	r0, #0
 800a160:	e005      	b.n	800a16e <memcmp+0x1a>
 800a162:	5d03      	ldrb	r3, [r0, r4]
 800a164:	3401      	adds	r4, #1
 800a166:	5d0d      	ldrb	r5, [r1, r4]
 800a168:	42ab      	cmp	r3, r5
 800a16a:	d0f6      	beq.n	800a15a <memcmp+0x6>
 800a16c:	1b58      	subs	r0, r3, r5
 800a16e:	bd30      	pop	{r4, r5, pc}

0800a170 <memcpy>:
 800a170:	440a      	add	r2, r1
 800a172:	4291      	cmp	r1, r2
 800a174:	f100 33ff 	add.w	r3, r0, #4294967295
 800a178:	d100      	bne.n	800a17c <memcpy+0xc>
 800a17a:	4770      	bx	lr
 800a17c:	b510      	push	{r4, lr}
 800a17e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a182:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a186:	4291      	cmp	r1, r2
 800a188:	d1f9      	bne.n	800a17e <memcpy+0xe>
 800a18a:	bd10      	pop	{r4, pc}

0800a18c <memset>:
 800a18c:	4402      	add	r2, r0
 800a18e:	4603      	mov	r3, r0
 800a190:	4293      	cmp	r3, r2
 800a192:	d100      	bne.n	800a196 <memset+0xa>
 800a194:	4770      	bx	lr
 800a196:	f803 1b01 	strb.w	r1, [r3], #1
 800a19a:	e7f9      	b.n	800a190 <memset+0x4>

0800a19c <_init>:
 800a19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19e:	bf00      	nop
 800a1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1a2:	bc08      	pop	{r3}
 800a1a4:	469e      	mov	lr, r3
 800a1a6:	4770      	bx	lr

0800a1a8 <_fini>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	bf00      	nop
 800a1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ae:	bc08      	pop	{r3}
 800a1b0:	469e      	mov	lr, r3
 800a1b2:	4770      	bx	lr
