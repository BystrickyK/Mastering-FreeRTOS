
002LED_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007598  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007758  08007758  00017758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078e4  080078e4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080078e4  080078e4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080078e4  080078e4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078e4  080078e4  000178e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078e8  080078e8  000178e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080078ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c4a8  20000014  08007900  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c4bc  08007900  0002c4bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce9c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003709  00000000  00000000  0003cee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  000405f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  00041b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cdba  00000000  00000000  00042ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178ed  00000000  00000000  0006fc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112314  00000000  00000000  0008757f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00199893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005860  00000000  00000000  001998e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000014 	.word	0x20000014
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007740 	.word	0x08007740

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000018 	.word	0x20000018
 80001fc:	08007740 	.word	0x08007740

08000200 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000200:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000202:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000206:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000290 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800020a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800020e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000212:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000214:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000216:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000218:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800021a:	d332      	bcc.n	8000282 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800021c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800021e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000220:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000222:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000224:	d314      	bcc.n	8000250 <_CheckCase2>

08000226 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000226:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000228:	19d0      	adds	r0, r2, r7
 800022a:	bf00      	nop

0800022c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000230:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000234:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000236:	d005      	beq.n	8000244 <_CSDone>
        LDRB     R3,[R1], #+1
 8000238:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000240:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000242:	d1f3      	bne.n	800022c <_LoopCopyStraight>

08000244 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000244:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000248:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800024a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800024e:	4770      	bx	lr

08000250 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000250:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000252:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000254:	d319      	bcc.n	800028a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000256:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000258:	1b12      	subs	r2, r2, r4

0800025a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800025e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000262:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000266:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000268:	d005      	beq.n	8000276 <_No2ChunkNeeded>

0800026a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800026e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000272:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyAfterWrapAround>

08000276 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000276:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800027a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800027c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800027e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000280:	4770      	bx	lr

08000282 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000282:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000284:	3801      	subs	r0, #1
        CMP      R0,R2
 8000286:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000288:	d2cd      	bcs.n	8000226 <_Case4>

0800028a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800028a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800028e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000290:	2001c414 	.word	0x2001c414

08000294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029a:	f000 fb72 	bl	8000982 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800029e:	f000 f88d 	bl	80003bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a2:	f000 f8df 	bl	8000464 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 80002a6:	4b38      	ldr	r3, [pc, #224]	; (8000388 <main+0xf4>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a37      	ldr	r2, [pc, #220]	; (8000388 <main+0xf4>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80002b2:	f005 f927 	bl	8005504 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80002b6:	f006 fc1b 	bl	8006af0 <SEGGER_SYSVIEW_Start>
//  SEGGER_UART_Init(500000);

  status = xTaskCreate(handler_LED_green, "Task-Green", 200, NULL,
 80002ba:	4b34      	ldr	r3, [pc, #208]	; (800038c <main+0xf8>)
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2302      	movs	r3, #2
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2300      	movs	r3, #0
 80002c4:	22c8      	movs	r2, #200	; 0xc8
 80002c6:	4932      	ldr	r1, [pc, #200]	; (8000390 <main+0xfc>)
 80002c8:	4832      	ldr	r0, [pc, #200]	; (8000394 <main+0x100>)
 80002ca:	f002 fee9 	bl	80030a0 <xTaskCreate>
 80002ce:	6178      	str	r0, [r7, #20]
              2, &handle_LED_green);
  configASSERT(status == pdPASS);
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d00a      	beq.n	80002ec <main+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002da:	f383 8811 	msr	BASEPRI, r3
 80002de:	f3bf 8f6f 	isb	sy
 80002e2:	f3bf 8f4f 	dsb	sy
 80002e6:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002e8:	bf00      	nop
 80002ea:	e7fe      	b.n	80002ea <main+0x56>


  status = xTaskCreate(handler_LED_red, "Task-Red", 200, NULL,
 80002ec:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <main+0x104>)
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	2302      	movs	r3, #2
 80002f2:	9300      	str	r3, [sp, #0]
 80002f4:	2300      	movs	r3, #0
 80002f6:	22c8      	movs	r2, #200	; 0xc8
 80002f8:	4928      	ldr	r1, [pc, #160]	; (800039c <main+0x108>)
 80002fa:	4829      	ldr	r0, [pc, #164]	; (80003a0 <main+0x10c>)
 80002fc:	f002 fed0 	bl	80030a0 <xTaskCreate>
 8000300:	6178      	str	r0, [r7, #20]
              2, &handle_LED_red);
  configASSERT(status == pdPASS);
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	2b01      	cmp	r3, #1
 8000306:	d00a      	beq.n	800031e <main+0x8a>
        __asm volatile
 8000308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800030c:	f383 8811 	msr	BASEPRI, r3
 8000310:	f3bf 8f6f 	isb	sy
 8000314:	f3bf 8f4f 	dsb	sy
 8000318:	60fb      	str	r3, [r7, #12]
    }
 800031a:	bf00      	nop
 800031c:	e7fe      	b.n	800031c <main+0x88>


  status = xTaskCreate(handler_LED_blue, "Task-Blue", 200, NULL,
 800031e:	4b21      	ldr	r3, [pc, #132]	; (80003a4 <main+0x110>)
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2302      	movs	r3, #2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	2300      	movs	r3, #0
 8000328:	22c8      	movs	r2, #200	; 0xc8
 800032a:	491f      	ldr	r1, [pc, #124]	; (80003a8 <main+0x114>)
 800032c:	481f      	ldr	r0, [pc, #124]	; (80003ac <main+0x118>)
 800032e:	f002 feb7 	bl	80030a0 <xTaskCreate>
 8000332:	6178      	str	r0, [r7, #20]
              2, &handle_LED_blue);
  configASSERT(status == pdPASS);
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	2b01      	cmp	r3, #1
 8000338:	d00a      	beq.n	8000350 <main+0xbc>
        __asm volatile
 800033a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800033e:	f383 8811 	msr	BASEPRI, r3
 8000342:	f3bf 8f6f 	isb	sy
 8000346:	f3bf 8f4f 	dsb	sy
 800034a:	60bb      	str	r3, [r7, #8]
    }
 800034c:	bf00      	nop
 800034e:	e7fe      	b.n	800034e <main+0xba>


  status = xTaskCreate(handler_button, "Task-Button", 200, NULL,
 8000350:	4b17      	ldr	r3, [pc, #92]	; (80003b0 <main+0x11c>)
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	2303      	movs	r3, #3
 8000356:	9300      	str	r3, [sp, #0]
 8000358:	2300      	movs	r3, #0
 800035a:	22c8      	movs	r2, #200	; 0xc8
 800035c:	4915      	ldr	r1, [pc, #84]	; (80003b4 <main+0x120>)
 800035e:	4816      	ldr	r0, [pc, #88]	; (80003b8 <main+0x124>)
 8000360:	f002 fe9e 	bl	80030a0 <xTaskCreate>
 8000364:	6178      	str	r0, [r7, #20]
              3, &handle_button);
  configASSERT(status == pdPASS);
 8000366:	697b      	ldr	r3, [r7, #20]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d00a      	beq.n	8000382 <main+0xee>
        __asm volatile
 800036c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000370:	f383 8811 	msr	BASEPRI, r3
 8000374:	f3bf 8f6f 	isb	sy
 8000378:	f3bf 8f4f 	dsb	sy
 800037c:	607b      	str	r3, [r7, #4]
    }
 800037e:	bf00      	nop
 8000380:	e7fe      	b.n	8000380 <main+0xec>

  vTaskStartScheduler();
 8000382:	f003 f9f5 	bl	8003770 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000386:	e7fe      	b.n	8000386 <main+0xf2>
 8000388:	e0001000 	.word	0xe0001000
 800038c:	2001c37c 	.word	0x2001c37c
 8000390:	08007758 	.word	0x08007758
 8000394:	080005fd 	.word	0x080005fd
 8000398:	2001c380 	.word	0x2001c380
 800039c:	08007764 	.word	0x08007764
 80003a0:	08000529 	.word	0x08000529
 80003a4:	2001c378 	.word	0x2001c378
 80003a8:	08007770 	.word	0x08007770
 80003ac:	08000591 	.word	0x08000591
 80003b0:	2001c374 	.word	0x2001c374
 80003b4:	0800777c 	.word	0x0800777c
 80003b8:	08000669 	.word	0x08000669

080003bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b096      	sub	sp, #88	; 0x58
 80003c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	2244      	movs	r2, #68	; 0x44
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f007 f9b0 	bl	8007730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d0:	463b      	mov	r3, r7
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
 80003d6:	605a      	str	r2, [r3, #4]
 80003d8:	609a      	str	r2, [r3, #8]
 80003da:	60da      	str	r2, [r3, #12]
 80003dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80003de:	2000      	movs	r0, #0
 80003e0:	f000 fde6 	bl	8000fb0 <HAL_PWREx_ControlVoltageScaling>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x32>
  {
    Error_Handler();
 80003ea:	f000 f9ed 	bl	80007c8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003ee:	2310      	movs	r3, #16
 80003f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003f2:	2301      	movs	r3, #1
 80003f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003f6:	2300      	movs	r3, #0
 80003f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003fa:	2360      	movs	r3, #96	; 0x60
 80003fc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003fe:	2302      	movs	r3, #2
 8000400:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000402:	2301      	movs	r3, #1
 8000404:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000406:	2301      	movs	r3, #1
 8000408:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800040a:	233c      	movs	r3, #60	; 0x3c
 800040c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800040e:	2302      	movs	r3, #2
 8000410:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000412:	2302      	movs	r3, #2
 8000414:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000416:	2302      	movs	r3, #2
 8000418:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800041a:	f107 0314 	add.w	r3, r7, #20
 800041e:	4618      	mov	r0, r3
 8000420:	f000 fe6a 	bl	80010f8 <HAL_RCC_OscConfig>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800042a:	f000 f9cd 	bl	80007c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800042e:	230f      	movs	r3, #15
 8000430:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000432:	2303      	movs	r3, #3
 8000434:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800043a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800043e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000444:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000446:	463b      	mov	r3, r7
 8000448:	2105      	movs	r1, #5
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fa7a 	bl	8001944 <HAL_RCC_ClockConfig>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d001      	beq.n	800045a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000456:	f000 f9b7 	bl	80007c8 <Error_Handler>
  }
}
 800045a:	bf00      	nop
 800045c:	3758      	adds	r7, #88	; 0x58
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 030c 	add.w	r3, r7, #12
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
 8000478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800047a:	4b28      	ldr	r3, [pc, #160]	; (800051c <MX_GPIO_Init+0xb8>)
 800047c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047e:	4a27      	ldr	r2, [pc, #156]	; (800051c <MX_GPIO_Init+0xb8>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000486:	4b25      	ldr	r3, [pc, #148]	; (800051c <MX_GPIO_Init+0xb8>)
 8000488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800048a:	f003 0304 	and.w	r3, r3, #4
 800048e:	60bb      	str	r3, [r7, #8]
 8000490:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <MX_GPIO_Init+0xb8>)
 8000494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000496:	4a21      	ldr	r2, [pc, #132]	; (800051c <MX_GPIO_Init+0xb8>)
 8000498:	f043 0302 	orr.w	r3, r3, #2
 800049c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <MX_GPIO_Init+0xb8>)
 80004a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004a2:	f003 0302 	and.w	r3, r3, #2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80004b0:	481b      	ldr	r0, [pc, #108]	; (8000520 <MX_GPIO_Init+0xbc>)
 80004b2:	f000 fd2b 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	481a      	ldr	r0, [pc, #104]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004bc:	f000 fd26 	bl	8000f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c6:	2300      	movs	r3, #0
 80004c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	4813      	ldr	r0, [pc, #76]	; (8000524 <MX_GPIO_Init+0xc0>)
 80004d6:	f000 fb6f 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 80004da:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80004de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e8:	2300      	movs	r3, #0
 80004ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4619      	mov	r1, r3
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <MX_GPIO_Init+0xbc>)
 80004f4:	f000 fb60 	bl	8000bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	2301      	movs	r3, #1
 80004fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	4619      	mov	r1, r3
 800050e:	4805      	ldr	r0, [pc, #20]	; (8000524 <MX_GPIO_Init+0xc0>)
 8000510:	f000 fb52 	bl	8000bb8 <HAL_GPIO_Init>

}
 8000514:	bf00      	nop
 8000516:	3720      	adds	r7, #32
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021000 	.word	0x40021000
 8000520:	48000400 	.word	0x48000400
 8000524:	48000800 	.word	0x48000800

08000528 <handler_LED_red>:

/* USER CODE BEGIN 4 */
static void handler_LED_red(void* parameters)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af02      	add	r7, sp, #8
 800052e:	6078      	str	r0, [r7, #4]
	const TickType_t xPeriod = pdMS_TO_TICKS(250);
 8000530:	233e      	movs	r3, #62	; 0x3e
 8000532:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8000534:	f003 fa2c 	bl	8003990 <xTaskGetTickCount>
 8000538:	4603      	mov	r3, r0
 800053a:	60bb      	str	r3, [r7, #8]

  while(1)
  {
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	68f9      	ldr	r1, [r7, #12]
 8000542:	4618      	mov	r0, r3
 8000544:	f002 ff10 	bl	8003368 <xTaskDelayUntil>
//    SEGGER_SYSVIEW_PrintfTarget("Toggling RED");
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8000548:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800054c:	480e      	ldr	r0, [pc, #56]	; (8000588 <handler_LED_red+0x60>)
 800054e:	f000 fcf5 	bl	8000f3c <HAL_GPIO_TogglePin>
		if (xTaskNotifyWait(0, 0, NULL, 0))
 8000552:	2300      	movs	r3, #0
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	2300      	movs	r3, #0
 8000558:	2200      	movs	r2, #0
 800055a:	2100      	movs	r1, #0
 800055c:	2000      	movs	r0, #0
 800055e:	f003 fdef 	bl	8004140 <xTaskGenericNotifyWait>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0e9      	beq.n	800053c <handler_LED_red+0x14>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000568:	2201      	movs	r2, #1
 800056a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <handler_LED_red+0x60>)
 8000570:	f000 fccc 	bl	8000f0c <HAL_GPIO_WritePin>
			xTaskNotify(handle_button, 0, eNoAction);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <handler_LED_red+0x64>)
 8000576:	6818      	ldr	r0, [r3, #0]
 8000578:	2300      	movs	r3, #0
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	f003 fe65 	bl	8004250 <xTaskGenericNotify>
	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000586:	e7d9      	b.n	800053c <handler_LED_red+0x14>
 8000588:	48000400 	.word	0x48000400
 800058c:	2001c374 	.word	0x2001c374

08000590 <handler_LED_blue>:
		}
  }
}

static void handler_LED_blue(void* parameters)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	6078      	str	r0, [r7, #4]
  const TickType_t xPeriod = pdMS_TO_TICKS(250);
 8000598:	233e      	movs	r3, #62	; 0x3e
 800059a:	60fb      	str	r3, [r7, #12]
  vTaskDelay(pdMS_TO_TICKS(50));
 800059c:	200c      	movs	r0, #12
 800059e:	f002 ff65 	bl	800346c <vTaskDelay>
  TickType_t xLastWakeTime = xTaskGetTickCount();
 80005a2:	f003 f9f5 	bl	8003990 <xTaskGetTickCount>
 80005a6:	4603      	mov	r3, r0
 80005a8:	60bb      	str	r3, [r7, #8]

  while(1)
  {
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	68f9      	ldr	r1, [r7, #12]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f002 fed9 	bl	8003368 <xTaskDelayUntil>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005b6:	2180      	movs	r1, #128	; 0x80
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <handler_LED_blue+0x64>)
 80005ba:	f000 fcbf 	bl	8000f3c <HAL_GPIO_TogglePin>
		if (xTaskNotifyWait(0, 0, NULL, 0))
 80005be:	2300      	movs	r3, #0
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2300      	movs	r3, #0
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2000      	movs	r0, #0
 80005ca:	f003 fdb9 	bl	8004140 <xTaskGenericNotifyWait>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0ea      	beq.n	80005aa <handler_LED_blue+0x1a>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	4806      	ldr	r0, [pc, #24]	; (80005f4 <handler_LED_blue+0x64>)
 80005da:	f000 fc97 	bl	8000f0c <HAL_GPIO_WritePin>
			xTaskNotify(handle_button, 0, eNoAction);
 80005de:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <handler_LED_blue+0x68>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	f003 fe30 	bl	8004250 <xTaskGenericNotify>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80005f0:	e7db      	b.n	80005aa <handler_LED_blue+0x1a>
 80005f2:	bf00      	nop
 80005f4:	48000400 	.word	0x48000400
 80005f8:	2001c374 	.word	0x2001c374

080005fc <handler_LED_green>:
  }
}


static void handler_LED_green(void* parameters)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b086      	sub	sp, #24
 8000600:	af02      	add	r7, sp, #8
 8000602:	6078      	str	r0, [r7, #4]
  const TickType_t xPeriod = pdMS_TO_TICKS(250);
 8000604:	233e      	movs	r3, #62	; 0x3e
 8000606:	60fb      	str	r3, [r7, #12]
  vTaskDelay(pdMS_TO_TICKS(100));
 8000608:	2019      	movs	r0, #25
 800060a:	f002 ff2f 	bl	800346c <vTaskDelay>
  TickType_t xLastWakeTime = xTaskGetTickCount();
 800060e:	f003 f9bf 	bl	8003990 <xTaskGetTickCount>
 8000612:	4603      	mov	r3, r0
 8000614:	60bb      	str	r3, [r7, #8]

  while(1)
  {
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	68f9      	ldr	r1, [r7, #12]
 800061c:	4618      	mov	r0, r3
 800061e:	f002 fea3 	bl	8003368 <xTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <handler_LED_green+0x64>)
 8000626:	f000 fc89 	bl	8000f3c <HAL_GPIO_TogglePin>
		if (xTaskNotifyWait(0, 0, NULL, 0))
 800062a:	2300      	movs	r3, #0
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2000      	movs	r0, #0
 8000636:	f003 fd83 	bl	8004140 <xTaskGenericNotifyWait>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0ea      	beq.n	8000616 <handler_LED_green+0x1a>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2180      	movs	r1, #128	; 0x80
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <handler_LED_green+0x64>)
 8000646:	f000 fc61 	bl	8000f0c <HAL_GPIO_WritePin>
			xTaskNotify(handle_button, 0, eNoAction);
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <handler_LED_green+0x68>)
 800064c:	6818      	ldr	r0, [r3, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2300      	movs	r3, #0
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	f003 fdfa 	bl	8004250 <xTaskGenericNotify>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800065c:	e7db      	b.n	8000616 <handler_LED_green+0x1a>
 800065e:	bf00      	nop
 8000660:	48000800 	.word	0x48000800
 8000664:	2001c374 	.word	0x2001c374

08000668 <handler_button>:
		}
  }
}

static void handler_button(void* parameters)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	GPIO_PinState button_state = GPIO_PIN_RESET; //off
 8000670:	2300      	movs	r3, #0
 8000672:	75fb      	strb	r3, [r7, #23]
	GPIO_PinState button_state_prev = GPIO_PIN_RESET;
 8000674:	2300      	movs	r3, #0
 8000676:	757b      	strb	r3, [r7, #21]

	const TickType_t xPeriod = pdMS_TO_TICKS(25);
 8000678:	2306      	movs	r3, #6
 800067a:	613b      	str	r3, [r7, #16]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800067c:	f003 f988 	bl	8003990 <xTaskGetTickCount>
 8000680:	4603      	mov	r3, r0
 8000682:	60fb      	str	r3, [r7, #12]

	uint8_t state = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	75bb      	strb	r3, [r7, #22]

	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	6939      	ldr	r1, [r7, #16]
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fe6a 	bl	8003368 <xTaskDelayUntil>

		button_state_prev = button_state;
 8000694:	7dfb      	ldrb	r3, [r7, #23]
 8000696:	757b      	strb	r3, [r7, #21]
		button_state = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800069c:	482c      	ldr	r0, [pc, #176]	; (8000750 <handler_button+0xe8>)
 800069e:	f000 fc1d 	bl	8000edc <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	75fb      	strb	r3, [r7, #23]

		if (button_state==GPIO_PIN_SET && button_state_prev==GPIO_PIN_RESET)
 80006a6:	7dfb      	ldrb	r3, [r7, #23]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d149      	bne.n	8000740 <handler_button+0xd8>
 80006ac:	7d7b      	ldrb	r3, [r7, #21]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d146      	bne.n	8000740 <handler_button+0xd8>
		{
			SEGGER_SYSVIEW_PrintfTarget("Button pressed");
 80006b2:	4828      	ldr	r0, [pc, #160]	; (8000754 <handler_button+0xec>)
 80006b4:	f006 ff8c 	bl	80075d0 <SEGGER_SYSVIEW_PrintfTarget>

			switch(state)
 80006b8:	7dbb      	ldrb	r3, [r7, #22]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	d8e4      	bhi.n	8000688 <handler_button+0x20>
 80006be:	a201      	add	r2, pc, #4	; (adr r2, 80006c4 <handler_button+0x5c>)
 80006c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c4:	080006d5 	.word	0x080006d5
 80006c8:	080006ed 	.word	0x080006ed
 80006cc:	08000705 	.word	0x08000705
 80006d0:	0800071d 	.word	0x0800071d
			{
				case 0:
					if(NotifyAndSuspend(handle_LED_red))
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <handler_button+0xf0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f843 	bl	8000764 <NotifyAndSuspend>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d02f      	beq.n	8000744 <handler_button+0xdc>
						++state;
 80006e4:	7dbb      	ldrb	r3, [r7, #22]
 80006e6:	3301      	adds	r3, #1
 80006e8:	75bb      	strb	r3, [r7, #22]
					break;
 80006ea:	e02b      	b.n	8000744 <handler_button+0xdc>
				case 1:
					if(NotifyAndSuspend(handle_LED_blue))
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <handler_button+0xf4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 f837 	bl	8000764 <NotifyAndSuspend>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d025      	beq.n	8000748 <handler_button+0xe0>
						++state;
 80006fc:	7dbb      	ldrb	r3, [r7, #22]
 80006fe:	3301      	adds	r3, #1
 8000700:	75bb      	strb	r3, [r7, #22]
					break;
 8000702:	e021      	b.n	8000748 <handler_button+0xe0>
				case 2:
					if(NotifyAndSuspend(handle_LED_green))
 8000704:	4b16      	ldr	r3, [pc, #88]	; (8000760 <handler_button+0xf8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f82b 	bl	8000764 <NotifyAndSuspend>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d01b      	beq.n	800074c <handler_button+0xe4>
						++state;
 8000714:	7dbb      	ldrb	r3, [r7, #22]
 8000716:	3301      	adds	r3, #1
 8000718:	75bb      	strb	r3, [r7, #22]
					break;
 800071a:	e017      	b.n	800074c <handler_button+0xe4>
				case 3:
					vTaskResume(handle_LED_red);
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <handler_button+0xf0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f002 ffbb 	bl	800369c <vTaskResume>
					vTaskResume(handle_LED_blue);
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <handler_button+0xf4>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f002 ffb6 	bl	800369c <vTaskResume>
					vTaskResume(handle_LED_green);
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <handler_button+0xf8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f002 ffb1 	bl	800369c <vTaskResume>
					state = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	75bb      	strb	r3, [r7, #22]
					break;
 800073e:	e006      	b.n	800074e <handler_button+0xe6>
			}
		}
 8000740:	bf00      	nop
 8000742:	e7a1      	b.n	8000688 <handler_button+0x20>
					break;
 8000744:	bf00      	nop
 8000746:	e79f      	b.n	8000688 <handler_button+0x20>
					break;
 8000748:	bf00      	nop
 800074a:	e79d      	b.n	8000688 <handler_button+0x20>
					break;
 800074c:	bf00      	nop
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800074e:	e79b      	b.n	8000688 <handler_button+0x20>
 8000750:	48000800 	.word	0x48000800
 8000754:	08007788 	.word	0x08007788
 8000758:	2001c380 	.word	0x2001c380
 800075c:	2001c378 	.word	0x2001c378
 8000760:	2001c37c 	.word	0x2001c37c

08000764 <NotifyAndSuspend>:
	}
}

BaseType_t NotifyAndSuspend(TaskHandle_t handle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
	BaseType_t status;
	xTaskNotify(handle, 0, eNoAction);
 800076c:	2300      	movs	r3, #0
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2300      	movs	r3, #0
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	6878      	ldr	r0, [r7, #4]
 8000778:	f003 fd6a 	bl	8004250 <xTaskGenericNotify>
	status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 800077c:	23fa      	movs	r3, #250	; 0xfa
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2300      	movs	r3, #0
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2000      	movs	r0, #0
 8000788:	f003 fcda 	bl	8004140 <xTaskGenericNotifyWait>
 800078c:	60f8      	str	r0, [r7, #12]
	if (status)
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <NotifyAndSuspend+0x36>
		vTaskSuspend(handle);
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f002 fea1 	bl	80034dc <vTaskSuspend>
	return status;
 800079a:	68fb      	ldr	r3, [r7, #12]
}
 800079c:	4618      	mov	r0, r3
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d101      	bne.n	80007ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b6:	f000 f8fd 	bl	80009b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40001000 	.word	0x40001000

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <Error_Handler+0x8>
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <HAL_MspInit+0x44>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6613      	str	r3, [r2, #96]	; 0x60
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_MspInit+0x44>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_MspInit+0x44>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6593      	str	r3, [r2, #88]	; 0x58
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_MspInit+0x44>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800080a:	f004 facd 	bl	8004da8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000

0800081c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2036      	movs	r0, #54	; 0x36
 8000832:	f000 f997 	bl	8000b64 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000836:	2036      	movs	r0, #54	; 0x36
 8000838:	f000 f9b0 	bl	8000b9c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <HAL_InitTick+0xa0>)
 800083e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000840:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <HAL_InitTick+0xa0>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6593      	str	r3, [r2, #88]	; 0x58
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_InitTick+0xa0>)
 800084a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084c:	f003 0310 	and.w	r3, r3, #16
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000854:	f107 0210 	add.w	r2, r7, #16
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fa4a 	bl	8001cf8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000864:	f001 fa32 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 8000868:	4603      	mov	r3, r0
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <HAL_InitTick+0xa4>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	0c9b      	lsrs	r3, r3, #18
 8000878:	3b01      	subs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_InitTick+0xa8>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <HAL_InitTick+0xac>)
 8000880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_InitTick+0xa8>)
 8000884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000888:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_InitTick+0xa8>)
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_InitTick+0xa8>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_InitTick+0xa8>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <HAL_InitTick+0xa8>)
 800089e:	f001 fb1f 	bl	8001ee0 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <HAL_InitTick+0xa8>)
 80008aa:	f001 fb7b 	bl	8001fa4 <HAL_TIM_Base_Start_IT>
 80008ae:	4603      	mov	r3, r0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3730      	adds	r7, #48	; 0x30
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40021000 	.word	0x40021000
 80008c0:	431bde83 	.word	0x431bde83
 80008c4:	2001c384 	.word	0x2001c384
 80008c8:	40001000 	.word	0x40001000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <TIM6_DAC_IRQHandler+0x10>)
 80008fe:	f001 fbc1 	bl	8002084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	2001c384 	.word	0x2001c384

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	; (800096c <LoopForever+0x6>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	; (8000970 <LoopForever+0xa>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	; (8000974 <LoopForever+0xe>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	; (800097c <LoopForever+0x16>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800095e:	f006 fea7 	bl	80076b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000962:	f7ff fc97 	bl	8000294 <main>

08000966 <LoopForever>:

LoopForever:
    b LoopForever
 8000966:	e7fe      	b.n	8000966 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000968:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000974:	080078ec 	.word	0x080078ec
  ldr r2, =_sbss
 8000978:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800097c:	2001c4bc 	.word	0x2001c4bc

08000980 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC1_IRQHandler>

08000982 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000988:	2300      	movs	r3, #0
 800098a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f8de 	bl	8000b4e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000992:	200f      	movs	r0, #15
 8000994:	f7ff ff42 	bl	800081c <HAL_InitTick>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	71fb      	strb	r3, [r7, #7]
 80009a2:	e001      	b.n	80009a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009a4:	f7ff ff16 	bl	80007d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	2001c3d0 	.word	0x2001c3d0

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	2001c3d0 	.word	0x2001c3d0

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	db0b      	blt.n	8000a82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 021f 	and.w	r2, r3, #31
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <__NVIC_EnableIRQ+0x38>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	095b      	lsrs	r3, r3, #5
 8000a78:	2001      	movs	r0, #1
 8000a7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100

08000a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db0a      	blt.n	8000abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	490c      	ldr	r1, [pc, #48]	; (8000ae0 <__NVIC_SetPriority+0x4c>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	0112      	lsls	r2, r2, #4
 8000ab4:	b2d2      	uxtb	r2, r2
 8000ab6:	440b      	add	r3, r1
 8000ab8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000abc:	e00a      	b.n	8000ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4908      	ldr	r1, [pc, #32]	; (8000ae4 <__NVIC_SetPriority+0x50>)
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	3b04      	subs	r3, #4
 8000acc:	0112      	lsls	r2, r2, #4
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	440b      	add	r3, r1
 8000ad2:	761a      	strb	r2, [r3, #24]
}
 8000ad4:	bf00      	nop
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000e100 	.word	0xe000e100
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b089      	sub	sp, #36	; 0x24
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f003 0307 	and.w	r3, r3, #7
 8000afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000afc:	69fb      	ldr	r3, [r7, #28]
 8000afe:	f1c3 0307 	rsb	r3, r3, #7
 8000b02:	2b04      	cmp	r3, #4
 8000b04:	bf28      	it	cs
 8000b06:	2304      	movcs	r3, #4
 8000b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	2b06      	cmp	r3, #6
 8000b10:	d902      	bls.n	8000b18 <NVIC_EncodePriority+0x30>
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	3b03      	subs	r3, #3
 8000b16:	e000      	b.n	8000b1a <NVIC_EncodePriority+0x32>
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43da      	mvns	r2, r3
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b30:	f04f 31ff 	mov.w	r1, #4294967295
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	43d9      	mvns	r1, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	4313      	orrs	r3, r2
         );
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3724      	adds	r7, #36	; 0x24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff4c 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b76:	f7ff ff61 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	68b9      	ldr	r1, [r7, #8]
 8000b80:	6978      	ldr	r0, [r7, #20]
 8000b82:	f7ff ffb1 	bl	8000ae8 <NVIC_EncodePriority>
 8000b86:	4602      	mov	r2, r0
 8000b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8c:	4611      	mov	r1, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff80 	bl	8000a94 <__NVIC_SetPriority>
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff54 	bl	8000a58 <__NVIC_EnableIRQ>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bc6:	e166      	b.n	8000e96 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f000 8158 	beq.w	8000e90 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f003 0303 	and.w	r3, r3, #3
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d005      	beq.n	8000bf8 <HAL_GPIO_Init+0x40>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b02      	cmp	r3, #2
 8000bf6:	d130      	bne.n	8000c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	2203      	movs	r2, #3
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	091b      	lsrs	r3, r3, #4
 8000c44:	f003 0201 	and.w	r2, r3, #1
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d017      	beq.n	8000c96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d123      	bne.n	8000cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	3208      	adds	r2, #8
 8000caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	220f      	movs	r2, #15
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	08da      	lsrs	r2, r3, #3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3208      	adds	r2, #8
 8000ce4:	6939      	ldr	r1, [r7, #16]
 8000ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0203 	and.w	r2, r3, #3
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	693a      	ldr	r2, [r7, #16]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 80b2 	beq.w	8000e90 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2c:	4b61      	ldr	r3, [pc, #388]	; (8000eb4 <HAL_GPIO_Init+0x2fc>)
 8000d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d30:	4a60      	ldr	r2, [pc, #384]	; (8000eb4 <HAL_GPIO_Init+0x2fc>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6613      	str	r3, [r2, #96]	; 0x60
 8000d38:	4b5e      	ldr	r3, [pc, #376]	; (8000eb4 <HAL_GPIO_Init+0x2fc>)
 8000d3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d44:	4a5c      	ldr	r2, [pc, #368]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	220f      	movs	r2, #15
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d6e:	d02b      	beq.n	8000dc8 <HAL_GPIO_Init+0x210>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a52      	ldr	r2, [pc, #328]	; (8000ebc <HAL_GPIO_Init+0x304>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d025      	beq.n	8000dc4 <HAL_GPIO_Init+0x20c>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a51      	ldr	r2, [pc, #324]	; (8000ec0 <HAL_GPIO_Init+0x308>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d01f      	beq.n	8000dc0 <HAL_GPIO_Init+0x208>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a50      	ldr	r2, [pc, #320]	; (8000ec4 <HAL_GPIO_Init+0x30c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d019      	beq.n	8000dbc <HAL_GPIO_Init+0x204>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a4f      	ldr	r2, [pc, #316]	; (8000ec8 <HAL_GPIO_Init+0x310>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d013      	beq.n	8000db8 <HAL_GPIO_Init+0x200>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a4e      	ldr	r2, [pc, #312]	; (8000ecc <HAL_GPIO_Init+0x314>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d00d      	beq.n	8000db4 <HAL_GPIO_Init+0x1fc>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a4d      	ldr	r2, [pc, #308]	; (8000ed0 <HAL_GPIO_Init+0x318>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d007      	beq.n	8000db0 <HAL_GPIO_Init+0x1f8>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a4c      	ldr	r2, [pc, #304]	; (8000ed4 <HAL_GPIO_Init+0x31c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d101      	bne.n	8000dac <HAL_GPIO_Init+0x1f4>
 8000da8:	2307      	movs	r3, #7
 8000daa:	e00e      	b.n	8000dca <HAL_GPIO_Init+0x212>
 8000dac:	2308      	movs	r3, #8
 8000dae:	e00c      	b.n	8000dca <HAL_GPIO_Init+0x212>
 8000db0:	2306      	movs	r3, #6
 8000db2:	e00a      	b.n	8000dca <HAL_GPIO_Init+0x212>
 8000db4:	2305      	movs	r3, #5
 8000db6:	e008      	b.n	8000dca <HAL_GPIO_Init+0x212>
 8000db8:	2304      	movs	r3, #4
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x212>
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	e004      	b.n	8000dca <HAL_GPIO_Init+0x212>
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	e002      	b.n	8000dca <HAL_GPIO_Init+0x212>
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e000      	b.n	8000dca <HAL_GPIO_Init+0x212>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	f002 0203 	and.w	r2, r2, #3
 8000dd0:	0092      	lsls	r2, r2, #2
 8000dd2:	4093      	lsls	r3, r2
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dda:	4937      	ldr	r1, [pc, #220]	; (8000eb8 <HAL_GPIO_Init+0x300>)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	3302      	adds	r3, #2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000de8:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d003      	beq.n	8000e0c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e0c:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e12:	4b31      	ldr	r3, [pc, #196]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d003      	beq.n	8000e36 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e36:	4a28      	ldr	r2, [pc, #160]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e3c:	4b26      	ldr	r3, [pc, #152]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	43db      	mvns	r3, r3
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e60:	4a1d      	ldr	r2, [pc, #116]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e8a:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <HAL_GPIO_Init+0x320>)
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3301      	adds	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f47f ae91 	bne.w	8000bc8 <HAL_GPIO_Init+0x10>
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	371c      	adds	r7, #28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	48000800 	.word	0x48000800
 8000ec4:	48000c00 	.word	0x48000c00
 8000ec8:	48001000 	.word	0x48001000
 8000ecc:	48001400 	.word	0x48001400
 8000ed0:	48001800 	.word	0x48001800
 8000ed4:	48001c00 	.word	0x48001c00
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	887b      	ldrh	r3, [r7, #2]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d002      	beq.n	8000efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e001      	b.n	8000efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f1c:	787b      	ldrb	r3, [r7, #1]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f22:	887a      	ldrh	r2, [r7, #2]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f28:	e002      	b.n	8000f30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f4e:	887a      	ldrh	r2, [r7, #2]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4013      	ands	r3, r2
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	43d9      	mvns	r1, r3
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	400b      	ands	r3, r1
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f80:	d102      	bne.n	8000f88 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f86:	e00b      	b.n	8000fa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_PWREx_GetVoltageRange+0x3c>)
 8000f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f96:	d102      	bne.n	8000f9e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000f98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f9c:	e000      	b.n	8000fa0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000f9e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40007000 	.word	0x40007000

08000fb0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d141      	bne.n	8001042 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fbe:	4b4b      	ldr	r3, [pc, #300]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d131      	bne.n	8001030 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fcc:	4b47      	ldr	r3, [pc, #284]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fd2:	4a46      	ldr	r2, [pc, #280]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fe4:	4a41      	ldr	r2, [pc, #260]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fec:	4b40      	ldr	r3, [pc, #256]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2232      	movs	r2, #50	; 0x32
 8000ff2:	fb02 f303 	mul.w	r3, r2, r3
 8000ff6:	4a3f      	ldr	r2, [pc, #252]	; (80010f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8000ffc:	0c9b      	lsrs	r3, r3, #18
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001002:	e002      	b.n	800100a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3b01      	subs	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800100a:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001016:	d102      	bne.n	800101e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f2      	bne.n	8001004 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800101e:	4b33      	ldr	r3, [pc, #204]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001026:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102a:	d158      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800102c:	2303      	movs	r3, #3
 800102e:	e057      	b.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001032:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001036:	4a2d      	ldr	r2, [pc, #180]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800103c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001040:	e04d      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001048:	d141      	bne.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001056:	d131      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105e:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	4b20      	ldr	r3, [pc, #128]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001070:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001078:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2232      	movs	r2, #50	; 0x32
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	4a1c      	ldr	r2, [pc, #112]	; (80010f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	0c9b      	lsrs	r3, r3, #18
 800108a:	3301      	adds	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800108e:	e002      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3b01      	subs	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001096:	4b15      	ldr	r3, [pc, #84]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a2:	d102      	bne.n	80010aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f2      	bne.n	8001090 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b6:	d112      	bne.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e011      	b.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010cc:	e007      	b.n	80010de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80010ce:	4b07      	ldr	r3, [pc, #28]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010dc:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40007000 	.word	0x40007000
 80010f0:	20000000 	.word	0x20000000
 80010f4:	431bde83 	.word	0x431bde83

080010f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d102      	bne.n	800110c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	f000 bc16 	b.w	8001938 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110c:	4ba0      	ldr	r3, [pc, #640]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001116:	4b9e      	ldr	r3, [pc, #632]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0310 	and.w	r3, r3, #16
 8001128:	2b00      	cmp	r3, #0
 800112a:	f000 80e4 	beq.w	80012f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d007      	beq.n	8001144 <HAL_RCC_OscConfig+0x4c>
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	2b0c      	cmp	r3, #12
 8001138:	f040 808b 	bne.w	8001252 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b01      	cmp	r3, #1
 8001140:	f040 8087 	bne.w	8001252 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001144:	4b92      	ldr	r3, [pc, #584]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b00      	cmp	r3, #0
 800114e:	d005      	beq.n	800115c <HAL_RCC_OscConfig+0x64>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e3ed      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1a      	ldr	r2, [r3, #32]
 8001160:	4b8b      	ldr	r3, [pc, #556]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0308 	and.w	r3, r3, #8
 8001168:	2b00      	cmp	r3, #0
 800116a:	d004      	beq.n	8001176 <HAL_RCC_OscConfig+0x7e>
 800116c:	4b88      	ldr	r3, [pc, #544]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001174:	e005      	b.n	8001182 <HAL_RCC_OscConfig+0x8a>
 8001176:	4b86      	ldr	r3, [pc, #536]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800117c:	091b      	lsrs	r3, r3, #4
 800117e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001182:	4293      	cmp	r3, r2
 8001184:	d223      	bcs.n	80011ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 fde6 	bl	8001d5c <RCC_SetFlashLatencyFromMSIRange>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e3ce      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119a:	4b7d      	ldr	r3, [pc, #500]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a7c      	ldr	r2, [pc, #496]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011a0:	f043 0308 	orr.w	r3, r3, #8
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	4b7a      	ldr	r3, [pc, #488]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4977      	ldr	r1, [pc, #476]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011b8:	4b75      	ldr	r3, [pc, #468]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	4972      	ldr	r1, [pc, #456]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	604b      	str	r3, [r1, #4]
 80011cc:	e025      	b.n	800121a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011ce:	4b70      	ldr	r3, [pc, #448]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a6f      	ldr	r2, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011d4:	f043 0308 	orr.w	r3, r3, #8
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
 80011e6:	496a      	ldr	r1, [pc, #424]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ec:	4b68      	ldr	r3, [pc, #416]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69db      	ldr	r3, [r3, #28]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	4965      	ldr	r1, [pc, #404]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d109      	bne.n	800121a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fda6 	bl	8001d5c <RCC_SetFlashLatencyFromMSIRange>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e38e      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800121a:	f000 fcbf 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 800121e:	4602      	mov	r2, r0
 8001220:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	091b      	lsrs	r3, r3, #4
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	495a      	ldr	r1, [pc, #360]	; (8001394 <HAL_RCC_OscConfig+0x29c>)
 800122c:	5ccb      	ldrb	r3, [r1, r3]
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	fa22 f303 	lsr.w	r3, r2, r3
 8001236:	4a58      	ldr	r2, [pc, #352]	; (8001398 <HAL_RCC_OscConfig+0x2a0>)
 8001238:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800123a:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_RCC_OscConfig+0x2a4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff faec 	bl	800081c <HAL_InitTick>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d052      	beq.n	80012f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	e372      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d032      	beq.n	80012c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800125a:	4b4d      	ldr	r3, [pc, #308]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001266:	f7ff fbb9 	bl	80009dc <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800126e:	f7ff fbb5 	bl	80009dc <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e35b      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001280:	4b43      	ldr	r3, [pc, #268]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a3f      	ldr	r2, [pc, #252]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001292:	f043 0308 	orr.w	r3, r3, #8
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	493a      	ldr	r1, [pc, #232]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80012a6:	4313      	orrs	r3, r2
 80012a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012aa:	4b39      	ldr	r3, [pc, #228]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69db      	ldr	r3, [r3, #28]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	4935      	ldr	r1, [pc, #212]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
 80012be:	e01a      	b.n	80012f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb86 	bl	80009dc <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d4:	f7ff fb82 	bl	80009dc <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e328      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80012e6:	4b2a      	ldr	r3, [pc, #168]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x1dc>
 80012f2:	e000      	b.n	80012f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d073      	beq.n	80013ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b08      	cmp	r3, #8
 8001306:	d005      	beq.n	8001314 <HAL_RCC_OscConfig+0x21c>
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b0c      	cmp	r3, #12
 800130c:	d10e      	bne.n	800132c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d10b      	bne.n	800132c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d063      	beq.n	80013e8 <HAL_RCC_OscConfig+0x2f0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d15f      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e305      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001334:	d106      	bne.n	8001344 <HAL_RCC_OscConfig+0x24c>
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800133c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0x288>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x270>
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0x288>
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a05      	ldr	r2, [pc, #20]	; (8001390 <HAL_RCC_OscConfig+0x298>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01b      	beq.n	80013c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fb28 	bl	80009dc <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800138e:	e010      	b.n	80013b2 <HAL_RCC_OscConfig+0x2ba>
 8001390:	40021000 	.word	0x40021000
 8001394:	08007878 	.word	0x08007878
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fb1c 	bl	80009dc <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e2c2      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b2:	4baf      	ldr	r3, [pc, #700]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0x2a8>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb0c 	bl	80009dc <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fb08 	bl	80009dc <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e2ae      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013da:	4ba5      	ldr	r3, [pc, #660]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2d0>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d060      	beq.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_OscConfig+0x310>
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b0c      	cmp	r3, #12
 8001400:	d119      	bne.n	8001436 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b02      	cmp	r3, #2
 8001406:	d116      	bne.n	8001436 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001408:	4b99      	ldr	r3, [pc, #612]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_RCC_OscConfig+0x328>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e28b      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b93      	ldr	r3, [pc, #588]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	061b      	lsls	r3, r3, #24
 800142e:	4990      	ldr	r1, [pc, #576]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001430:	4313      	orrs	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001434:	e040      	b.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d023      	beq.n	8001486 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800143e:	4b8c      	ldr	r3, [pc, #560]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a8b      	ldr	r2, [pc, #556]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff fac7 	bl	80009dc <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff fac3 	bl	80009dc <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e269      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001464:	4b82      	ldr	r3, [pc, #520]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001470:	4b7f      	ldr	r3, [pc, #508]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	061b      	lsls	r3, r3, #24
 800147e:	497c      	ldr	r1, [pc, #496]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001480:	4313      	orrs	r3, r2
 8001482:	604b      	str	r3, [r1, #4]
 8001484:	e018      	b.n	80014b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001486:	4b7a      	ldr	r3, [pc, #488]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a79      	ldr	r2, [pc, #484]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 800148c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff faa3 	bl	80009dc <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149a:	f7ff fa9f 	bl	80009dc <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e245      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ac:	4b70      	ldr	r3, [pc, #448]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d03c      	beq.n	800153e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d01c      	beq.n	8001506 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014cc:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80014ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d2:	4a67      	ldr	r2, [pc, #412]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014dc:	f7ff fa7e 	bl	80009dc <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff fa7a 	bl	80009dc <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e220      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014f6:	4b5e      	ldr	r3, [pc, #376]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80014f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0ef      	beq.n	80014e4 <HAL_RCC_OscConfig+0x3ec>
 8001504:	e01b      	b.n	800153e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001506:	4b5a      	ldr	r3, [pc, #360]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150c:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fa61 	bl	80009dc <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fa5d 	bl	80009dc <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e203      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001530:	4b4f      	ldr	r3, [pc, #316]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1ef      	bne.n	800151e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80a6 	beq.w	8001698 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001550:	4b47      	ldr	r3, [pc, #284]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d10d      	bne.n	8001578 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	4b44      	ldr	r3, [pc, #272]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a43      	ldr	r2, [pc, #268]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
 8001568:	4b41      	ldr	r3, [pc, #260]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001574:	2301      	movs	r3, #1
 8001576:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001578:	4b3e      	ldr	r3, [pc, #248]	; (8001674 <HAL_RCC_OscConfig+0x57c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001580:	2b00      	cmp	r3, #0
 8001582:	d118      	bne.n	80015b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001584:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <HAL_RCC_OscConfig+0x57c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a3a      	ldr	r2, [pc, #232]	; (8001674 <HAL_RCC_OscConfig+0x57c>)
 800158a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001590:	f7ff fa24 	bl	80009dc <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001598:	f7ff fa20 	bl	80009dc <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1c6      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015aa:	4b32      	ldr	r3, [pc, #200]	; (8001674 <HAL_RCC_OscConfig+0x57c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d108      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4d8>
 80015be:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80015c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c4:	4a2a      	ldr	r2, [pc, #168]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015ce:	e024      	b.n	800161a <HAL_RCC_OscConfig+0x522>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b05      	cmp	r3, #5
 80015d6:	d110      	bne.n	80015fa <HAL_RCC_OscConfig+0x502>
 80015d8:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015de:	4a24      	ldr	r2, [pc, #144]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ee:	4a20      	ldr	r2, [pc, #128]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015f8:	e00f      	b.n	800161a <HAL_RCC_OscConfig+0x522>
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 80015fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001600:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001602:	f023 0301 	bic.w	r3, r3, #1
 8001606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 800160c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001610:	4a17      	ldr	r2, [pc, #92]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001612:	f023 0304 	bic.w	r3, r3, #4
 8001616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d016      	beq.n	8001650 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001622:	f7ff f9db 	bl	80009dc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff f9d7 	bl	80009dc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e17b      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_RCC_OscConfig+0x578>)
 8001642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0ed      	beq.n	800162a <HAL_RCC_OscConfig+0x532>
 800164e:	e01a      	b.n	8001686 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001650:	f7ff f9c4 	bl	80009dc <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001656:	e00f      	b.n	8001678 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001658:	f7ff f9c0 	bl	80009dc <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d906      	bls.n	8001678 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e164      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000
 8001674:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001678:	4ba8      	ldr	r3, [pc, #672]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1e8      	bne.n	8001658 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001686:	7ffb      	ldrb	r3, [r7, #31]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	4ba3      	ldr	r3, [pc, #652]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	4aa2      	ldr	r2, [pc, #648]	; (800191c <HAL_RCC_OscConfig+0x824>)
 8001692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001696:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d03c      	beq.n	800171e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d01c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016ac:	4b9b      	ldr	r3, [pc, #620]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80016ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016b2:	4a9a      	ldr	r2, [pc, #616]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016bc:	f7ff f98e 	bl	80009dc <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016c4:	f7ff f98a 	bl	80009dc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e130      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80016d6:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80016d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ef      	beq.n	80016c4 <HAL_RCC_OscConfig+0x5cc>
 80016e4:	e01b      	b.n	800171e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80016e6:	4b8d      	ldr	r3, [pc, #564]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80016e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016ec:	4a8b      	ldr	r2, [pc, #556]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f6:	f7ff f971 	bl	80009dc <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016fe:	f7ff f96d 	bl	80009dc <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e113      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001710:	4b82      	ldr	r3, [pc, #520]	; (800191c <HAL_RCC_OscConfig+0x824>)
 8001712:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ef      	bne.n	80016fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8107 	beq.w	8001936 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172c:	2b02      	cmp	r3, #2
 800172e:	f040 80cb 	bne.w	80018c8 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001732:	4b7a      	ldr	r3, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x824>)
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f003 0203 	and.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	429a      	cmp	r2, r3
 8001744:	d12c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	3b01      	subs	r3, #1
 8001752:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d123      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d11b      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001772:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001774:	429a      	cmp	r2, r3
 8001776:	d113      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	085b      	lsrs	r3, r3, #1
 8001784:	3b01      	subs	r3, #1
 8001786:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d109      	bne.n	80017a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	3b01      	subs	r3, #1
 800179a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179c:	429a      	cmp	r2, r3
 800179e:	d06d      	beq.n	800187c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d068      	beq.n	8001878 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017a6:	4b5d      	ldr	r3, [pc, #372]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d105      	bne.n	80017be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017b2:	4b5a      	ldr	r3, [pc, #360]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e0ba      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c2:	4b56      	ldr	r3, [pc, #344]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a55      	ldr	r2, [pc, #340]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80017c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017ce:	f7ff f905 	bl	80009dc <HAL_GetTick>
 80017d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f901 	bl	80009dc <HAL_GetTick>
 80017da:	4602      	mov	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e0a7      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017e8:	4b4c      	ldr	r3, [pc, #304]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f4:	4b49      	ldr	r3, [pc, #292]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	4b49      	ldr	r3, [pc, #292]	; (8001920 <HAL_RCC_OscConfig+0x828>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001804:	3a01      	subs	r2, #1
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800180e:	0212      	lsls	r2, r2, #8
 8001810:	4311      	orrs	r1, r2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001816:	0852      	lsrs	r2, r2, #1
 8001818:	3a01      	subs	r2, #1
 800181a:	0552      	lsls	r2, r2, #21
 800181c:	4311      	orrs	r1, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001822:	0852      	lsrs	r2, r2, #1
 8001824:	3a01      	subs	r2, #1
 8001826:	0652      	lsls	r2, r2, #25
 8001828:	4311      	orrs	r1, r2
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800182e:	06d2      	lsls	r2, r2, #27
 8001830:	430a      	orrs	r2, r1
 8001832:	493a      	ldr	r1, [pc, #232]	; (800191c <HAL_RCC_OscConfig+0x824>)
 8001834:	4313      	orrs	r3, r2
 8001836:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a37      	ldr	r2, [pc, #220]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800183e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001842:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_RCC_OscConfig+0x824>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4a34      	ldr	r2, [pc, #208]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800184a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800184e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001850:	f7ff f8c4 	bl	80009dc <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff f8c0 	bl	80009dc <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e066      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001876:	e05e      	b.n	8001936 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e05d      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d156      	bne.n	8001936 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a23      	ldr	r2, [pc, #140]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800188e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001892:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_RCC_OscConfig+0x824>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <HAL_RCC_OscConfig+0x824>)
 800189a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a0:	f7ff f89c 	bl	80009dc <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f898 	bl	80009dc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e03e      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x7b0>
 80018c6:	e036      	b.n	8001936 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d031      	beq.n	8001932 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80018d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018d8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80018ec:	f023 0303 	bic.w	r3, r3, #3
 80018f0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x824>)
 80018f8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff f86b 	bl	80009dc <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001908:	e00c      	b.n	8001924 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190a:	f7ff f867 	bl	80009dc <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d905      	bls.n	8001924 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e00d      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
 800191c:	40021000 	.word	0x40021000
 8001920:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_RCC_OscConfig+0x848>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1ec      	bne.n	800190a <HAL_RCC_OscConfig+0x812>
 8001930:	e001      	b.n	8001936 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e000      	b.n	8001938 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e10f      	b.n	8001b7c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b89      	ldr	r3, [pc, #548]	; (8001b84 <HAL_RCC_ClockConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d910      	bls.n	800198c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b86      	ldr	r3, [pc, #536]	; (8001b84 <HAL_RCC_ClockConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 020f 	bic.w	r2, r3, #15
 8001972:	4984      	ldr	r1, [pc, #528]	; (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b82      	ldr	r3, [pc, #520]	; (8001b84 <HAL_RCC_ClockConfig+0x240>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0f7      	b.n	8001b7c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8089 	beq.w	8001aac <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d133      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a2:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e0e4      	b.n	8001b7c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80019b2:	f000 fa2d 	bl	8001e10 <RCC_GetSysClockFreqFromPLLSource>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4a74      	ldr	r2, [pc, #464]	; (8001b8c <HAL_RCC_ClockConfig+0x248>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d955      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80019be:	4b72      	ldr	r3, [pc, #456]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ca:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d2:	4a6d      	ldr	r2, [pc, #436]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e044      	b.n	8001a6a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d03e      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x126>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d13a      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019f4:	4b64      	ldr	r3, [pc, #400]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019fc:	4a62      	ldr	r2, [pc, #392]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 80019fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a02:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a04:	2380      	movs	r3, #128	; 0x80
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e02f      	b.n	8001a6a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d107      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	4b5d      	ldr	r3, [pc, #372]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d115      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e0ac      	b.n	8001b7c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d107      	bne.n	8001a3a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2a:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e0a0      	b.n	8001b7c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a3a:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e098      	b.n	8001b7c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001a4a:	f000 f8a7 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	4a4e      	ldr	r2, [pc, #312]	; (8001b8c <HAL_RCC_ClockConfig+0x248>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d909      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a56:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a5e:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a6a:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f023 0203 	bic.w	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4944      	ldr	r1, [pc, #272]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a7c:	f7fe ffae 	bl	80009dc <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a84:	f7fe ffaa 	bl	80009dc <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e070      	b.n	8001b7c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 020c 	and.w	r2, r3, #12
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d1eb      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d009      	beq.n	8001acc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4930      	ldr	r1, [pc, #192]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
 8001aca:	e008      	b.n	8001ade <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b80      	cmp	r3, #128	; 0x80
 8001ad0:	d105      	bne.n	8001ade <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4a2c      	ldr	r2, [pc, #176]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001adc:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d210      	bcs.n	8001b0e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 020f 	bic.w	r2, r3, #15
 8001af4:	4923      	ldr	r1, [pc, #140]	; (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_RCC_ClockConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e036      	b.n	8001b7c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4918      	ldr	r1, [pc, #96]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4910      	ldr	r1, [pc, #64]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b4c:	f000 f826 	bl	8001b9c <HAL_RCC_GetSysClockFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCC_ClockConfig+0x244>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	490c      	ldr	r1, [pc, #48]	; (8001b90 <HAL_RCC_ClockConfig+0x24c>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x250>)
 8001b6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <HAL_RCC_ClockConfig+0x254>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fe53 	bl	800081c <HAL_InitTick>
 8001b76:	4603      	mov	r3, r0
 8001b78:	73fb      	strb	r3, [r7, #15]

  return status;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	04c4b400 	.word	0x04c4b400
 8001b90:	08007878 	.word	0x08007878
 8001b94:	20000000 	.word	0x20000000
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	; 0x24
 8001ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001baa:	4b3e      	ldr	r3, [pc, #248]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d121      	bne.n	8001c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d11e      	bne.n	8001c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bd0:	4b34      	ldr	r3, [pc, #208]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d107      	bne.n	8001bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be2:	0a1b      	lsrs	r3, r3, #8
 8001be4:	f003 030f 	and.w	r3, r3, #15
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bf8:	4a2b      	ldr	r2, [pc, #172]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10d      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d102      	bne.n	8001c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <HAL_RCC_GetSysClockFreq+0x110>)
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	e004      	b.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d134      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d003      	beq.n	8001c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d003      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0xac>
 8001c40:	e005      	b.n	8001c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <HAL_RCC_GetSysClockFreq+0x110>)
 8001c44:	617b      	str	r3, [r7, #20]
      break;
 8001c46:	e005      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c4a:	617b      	str	r3, [r7, #20]
      break;
 8001c4c:	e002      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	617b      	str	r3, [r7, #20]
      break;
 8001c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	3301      	adds	r3, #1
 8001c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	0a1b      	lsrs	r3, r3, #8
 8001c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	fb02 f203 	mul.w	r2, r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	0e5b      	lsrs	r3, r3, #25
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	3301      	adds	r3, #1
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c94:	69bb      	ldr	r3, [r7, #24]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08007890 	.word	0x08007890
 8001cac:	00f42400 	.word	0x00f42400
 8001cb0:	007a1200 	.word	0x007a1200

08001cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000

08001ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cd0:	f7ff fff0 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0a1b      	lsrs	r3, r3, #8
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4904      	ldr	r1, [pc, #16]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08007888 	.word	0x08007888

08001cf8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	220f      	movs	r2, #15
 8001d06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f003 0203 	and.w	r2, r3, #3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	08db      	lsrs	r3, r3, #3
 8001d32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCC_GetClockConfig+0x60>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 020f 	and.w	r2, r3, #15
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	601a      	str	r2, [r3, #0]
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40022000 	.word	0x40022000

08001d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d74:	f7ff f8fc 	bl	8000f70 <HAL_PWREx_GetVoltageRange>
 8001d78:	6178      	str	r0, [r7, #20]
 8001d7a:	e014      	b.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	4a21      	ldr	r2, [pc, #132]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d94:	f7ff f8ec 	bl	8000f70 <HAL_PWREx_GetVoltageRange>
 8001d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a1a      	ldr	r2, [pc, #104]	; (8001e08 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dac:	d10b      	bne.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d913      	bls.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2ba0      	cmp	r3, #160	; 0xa0
 8001db8:	d902      	bls.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dba:	2302      	movs	r3, #2
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e00d      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e00a      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001dca:	d902      	bls.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001dcc:	2302      	movs	r3, #2
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e004      	b.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b70      	cmp	r3, #112	; 0x70
 8001dd6:	d101      	bne.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dd8:	2301      	movs	r3, #1
 8001dda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f023 020f 	bic.w	r2, r3, #15
 8001de4:	4909      	ldr	r1, [pc, #36]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dec:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d001      	beq.n	8001dfe <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	40022000 	.word	0x40022000

08001e10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001e1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d118      	bne.n	8001e58 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d107      	bne.n	8001e42 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e32:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e005      	b.n	8001e4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e42:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	f003 030f 	and.w	r3, r3, #15
 8001e4c:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e4e:	4a21      	ldr	r2, [pc, #132]	; (8001ed4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e58:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d003      	beq.n	8001e70 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d003      	beq.n	8001e76 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8001e6e:	e005      	b.n	8001e7c <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001e72:	613b      	str	r3, [r7, #16]
    break;
 8001e74:	e005      	b.n	8001e82 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001e78:	613b      	str	r3, [r7, #16]
    break;
 8001e7a:	e002      	b.n	8001e82 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
    break;
 8001e80:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	fb02 f203 	mul.w	r2, r2, r3
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	0e5b      	lsrs	r3, r3, #25
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001ec2:	683b      	ldr	r3, [r7, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08007890 	.word	0x08007890
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200

08001ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e049      	b.n	8001f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f841 	bl	8001f8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4610      	mov	r0, r2
 8001f20:	f000 f9f8 	bl	8002314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
	...

08001fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d001      	beq.n	8001fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e04f      	b.n	800205c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_TIM_Base_Start_IT+0xc4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01d      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x76>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d018      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x76>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_TIM_Base_Start_IT+0xc8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x76>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00e      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x76>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_TIM_Base_Start_IT+0xd0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x76>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_TIM_Base_Start_IT+0xd4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_TIM_Base_Start_IT+0x76>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_TIM_Base_Start_IT+0xd8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d115      	bne.n	8002046 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_TIM_Base_Start_IT+0xdc>)
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b06      	cmp	r3, #6
 800202a:	d015      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0xb4>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d011      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002044:	e008      	b.n	8002058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e000      	b.n	800205a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800
 8002074:	40000c00 	.word	0x40000c00
 8002078:	40013400 	.word	0x40013400
 800207c:	40014000 	.word	0x40014000
 8002080:	00010007 	.word	0x00010007

08002084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b02      	cmp	r3, #2
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0202 	mvn.w	r2, #2
 80020b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f905 	bl	80022d6 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8f7 	bl	80022c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f908 	bl	80022ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b04      	cmp	r3, #4
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0204 	mvn.w	r2, #4
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2202      	movs	r2, #2
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8db 	bl	80022d6 <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8cd 	bl	80022c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f8de 	bl	80022ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b08      	cmp	r3, #8
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b08      	cmp	r3, #8
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0208 	mvn.w	r2, #8
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2204      	movs	r2, #4
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f8b1 	bl	80022d6 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8a3 	bl	80022c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f8b4 	bl	80022ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0310 	and.w	r3, r3, #16
 8002192:	2b10      	cmp	r3, #16
 8002194:	d122      	bne.n	80021dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d11b      	bne.n	80021dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0210 	mvn.w	r2, #16
 80021ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2208      	movs	r2, #8
 80021b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f887 	bl	80022d6 <HAL_TIM_IC_CaptureCallback>
 80021c8:	e005      	b.n	80021d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f879 	bl	80022c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f88a 	bl	80022ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10e      	bne.n	8002208 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0201 	mvn.w	r2, #1
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe face 	bl	80007a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002212:	2b80      	cmp	r3, #128	; 0x80
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002220:	2b80      	cmp	r3, #128	; 0x80
 8002222:	d107      	bne.n	8002234 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f914 	bl	800245c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002242:	d10e      	bne.n	8002262 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b80      	cmp	r3, #128	; 0x80
 8002250:	d107      	bne.n	8002262 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800225a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f907 	bl	8002470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800226c:	2b40      	cmp	r3, #64	; 0x40
 800226e:	d10e      	bne.n	800228e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d107      	bne.n	800228e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 f838 	bl	80022fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b20      	cmp	r3, #32
 800229a:	d10e      	bne.n	80022ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d107      	bne.n	80022ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f06f 0220 	mvn.w	r2, #32
 80022b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f000 f8c7 	bl	8002448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4a40      	ldr	r2, [pc, #256]	; (8002428 <TIM_Base_SetConfig+0x114>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d013      	beq.n	8002354 <TIM_Base_SetConfig+0x40>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002332:	d00f      	beq.n	8002354 <TIM_Base_SetConfig+0x40>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a3d      	ldr	r2, [pc, #244]	; (800242c <TIM_Base_SetConfig+0x118>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00b      	beq.n	8002354 <TIM_Base_SetConfig+0x40>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a3c      	ldr	r2, [pc, #240]	; (8002430 <TIM_Base_SetConfig+0x11c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <TIM_Base_SetConfig+0x40>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <TIM_Base_SetConfig+0x120>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d003      	beq.n	8002354 <TIM_Base_SetConfig+0x40>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <TIM_Base_SetConfig+0x124>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d108      	bne.n	8002366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a2f      	ldr	r2, [pc, #188]	; (8002428 <TIM_Base_SetConfig+0x114>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01f      	beq.n	80023ae <TIM_Base_SetConfig+0x9a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002374:	d01b      	beq.n	80023ae <TIM_Base_SetConfig+0x9a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a2c      	ldr	r2, [pc, #176]	; (800242c <TIM_Base_SetConfig+0x118>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d017      	beq.n	80023ae <TIM_Base_SetConfig+0x9a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a2b      	ldr	r2, [pc, #172]	; (8002430 <TIM_Base_SetConfig+0x11c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <TIM_Base_SetConfig+0x9a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a2a      	ldr	r2, [pc, #168]	; (8002434 <TIM_Base_SetConfig+0x120>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d00f      	beq.n	80023ae <TIM_Base_SetConfig+0x9a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a29      	ldr	r2, [pc, #164]	; (8002438 <TIM_Base_SetConfig+0x124>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00b      	beq.n	80023ae <TIM_Base_SetConfig+0x9a>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a28      	ldr	r2, [pc, #160]	; (800243c <TIM_Base_SetConfig+0x128>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <TIM_Base_SetConfig+0x9a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a27      	ldr	r2, [pc, #156]	; (8002440 <TIM_Base_SetConfig+0x12c>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <TIM_Base_SetConfig+0x9a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a26      	ldr	r2, [pc, #152]	; (8002444 <TIM_Base_SetConfig+0x130>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d108      	bne.n	80023c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	4313      	orrs	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <TIM_Base_SetConfig+0x114>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d00f      	beq.n	800240c <TIM_Base_SetConfig+0xf8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <TIM_Base_SetConfig+0x124>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d00b      	beq.n	800240c <TIM_Base_SetConfig+0xf8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a11      	ldr	r2, [pc, #68]	; (800243c <TIM_Base_SetConfig+0x128>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <TIM_Base_SetConfig+0xf8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a10      	ldr	r2, [pc, #64]	; (8002440 <TIM_Base_SetConfig+0x12c>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <TIM_Base_SetConfig+0xf8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <TIM_Base_SetConfig+0x130>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d103      	bne.n	8002414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	691a      	ldr	r2, [r3, #16]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	615a      	str	r2, [r3, #20]
}
 800241a:	bf00      	nop
 800241c:	3714      	adds	r7, #20
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40012c00 	.word	0x40012c00
 800242c:	40000400 	.word	0x40000400
 8002430:	40000800 	.word	0x40000800
 8002434:	40000c00 	.word	0x40000c00
 8002438:	40013400 	.word	0x40013400
 800243c:	40014000 	.word	0x40014000
 8002440:	40014400 	.word	0x40014400
 8002444:	40014800 	.word	0x40014800

08002448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f103 0208 	add.w	r2, r3, #8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f04f 32ff 	mov.w	r2, #4294967295
 800249c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f103 0208 	add.w	r2, r3, #8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f103 0208 	add.w	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024de:	b480      	push	{r7}
 80024e0:	b085      	sub	sp, #20
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	601a      	str	r2, [r3, #0]
}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002526:	b480      	push	{r7}
 8002528:	b085      	sub	sp, #20
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d103      	bne.n	8002546 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	e00c      	b.n	8002560 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3308      	adds	r3, #8
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	e002      	b.n	8002554 <vListInsert+0x2e>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	d2f6      	bcs.n	800254e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6892      	ldr	r2, [r2, #8]
 80025ae:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6852      	ldr	r2, [r2, #4]
 80025b8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d103      	bne.n	80025cc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	1e5a      	subs	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <xQueueGenericReset+0x2a>
        __asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	60bb      	str	r3, [r7, #8]
    }
 8002612:	bf00      	nop
 8002614:	e7fe      	b.n	8002614 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002616:	f002 fc45 	bl	8004ea4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	68f9      	ldr	r1, [r7, #12]
 8002624:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	441a      	add	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002646:	3b01      	subs	r3, #1
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	441a      	add	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	; 0xff
 800265a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	22ff      	movs	r2, #255	; 0xff
 8002662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d114      	bne.n	8002696 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01a      	beq.n	80026aa <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3310      	adds	r3, #16
 8002678:	4618      	mov	r0, r3
 800267a:	f001 fb23 	bl	8003cc4 <xTaskRemoveFromEventList>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <xQueueGenericReset+0xcc>)
 8002686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	e009      	b.n	80026aa <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3310      	adds	r3, #16
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fef2 	bl	8002484 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	3324      	adds	r3, #36	; 0x24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff feed 	bl	8002484 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80026aa:	f002 fc2b 	bl	8004f04 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	e000ed04 	.word	0xe000ed04

080026bc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <xQueueGenericCreate+0x2a>
        __asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	61bb      	str	r3, [r7, #24]
    }
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <xQueueGenericCreate+0x48>
 80026f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d101      	bne.n	8002708 <xQueueGenericCreate+0x4c>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <xQueueGenericCreate+0x4e>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10a      	bne.n	8002724 <xQueueGenericCreate+0x68>
        __asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	617b      	str	r3, [r7, #20]
    }
 8002720:	bf00      	nop
 8002722:	e7fe      	b.n	8002722 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800272a:	d90a      	bls.n	8002742 <xQueueGenericCreate+0x86>
        __asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	613b      	str	r3, [r7, #16]
    }
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3350      	adds	r3, #80	; 0x50
 8002746:	4618      	mov	r0, r3
 8002748:	f002 fcd0 	bl	80050ec <pvPortMalloc>
 800274c:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00d      	beq.n	8002770 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	3350      	adds	r3, #80	; 0x50
 800275c:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800275e:	79fa      	ldrb	r2, [r7, #7]
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f805 	bl	800277a <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002770:	6a3b      	ldr	r3, [r7, #32]
    }
 8002772:	4618      	mov	r0, r3
 8002774:	3728      	adds	r7, #40	; 0x28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e002      	b.n	800279c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027a8:	2101      	movs	r1, #1
 80027aa:	69b8      	ldr	r0, [r7, #24]
 80027ac:	f7ff ff1e 	bl	80025ec <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	68f9      	ldr	r1, [r7, #12]
 80027be:	2073      	movs	r0, #115	; 0x73
 80027c0:	f004 f88e 	bl	80068e0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b090      	sub	sp, #64	; 0x40
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueGenericSend+0x32>
        __asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d103      	bne.n	800280c <xQueueGenericSend+0x40>
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <xQueueGenericSend+0x44>
 800280c:	2301      	movs	r3, #1
 800280e:	e000      	b.n	8002812 <xQueueGenericSend+0x46>
 8002810:	2300      	movs	r3, #0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10a      	bne.n	800282c <xQueueGenericSend+0x60>
        __asm volatile
 8002816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281a:	f383 8811 	msr	BASEPRI, r3
 800281e:	f3bf 8f6f 	isb	sy
 8002822:	f3bf 8f4f 	dsb	sy
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002828:	bf00      	nop
 800282a:	e7fe      	b.n	800282a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d103      	bne.n	800283a <xQueueGenericSend+0x6e>
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <xQueueGenericSend+0x72>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <xQueueGenericSend+0x74>
 800283e:	2300      	movs	r3, #0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10a      	bne.n	800285a <xQueueGenericSend+0x8e>
        __asm volatile
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	623b      	str	r3, [r7, #32]
    }
 8002856:	bf00      	nop
 8002858:	e7fe      	b.n	8002858 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800285a:	f001 fbd3 	bl	8004004 <xTaskGetSchedulerState>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <xQueueGenericSend+0x9e>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <xQueueGenericSend+0xa2>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <xQueueGenericSend+0xa4>
 800286e:	2300      	movs	r3, #0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10a      	bne.n	800288a <xQueueGenericSend+0xbe>
        __asm volatile
 8002874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002878:	f383 8811 	msr	BASEPRI, r3
 800287c:	f3bf 8f6f 	isb	sy
 8002880:	f3bf 8f4f 	dsb	sy
 8002884:	61fb      	str	r3, [r7, #28]
    }
 8002886:	bf00      	nop
 8002888:	e7fe      	b.n	8002888 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800288a:	f002 fb0b 	bl	8004ea4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800288e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <xQueueGenericSend+0xd4>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d136      	bne.n	800290e <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80028a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a2:	4618      	mov	r0, r3
 80028a4:	f004 fda8 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	460b      	mov	r3, r1
 80028b2:	4601      	mov	r1, r0
 80028b4:	205a      	movs	r0, #90	; 0x5a
 80028b6:	f004 f889 	bl	80069cc <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028c0:	f000 fa78 	bl	8002db4 <prvCopyDataToQueue>
 80028c4:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d010      	beq.n	80028f0 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	3324      	adds	r3, #36	; 0x24
 80028d2:	4618      	mov	r0, r3
 80028d4:	f001 f9f6 	bl	8003cc4 <xTaskRemoveFromEventList>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d013      	beq.n	8002906 <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80028de:	4b4d      	ldr	r3, [pc, #308]	; (8002a14 <xQueueGenericSend+0x248>)
 80028e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	e00a      	b.n	8002906 <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80028f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80028f6:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <xQueueGenericSend+0x248>)
 80028f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002906:	f002 fafd 	bl	8004f04 <vPortExitCritical>
                return pdPASS;
 800290a:	2301      	movs	r3, #1
 800290c:	e07d      	b.n	8002a0a <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d110      	bne.n	8002936 <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002914:	f002 faf6 	bl	8004f04 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291a:	4618      	mov	r0, r3
 800291c:	f004 fd6c 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002920:	68ba      	ldr	r2, [r7, #8]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	460b      	mov	r3, r1
 800292a:	4601      	mov	r1, r0
 800292c:	205a      	movs	r0, #90	; 0x5a
 800292e:	f004 f84d 	bl	80069cc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002932:	2300      	movs	r3, #0
 8002934:	e069      	b.n	8002a0a <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002938:	2b00      	cmp	r3, #0
 800293a:	d106      	bne.n	800294a <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fa25 	bl	8003d90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002946:	2301      	movs	r3, #1
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800294a:	f002 fadb 	bl	8004f04 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800294e:	f000 ff71 	bl	8003834 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002952:	f002 faa7 	bl	8004ea4 <vPortEnterCritical>
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800295c:	b25b      	sxtb	r3, r3
 800295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002962:	d103      	bne.n	800296c <xQueueGenericSend+0x1a0>
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002972:	b25b      	sxtb	r3, r3
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d103      	bne.n	8002982 <xQueueGenericSend+0x1b6>
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002982:	f002 fabf 	bl	8004f04 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002986:	1d3a      	adds	r2, r7, #4
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f001 fa14 	bl	8003dbc <xTaskCheckForTimeOut>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d124      	bne.n	80029e4 <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800299a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800299c:	f000 fb02 	bl	8002fa4 <prvIsQueueFull>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d018      	beq.n	80029d8 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	3310      	adds	r3, #16
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 f936 	bl	8003c20 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80029b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b6:	f000 fa8d 	bl	8002ed4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80029ba:	f000 ff49 	bl	8003850 <xTaskResumeAll>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f47f af62 	bne.w	800288a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 80029c6:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <xQueueGenericSend+0x248>)
 80029c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	f3bf 8f6f 	isb	sy
 80029d6:	e758      	b.n	800288a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80029d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029da:	f000 fa7b 	bl	8002ed4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029de:	f000 ff37 	bl	8003850 <xTaskResumeAll>
 80029e2:	e752      	b.n	800288a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80029e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029e6:	f000 fa75 	bl	8002ed4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80029ea:	f000 ff31 	bl	8003850 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fd01 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	460b      	mov	r3, r1
 8002a00:	4601      	mov	r1, r0
 8002a02:	205a      	movs	r0, #90	; 0x5a
 8002a04:	f003 ffe2 	bl	80069cc <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002a08:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3738      	adds	r7, #56	; 0x38
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	e000ed04 	.word	0xe000ed04

08002a18 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b090      	sub	sp, #64	; 0x40
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10a      	bne.n	8002a46 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002a42:	bf00      	nop
 8002a44:	e7fe      	b.n	8002a44 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <xQueueGenericSendFromISR+0x3c>
 8002a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <xQueueGenericSendFromISR+0x40>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <xQueueGenericSendFromISR+0x42>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10a      	bne.n	8002a74 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d103      	bne.n	8002a82 <xQueueGenericSendFromISR+0x6a>
 8002a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <xQueueGenericSendFromISR+0x6e>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <xQueueGenericSendFromISR+0x70>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10a      	bne.n	8002aa2 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	623b      	str	r3, [r7, #32]
    }
 8002a9e:	bf00      	nop
 8002aa0:	e7fe      	b.n	8002aa0 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aa2:	f002 fae3 	bl	800506c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8002aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aae:	f383 8811 	msr	BASEPRI, r3
 8002ab2:	f3bf 8f6f 	isb	sy
 8002ab6:	f3bf 8f4f 	dsb	sy
 8002aba:	61fa      	str	r2, [r7, #28]
 8002abc:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002abe:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ac0:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <xQueueGenericSendFromISR+0xbc>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d148      	bne.n	8002b66 <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 fc86 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002aec:	4601      	mov	r1, r0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	461a      	mov	r2, r3
 8002af2:	2060      	movs	r0, #96	; 0x60
 8002af4:	f003 fe9a 	bl	800682c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002afe:	f000 f959 	bl	8002db4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0a:	d112      	bne.n	8002b32 <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d025      	beq.n	8002b60 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	3324      	adds	r3, #36	; 0x24
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f001 f8d3 	bl	8003cc4 <xTaskRemoveFromEventList>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01d      	beq.n	8002b60 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01a      	beq.n	8002b60 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e016      	b.n	8002b60 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002b36:	2b7f      	cmp	r3, #127	; 0x7f
 8002b38:	d10a      	bne.n	8002b50 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
 8002b4a:	617b      	str	r3, [r7, #20]
    }
 8002b4c:	bf00      	nop
 8002b4e:	e7fe      	b.n	8002b4e <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b54:	3301      	adds	r3, #1
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	b25a      	sxtb	r2, r3
 8002b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b60:	2301      	movs	r3, #1
 8002b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002b64:	e00b      	b.n	8002b7e <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fc45 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002b6e:	4601      	mov	r1, r0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	461a      	mov	r2, r3
 8002b74:	2060      	movs	r0, #96	; 0x60
 8002b76:	f003 fe59 	bl	800682c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b88:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3740      	adds	r7, #64	; 0x40
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b08f      	sub	sp, #60	; 0x3c
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10a      	bne.n	8002bc4 <xQueueReceive+0x30>
        __asm volatile
 8002bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	623b      	str	r3, [r7, #32]
    }
 8002bc0:	bf00      	nop
 8002bc2:	e7fe      	b.n	8002bc2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <xQueueReceive+0x3e>
 8002bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <xQueueReceive+0x42>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e000      	b.n	8002bd8 <xQueueReceive+0x44>
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10a      	bne.n	8002bf2 <xQueueReceive+0x5e>
        __asm volatile
 8002bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be0:	f383 8811 	msr	BASEPRI, r3
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	61fb      	str	r3, [r7, #28]
    }
 8002bee:	bf00      	nop
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bf2:	f001 fa07 	bl	8004004 <xTaskGetSchedulerState>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <xQueueReceive+0x6e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <xQueueReceive+0x72>
 8002c02:	2301      	movs	r3, #1
 8002c04:	e000      	b.n	8002c08 <xQueueReceive+0x74>
 8002c06:	2300      	movs	r3, #0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <xQueueReceive+0x8e>
        __asm volatile
 8002c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c10:	f383 8811 	msr	BASEPRI, r3
 8002c14:	f3bf 8f6f 	isb	sy
 8002c18:	f3bf 8f4f 	dsb	sy
 8002c1c:	61bb      	str	r3, [r7, #24]
    }
 8002c1e:	bf00      	nop
 8002c20:	e7fe      	b.n	8002c20 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c22:	f002 f93f 	bl	8004ea4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d02f      	beq.n	8002c92 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c32:	68b9      	ldr	r1, [r7, #8]
 8002c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c36:	f000 f927 	bl	8002e88 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f004 fbdb 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002c42:	4604      	mov	r4, r0
 8002c44:	2000      	movs	r0, #0
 8002c46:	f004 fbd7 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2101      	movs	r1, #1
 8002c50:	9100      	str	r1, [sp, #0]
 8002c52:	4621      	mov	r1, r4
 8002c54:	205c      	movs	r0, #92	; 0x5c
 8002c56:	f003 feb9 	bl	80069cc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	1e5a      	subs	r2, r3, #1
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00f      	beq.n	8002c8a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c6c:	3310      	adds	r3, #16
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f001 f828 	bl	8003cc4 <xTaskRemoveFromEventList>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c7a:	4b4d      	ldr	r3, [pc, #308]	; (8002db0 <xQueueReceive+0x21c>)
 8002c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c8a:	f002 f93b 	bl	8004f04 <vPortExitCritical>
                return pdPASS;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e08a      	b.n	8002da8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d113      	bne.n	8002cc0 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c98:	f002 f934 	bl	8004f04 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f004 fbaa 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	f004 fba6 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002cac:	4602      	mov	r2, r0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	9100      	str	r1, [sp, #0]
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	205c      	movs	r0, #92	; 0x5c
 8002cb8:	f003 fe88 	bl	80069cc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	e073      	b.n	8002da8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cc6:	f107 0310 	add.w	r3, r7, #16
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f001 f860 	bl	8003d90 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cd4:	f002 f916 	bl	8004f04 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cd8:	f000 fdac 	bl	8003834 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cdc:	f002 f8e2 	bl	8004ea4 <vPortEnterCritical>
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	d103      	bne.n	8002cf6 <xQueueReceive+0x162>
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d103      	bne.n	8002d0c <xQueueReceive+0x178>
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d0c:	f002 f8fa 	bl	8004f04 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d10:	1d3a      	adds	r2, r7, #4
 8002d12:	f107 0310 	add.w	r3, r7, #16
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f001 f84f 	bl	8003dbc <xTaskCheckForTimeOut>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d124      	bne.n	8002d6e <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d26:	f000 f927 	bl	8002f78 <prvIsQueueEmpty>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d018      	beq.n	8002d62 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	3324      	adds	r3, #36	; 0x24
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 ff71 	bl	8003c20 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d40:	f000 f8c8 	bl	8002ed4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d44:	f000 fd84 	bl	8003850 <xTaskResumeAll>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f47f af69 	bne.w	8002c22 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <xQueueReceive+0x21c>)
 8002d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	f3bf 8f4f 	dsb	sy
 8002d5c:	f3bf 8f6f 	isb	sy
 8002d60:	e75f      	b.n	8002c22 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d64:	f000 f8b6 	bl	8002ed4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d68:	f000 fd72 	bl	8003850 <xTaskResumeAll>
 8002d6c:	e759      	b.n	8002c22 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d70:	f000 f8b0 	bl	8002ed4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d74:	f000 fd6c 	bl	8003850 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d7a:	f000 f8fd 	bl	8002f78 <prvIsQueueEmpty>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f43f af4e 	beq.w	8002c22 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f004 fb35 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	2000      	movs	r0, #0
 8002d92:	f004 fb31 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8002d96:	4602      	mov	r2, r0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	9100      	str	r1, [sp, #0]
 8002d9e:	4621      	mov	r1, r4
 8002da0:	205c      	movs	r0, #92	; 0x5c
 8002da2:	f003 fe13 	bl	80069cc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002da6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3734      	adds	r7, #52	; 0x34
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	e000ed04 	.word	0xe000ed04

08002db4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d14d      	bne.n	8002e76 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f92e 	bl	8004040 <xTaskPriorityDisinherit>
 8002de4:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	e043      	b.n	8002e76 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d119      	bne.n	8002e28 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6858      	ldr	r0, [r3, #4]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	f004 fc88 	bl	8007714 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d32b      	bcc.n	8002e76 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e026      	b.n	8002e76 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	68d8      	ldr	r0, [r3, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	461a      	mov	r2, r3
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	f004 fc6e 	bl	8007714 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68da      	ldr	r2, [r3, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	425b      	negs	r3, r3
 8002e42:	441a      	add	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d207      	bcs.n	8002e64 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	425b      	negs	r3, r3
 8002e5e:	441a      	add	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d105      	bne.n	8002e76 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002e7e:	697b      	ldr	r3, [r7, #20]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d018      	beq.n	8002ecc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68da      	ldr	r2, [r3, #12]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	441a      	add	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d303      	bcc.n	8002ebc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68d9      	ldr	r1, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	6838      	ldr	r0, [r7, #0]
 8002ec8:	f004 fc24 	bl	8007714 <memcpy>
    }
}
 8002ecc:	bf00      	nop
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002edc:	f001 ffe2 	bl	8004ea4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ee6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ee8:	e011      	b.n	8002f0e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d012      	beq.n	8002f18 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3324      	adds	r3, #36	; 0x24
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f000 fee4 	bl	8003cc4 <xTaskRemoveFromEventList>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002f02:	f000 ffc1 	bl	8003e88 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	dce9      	bgt.n	8002eea <prvUnlockQueue+0x16>
 8002f16:	e000      	b.n	8002f1a <prvUnlockQueue+0x46>
                        break;
 8002f18:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	22ff      	movs	r2, #255	; 0xff
 8002f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002f22:	f001 ffef 	bl	8004f04 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002f26:	f001 ffbd 	bl	8004ea4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f30:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f32:	e011      	b.n	8002f58 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	3310      	adds	r3, #16
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 febf 	bl	8003cc4 <xTaskRemoveFromEventList>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002f4c:	f000 ff9c 	bl	8003e88 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002f50:	7bbb      	ldrb	r3, [r7, #14]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	dce9      	bgt.n	8002f34 <prvUnlockQueue+0x60>
 8002f60:	e000      	b.n	8002f64 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002f62:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	22ff      	movs	r2, #255	; 0xff
 8002f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002f6c:	f001 ffca 	bl	8004f04 <vPortExitCritical>
}
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002f80:	f001 ff90 	bl	8004ea4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e001      	b.n	8002f96 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f96:	f001 ffb5 	bl	8004f04 <vPortExitCritical>

    return xReturn;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002fac:	f001 ff7a 	bl	8004ea4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d102      	bne.n	8002fc2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e001      	b.n	8002fc6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002fc6:	f001 ff9d 	bl	8004f04 <vPortExitCritical>

    return xReturn;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e01e      	b.n	8003022 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <vQueueAddToRegistry+0x60>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d115      	bne.n	800301c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ff0:	4910      	ldr	r1, [pc, #64]	; (8003034 <vQueueAddToRegistry+0x60>)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002ffa:	4a0e      	ldr	r2, [pc, #56]	; (8003034 <vQueueAddToRegistry+0x60>)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4618      	mov	r0, r3
 800300a:	f004 f9f5 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 800300e:	4601      	mov	r1, r0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	2071      	movs	r0, #113	; 0x71
 8003016:	f003 fc09 	bl	800682c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800301a:	e006      	b.n	800302a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3301      	adds	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b07      	cmp	r3, #7
 8003026:	d9dd      	bls.n	8002fe4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	2001c3d4 	.word	0x2001c3d4

08003038 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003048:	f001 ff2c 	bl	8004ea4 <vPortEnterCritical>
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003052:	b25b      	sxtb	r3, r3
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003058:	d103      	bne.n	8003062 <vQueueWaitForMessageRestricted+0x2a>
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003068:	b25b      	sxtb	r3, r3
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d103      	bne.n	8003078 <vQueueWaitForMessageRestricted+0x40>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003078:	f001 ff44 	bl	8004f04 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	3324      	adds	r3, #36	; 0x24
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 fdeb 	bl	8003c68 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003092:	6978      	ldr	r0, [r7, #20]
 8003094:	f7ff ff1e 	bl	8002ed4 <prvUnlockQueue>
    }
 8003098:	bf00      	nop
 800309a:	3718      	adds	r7, #24
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	; 0x30
 80030a4:	af04      	add	r7, sp, #16
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4618      	mov	r0, r3
 80030b6:	f002 f819 	bl	80050ec <pvPortMalloc>
 80030ba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00e      	beq.n	80030e0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030c2:	2058      	movs	r0, #88	; 0x58
 80030c4:	f002 f812 	bl	80050ec <pvPortMalloc>
 80030c8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
 80030d6:	e005      	b.n	80030e4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80030d8:	6978      	ldr	r0, [r7, #20]
 80030da:	f002 f8e7 	bl	80052ac <vPortFree>
 80030de:	e001      	b.n	80030e4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d013      	beq.n	8003112 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030ea:	88fa      	ldrh	r2, [r7, #6]
 80030ec:	2300      	movs	r3, #0
 80030ee:	9303      	str	r3, [sp, #12]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	9302      	str	r3, [sp, #8]
 80030f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f6:	9301      	str	r3, [sp, #4]
 80030f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fa:	9300      	str	r3, [sp, #0]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68b9      	ldr	r1, [r7, #8]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f80e 	bl	8003122 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8003106:	69f8      	ldr	r0, [r7, #28]
 8003108:	f000 f8a2 	bl	8003250 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800310c:	2301      	movs	r3, #1
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e002      	b.n	8003118 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
 8003116:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003118:	69bb      	ldr	r3, [r7, #24]
    }
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b088      	sub	sp, #32
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	461a      	mov	r2, r3
 800313a:	21a5      	movs	r1, #165	; 0xa5
 800313c:	f004 faf8 	bl	8007730 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800314a:	3b01      	subs	r3, #1
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	f023 0307 	bic.w	r3, r3, #7
 8003158:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <prvInitialiseNewTask+0x58>
        __asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	617b      	str	r3, [r7, #20]
    }
 8003176:	bf00      	nop
 8003178:	e7fe      	b.n	8003178 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d01f      	beq.n	80031c0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003180:	2300      	movs	r3, #0
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	e012      	b.n	80031ac <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	4413      	add	r3, r2
 800318c:	7819      	ldrb	r1, [r3, #0]
 800318e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	3334      	adds	r3, #52	; 0x34
 8003196:	460a      	mov	r2, r1
 8003198:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d006      	beq.n	80031b4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3301      	adds	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b09      	cmp	r3, #9
 80031b0:	d9e9      	bls.n	8003186 <prvInitialiseNewTask+0x64>
 80031b2:	e000      	b.n	80031b6 <prvInitialiseNewTask+0x94>
            {
                break;
 80031b4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031be:	e003      	b.n	80031c8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d901      	bls.n	80031d2 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031ce:	2304      	movs	r3, #4
 80031d0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80031d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031dc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80031de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e0:	2200      	movs	r2, #0
 80031e2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e6:	3304      	adds	r3, #4
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f96b 	bl	80024c4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	3318      	adds	r3, #24
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff f966 	bl	80024c4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fc:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003200:	f1c3 0205 	rsb	r2, r3, #5
 8003204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003206:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800320a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800320c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800320e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003210:	3350      	adds	r3, #80	; 0x50
 8003212:	2204      	movs	r2, #4
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f004 fa8a 	bl	8007730 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	3354      	adds	r3, #84	; 0x54
 8003220:	2201      	movs	r2, #1
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f004 fa83 	bl	8007730 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	68f9      	ldr	r1, [r7, #12]
 800322e:	69b8      	ldr	r0, [r7, #24]
 8003230:	f001 fc8a 	bl	8004b48 <pxPortInitialiseStack>
 8003234:	4602      	mov	r2, r0
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003244:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003246:	bf00      	nop
 8003248:	3720      	adds	r7, #32
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003250:	b5b0      	push	{r4, r5, r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af02      	add	r7, sp, #8
 8003256:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003258:	f001 fe24 	bl	8004ea4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800325c:	4b3b      	ldr	r3, [pc, #236]	; (800334c <prvAddNewTaskToReadyList+0xfc>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	4a3a      	ldr	r2, [pc, #232]	; (800334c <prvAddNewTaskToReadyList+0xfc>)
 8003264:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003266:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <prvAddNewTaskToReadyList+0x100>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800326e:	4a38      	ldr	r2, [pc, #224]	; (8003350 <prvAddNewTaskToReadyList+0x100>)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003274:	4b35      	ldr	r3, [pc, #212]	; (800334c <prvAddNewTaskToReadyList+0xfc>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d110      	bne.n	800329e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800327c:	f000 fe28 	bl	8003ed0 <prvInitialiseTaskLists>
 8003280:	e00d      	b.n	800329e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003282:	4b34      	ldr	r3, [pc, #208]	; (8003354 <prvAddNewTaskToReadyList+0x104>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d109      	bne.n	800329e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800328a:	4b31      	ldr	r3, [pc, #196]	; (8003350 <prvAddNewTaskToReadyList+0x100>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	429a      	cmp	r2, r3
 8003296:	d802      	bhi.n	800329e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003298:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <prvAddNewTaskToReadyList+0x100>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800329e:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <prvAddNewTaskToReadyList+0x108>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <prvAddNewTaskToReadyList+0x108>)
 80032a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80032a8:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <prvAddNewTaskToReadyList+0x108>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d016      	beq.n	80032e4 <prvAddNewTaskToReadyList+0x94>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 ff77 	bl	80071ac <SEGGER_SYSVIEW_OnTaskCreate>
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	461d      	mov	r5, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	461c      	mov	r4, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	1ae3      	subs	r3, r4, r3
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	462b      	mov	r3, r5
 80032e0:	f002 f9b4 	bl	800564c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f003 ffe4 	bl	80072b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f0:	2201      	movs	r2, #1
 80032f2:	409a      	lsls	r2, r3
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <prvAddNewTaskToReadyList+0x10c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	4a18      	ldr	r2, [pc, #96]	; (800335c <prvAddNewTaskToReadyList+0x10c>)
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	4a15      	ldr	r2, [pc, #84]	; (8003360 <prvAddNewTaskToReadyList+0x110>)
 800330c:	441a      	add	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3304      	adds	r3, #4
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f7ff f8e2 	bl	80024de <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800331a:	f001 fdf3 	bl	8004f04 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800331e:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <prvAddNewTaskToReadyList+0x104>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00e      	beq.n	8003344 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003326:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <prvAddNewTaskToReadyList+0x100>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003330:	429a      	cmp	r2, r3
 8003332:	d207      	bcs.n	8003344 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003334:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <prvAddNewTaskToReadyList+0x114>)
 8003336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bdb0      	pop	{r4, r5, r7, pc}
 800334c:	20000108 	.word	0x20000108
 8003350:	20000030 	.word	0x20000030
 8003354:	20000114 	.word	0x20000114
 8003358:	20000124 	.word	0x20000124
 800335c:	20000110 	.word	0x20000110
 8003360:	20000034 	.word	0x20000034
 8003364:	e000ed04 	.word	0xe000ed04

08003368 <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <xTaskDelayUntil+0x2a>
        __asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	617b      	str	r3, [r7, #20]
    }
 800338e:	bf00      	nop
 8003390:	e7fe      	b.n	8003390 <xTaskDelayUntil+0x28>
        configASSERT( ( xTimeIncrement > 0U ) );
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <xTaskDelayUntil+0x46>
        __asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	613b      	str	r3, [r7, #16]
    }
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <xTaskDelayUntil+0x44>
        configASSERT( uxSchedulerSuspended == 0 );
 80033ae:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <xTaskDelayUntil+0xf8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <xTaskDelayUntil+0x64>
        __asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	60fb      	str	r3, [r7, #12]
    }
 80033c8:	bf00      	nop
 80033ca:	e7fe      	b.n	80033ca <xTaskDelayUntil+0x62>

        vTaskSuspendAll();
 80033cc:	f000 fa32 	bl	8003834 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80033d0:	4b24      	ldr	r3, [pc, #144]	; (8003464 <xTaskDelayUntil+0xfc>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a3a      	ldr	r2, [r7, #32]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d20b      	bcs.n	8003402 <xTaskDelayUntil+0x9a>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d211      	bcs.n	8003418 <xTaskDelayUntil+0xb0>
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	6a3b      	ldr	r3, [r7, #32]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d90d      	bls.n	8003418 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 80033fc:	2301      	movs	r3, #1
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003400:	e00a      	b.n	8003418 <xTaskDelayUntil+0xb0>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	429a      	cmp	r2, r3
 800340a:	d303      	bcc.n	8003414 <xTaskDelayUntil+0xac>
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	429a      	cmp	r2, r3
 8003412:	d901      	bls.n	8003418 <xTaskDelayUntil+0xb0>
                {
                    xShouldDelay = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <xTaskDelayUntil+0xd0>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 8003424:	2024      	movs	r0, #36	; 0x24
 8003426:	f003 f9a7 	bl	8006778 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800342a:	69fa      	ldr	r2, [r7, #28]
 800342c:	6a3b      	ldr	r3, [r7, #32]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fffe 	bl	8004434 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003438:	f000 fa0a 	bl	8003850 <xTaskResumeAll>
 800343c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d107      	bne.n	8003454 <xTaskDelayUntil+0xec>
        {
            portYIELD_WITHIN_API();
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <xTaskDelayUntil+0x100>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003456:	4618      	mov	r0, r3
 8003458:	3728      	adds	r7, #40	; 0x28
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000130 	.word	0x20000130
 8003464:	2000010c 	.word	0x2000010c
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d01b      	beq.n	80034b6 <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <vTaskDelay+0x68>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <vTaskDelay+0x30>
        __asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	60bb      	str	r3, [r7, #8]
    }
 8003498:	bf00      	nop
 800349a:	e7fe      	b.n	800349a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800349c:	f000 f9ca 	bl	8003834 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	2023      	movs	r0, #35	; 0x23
 80034a4:	f003 f986 	bl	80067b4 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034a8:	2100      	movs	r1, #0
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 ffc2 	bl	8004434 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80034b0:	f000 f9ce 	bl	8003850 <xTaskResumeAll>
 80034b4:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d107      	bne.n	80034cc <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 80034bc:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <vTaskDelay+0x6c>)
 80034be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f3bf 8f4f 	dsb	sy
 80034c8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000130 	.word	0x20000130
 80034d8:	e000ed04 	.word	0xe000ed04

080034dc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80034e4:	f001 fcde 	bl	8004ea4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d102      	bne.n	80034f4 <vTaskSuspend+0x18>
 80034ee:	4b4a      	ldr	r3, [pc, #296]	; (8003618 <vTaskSuspend+0x13c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	e000      	b.n	80034f6 <vTaskSuspend+0x1a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f003 ff7c 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 8003500:	4603      	mov	r3, r0
 8003502:	4619      	mov	r1, r3
 8003504:	2029      	movs	r0, #41	; 0x29
 8003506:	f003 f955 	bl	80067b4 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	3304      	adds	r3, #4
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff f842 	bl	8002598 <uxListRemove>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d115      	bne.n	8003546 <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	493f      	ldr	r1, [pc, #252]	; (800361c <vTaskSuspend+0x140>)
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10a      	bne.n	8003546 <vTaskSuspend+0x6a>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	2201      	movs	r2, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	4b38      	ldr	r3, [pc, #224]	; (8003620 <vTaskSuspend+0x144>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4013      	ands	r3, r2
 8003542:	4a37      	ldr	r2, [pc, #220]	; (8003620 <vTaskSuspend+0x144>)
 8003544:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d004      	beq.n	8003558 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	3318      	adds	r3, #24
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff f820 	bl	8002598 <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	211b      	movs	r1, #27
 800355c:	4618      	mov	r0, r3
 800355e:	f003 feeb 	bl	8007338 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	3304      	adds	r3, #4
 8003566:	4619      	mov	r1, r3
 8003568:	482e      	ldr	r0, [pc, #184]	; (8003624 <vTaskSuspend+0x148>)
 800356a:	f7fe ffb8 	bl	80024de <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800356e:	2300      	movs	r3, #0
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	e010      	b.n	8003596 <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	4413      	add	r3, r2
 800357a:	3354      	adds	r3, #84	; 0x54
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	4413      	add	r3, r2
 800358a:	3354      	adds	r3, #84	; 0x54
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	3301      	adds	r3, #1
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	ddeb      	ble.n	8003574 <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 800359c:	f001 fcb2 	bl	8004f04 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80035a0:	4b21      	ldr	r3, [pc, #132]	; (8003628 <vTaskSuspend+0x14c>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 80035a8:	f001 fc7c 	bl	8004ea4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 80035ac:	f000 fd0e 	bl	8003fcc <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 80035b0:	f001 fca8 	bl	8004f04 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 80035b4:	4b18      	ldr	r3, [pc, #96]	; (8003618 <vTaskSuspend+0x13c>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d127      	bne.n	800360e <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 80035be:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <vTaskSuspend+0x14c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d017      	beq.n	80035f6 <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80035c6:	4b19      	ldr	r3, [pc, #100]	; (800362c <vTaskSuspend+0x150>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <vTaskSuspend+0x108>
        __asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	60fb      	str	r3, [r7, #12]
    }
 80035e0:	bf00      	nop
 80035e2:	e7fe      	b.n	80035e2 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <vTaskSuspend+0x154>)
 80035e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80035f4:	e00b      	b.n	800360e <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <vTaskSuspend+0x148>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <vTaskSuspend+0x158>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d103      	bne.n	800360a <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <vTaskSuspend+0x13c>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    }
 8003608:	e001      	b.n	800360e <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 800360a:	f000 fa9f 	bl	8003b4c <vTaskSwitchContext>
    }
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000030 	.word	0x20000030
 800361c:	20000034 	.word	0x20000034
 8003620:	20000110 	.word	0x20000110
 8003624:	200000f4 	.word	0x200000f4
 8003628:	20000114 	.word	0x20000114
 800362c:	20000130 	.word	0x20000130
 8003630:	e000ed04 	.word	0xe000ed04
 8003634:	20000108 	.word	0x20000108

08003638 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	60fb      	str	r3, [r7, #12]
    }
 8003660:	bf00      	nop
 8003662:	e7fe      	b.n	8003662 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	4a0a      	ldr	r2, [pc, #40]	; (8003694 <prvTaskIsTaskSuspended+0x5c>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d10a      	bne.n	8003684 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	4a09      	ldr	r2, [pc, #36]	; (8003698 <prvTaskIsTaskSuspended+0x60>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d005      	beq.n	8003684 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8003680:	2301      	movs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003684:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003686:	4618      	mov	r0, r3
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	200000f4 	.word	0x200000f4
 8003698:	200000c8 	.word	0x200000c8

0800369c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	60fb      	str	r3, [r7, #12]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <vTaskResume+0x28>
        __asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	60bb      	str	r3, [r7, #8]
    }
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80036c4:	4b26      	ldr	r3, [pc, #152]	; (8003760 <vTaskResume+0xc4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d044      	beq.n	8003758 <vTaskResume+0xbc>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d041      	beq.n	8003758 <vTaskResume+0xbc>
        {
            taskENTER_CRITICAL();
 80036d4:	f001 fbe6 	bl	8004ea4 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff ffad 	bl	8003638 <prvTaskIsTaskSuspended>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d037      	beq.n	8003754 <vTaskResume+0xb8>
                {
                    traceTASK_RESUME( pxTCB );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fe86 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4619      	mov	r1, r3
 80036f0:	202a      	movs	r0, #42	; 0x2a
 80036f2:	f003 f85f 	bl	80067b4 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7fe ff4c 	bl	8002598 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4618      	mov	r0, r3
 8003704:	f003 fdd6 	bl	80072b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	2201      	movs	r2, #1
 800370e:	409a      	lsls	r2, r3
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <vTaskResume+0xc8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4313      	orrs	r3, r2
 8003716:	4a13      	ldr	r2, [pc, #76]	; (8003764 <vTaskResume+0xc8>)
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4a10      	ldr	r2, [pc, #64]	; (8003768 <vTaskResume+0xcc>)
 8003728:	441a      	add	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3304      	adds	r3, #4
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fe fed4 	bl	80024de <vListInsertEnd>

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <vTaskResume+0xc4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003740:	429a      	cmp	r2, r3
 8003742:	d307      	bcc.n	8003754 <vTaskResume+0xb8>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <vTaskResume+0xd0>)
 8003746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003754:	f001 fbd6 	bl	8004f04 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003758:	bf00      	nop
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	20000030 	.word	0x20000030
 8003764:	20000110 	.word	0x20000110
 8003768:	20000034 	.word	0x20000034
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003776:	4b27      	ldr	r3, [pc, #156]	; (8003814 <vTaskStartScheduler+0xa4>)
 8003778:	9301      	str	r3, [sp, #4]
 800377a:	2300      	movs	r3, #0
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	2300      	movs	r3, #0
 8003780:	2282      	movs	r2, #130	; 0x82
 8003782:	4925      	ldr	r1, [pc, #148]	; (8003818 <vTaskStartScheduler+0xa8>)
 8003784:	4825      	ldr	r0, [pc, #148]	; (800381c <vTaskStartScheduler+0xac>)
 8003786:	f7ff fc8b 	bl	80030a0 <xTaskCreate>
 800378a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d102      	bne.n	8003798 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003792:	f000 fec7 	bl	8004524 <xTimerCreateTimerTask>
 8003796:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d124      	bne.n	80037e8 <vTaskStartScheduler+0x78>
        __asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	60bb      	str	r3, [r7, #8]
    }
 80037b0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80037b2:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <vTaskStartScheduler+0xb0>)
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295
 80037b8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80037ba:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <vTaskStartScheduler+0xb4>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037c0:	4b19      	ldr	r3, [pc, #100]	; (8003828 <vTaskStartScheduler+0xb8>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80037c6:	4b19      	ldr	r3, [pc, #100]	; (800382c <vTaskStartScheduler+0xbc>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <vTaskStartScheduler+0xa4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d102      	bne.n	80037d8 <vTaskStartScheduler+0x68>
 80037d2:	f003 fccf 	bl	8007174 <SEGGER_SYSVIEW_OnIdle>
 80037d6:	e004      	b.n	80037e2 <vTaskStartScheduler+0x72>
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <vTaskStartScheduler+0xbc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f003 fd27 	bl	8007230 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80037e2:	f001 fa3f 	bl	8004c64 <xPortStartScheduler>
 80037e6:	e00e      	b.n	8003806 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d10a      	bne.n	8003806 <vTaskStartScheduler+0x96>
        __asm volatile
 80037f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	607b      	str	r3, [r7, #4]
    }
 8003802:	bf00      	nop
 8003804:	e7fe      	b.n	8003804 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <vTaskStartScheduler+0xc0>)
 8003808:	681b      	ldr	r3, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	2000012c 	.word	0x2000012c
 8003818:	08007798 	.word	0x08007798
 800381c:	08003ea1 	.word	0x08003ea1
 8003820:	20000128 	.word	0x20000128
 8003824:	20000114 	.word	0x20000114
 8003828:	2000010c 	.word	0x2000010c
 800382c:	20000030 	.word	0x20000030
 8003830:	2000000c 	.word	0x2000000c

08003834 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <vTaskSuspendAll+0x18>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	4a03      	ldr	r2, [pc, #12]	; (800384c <vTaskSuspendAll+0x18>)
 8003840:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	20000130 	.word	0x20000130

08003850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800385e:	4b43      	ldr	r3, [pc, #268]	; (800396c <xTaskResumeAll+0x11c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <xTaskResumeAll+0x2c>
        __asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	603b      	str	r3, [r7, #0]
    }
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800387c:	f001 fb12 	bl	8004ea4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003880:	4b3a      	ldr	r3, [pc, #232]	; (800396c <xTaskResumeAll+0x11c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3b01      	subs	r3, #1
 8003886:	4a39      	ldr	r2, [pc, #228]	; (800396c <xTaskResumeAll+0x11c>)
 8003888:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800388a:	4b38      	ldr	r3, [pc, #224]	; (800396c <xTaskResumeAll+0x11c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d165      	bne.n	800395e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <xTaskResumeAll+0x120>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d061      	beq.n	800395e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800389a:	e032      	b.n	8003902 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800389c:	4b35      	ldr	r3, [pc, #212]	; (8003974 <xTaskResumeAll+0x124>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	3318      	adds	r3, #24
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fe fe75 	bl	8002598 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	3304      	adds	r3, #4
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fe70 	bl	8002598 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 fcfa 	bl	80072b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	2201      	movs	r2, #1
 80038c6:	409a      	lsls	r2, r3
 80038c8:	4b2b      	ldr	r3, [pc, #172]	; (8003978 <xTaskResumeAll+0x128>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	4a2a      	ldr	r2, [pc, #168]	; (8003978 <xTaskResumeAll+0x128>)
 80038d0:	6013      	str	r3, [r2, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4a27      	ldr	r2, [pc, #156]	; (800397c <xTaskResumeAll+0x12c>)
 80038e0:	441a      	add	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7fe fdf8 	bl	80024de <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f2:	4b23      	ldr	r3, [pc, #140]	; (8003980 <xTaskResumeAll+0x130>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d302      	bcc.n	8003902 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 80038fc:	4b21      	ldr	r3, [pc, #132]	; (8003984 <xTaskResumeAll+0x134>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003902:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <xTaskResumeAll+0x124>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1c8      	bne.n	800389c <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003910:	f000 fb5c 	bl	8003fcc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003914:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <xTaskResumeAll+0x138>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d010      	beq.n	8003942 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003920:	f000 f858 	bl	80039d4 <xTaskIncrementTick>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <xTaskResumeAll+0x134>)
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1f1      	bne.n	8003920 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800393c:	4b12      	ldr	r3, [pc, #72]	; (8003988 <xTaskResumeAll+0x138>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003942:	4b10      	ldr	r3, [pc, #64]	; (8003984 <xTaskResumeAll+0x134>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800394a:	2301      	movs	r3, #1
 800394c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <xTaskResumeAll+0x13c>)
 8003950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800395e:	f001 fad1 	bl	8004f04 <vPortExitCritical>

    return xAlreadyYielded;
 8003962:	68bb      	ldr	r3, [r7, #8]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	20000130 	.word	0x20000130
 8003970:	20000108 	.word	0x20000108
 8003974:	200000c8 	.word	0x200000c8
 8003978:	20000110 	.word	0x20000110
 800397c:	20000034 	.word	0x20000034
 8003980:	20000030 	.word	0x20000030
 8003984:	2000011c 	.word	0x2000011c
 8003988:	20000118 	.word	0x20000118
 800398c:	e000ed04 	.word	0xe000ed04

08003990 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003996:	4b05      	ldr	r3, [pc, #20]	; (80039ac <xTaskGetTickCount+0x1c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800399c:	687b      	ldr	r3, [r7, #4]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	2000010c 	.word	0x2000010c

080039b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039b6:	f001 fb59 	bl	800506c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80039be:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <xTaskGetTickCountFromISR+0x20>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80039c4:	683b      	ldr	r3, [r7, #0]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000010c 	.word	0x2000010c

080039d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039de:	4b50      	ldr	r3, [pc, #320]	; (8003b20 <xTaskIncrementTick+0x14c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 8092 	bne.w	8003b0c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80039e8:	4b4e      	ldr	r3, [pc, #312]	; (8003b24 <xTaskIncrementTick+0x150>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3301      	adds	r3, #1
 80039ee:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80039f0:	4a4c      	ldr	r2, [pc, #304]	; (8003b24 <xTaskIncrementTick+0x150>)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d120      	bne.n	8003a3e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80039fc:	4b4a      	ldr	r3, [pc, #296]	; (8003b28 <xTaskIncrementTick+0x154>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <xTaskIncrementTick+0x48>
        __asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	603b      	str	r3, [r7, #0]
    }
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <xTaskIncrementTick+0x46>
 8003a1c:	4b42      	ldr	r3, [pc, #264]	; (8003b28 <xTaskIncrementTick+0x154>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b42      	ldr	r3, [pc, #264]	; (8003b2c <xTaskIncrementTick+0x158>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a40      	ldr	r2, [pc, #256]	; (8003b28 <xTaskIncrementTick+0x154>)
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4a40      	ldr	r2, [pc, #256]	; (8003b2c <xTaskIncrementTick+0x158>)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <xTaskIncrementTick+0x15c>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3301      	adds	r3, #1
 8003a36:	4a3e      	ldr	r2, [pc, #248]	; (8003b30 <xTaskIncrementTick+0x15c>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	f000 fac7 	bl	8003fcc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <xTaskIncrementTick+0x160>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d34c      	bcc.n	8003ae2 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a48:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <xTaskIncrementTick+0x154>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d104      	bne.n	8003a5c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a52:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <xTaskIncrementTick+0x160>)
 8003a54:	f04f 32ff 	mov.w	r2, #4294967295
 8003a58:	601a      	str	r2, [r3, #0]
                    break;
 8003a5a:	e042      	b.n	8003ae2 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5c:	4b32      	ldr	r3, [pc, #200]	; (8003b28 <xTaskIncrementTick+0x154>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d203      	bcs.n	8003a7c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003a74:	4a2f      	ldr	r2, [pc, #188]	; (8003b34 <xTaskIncrementTick+0x160>)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003a7a:	e032      	b.n	8003ae2 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fd89 	bl	8002598 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d004      	beq.n	8003a98 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	3318      	adds	r3, #24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fd80 	bl	8002598 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fc0a 	bl	80072b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <xTaskIncrementTick+0x164>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <xTaskIncrementTick+0x164>)
 8003ab0:	6013      	str	r3, [r2, #0]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <xTaskIncrementTick+0x168>)
 8003ac0:	441a      	add	r2, r3
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe fd08 	bl	80024de <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad2:	4b1b      	ldr	r3, [pc, #108]	; (8003b40 <xTaskIncrementTick+0x16c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d3b5      	bcc.n	8003a48 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae0:	e7b2      	b.n	8003a48 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <xTaskIncrementTick+0x16c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ae8:	4914      	ldr	r1, [pc, #80]	; (8003b3c <xTaskIncrementTick+0x168>)
 8003aea:	4613      	mov	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d901      	bls.n	8003afe <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003afe:	4b11      	ldr	r3, [pc, #68]	; (8003b44 <xTaskIncrementTick+0x170>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d007      	beq.n	8003b16 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003b06:	2301      	movs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e004      	b.n	8003b16 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003b0c:	4b0e      	ldr	r3, [pc, #56]	; (8003b48 <xTaskIncrementTick+0x174>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	4a0d      	ldr	r2, [pc, #52]	; (8003b48 <xTaskIncrementTick+0x174>)
 8003b14:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003b16:	697b      	ldr	r3, [r7, #20]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	20000130 	.word	0x20000130
 8003b24:	2000010c 	.word	0x2000010c
 8003b28:	200000c0 	.word	0x200000c0
 8003b2c:	200000c4 	.word	0x200000c4
 8003b30:	20000120 	.word	0x20000120
 8003b34:	20000128 	.word	0x20000128
 8003b38:	20000110 	.word	0x20000110
 8003b3c:	20000034 	.word	0x20000034
 8003b40:	20000030 	.word	0x20000030
 8003b44:	2000011c 	.word	0x2000011c
 8003b48:	20000118 	.word	0x20000118

08003b4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003b52:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <vTaskSwitchContext+0xbc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003b5a:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <vTaskSwitchContext+0xc0>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003b60:	e04d      	b.n	8003bfe <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003b62:	4b2a      	ldr	r3, [pc, #168]	; (8003c0c <vTaskSwitchContext+0xc0>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b68:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <vTaskSwitchContext+0xc4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	fab3 f383 	clz	r3, r3
 8003b74:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	f1c3 031f 	rsb	r3, r3, #31
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	4925      	ldr	r1, [pc, #148]	; (8003c14 <vTaskSwitchContext+0xc8>)
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	607b      	str	r3, [r7, #4]
    }
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <vTaskSwitchContext+0x5a>
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <vTaskSwitchContext+0xc8>)
 8003bb4:	4413      	add	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3308      	adds	r3, #8
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d104      	bne.n	8003bd8 <vTaskSwitchContext+0x8c>
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	605a      	str	r2, [r3, #4]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <vTaskSwitchContext+0xcc>)
 8003be0:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003be2:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <vTaskSwitchContext+0xcc>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b0d      	ldr	r3, [pc, #52]	; (8003c1c <vTaskSwitchContext+0xd0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d102      	bne.n	8003bf4 <vTaskSwitchContext+0xa8>
 8003bee:	f003 fac1 	bl	8007174 <SEGGER_SYSVIEW_OnIdle>
}
 8003bf2:	e004      	b.n	8003bfe <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003bf4:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <vTaskSwitchContext+0xcc>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f003 fb19 	bl	8007230 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000130 	.word	0x20000130
 8003c0c:	2000011c 	.word	0x2000011c
 8003c10:	20000110 	.word	0x20000110
 8003c14:	20000034 	.word	0x20000034
 8003c18:	20000030 	.word	0x20000030
 8003c1c:	2000012c 	.word	0x2000012c

08003c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	60fb      	str	r3, [r7, #12]
    }
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c46:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <vTaskPlaceOnEventList+0x44>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3318      	adds	r3, #24
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7fe fc69 	bl	8002526 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c54:	2101      	movs	r1, #1
 8003c56:	6838      	ldr	r0, [r7, #0]
 8003c58:	f000 fbec 	bl	8004434 <prvAddCurrentTaskToDelayedList>
}
 8003c5c:	bf00      	nop
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000030 	.word	0x20000030

08003c68 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	617b      	str	r3, [r7, #20]
    }
 8003c8c:	bf00      	nop
 8003c8e:	e7fe      	b.n	8003c8e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <vTaskPlaceOnEventListRestricted+0x58>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3318      	adds	r3, #24
 8003c96:	4619      	mov	r1, r3
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f7fe fc20 	bl	80024de <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003caa:	2024      	movs	r0, #36	; 0x24
 8003cac:	f002 fd64 	bl	8006778 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	68b8      	ldr	r0, [r7, #8]
 8003cb4:	f000 fbbe 	bl	8004434 <prvAddCurrentTaskToDelayedList>
    }
 8003cb8:	bf00      	nop
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000030 	.word	0x20000030

08003cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10a      	bne.n	8003cf0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	60fb      	str	r3, [r7, #12]
    }
 8003cec:	bf00      	nop
 8003cee:	e7fe      	b.n	8003cee <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fc4f 	bl	8002598 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <xTaskRemoveFromEventList+0xb4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d120      	bne.n	8003d44 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fc46 	bl	8002598 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f003 fad0 	bl	80072b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	4b17      	ldr	r3, [pc, #92]	; (8003d7c <xTaskRemoveFromEventList+0xb8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <xTaskRemoveFromEventList+0xb8>)
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <xTaskRemoveFromEventList+0xbc>)
 8003d34:	441a      	add	r2, r3
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	f7fe fbce 	bl	80024de <vListInsertEnd>
 8003d42:	e005      	b.n	8003d50 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	3318      	adds	r3, #24
 8003d48:	4619      	mov	r1, r3
 8003d4a:	480e      	ldr	r0, [pc, #56]	; (8003d84 <xTaskRemoveFromEventList+0xc0>)
 8003d4c:	f7fe fbc7 	bl	80024de <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <xTaskRemoveFromEventList+0xc4>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d905      	bls.n	8003d6a <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <xTaskRemoveFromEventList+0xc8>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	e001      	b.n	8003d6e <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003d6e:	697b      	ldr	r3, [r7, #20]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000130 	.word	0x20000130
 8003d7c:	20000110 	.word	0x20000110
 8003d80:	20000034 	.word	0x20000034
 8003d84:	200000c8 	.word	0x200000c8
 8003d88:	20000030 	.word	0x20000030
 8003d8c:	2000011c 	.word	0x2000011c

08003d90 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <vTaskInternalSetTimeOutState+0x24>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <vTaskInternalSetTimeOutState+0x28>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	605a      	str	r2, [r3, #4]
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	20000120 	.word	0x20000120
 8003db8:	2000010c 	.word	0x2000010c

08003dbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	613b      	str	r3, [r7, #16]
    }
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dec:	f383 8811 	msr	BASEPRI, r3
 8003df0:	f3bf 8f6f 	isb	sy
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	60fb      	str	r3, [r7, #12]
    }
 8003dfa:	bf00      	nop
 8003dfc:	e7fe      	b.n	8003dfc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003dfe:	f001 f851 	bl	8004ea4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003e02:	4b1f      	ldr	r3, [pc, #124]	; (8003e80 <xTaskCheckForTimeOut+0xc4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1a:	d102      	bne.n	8003e22 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	e026      	b.n	8003e70 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b17      	ldr	r3, [pc, #92]	; (8003e84 <xTaskCheckForTimeOut+0xc8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d00a      	beq.n	8003e44 <xTaskCheckForTimeOut+0x88>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d305      	bcc.n	8003e44 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	e015      	b.n	8003e70 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d20b      	bcs.n	8003e66 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad2      	subs	r2, r2, r3
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff98 	bl	8003d90 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
 8003e64:	e004      	b.n	8003e70 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e70:	f001 f848 	bl	8004f04 <vPortExitCritical>

    return xReturn;
 8003e74:	69fb      	ldr	r3, [r7, #28]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3720      	adds	r7, #32
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	2000010c 	.word	0x2000010c
 8003e84:	20000120 	.word	0x20000120

08003e88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <vTaskMissedYield+0x14>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	2000011c 	.word	0x2000011c

08003ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003ea8:	f000 f852 	bl	8003f50 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <prvIdleTask+0x28>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d9f9      	bls.n	8003ea8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <prvIdleTask+0x2c>)
 8003eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ec4:	e7f0      	b.n	8003ea8 <prvIdleTask+0x8>
 8003ec6:	bf00      	nop
 8003ec8:	20000034 	.word	0x20000034
 8003ecc:	e000ed04 	.word	0xe000ed04

08003ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	e00c      	b.n	8003ef6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4a12      	ldr	r2, [pc, #72]	; (8003f30 <prvInitialiseTaskLists+0x60>)
 8003ee8:	4413      	add	r3, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7fe faca 	bl	8002484 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d9ef      	bls.n	8003edc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003efc:	480d      	ldr	r0, [pc, #52]	; (8003f34 <prvInitialiseTaskLists+0x64>)
 8003efe:	f7fe fac1 	bl	8002484 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003f02:	480d      	ldr	r0, [pc, #52]	; (8003f38 <prvInitialiseTaskLists+0x68>)
 8003f04:	f7fe fabe 	bl	8002484 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003f08:	480c      	ldr	r0, [pc, #48]	; (8003f3c <prvInitialiseTaskLists+0x6c>)
 8003f0a:	f7fe fabb 	bl	8002484 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003f0e:	480c      	ldr	r0, [pc, #48]	; (8003f40 <prvInitialiseTaskLists+0x70>)
 8003f10:	f7fe fab8 	bl	8002484 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003f14:	480b      	ldr	r0, [pc, #44]	; (8003f44 <prvInitialiseTaskLists+0x74>)
 8003f16:	f7fe fab5 	bl	8002484 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <prvInitialiseTaskLists+0x78>)
 8003f1c:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <prvInitialiseTaskLists+0x64>)
 8003f1e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f20:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <prvInitialiseTaskLists+0x7c>)
 8003f22:	4a05      	ldr	r2, [pc, #20]	; (8003f38 <prvInitialiseTaskLists+0x68>)
 8003f24:	601a      	str	r2, [r3, #0]
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000034 	.word	0x20000034
 8003f34:	20000098 	.word	0x20000098
 8003f38:	200000ac 	.word	0x200000ac
 8003f3c:	200000c8 	.word	0x200000c8
 8003f40:	200000dc 	.word	0x200000dc
 8003f44:	200000f4 	.word	0x200000f4
 8003f48:	200000c0 	.word	0x200000c0
 8003f4c:	200000c4 	.word	0x200000c4

08003f50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f56:	e019      	b.n	8003f8c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003f58:	f000 ffa4 	bl	8004ea4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f5c:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <prvCheckTasksWaitingTermination+0x50>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe fb15 	bl	8002598 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <prvCheckTasksWaitingTermination+0x54>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <prvCheckTasksWaitingTermination+0x54>)
 8003f76:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f78:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <prvCheckTasksWaitingTermination+0x58>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	; (8003fa8 <prvCheckTasksWaitingTermination+0x58>)
 8003f80:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f82:	f000 ffbf 	bl	8004f04 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f810 	bl	8003fac <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <prvCheckTasksWaitingTermination+0x58>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e1      	bne.n	8003f58 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f94:	bf00      	nop
 8003f96:	bf00      	nop
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	200000dc 	.word	0x200000dc
 8003fa4:	20000108 	.word	0x20000108
 8003fa8:	200000f0 	.word	0x200000f0

08003fac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f001 f977 	bl	80052ac <vPortFree>
                vPortFree( pxTCB );
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f001 f974 	bl	80052ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003fc4:	bf00      	nop
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <prvResetNextTaskUnblockTime+0x30>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003fda:	4b09      	ldr	r3, [pc, #36]	; (8004000 <prvResetNextTaskUnblockTime+0x34>)
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fe2:	e005      	b.n	8003ff0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <prvResetNextTaskUnblockTime+0x30>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <prvResetNextTaskUnblockTime+0x34>)
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	200000c0 	.word	0x200000c0
 8004000:	20000128 	.word	0x20000128

08004004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800400a:	4b0b      	ldr	r3, [pc, #44]	; (8004038 <xTaskGetSchedulerState+0x34>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d102      	bne.n	8004018 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004012:	2301      	movs	r3, #1
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	e008      	b.n	800402a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004018:	4b08      	ldr	r3, [pc, #32]	; (800403c <xTaskGetSchedulerState+0x38>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004020:	2302      	movs	r3, #2
 8004022:	607b      	str	r3, [r7, #4]
 8004024:	e001      	b.n	800402a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800402a:	687b      	ldr	r3, [r7, #4]
    }
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000114 	.word	0x20000114
 800403c:	20000130 	.word	0x20000130

08004040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800404c:	2300      	movs	r3, #0
 800404e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d068      	beq.n	8004128 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004056:	4b37      	ldr	r3, [pc, #220]	; (8004134 <xTaskPriorityDisinherit+0xf4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	429a      	cmp	r2, r3
 800405e:	d00a      	beq.n	8004076 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60fb      	str	r3, [r7, #12]
    }
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10a      	bne.n	8004094 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800407e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004082:	f383 8811 	msr	BASEPRI, r3
 8004086:	f3bf 8f6f 	isb	sy
 800408a:	f3bf 8f4f 	dsb	sy
 800408e:	60bb      	str	r3, [r7, #8]
    }
 8004090:	bf00      	nop
 8004092:	e7fe      	b.n	8004092 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	1e5a      	subs	r2, r3, #1
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d03e      	beq.n	8004128 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d13a      	bne.n	8004128 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe fa6e 	bl	8002598 <uxListRemove>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10a      	bne.n	80040d8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	2201      	movs	r2, #1
 80040c8:	fa02 f303 	lsl.w	r3, r2, r3
 80040cc:	43da      	mvns	r2, r3
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <xTaskPriorityDisinherit+0xf8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4013      	ands	r3, r2
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <xTaskPriorityDisinherit+0xf8>)
 80040d6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4619      	mov	r1, r3
 80040dc:	204a      	movs	r0, #74	; 0x4a
 80040de:	f002 fb69 	bl	80067b4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	f1c3 0205 	rsb	r2, r3, #5
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	2201      	movs	r2, #1
 80040fc:	409a      	lsls	r2, r3
 80040fe:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <xTaskPriorityDisinherit+0xf8>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4313      	orrs	r3, r2
 8004104:	4a0c      	ldr	r2, [pc, #48]	; (8004138 <xTaskPriorityDisinherit+0xf8>)
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4a09      	ldr	r2, [pc, #36]	; (800413c <xTaskPriorityDisinherit+0xfc>)
 8004116:	441a      	add	r2, r3
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	3304      	adds	r3, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f7fe f9dd 	bl	80024de <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004128:	697b      	ldr	r3, [r7, #20]
    }
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000030 	.word	0x20000030
 8004138:	20000110 	.word	0x20000110
 800413c:	20000034 	.word	0x20000034

08004140 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	613b      	str	r3, [r7, #16]
    }
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800416a:	f000 fe9b 	bl	8004ea4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800416e:	4b36      	ldr	r3, [pc, #216]	; (8004248 <xTaskGenericNotifyWait+0x108>)
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4413      	add	r3, r2
 8004176:	3354      	adds	r3, #84	; 0x54
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b02      	cmp	r3, #2
 800417e:	d022      	beq.n	80041c6 <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004180:	4b31      	ldr	r3, [pc, #196]	; (8004248 <xTaskGenericNotifyWait+0x108>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	3214      	adds	r2, #20
 8004188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	43d2      	mvns	r2, r2
 8004190:	4011      	ands	r1, r2
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	3214      	adds	r2, #20
 8004196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800419a:	4b2b      	ldr	r3, [pc, #172]	; (8004248 <xTaskGenericNotifyWait+0x108>)
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	3354      	adds	r3, #84	; 0x54
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00b      	beq.n	80041c6 <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041ae:	2101      	movs	r1, #1
 80041b0:	6a38      	ldr	r0, [r7, #32]
 80041b2:	f000 f93f 	bl	8004434 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80041b6:	4b25      	ldr	r3, [pc, #148]	; (800424c <xTaskGenericNotifyWait+0x10c>)
 80041b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80041c6:	f000 fe9d 	bl	8004f04 <vPortExitCritical>

        taskENTER_CRITICAL();
 80041ca:	f000 fe6b 	bl	8004ea4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	4613      	mov	r3, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	68b9      	ldr	r1, [r7, #8]
 80041da:	2040      	movs	r0, #64	; 0x40
 80041dc:	f002 fbf6 	bl	80069cc <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d007      	beq.n	80041f6 <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80041e6:	4b18      	ldr	r3, [pc, #96]	; (8004248 <xTaskGenericNotifyWait+0x108>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	3214      	adds	r2, #20
 80041ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80041f6:	4b14      	ldr	r3, [pc, #80]	; (8004248 <xTaskGenericNotifyWait+0x108>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4413      	add	r3, r2
 80041fe:	3354      	adds	r3, #84	; 0x54
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b02      	cmp	r3, #2
 8004206:	d002      	beq.n	800420e <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e00e      	b.n	800422c <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <xTaskGenericNotifyWait+0x108>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	3214      	adds	r2, #20
 8004216:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	43d2      	mvns	r2, r2
 800421e:	4011      	ands	r1, r2
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	3214      	adds	r2, #20
 8004224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004228:	2301      	movs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <xTaskGenericNotifyWait+0x108>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	3354      	adds	r3, #84	; 0x54
 8004236:	2200      	movs	r2, #0
 8004238:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800423a:	f000 fe63 	bl	8004f04 <vPortExitCritical>

        return xReturn;
 800423e:	697b      	ldr	r3, [r7, #20]
    }
 8004240:	4618      	mov	r0, r3
 8004242:	3718      	adds	r7, #24
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000030 	.word	0x20000030
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004250:	b580      	push	{r7, lr}
 8004252:	b08e      	sub	sp, #56	; 0x38
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800425e:	2301      	movs	r3, #1
 8004260:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <xTaskGenericNotify+0x2e>
        __asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	623b      	str	r3, [r7, #32]
    }
 800427a:	bf00      	nop
 800427c:	e7fe      	b.n	800427c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xTaskGenericNotify+0x4a>
        __asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	61fb      	str	r3, [r7, #28]
    }
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28

        taskENTER_CRITICAL();
 800429e:	f000 fe01 	bl	8004ea4 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 80042a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d006      	beq.n	80042b6 <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	3214      	adds	r2, #20
 80042ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80042b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	4413      	add	r3, r2
 80042bc:	3354      	adds	r3, #84	; 0x54
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80042c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4413      	add	r3, r2
 80042ca:	3354      	adds	r3, #84	; 0x54
 80042cc:	2202      	movs	r2, #2
 80042ce:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d83b      	bhi.n	800434e <xTaskGenericNotify+0xfe>
 80042d6:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <xTaskGenericNotify+0x8c>)
 80042d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042dc:	0800436d 	.word	0x0800436d
 80042e0:	080042f1 	.word	0x080042f1
 80042e4:	0800430d 	.word	0x0800430d
 80042e8:	08004325 	.word	0x08004325
 80042ec:	08004333 	.word	0x08004333
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	3214      	adds	r2, #20
 80042f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	ea42 0103 	orr.w	r1, r2, r3
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	3214      	adds	r2, #20
 8004306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800430a:	e032      	b.n	8004372 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	3214      	adds	r2, #20
 8004312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004316:	1c59      	adds	r1, r3, #1
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	3214      	adds	r2, #20
 800431e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004322:	e026      	b.n	8004372 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	3214      	adds	r2, #20
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004330:	e01f      	b.n	8004372 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004332:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004336:	2b02      	cmp	r3, #2
 8004338:	d006      	beq.n	8004348 <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	68ba      	ldr	r2, [r7, #8]
 800433e:	3214      	adds	r2, #20
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004346:	e014      	b.n	8004372 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8004348:	2300      	movs	r3, #0
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 800434c:	e011      	b.n	8004372 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800434e:	4b34      	ldr	r3, [pc, #208]	; (8004420 <xTaskGenericNotify+0x1d0>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <xTaskGenericNotify+0x120>
        __asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	61bb      	str	r3, [r7, #24]
    }
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <xTaskGenericNotify+0x11a>
                    break;
 800436c:	bf00      	nop
 800436e:	e000      	b.n	8004372 <xTaskGenericNotify+0x122>

                    break;
 8004370:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	4618      	mov	r0, r3
 8004376:	f003 f83f 	bl	80073f8 <SEGGER_SYSVIEW_ShrinkId>
 800437a:	4601      	mov	r1, r0
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	4613      	mov	r3, r2
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	203e      	movs	r0, #62	; 0x3e
 8004388:	f002 fb20 	bl	80069cc <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800438c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004390:	2b01      	cmp	r3, #1
 8004392:	d13d      	bne.n	8004410 <xTaskGenericNotify+0x1c0>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	3304      	adds	r3, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe f8fd 	bl	8002598 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800439e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a0:	4618      	mov	r0, r3
 80043a2:	f002 ff87 	bl	80072b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	2201      	movs	r2, #1
 80043ac:	409a      	lsls	r2, r3
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <xTaskGenericNotify+0x1d4>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <xTaskGenericNotify+0x1d4>)
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4a18      	ldr	r2, [pc, #96]	; (8004428 <xTaskGenericNotify+0x1d8>)
 80043c6:	441a      	add	r2, r3
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	3304      	adds	r3, #4
 80043cc:	4619      	mov	r1, r3
 80043ce:	4610      	mov	r0, r2
 80043d0:	f7fe f885 	bl	80024de <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00a      	beq.n	80043f2 <xTaskGenericNotify+0x1a2>
        __asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	617b      	str	r3, [r7, #20]
    }
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <xTaskGenericNotify+0x1a0>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f6:	4b0d      	ldr	r3, [pc, #52]	; (800442c <xTaskGenericNotify+0x1dc>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d907      	bls.n	8004410 <xTaskGenericNotify+0x1c0>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8004400:	4b0b      	ldr	r3, [pc, #44]	; (8004430 <xTaskGenericNotify+0x1e0>)
 8004402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004406:	601a      	str	r2, [r3, #0]
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004410:	f000 fd78 	bl	8004f04 <vPortExitCritical>

        return xReturn;
 8004414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8004416:	4618      	mov	r0, r3
 8004418:	3730      	adds	r7, #48	; 0x30
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	2000010c 	.word	0x2000010c
 8004424:	20000110 	.word	0x20000110
 8004428:	20000034 	.word	0x20000034
 800442c:	20000030 	.word	0x20000030
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800443e:	4b32      	ldr	r3, [pc, #200]	; (8004508 <prvAddCurrentTaskToDelayedList+0xd4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004444:	4b31      	ldr	r3, [pc, #196]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3304      	adds	r3, #4
 800444a:	4618      	mov	r0, r3
 800444c:	f7fe f8a4 	bl	8002598 <uxListRemove>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004456:	4b2d      	ldr	r3, [pc, #180]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	2201      	movs	r2, #1
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43da      	mvns	r2, r3
 8004464:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <prvAddCurrentTaskToDelayedList+0xdc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4013      	ands	r3, r2
 800446a:	4a29      	ldr	r2, [pc, #164]	; (8004510 <prvAddCurrentTaskToDelayedList+0xdc>)
 800446c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d110      	bne.n	8004498 <prvAddCurrentTaskToDelayedList+0x64>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800447c:	4b23      	ldr	r3, [pc, #140]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	211b      	movs	r1, #27
 8004482:	4618      	mov	r0, r3
 8004484:	f002 ff58 	bl	8007338 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004488:	4b20      	ldr	r3, [pc, #128]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3304      	adds	r3, #4
 800448e:	4619      	mov	r1, r3
 8004490:	4820      	ldr	r0, [pc, #128]	; (8004514 <prvAddCurrentTaskToDelayedList+0xe0>)
 8004492:	f7fe f824 	bl	80024de <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004496:	e032      	b.n	80044fe <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4413      	add	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044a0:	4b1a      	ldr	r3, [pc, #104]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d20f      	bcs.n	80044d0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80044b0:	4b16      	ldr	r3, [pc, #88]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2104      	movs	r1, #4
 80044b6:	4618      	mov	r0, r3
 80044b8:	f002 ff3e 	bl	8007338 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044bc:	4b16      	ldr	r3, [pc, #88]	; (8004518 <prvAddCurrentTaskToDelayedList+0xe4>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b12      	ldr	r3, [pc, #72]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7fe f82c 	bl	8002526 <vListInsert>
}
 80044ce:	e016      	b.n	80044fe <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2104      	movs	r1, #4
 80044d6:	4618      	mov	r0, r3
 80044d8:	f002 ff2e 	bl	8007338 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <prvAddCurrentTaskToDelayedList+0xe8>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <prvAddCurrentTaskToDelayedList+0xd8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	3304      	adds	r3, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f7fe f81c 	bl	8002526 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80044ee:	4b0c      	ldr	r3, [pc, #48]	; (8004520 <prvAddCurrentTaskToDelayedList+0xec>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d202      	bcs.n	80044fe <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80044f8:	4a09      	ldr	r2, [pc, #36]	; (8004520 <prvAddCurrentTaskToDelayedList+0xec>)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	6013      	str	r3, [r2, #0]
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	2000010c 	.word	0x2000010c
 800450c:	20000030 	.word	0x20000030
 8004510:	20000110 	.word	0x20000110
 8004514:	200000f4 	.word	0x200000f4
 8004518:	200000c4 	.word	0x200000c4
 800451c:	200000c0 	.word	0x200000c0
 8004520:	20000128 	.word	0x20000128

08004524 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800452e:	f000 fad5 	bl	8004adc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004532:	4b11      	ldr	r3, [pc, #68]	; (8004578 <xTimerCreateTimerTask+0x54>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <xTimerCreateTimerTask+0x58>)
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	2302      	movs	r3, #2
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	2300      	movs	r3, #0
 8004544:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004548:	490d      	ldr	r1, [pc, #52]	; (8004580 <xTimerCreateTimerTask+0x5c>)
 800454a:	480e      	ldr	r0, [pc, #56]	; (8004584 <xTimerCreateTimerTask+0x60>)
 800454c:	f7fe fda8 	bl	80030a0 <xTaskCreate>
 8004550:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10a      	bne.n	800456e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	603b      	str	r3, [r7, #0]
    }
 800456a:	bf00      	nop
 800456c:	e7fe      	b.n	800456c <xTimerCreateTimerTask+0x48>
        return xReturn;
 800456e:	687b      	ldr	r3, [r7, #4]
    }
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000164 	.word	0x20000164
 800457c:	20000168 	.word	0x20000168
 8004580:	080077a0 	.word	0x080077a0
 8004584:	080046bd 	.word	0x080046bd

08004588 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8004588:	b580      	push	{r7, lr}
 800458a:	b08a      	sub	sp, #40	; 0x28
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10a      	bne.n	80045b6 <xTimerGenericCommand+0x2e>
        __asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	623b      	str	r3, [r7, #32]
    }
 80045b2:	bf00      	nop
 80045b4:	e7fe      	b.n	80045b4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <xTimerGenericCommand+0x98>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d02a      	beq.n	8004614 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b05      	cmp	r3, #5
 80045ce:	dc18      	bgt.n	8004602 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80045d0:	f7ff fd18 	bl	8004004 <xTaskGetSchedulerState>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d109      	bne.n	80045ee <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <xTimerGenericCommand+0x98>)
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	f107 0114 	add.w	r1, r7, #20
 80045e2:	2300      	movs	r3, #0
 80045e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e6:	f7fe f8f1 	bl	80027cc <xQueueGenericSend>
 80045ea:	6278      	str	r0, [r7, #36]	; 0x24
 80045ec:	e012      	b.n	8004614 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <xTimerGenericCommand+0x98>)
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	f107 0114 	add.w	r1, r7, #20
 80045f6:	2300      	movs	r3, #0
 80045f8:	2200      	movs	r2, #0
 80045fa:	f7fe f8e7 	bl	80027cc <xQueueGenericSend>
 80045fe:	6278      	str	r0, [r7, #36]	; 0x24
 8004600:	e008      	b.n	8004614 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004602:	4b07      	ldr	r3, [pc, #28]	; (8004620 <xTimerGenericCommand+0x98>)
 8004604:	6818      	ldr	r0, [r3, #0]
 8004606:	f107 0114 	add.w	r1, r7, #20
 800460a:	2300      	movs	r3, #0
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	f7fe fa03 	bl	8002a18 <xQueueGenericSendFromISR>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004616:	4618      	mov	r0, r3
 8004618:	3728      	adds	r7, #40	; 0x28
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000164 	.word	0x20000164

08004624 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af02      	add	r7, sp, #8
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800462e:	4b22      	ldr	r3, [pc, #136]	; (80046b8 <prvProcessExpiredTimer+0x94>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	3304      	adds	r3, #4
 800463c:	4618      	mov	r0, r3
 800463e:	f7fd ffab 	bl	8002598 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d022      	beq.n	8004696 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	18d1      	adds	r1, r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	6978      	ldr	r0, [r7, #20]
 800465e:	f000 f8d1 	bl	8004804 <prvInsertTimerInActiveList>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01f      	beq.n	80046a8 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004668:	2300      	movs	r3, #0
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2300      	movs	r3, #0
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	2100      	movs	r1, #0
 8004672:	6978      	ldr	r0, [r7, #20]
 8004674:	f7ff ff88 	bl	8004588 <xTimerGenericCommand>
 8004678:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d113      	bne.n	80046a8 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60fb      	str	r3, [r7, #12]
    }
 8004692:	bf00      	nop
 8004694:	e7fe      	b.n	8004694 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	6978      	ldr	r0, [r7, #20]
 80046ae:	4798      	blx	r3
    }
 80046b0:	bf00      	nop
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	2000015c 	.word	0x2000015c

080046bc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046c4:	f107 0308 	add.w	r3, r7, #8
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 f857 	bl	800477c <prvGetNextExpireTime>
 80046ce:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4619      	mov	r1, r3
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f803 	bl	80046e0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80046da:	f000 f8d5 	bl	8004888 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046de:	e7f1      	b.n	80046c4 <prvTimerTask+0x8>

080046e0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80046ea:	f7ff f8a3 	bl	8003834 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f866 	bl	80047c4 <prvSampleTimeNow>
 80046f8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d130      	bne.n	8004762 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10a      	bne.n	800471c <prvProcessTimerOrBlockTask+0x3c>
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	429a      	cmp	r2, r3
 800470c:	d806      	bhi.n	800471c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800470e:	f7ff f89f 	bl	8003850 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f7ff ff85 	bl	8004624 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800471a:	e024      	b.n	8004766 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004722:	4b13      	ldr	r3, [pc, #76]	; (8004770 <prvProcessTimerOrBlockTask+0x90>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <prvProcessTimerOrBlockTask+0x50>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <prvProcessTimerOrBlockTask+0x52>
 8004730:	2300      	movs	r3, #0
 8004732:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <prvProcessTimerOrBlockTask+0x94>)
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	4619      	mov	r1, r3
 8004742:	f7fe fc79 	bl	8003038 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004746:	f7ff f883 	bl	8003850 <xTaskResumeAll>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10a      	bne.n	8004766 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <prvProcessTimerOrBlockTask+0x98>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
    }
 8004760:	e001      	b.n	8004766 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004762:	f7ff f875 	bl	8003850 <xTaskResumeAll>
    }
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000160 	.word	0x20000160
 8004774:	20000164 	.word	0x20000164
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004784:	4b0e      	ldr	r3, [pc, #56]	; (80047c0 <prvGetNextExpireTime+0x44>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <prvGetNextExpireTime+0x16>
 800478e:	2201      	movs	r2, #1
 8004790:	e000      	b.n	8004794 <prvGetNextExpireTime+0x18>
 8004792:	2200      	movs	r2, #0
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d105      	bne.n	80047ac <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047a0:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <prvGetNextExpireTime+0x44>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e001      	b.n	80047b0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80047b0:	68fb      	ldr	r3, [r7, #12]
    }
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	2000015c 	.word	0x2000015c

080047c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80047cc:	f7ff f8e0 	bl	8003990 <xTaskGetTickCount>
 80047d0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <prvSampleTimeNow+0x3c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d205      	bcs.n	80047e8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80047dc:	f000 f91a 	bl	8004a14 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e002      	b.n	80047ee <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80047ee:	4a04      	ldr	r2, [pc, #16]	; (8004800 <prvSampleTimeNow+0x3c>)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80047f4:	68fb      	ldr	r3, [r7, #12]
    }
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	2000016c 	.word	0x2000016c

08004804 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	429a      	cmp	r2, r3
 8004828:	d812      	bhi.n	8004850 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	429a      	cmp	r2, r3
 8004836:	d302      	bcc.n	800483e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	617b      	str	r3, [r7, #20]
 800483c:	e01b      	b.n	8004876 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800483e:	4b10      	ldr	r3, [pc, #64]	; (8004880 <prvInsertTimerInActiveList+0x7c>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3304      	adds	r3, #4
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7fd fe6c 	bl	8002526 <vListInsert>
 800484e:	e012      	b.n	8004876 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d206      	bcs.n	8004866 <prvInsertTimerInActiveList+0x62>
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d302      	bcc.n	8004866 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004860:	2301      	movs	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e007      	b.n	8004876 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004866:	4b07      	ldr	r3, [pc, #28]	; (8004884 <prvInsertTimerInActiveList+0x80>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3304      	adds	r3, #4
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f7fd fe58 	bl	8002526 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004876:	697b      	ldr	r3, [r7, #20]
    }
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	20000160 	.word	0x20000160
 8004884:	2000015c 	.word	0x2000015c

08004888 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004888:	b580      	push	{r7, lr}
 800488a:	b08c      	sub	sp, #48	; 0x30
 800488c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800488e:	e0ae      	b.n	80049ee <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f2c0 80aa 	blt.w	80049ec <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	3304      	adds	r3, #4
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd fe75 	bl	8002598 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ae:	1d3b      	adds	r3, r7, #4
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff ff87 	bl	80047c4 <prvSampleTimeNow>
 80048b6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b09      	cmp	r3, #9
 80048bc:	f200 8097 	bhi.w	80049ee <prvProcessReceivedCommands+0x166>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <prvProcessReceivedCommands+0x40>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048f1 	.word	0x080048f1
 80048cc:	080048f1 	.word	0x080048f1
 80048d0:	080048f1 	.word	0x080048f1
 80048d4:	08004965 	.word	0x08004965
 80048d8:	08004979 	.word	0x08004979
 80048dc:	080049c3 	.word	0x080049c3
 80048e0:	080048f1 	.word	0x080048f1
 80048e4:	080048f1 	.word	0x080048f1
 80048e8:	08004965 	.word	0x08004965
 80048ec:	08004979 	.word	0x08004979
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	18d1      	adds	r1, r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a3a      	ldr	r2, [r7, #32]
 800490e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004910:	f7ff ff78 	bl	8004804 <prvInsertTimerInActiveList>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d069      	beq.n	80049ee <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004920:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	2b00      	cmp	r3, #0
 800492e:	d05e      	beq.n	80049ee <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	441a      	add	r2, r3
 8004938:	2300      	movs	r3, #0
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	2300      	movs	r3, #0
 800493e:	2100      	movs	r1, #0
 8004940:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004942:	f7ff fe21 	bl	8004588 <xTimerGenericCommand>
 8004946:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d14f      	bne.n	80049ee <prvProcessReceivedCommands+0x166>
        __asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	61bb      	str	r3, [r7, #24]
    }
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800496a:	f023 0301 	bic.w	r3, r3, #1
 800496e:	b2da      	uxtb	r2, r3
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004976:	e03a      	b.n	80049ee <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800497e:	f043 0301 	orr.w	r3, r3, #1
 8004982:	b2da      	uxtb	r2, r3
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10a      	bne.n	80049ae <prvProcessReceivedCommands+0x126>
        __asm volatile
 8004998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800499c:	f383 8811 	msr	BASEPRI, r3
 80049a0:	f3bf 8f6f 	isb	sy
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	617b      	str	r3, [r7, #20]
    }
 80049aa:	bf00      	nop
 80049ac:	e7fe      	b.n	80049ac <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	699a      	ldr	r2, [r3, #24]
 80049b2:	6a3b      	ldr	r3, [r7, #32]
 80049b4:	18d1      	adds	r1, r2, r3
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049bc:	f7ff ff22 	bl	8004804 <prvInsertTimerInActiveList>
                        break;
 80049c0:	e015      	b.n	80049ee <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d103      	bne.n	80049d8 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 80049d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049d2:	f000 fc6b 	bl	80052ac <vPortFree>
 80049d6:	e00a      	b.n	80049ee <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049de:	f023 0301 	bic.w	r3, r3, #1
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80049ea:	e000      	b.n	80049ee <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80049ec:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <prvProcessReceivedCommands+0x188>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f107 0108 	add.w	r1, r7, #8
 80049f6:	2200      	movs	r2, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe f8cb 	bl	8002b94 <xQueueReceive>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f47f af45 	bne.w	8004890 <prvProcessReceivedCommands+0x8>
        }
    }
 8004a06:	bf00      	nop
 8004a08:	bf00      	nop
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20000164 	.word	0x20000164

08004a14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b088      	sub	sp, #32
 8004a18:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a1a:	e048      	b.n	8004aae <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a1c:	4b2d      	ldr	r3, [pc, #180]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a26:	4b2b      	ldr	r3, [pc, #172]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd fdaf 	bl	8002598 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d02e      	beq.n	8004aae <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d90e      	bls.n	8004a80 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a6e:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7fd fd54 	bl	8002526 <vListInsert>
 8004a7e:	e016      	b.n	8004aae <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a80:	2300      	movs	r3, #0
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	2300      	movs	r3, #0
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	2100      	movs	r1, #0
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff fd7c 	bl	8004588 <xTimerGenericCommand>
 8004a90:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10a      	bne.n	8004aae <prvSwitchTimerLists+0x9a>
        __asm volatile
 8004a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9c:	f383 8811 	msr	BASEPRI, r3
 8004aa0:	f3bf 8f6f 	isb	sy
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	603b      	str	r3, [r7, #0]
    }
 8004aaa:	bf00      	nop
 8004aac:	e7fe      	b.n	8004aac <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004aae:	4b09      	ldr	r3, [pc, #36]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1b1      	bne.n	8004a1c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004ab8:	4b06      	ldr	r3, [pc, #24]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004abe:	4b06      	ldr	r3, [pc, #24]	; (8004ad8 <prvSwitchTimerLists+0xc4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <prvSwitchTimerLists+0xc0>)
 8004ac4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004ac6:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <prvSwitchTimerLists+0xc4>)
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	6013      	str	r3, [r2, #0]
    }
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	2000015c 	.word	0x2000015c
 8004ad8:	20000160 	.word	0x20000160

08004adc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004ae0:	f000 f9e0 	bl	8004ea4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004ae4:	4b12      	ldr	r3, [pc, #72]	; (8004b30 <prvCheckForValidListAndQueue+0x54>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d11d      	bne.n	8004b28 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004aec:	4811      	ldr	r0, [pc, #68]	; (8004b34 <prvCheckForValidListAndQueue+0x58>)
 8004aee:	f7fd fcc9 	bl	8002484 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004af2:	4811      	ldr	r0, [pc, #68]	; (8004b38 <prvCheckForValidListAndQueue+0x5c>)
 8004af4:	f7fd fcc6 	bl	8002484 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004af8:	4b10      	ldr	r3, [pc, #64]	; (8004b3c <prvCheckForValidListAndQueue+0x60>)
 8004afa:	4a0e      	ldr	r2, [pc, #56]	; (8004b34 <prvCheckForValidListAndQueue+0x58>)
 8004afc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004afe:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <prvCheckForValidListAndQueue+0x64>)
 8004b00:	4a0d      	ldr	r2, [pc, #52]	; (8004b38 <prvCheckForValidListAndQueue+0x5c>)
 8004b02:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004b04:	2200      	movs	r2, #0
 8004b06:	210c      	movs	r1, #12
 8004b08:	200a      	movs	r0, #10
 8004b0a:	f7fd fdd7 	bl	80026bc <xQueueGenericCreate>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	4a07      	ldr	r2, [pc, #28]	; (8004b30 <prvCheckForValidListAndQueue+0x54>)
 8004b12:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004b14:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <prvCheckForValidListAndQueue+0x54>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d005      	beq.n	8004b28 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b1c:	4b04      	ldr	r3, [pc, #16]	; (8004b30 <prvCheckForValidListAndQueue+0x54>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4908      	ldr	r1, [pc, #32]	; (8004b44 <prvCheckForValidListAndQueue+0x68>)
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fe fa56 	bl	8002fd4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b28:	f000 f9ec 	bl	8004f04 <vPortExitCritical>
    }
 8004b2c:	bf00      	nop
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	20000164 	.word	0x20000164
 8004b34:	20000134 	.word	0x20000134
 8004b38:	20000148 	.word	0x20000148
 8004b3c:	2000015c 	.word	0x2000015c
 8004b40:	20000160 	.word	0x20000160
 8004b44:	080077a8 	.word	0x080077a8

08004b48 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b04      	subs	r3, #4
 8004b58:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b60:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b04      	subs	r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f023 0201 	bic.w	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004b78:	4a0c      	ldr	r2, [pc, #48]	; (8004bac <pxPortInitialiseStack+0x64>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b14      	subs	r3, #20
 8004b82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f06f 0202 	mvn.w	r2, #2
 8004b96:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3b20      	subs	r3, #32
 8004b9c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	08004bb1 	.word	0x08004bb1

08004bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004bba:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <prvTaskExitError+0x54>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d00a      	beq.n	8004bda <prvTaskExitError+0x2a>
        __asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60fb      	str	r3, [r7, #12]
    }
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <prvTaskExitError+0x28>
        __asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bde:	f383 8811 	msr	BASEPRI, r3
 8004be2:	f3bf 8f6f 	isb	sy
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	60bb      	str	r3, [r7, #8]
    }
 8004bec:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004bee:	bf00      	nop
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d0fc      	beq.n	8004bf0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	3714      	adds	r7, #20
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	20000010 	.word	0x20000010
	...

08004c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <pxCurrentTCBConst2>)
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	6808      	ldr	r0, [r1, #0]
 8004c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	f380 8809 	msr	PSP, r0
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8811 	msr	BASEPRI, r0
 8004c2a:	4770      	bx	lr
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst2>:
 8004c30:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004c38:	4808      	ldr	r0, [pc, #32]	; (8004c5c <prvPortStartFirstTask+0x24>)
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	6800      	ldr	r0, [r0, #0]
 8004c3e:	f380 8808 	msr	MSP, r0
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8814 	msr	CONTROL, r0
 8004c4a:	b662      	cpsie	i
 8004c4c:	b661      	cpsie	f
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	df00      	svc	0
 8004c58:	bf00      	nop
 8004c5a:	0000      	.short	0x0000
 8004c5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004c60:	bf00      	nop
 8004c62:	bf00      	nop

08004c64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c6a:	4b46      	ldr	r3, [pc, #280]	; (8004d84 <xPortStartScheduler+0x120>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a46      	ldr	r2, [pc, #280]	; (8004d88 <xPortStartScheduler+0x124>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d10a      	bne.n	8004c8a <xPortStartScheduler+0x26>
        __asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	613b      	str	r3, [r7, #16]
    }
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c8a:	4b3e      	ldr	r3, [pc, #248]	; (8004d84 <xPortStartScheduler+0x120>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a3f      	ldr	r2, [pc, #252]	; (8004d8c <xPortStartScheduler+0x128>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d10a      	bne.n	8004caa <xPortStartScheduler+0x46>
        __asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	60fb      	str	r3, [r7, #12]
    }
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004caa:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <xPortStartScheduler+0x12c>)
 8004cac:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	22ff      	movs	r2, #255	; 0xff
 8004cba:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <xPortStartScheduler+0x130>)
 8004cd0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cd2:	4b31      	ldr	r3, [pc, #196]	; (8004d98 <xPortStartScheduler+0x134>)
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd8:	e009      	b.n	8004cee <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004cda:	4b2f      	ldr	r3, [pc, #188]	; (8004d98 <xPortStartScheduler+0x134>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	4a2d      	ldr	r2, [pc, #180]	; (8004d98 <xPortStartScheduler+0x134>)
 8004ce2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b80      	cmp	r3, #128	; 0x80
 8004cf8:	d0ef      	beq.n	8004cda <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cfa:	4b27      	ldr	r3, [pc, #156]	; (8004d98 <xPortStartScheduler+0x134>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1c3 0307 	rsb	r3, r3, #7
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d00a      	beq.n	8004d1c <xPortStartScheduler+0xb8>
        __asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60bb      	str	r3, [r7, #8]
    }
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <xPortStartScheduler+0x134>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <xPortStartScheduler+0x134>)
 8004d24:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d26:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <xPortStartScheduler+0x134>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d2e:	4a1a      	ldr	r2, [pc, #104]	; (8004d98 <xPortStartScheduler+0x134>)
 8004d30:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004d3a:	4b18      	ldr	r3, [pc, #96]	; (8004d9c <xPortStartScheduler+0x138>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a17      	ldr	r2, [pc, #92]	; (8004d9c <xPortStartScheduler+0x138>)
 8004d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d44:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004d46:	4b15      	ldr	r3, [pc, #84]	; (8004d9c <xPortStartScheduler+0x138>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a14      	ldr	r2, [pc, #80]	; (8004d9c <xPortStartScheduler+0x138>)
 8004d4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d50:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004d52:	f000 f963 	bl	800501c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <xPortStartScheduler+0x13c>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004d5c:	f000 f97a 	bl	8005054 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d60:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <xPortStartScheduler+0x140>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a0f      	ldr	r2, [pc, #60]	; (8004da4 <xPortStartScheduler+0x140>)
 8004d66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d6a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004d6c:	f7ff ff64 	bl	8004c38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004d70:	f7fe feec 	bl	8003b4c <vTaskSwitchContext>
    prvTaskExitError();
 8004d74:	f7ff ff1c 	bl	8004bb0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	e000ed00 	.word	0xe000ed00
 8004d88:	410fc271 	.word	0x410fc271
 8004d8c:	410fc270 	.word	0x410fc270
 8004d90:	e000e400 	.word	0xe000e400
 8004d94:	20000170 	.word	0x20000170
 8004d98:	20000174 	.word	0x20000174
 8004d9c:	e000ed20 	.word	0xe000ed20
 8004da0:	20000010 	.word	0x20000010
 8004da4:	e000ef34 	.word	0xe000ef34

08004da8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004dae:	4b37      	ldr	r3, [pc, #220]	; (8004e8c <vInitPrioGroupValue+0xe4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a37      	ldr	r2, [pc, #220]	; (8004e90 <vInitPrioGroupValue+0xe8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d10a      	bne.n	8004dce <vInitPrioGroupValue+0x26>
        __asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	613b      	str	r3, [r7, #16]
    }
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dce:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <vInitPrioGroupValue+0xe4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a30      	ldr	r2, [pc, #192]	; (8004e94 <vInitPrioGroupValue+0xec>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10a      	bne.n	8004dee <vInitPrioGroupValue+0x46>
        __asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	60fb      	str	r3, [r7, #12]
    }
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <vInitPrioGroupValue+0xf0>)
 8004df0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	22ff      	movs	r2, #255	; 0xff
 8004dfe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <vInitPrioGroupValue+0xf4>)
 8004e14:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e16:	4b22      	ldr	r3, [pc, #136]	; (8004ea0 <vInitPrioGroupValue+0xf8>)
 8004e18:	2207      	movs	r2, #7
 8004e1a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e1c:	e009      	b.n	8004e32 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004e1e:	4b20      	ldr	r3, [pc, #128]	; (8004ea0 <vInitPrioGroupValue+0xf8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3b01      	subs	r3, #1
 8004e24:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <vInitPrioGroupValue+0xf8>)
 8004e26:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d0ef      	beq.n	8004e1e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <vInitPrioGroupValue+0xf8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1c3 0307 	rsb	r3, r3, #7
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d00a      	beq.n	8004e60 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	60bb      	str	r3, [r7, #8]
    }
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e60:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <vInitPrioGroupValue+0xf8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	4a0e      	ldr	r2, [pc, #56]	; (8004ea0 <vInitPrioGroupValue+0xf8>)
 8004e68:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <vInitPrioGroupValue+0xf8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e72:	4a0b      	ldr	r2, [pc, #44]	; (8004ea0 <vInitPrioGroupValue+0xf8>)
 8004e74:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	e000ed00 	.word	0xe000ed00
 8004e90:	410fc271 	.word	0x410fc271
 8004e94:	410fc270 	.word	0x410fc270
 8004e98:	e000e400 	.word	0xe000e400
 8004e9c:	20000170 	.word	0x20000170
 8004ea0:	20000174 	.word	0x20000174

08004ea4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
        __asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	607b      	str	r3, [r7, #4]
    }
 8004ebc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <vPortEnterCritical+0x58>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	4a0d      	ldr	r2, [pc, #52]	; (8004efc <vPortEnterCritical+0x58>)
 8004ec6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	; (8004efc <vPortEnterCritical+0x58>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10f      	bne.n	8004ef0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <vPortEnterCritical+0x5c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <vPortEnterCritical+0x4c>
        __asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	603b      	str	r3, [r7, #0]
    }
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <vPortEnterCritical+0x4a>
    }
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr
 8004efc:	20000010 	.word	0x20000010
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004f0a:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <vPortExitCritical+0x50>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <vPortExitCritical+0x24>
        __asm volatile
 8004f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	607b      	str	r3, [r7, #4]
    }
 8004f24:	bf00      	nop
 8004f26:	e7fe      	b.n	8004f26 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004f28:	4b0a      	ldr	r3, [pc, #40]	; (8004f54 <vPortExitCritical+0x50>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	4a09      	ldr	r2, [pc, #36]	; (8004f54 <vPortExitCritical+0x50>)
 8004f30:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004f32:	4b08      	ldr	r3, [pc, #32]	; (8004f54 <vPortExitCritical+0x50>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <vPortExitCritical+0x42>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	f383 8811 	msr	BASEPRI, r3
    }
 8004f44:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000010 	.word	0x20000010
	...

08004f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f60:	f3ef 8009 	mrs	r0, PSP
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <pxCurrentTCBConst>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	f01e 0f10 	tst.w	lr, #16
 8004f70:	bf08      	it	eq
 8004f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7a:	6010      	str	r0, [r2, #0]
 8004f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f84:	f380 8811 	msr	BASEPRI, r0
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
 8004f90:	f7fe fddc 	bl	8003b4c <vTaskSwitchContext>
 8004f94:	f04f 0000 	mov.w	r0, #0
 8004f98:	f380 8811 	msr	BASEPRI, r0
 8004f9c:	bc09      	pop	{r0, r3}
 8004f9e:	6819      	ldr	r1, [r3, #0]
 8004fa0:	6808      	ldr	r0, [r1, #0]
 8004fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa6:	f01e 0f10 	tst.w	lr, #16
 8004faa:	bf08      	it	eq
 8004fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fb0:	f380 8809 	msr	PSP, r0
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst>:
 8004fc0:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
        __asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	607b      	str	r3, [r7, #4]
    }
 8004fe0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004fe2:	f002 f84d 	bl	8007080 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004fe6:	f7fe fcf5 	bl	80039d4 <xTaskIncrementTick>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d006      	beq.n	8004ffe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004ff0:	f002 f8a4 	bl	800713c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <SysTick_Handler+0x50>)
 8004ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ffa:	601a      	str	r2, [r3, #0]
 8004ffc:	e001      	b.n	8005002 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8004ffe:	f002 f881 	bl	8007104 <SEGGER_SYSVIEW_RecordExitISR>
 8005002:	2300      	movs	r3, #0
 8005004:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	f383 8811 	msr	BASEPRI, r3
    }
 800500c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005020:	4b08      	ldr	r3, [pc, #32]	; (8005044 <vPortSetupTimerInterrupt+0x28>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005026:	4b08      	ldr	r3, [pc, #32]	; (8005048 <vPortSetupTimerInterrupt+0x2c>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <vPortSetupTimerInterrupt+0x30>)
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005030:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005032:	4b04      	ldr	r3, [pc, #16]	; (8005044 <vPortSetupTimerInterrupt+0x28>)
 8005034:	2207      	movs	r2, #7
 8005036:	601a      	str	r2, [r3, #0]
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	e000e010 	.word	0xe000e010
 8005048:	e000e018 	.word	0xe000e018
 800504c:	e000e014 	.word	0xe000e014
 8005050:	000752ff 	.word	0x000752ff

08005054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005064 <vPortEnableVFP+0x10>
 8005058:	6801      	ldr	r1, [r0, #0]
 800505a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800505e:	6001      	str	r1, [r0, #0]
 8005060:	4770      	bx	lr
 8005062:	0000      	.short	0x0000
 8005064:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005068:	bf00      	nop
 800506a:	bf00      	nop

0800506c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005072:	f3ef 8305 	mrs	r3, IPSR
 8005076:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b0f      	cmp	r3, #15
 800507c:	d914      	bls.n	80050a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800507e:	4a17      	ldr	r2, [pc, #92]	; (80050dc <vPortValidateInterruptPriority+0x70>)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4413      	add	r3, r2
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005088:	4b15      	ldr	r3, [pc, #84]	; (80050e0 <vPortValidateInterruptPriority+0x74>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	7afa      	ldrb	r2, [r7, #11]
 800508e:	429a      	cmp	r2, r3
 8005090:	d20a      	bcs.n	80050a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	607b      	str	r3, [r7, #4]
    }
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050a8:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <vPortValidateInterruptPriority+0x78>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050b0:	4b0d      	ldr	r3, [pc, #52]	; (80050e8 <vPortValidateInterruptPriority+0x7c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d90a      	bls.n	80050ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	603b      	str	r3, [r7, #0]
    }
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <vPortValidateInterruptPriority+0x60>
    }
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	e000e3f0 	.word	0xe000e3f0
 80050e0:	20000170 	.word	0x20000170
 80050e4:	e000ed0c 	.word	0xe000ed0c
 80050e8:	20000174 	.word	0x20000174

080050ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08a      	sub	sp, #40	; 0x28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80050f8:	f7fe fb9c 	bl	8003834 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80050fc:	4b65      	ldr	r3, [pc, #404]	; (8005294 <pvPortMalloc+0x1a8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005104:	f000 f934 	bl	8005370 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005108:	4b63      	ldr	r3, [pc, #396]	; (8005298 <pvPortMalloc+0x1ac>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4013      	ands	r3, r2
 8005110:	2b00      	cmp	r3, #0
 8005112:	f040 80a7 	bne.w	8005264 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d02d      	beq.n	8005178 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800511c:	2208      	movs	r2, #8
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	d227      	bcs.n	8005178 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005128:	2208      	movs	r2, #8
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	2b00      	cmp	r3, #0
 8005138:	d021      	beq.n	800517e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f023 0307 	bic.w	r3, r3, #7
 8005140:	3308      	adds	r3, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d214      	bcs.n	8005172 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f023 0307 	bic.w	r3, r3, #7
 800514e:	3308      	adds	r3, #8
 8005150:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	2b00      	cmp	r3, #0
 800515a:	d010      	beq.n	800517e <pvPortMalloc+0x92>
        __asm volatile
 800515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005160:	f383 8811 	msr	BASEPRI, r3
 8005164:	f3bf 8f6f 	isb	sy
 8005168:	f3bf 8f4f 	dsb	sy
 800516c:	617b      	str	r3, [r7, #20]
    }
 800516e:	bf00      	nop
 8005170:	e7fe      	b.n	8005170 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005176:	e002      	b.n	800517e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	e000      	b.n	8005180 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800517e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d06e      	beq.n	8005264 <pvPortMalloc+0x178>
 8005186:	4b45      	ldr	r3, [pc, #276]	; (800529c <pvPortMalloc+0x1b0>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d869      	bhi.n	8005264 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005190:	4b43      	ldr	r3, [pc, #268]	; (80052a0 <pvPortMalloc+0x1b4>)
 8005192:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005194:	4b42      	ldr	r3, [pc, #264]	; (80052a0 <pvPortMalloc+0x1b4>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800519a:	e004      	b.n	80051a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d903      	bls.n	80051b8 <pvPortMalloc+0xcc>
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1f1      	bne.n	800519c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80051b8:	4b36      	ldr	r3, [pc, #216]	; (8005294 <pvPortMalloc+0x1a8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	429a      	cmp	r2, r3
 80051c0:	d050      	beq.n	8005264 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2208      	movs	r2, #8
 80051c8:	4413      	add	r3, r2
 80051ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1ad2      	subs	r2, r2, r3
 80051dc:	2308      	movs	r3, #8
 80051de:	005b      	lsls	r3, r3, #1
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d91f      	bls.n	8005224 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4413      	add	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <pvPortMalloc+0x120>
        __asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	613b      	str	r3, [r7, #16]
    }
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	1ad2      	subs	r2, r2, r3
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800521e:	69b8      	ldr	r0, [r7, #24]
 8005220:	f000 f908 	bl	8005434 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <pvPortMalloc+0x1b0>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	4a1b      	ldr	r2, [pc, #108]	; (800529c <pvPortMalloc+0x1b0>)
 8005230:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <pvPortMalloc+0x1b0>)
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <pvPortMalloc+0x1b8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d203      	bcs.n	8005246 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800523e:	4b17      	ldr	r3, [pc, #92]	; (800529c <pvPortMalloc+0x1b0>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <pvPortMalloc+0x1b8>)
 8005244:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	4b13      	ldr	r3, [pc, #76]	; (8005298 <pvPortMalloc+0x1ac>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	431a      	orrs	r2, r3
 8005250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005252:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <pvPortMalloc+0x1bc>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	4a11      	ldr	r2, [pc, #68]	; (80052a8 <pvPortMalloc+0x1bc>)
 8005262:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005264:	f7fe faf4 	bl	8003850 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <pvPortMalloc+0x19c>
        __asm volatile
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	60fb      	str	r3, [r7, #12]
    }
 8005284:	bf00      	nop
 8005286:	e7fe      	b.n	8005286 <pvPortMalloc+0x19a>
    return pvReturn;
 8005288:	69fb      	ldr	r3, [r7, #28]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3728      	adds	r7, #40	; 0x28
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	20012d80 	.word	0x20012d80
 8005298:	20012d94 	.word	0x20012d94
 800529c:	20012d84 	.word	0x20012d84
 80052a0:	20012d78 	.word	0x20012d78
 80052a4:	20012d88 	.word	0x20012d88
 80052a8:	20012d8c 	.word	0x20012d8c

080052ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d04d      	beq.n	800535a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80052be:	2308      	movs	r3, #8
 80052c0:	425b      	negs	r3, r3
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	4413      	add	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	4b24      	ldr	r3, [pc, #144]	; (8005364 <vPortFree+0xb8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10a      	bne.n	80052f0 <vPortFree+0x44>
        __asm volatile
 80052da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052de:	f383 8811 	msr	BASEPRI, r3
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	f3bf 8f4f 	dsb	sy
 80052ea:	60fb      	str	r3, [r7, #12]
    }
 80052ec:	bf00      	nop
 80052ee:	e7fe      	b.n	80052ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00a      	beq.n	800530e <vPortFree+0x62>
        __asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	60bb      	str	r3, [r7, #8]
    }
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <vPortFree+0xb8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d01e      	beq.n	800535a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d11a      	bne.n	800535a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <vPortFree+0xb8>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	43db      	mvns	r3, r3
 800532e:	401a      	ands	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005334:	f7fe fa7e 	bl	8003834 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	685a      	ldr	r2, [r3, #4]
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <vPortFree+0xbc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4413      	add	r3, r2
 8005342:	4a09      	ldr	r2, [pc, #36]	; (8005368 <vPortFree+0xbc>)
 8005344:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005346:	6938      	ldr	r0, [r7, #16]
 8005348:	f000 f874 	bl	8005434 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800534c:	4b07      	ldr	r3, [pc, #28]	; (800536c <vPortFree+0xc0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a06      	ldr	r2, [pc, #24]	; (800536c <vPortFree+0xc0>)
 8005354:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005356:	f7fe fa7b 	bl	8003850 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800535a:	bf00      	nop
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	20012d94 	.word	0x20012d94
 8005368:	20012d84 	.word	0x20012d84
 800536c:	20012d90 	.word	0x20012d90

08005370 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005376:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800537a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800537c:	4b27      	ldr	r3, [pc, #156]	; (800541c <prvHeapInit+0xac>)
 800537e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00c      	beq.n	80053a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3307      	adds	r3, #7
 800538e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0307 	bic.w	r3, r3, #7
 8005396:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	4a1f      	ldr	r2, [pc, #124]	; (800541c <prvHeapInit+0xac>)
 80053a0:	4413      	add	r3, r2
 80053a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053a8:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <prvHeapInit+0xb0>)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80053ae:	4b1c      	ldr	r3, [pc, #112]	; (8005420 <prvHeapInit+0xb0>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	4413      	add	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80053bc:	2208      	movs	r2, #8
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0307 	bic.w	r3, r3, #7
 80053ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <prvHeapInit+0xb4>)
 80053d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80053d2:	4b14      	ldr	r3, [pc, #80]	; (8005424 <prvHeapInit+0xb4>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2200      	movs	r2, #0
 80053d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <prvHeapInit+0xb4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	1ad2      	subs	r2, r2, r3
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053f0:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <prvHeapInit+0xb4>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <prvHeapInit+0xb8>)
 80053fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	4a09      	ldr	r2, [pc, #36]	; (800542c <prvHeapInit+0xbc>)
 8005406:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005408:	4b09      	ldr	r3, [pc, #36]	; (8005430 <prvHeapInit+0xc0>)
 800540a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800540e:	601a      	str	r2, [r3, #0]
}
 8005410:	bf00      	nop
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	20000178 	.word	0x20000178
 8005420:	20012d78 	.word	0x20012d78
 8005424:	20012d80 	.word	0x20012d80
 8005428:	20012d88 	.word	0x20012d88
 800542c:	20012d84 	.word	0x20012d84
 8005430:	20012d94 	.word	0x20012d94

08005434 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800543c:	4b28      	ldr	r3, [pc, #160]	; (80054e0 <prvInsertBlockIntoFreeList+0xac>)
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	e002      	b.n	8005448 <prvInsertBlockIntoFreeList+0x14>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d8f7      	bhi.n	8005442 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	4413      	add	r3, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	429a      	cmp	r2, r3
 8005462:	d108      	bne.n	8005476 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	441a      	add	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	441a      	add	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	429a      	cmp	r2, r3
 8005488:	d118      	bne.n	80054bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <prvInsertBlockIntoFreeList+0xb0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d00d      	beq.n	80054b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	441a      	add	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e008      	b.n	80054c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054b2:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <prvInsertBlockIntoFreeList+0xb0>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	e003      	b.n	80054c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d002      	beq.n	80054d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	687a      	ldr	r2, [r7, #4]
 80054d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80054d2:	bf00      	nop
 80054d4:	3714      	adds	r7, #20
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	20012d78 	.word	0x20012d78
 80054e4:	20012d80 	.word	0x20012d80

080054e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80054ec:	4803      	ldr	r0, [pc, #12]	; (80054fc <_cbSendSystemDesc+0x14>)
 80054ee:	f001 fd71 	bl	8006fd4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80054f2:	4803      	ldr	r0, [pc, #12]	; (8005500 <_cbSendSystemDesc+0x18>)
 80054f4:	f001 fd6e 	bl	8006fd4 <SEGGER_SYSVIEW_SendSysDesc>
}
 80054f8:	bf00      	nop
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	080077b0 	.word	0x080077b0
 8005500:	080077f0 	.word	0x080077f0

08005504 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <SEGGER_SYSVIEW_Conf+0x1c>)
 800550a:	4a06      	ldr	r2, [pc, #24]	; (8005524 <SEGGER_SYSVIEW_Conf+0x20>)
 800550c:	4906      	ldr	r1, [pc, #24]	; (8005528 <SEGGER_SYSVIEW_Conf+0x24>)
 800550e:	4806      	ldr	r0, [pc, #24]	; (8005528 <SEGGER_SYSVIEW_Conf+0x24>)
 8005510:	f001 f8de 	bl	80066d0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005514:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005518:	f001 f91e 	bl	8006758 <SEGGER_SYSVIEW_SetRAMBase>
}
 800551c:	bf00      	nop
 800551e:	bd80      	pop	{r7, pc}
 8005520:	080054e9 	.word	0x080054e9
 8005524:	080078c0 	.word	0x080078c0
 8005528:	07270e00 	.word	0x07270e00

0800552c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800552c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800552e:	b085      	sub	sp, #20
 8005530:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	e033      	b.n	80055a0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8005538:	491e      	ldr	r1, [pc, #120]	; (80055b4 <_cbSendTaskList+0x88>)
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	6818      	ldr	r0, [r3, #0]
 8005548:	491a      	ldr	r1, [pc, #104]	; (80055b4 <_cbSendTaskList+0x88>)
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3304      	adds	r3, #4
 8005558:	6819      	ldr	r1, [r3, #0]
 800555a:	4c16      	ldr	r4, [pc, #88]	; (80055b4 <_cbSendTaskList+0x88>)
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4413      	add	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4423      	add	r3, r4
 8005568:	3308      	adds	r3, #8
 800556a:	681c      	ldr	r4, [r3, #0]
 800556c:	4d11      	ldr	r5, [pc, #68]	; (80055b4 <_cbSendTaskList+0x88>)
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	442b      	add	r3, r5
 800557a:	330c      	adds	r3, #12
 800557c:	681d      	ldr	r5, [r3, #0]
 800557e:	4e0d      	ldr	r6, [pc, #52]	; (80055b4 <_cbSendTaskList+0x88>)
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4433      	add	r3, r6
 800558c:	3310      	adds	r3, #16
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	462b      	mov	r3, r5
 8005594:	4622      	mov	r2, r4
 8005596:	f000 f8c1 	bl	800571c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3301      	adds	r3, #1
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <_cbSendTaskList+0x8c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d3c6      	bcc.n	8005538 <_cbSendTaskList+0xc>
  }
}
 80055aa:	bf00      	nop
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b4:	20012d98 	.word	0x20012d98
 80055b8:	20012e38 	.word	0x20012e38

080055bc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80055bc:	b5b0      	push	{r4, r5, r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80055c2:	f7fe f9f5 	bl	80039b0 <xTaskGetTickCountFromISR>
 80055c6:	4603      	mov	r3, r0
 80055c8:	461a      	mov	r2, r3
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
 80055d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	008b      	lsls	r3, r1, #2
 80055e0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80055e4:	0082      	lsls	r2, r0, #2
 80055e6:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= 1000;
 80055ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	f04f 0400 	mov.w	r4, #0
 80055f6:	f04f 0500 	mov.w	r5, #0
 80055fa:	015d      	lsls	r5, r3, #5
 80055fc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8005600:	0154      	lsls	r4, r2, #5
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	1a12      	subs	r2, r2, r0
 8005608:	eb63 0301 	sbc.w	r3, r3, r1
 800560c:	f04f 0400 	mov.w	r4, #0
 8005610:	f04f 0500 	mov.w	r5, #0
 8005614:	009d      	lsls	r5, r3, #2
 8005616:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 800561a:	0094      	lsls	r4, r2, #2
 800561c:	4622      	mov	r2, r4
 800561e:	462b      	mov	r3, r5
 8005620:	1812      	adds	r2, r2, r0
 8005622:	eb41 0303 	adc.w	r3, r1, r3
 8005626:	f04f 0000 	mov.w	r0, #0
 800562a:	f04f 0100 	mov.w	r1, #0
 800562e:	00d9      	lsls	r1, r3, #3
 8005630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005634:	00d0      	lsls	r0, r2, #3
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 800563e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bdb0      	pop	{r4, r5, r7, pc}

0800564c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b086      	sub	sp, #24
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
 8005658:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800565a:	2205      	movs	r2, #5
 800565c:	492b      	ldr	r1, [pc, #172]	; (800570c <SYSVIEW_AddTask+0xc0>)
 800565e:	68b8      	ldr	r0, [r7, #8]
 8005660:	f002 f84a 	bl	80076f8 <memcmp>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d04b      	beq.n	8005702 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800566a:	4b29      	ldr	r3, [pc, #164]	; (8005710 <SYSVIEW_AddTask+0xc4>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b07      	cmp	r3, #7
 8005670:	d903      	bls.n	800567a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8005672:	4828      	ldr	r0, [pc, #160]	; (8005714 <SYSVIEW_AddTask+0xc8>)
 8005674:	f001 ffc0 	bl	80075f8 <SEGGER_SYSVIEW_Warn>
    return;
 8005678:	e044      	b.n	8005704 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800567a:	4b25      	ldr	r3, [pc, #148]	; (8005710 <SYSVIEW_AddTask+0xc4>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4926      	ldr	r1, [pc, #152]	; (8005718 <SYSVIEW_AddTask+0xcc>)
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <SYSVIEW_AddTask+0xc4>)
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	4921      	ldr	r1, [pc, #132]	; (8005718 <SYSVIEW_AddTask+0xcc>)
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	3304      	adds	r3, #4
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80056a4:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <SYSVIEW_AddTask+0xc4>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	491b      	ldr	r1, [pc, #108]	; (8005718 <SYSVIEW_AddTask+0xcc>)
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	3308      	adds	r3, #8
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80056ba:	4b15      	ldr	r3, [pc, #84]	; (8005710 <SYSVIEW_AddTask+0xc4>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4916      	ldr	r1, [pc, #88]	; (8005718 <SYSVIEW_AddTask+0xcc>)
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	440b      	add	r3, r1
 80056ca:	330c      	adds	r3, #12
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <SYSVIEW_AddTask+0xc4>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	4910      	ldr	r1, [pc, #64]	; (8005718 <SYSVIEW_AddTask+0xcc>)
 80056d6:	4613      	mov	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	440b      	add	r3, r1
 80056e0:	3310      	adds	r3, #16
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <SYSVIEW_AddTask+0xc4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	3301      	adds	r3, #1
 80056ec:	4a08      	ldr	r2, [pc, #32]	; (8005710 <SYSVIEW_AddTask+0xc4>)
 80056ee:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f80e 	bl	800571c <SYSVIEW_SendTaskInfo>
 8005700:	e000      	b.n	8005704 <SYSVIEW_AddTask+0xb8>
    return;
 8005702:	bf00      	nop

}
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	08007800 	.word	0x08007800
 8005710:	20012e38 	.word	0x20012e38
 8005714:	08007808 	.word	0x08007808
 8005718:	20012d98 	.word	0x20012d98

0800571c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
 8005728:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800572a:	f107 0314 	add.w	r3, r7, #20
 800572e:	2214      	movs	r2, #20
 8005730:	2100      	movs	r1, #0
 8005732:	4618      	mov	r0, r3
 8005734:	f001 fffc 	bl	8007730 <memset>
  TaskInfo.TaskID     = TaskID;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800574c:	f107 0314 	add.w	r3, r7, #20
 8005750:	4618      	mov	r0, r3
 8005752:	f001 fb47 	bl	8006de4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005756:	bf00      	nop
 8005758:	3728      	adds	r7, #40	; 0x28
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005766:	4b1e      	ldr	r3, [pc, #120]	; (80057e0 <USART2_IRQHandler+0x80>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	2b00      	cmp	r3, #0
 8005774:	d011      	beq.n	800579a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005776:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <USART2_IRQHandler+0x84>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f003 030b 	and.w	r3, r3, #11
 8005784:	2b00      	cmp	r3, #0
 8005786:	d108      	bne.n	800579a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <USART2_IRQHandler+0x88>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d004      	beq.n	800579a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005790:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <USART2_IRQHandler+0x88>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	79fa      	ldrb	r2, [r7, #7]
 8005796:	4610      	mov	r0, r2
 8005798:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01a      	beq.n	80057da <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80057a4:	4b11      	ldr	r3, [pc, #68]	; (80057ec <USART2_IRQHandler+0x8c>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d015      	beq.n	80057d8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80057ac:	4b0f      	ldr	r3, [pc, #60]	; (80057ec <USART2_IRQHandler+0x8c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	1dfa      	adds	r2, r7, #7
 80057b2:	4610      	mov	r0, r2
 80057b4:	4798      	blx	r3
 80057b6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <USART2_IRQHandler+0x90>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a0b      	ldr	r2, [pc, #44]	; (80057f0 <USART2_IRQHandler+0x90>)
 80057c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	e006      	b.n	80057da <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80057cc:	4b04      	ldr	r3, [pc, #16]	; (80057e0 <USART2_IRQHandler+0x80>)
 80057ce:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80057d0:	79fa      	ldrb	r2, [r7, #7]
 80057d2:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <USART2_IRQHandler+0x84>)
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	e000      	b.n	80057da <USART2_IRQHandler+0x7a>
      return;
 80057d8:	bf00      	nop
    }
  }
}
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40004400 	.word	0x40004400
 80057e4:	40004404 	.word	0x40004404
 80057e8:	20012e3c 	.word	0x20012e3c
 80057ec:	20012e40 	.word	0x20012e40
 80057f0:	4000440c 	.word	0x4000440c

080057f4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <_DoInit+0x98>)
 80057fc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2203      	movs	r2, #3
 8005802:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2203      	movs	r2, #3
 8005808:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a20      	ldr	r2, [pc, #128]	; (8005890 <_DoInit+0x9c>)
 800580e:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a20      	ldr	r2, [pc, #128]	; (8005894 <_DoInit+0xa0>)
 8005814:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800581c:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a17      	ldr	r2, [pc, #92]	; (8005890 <_DoInit+0x9c>)
 8005834:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a17      	ldr	r2, [pc, #92]	; (8005898 <_DoInit+0xa4>)
 800583a:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2210      	movs	r2, #16
 8005840:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3307      	adds	r3, #7
 8005858:	4a10      	ldr	r2, [pc, #64]	; (800589c <_DoInit+0xa8>)
 800585a:	6810      	ldr	r0, [r2, #0]
 800585c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800585e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a0e      	ldr	r2, [pc, #56]	; (80058a0 <_DoInit+0xac>)
 8005866:	6810      	ldr	r0, [r2, #0]
 8005868:	6018      	str	r0, [r3, #0]
 800586a:	8891      	ldrh	r1, [r2, #4]
 800586c:	7992      	ldrb	r2, [r2, #6]
 800586e:	8099      	strh	r1, [r3, #4]
 8005870:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005872:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800587c:	f3bf 8f5f 	dmb	sy
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	2001c414 	.word	0x2001c414
 8005890:	08007858 	.word	0x08007858
 8005894:	20012e44 	.word	0x20012e44
 8005898:	20013244 	.word	0x20013244
 800589c:	08007864 	.word	0x08007864
 80058a0:	08007868 	.word	0x08007868

080058a4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08c      	sub	sp, #48	; 0x30
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80058b0:	4b3e      	ldr	r3, [pc, #248]	; (80059ac <SEGGER_RTT_ReadNoLock+0x108>)
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <SEGGER_RTT_ReadNoLock+0x1e>
 80058be:	f7ff ff99 	bl	80057f4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	4613      	mov	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	4413      	add	r3, r2
 80058ca:	00db      	lsls	r3, r3, #3
 80058cc:	3360      	adds	r3, #96	; 0x60
 80058ce:	4a37      	ldr	r2, [pc, #220]	; (80059ac <SEGGER_RTT_ReadNoLock+0x108>)
 80058d0:	4413      	add	r3, r2
 80058d2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80058e4:	2300      	movs	r3, #0
 80058e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80058e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d92b      	bls.n	8005948 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4293      	cmp	r3, r2
 8005900:	bf28      	it	cs
 8005902:	4613      	movcs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590c:	4413      	add	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	6939      	ldr	r1, [r7, #16]
 8005914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005916:	f001 fefd 	bl	8007714 <memcpy>
    NumBytesRead += NumBytesRem;
 800591a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	4413      	add	r3, r2
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	4413      	add	r3, r2
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005932:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005940:	429a      	cmp	r2, r3
 8005942:	d101      	bne.n	8005948 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005944:	2300      	movs	r3, #0
 8005946:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4293      	cmp	r3, r2
 8005956:	bf28      	it	cs
 8005958:	4613      	movcs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d019      	beq.n	8005996 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005968:	4413      	add	r3, r2
 800596a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800596c:	697a      	ldr	r2, [r7, #20]
 800596e:	6939      	ldr	r1, [r7, #16]
 8005970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005972:	f001 fecf 	bl	8007714 <memcpy>
    NumBytesRead += NumBytesRem;
 8005976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	4413      	add	r3, r2
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800598e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	4413      	add	r3, r2
 8005994:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059a0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3730      	adds	r7, #48	; 0x30
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	2001c414 	.word	0x2001c414

080059b0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059be:	4b3d      	ldr	r3, [pc, #244]	; (8005ab4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <SEGGER_RTT_AllocUpBuffer+0x20>
 80059cc:	f7ff ff12 	bl	80057f4 <_DoInit>
  SEGGER_RTT_LOCK();
 80059d0:	f3ef 8311 	mrs	r3, BASEPRI
 80059d4:	f04f 0120 	mov.w	r1, #32
 80059d8:	f381 8811 	msr	BASEPRI, r1
 80059dc:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059de:	4b35      	ldr	r3, [pc, #212]	; (8005ab4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059e0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80059e6:	6939      	ldr	r1, [r7, #16]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	4613      	mov	r3, r2
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	440b      	add	r3, r1
 80059f6:	3304      	adds	r3, #4
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	3301      	adds	r3, #1
 8005a02:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	dbeb      	blt.n	80059e6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a0e:	e000      	b.n	8005a12 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a10:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	da3f      	bge.n	8005a9c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a1c:	6939      	ldr	r1, [r7, #16]
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	4613      	mov	r3, r2
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a30:	6939      	ldr	r1, [r7, #16]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	4613      	mov	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	440b      	add	r3, r1
 8005a40:	3304      	adds	r3, #4
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a46:	6939      	ldr	r1, [r7, #16]
 8005a48:	69fa      	ldr	r2, [r7, #28]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	440b      	add	r3, r1
 8005a54:	3320      	adds	r3, #32
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a5a:	6939      	ldr	r1, [r7, #16]
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	005b      	lsls	r3, r3, #1
 8005a62:	4413      	add	r3, r2
 8005a64:	00db      	lsls	r3, r3, #3
 8005a66:	440b      	add	r3, r1
 8005a68:	3328      	adds	r3, #40	; 0x28
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a6e:	6939      	ldr	r1, [r7, #16]
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	4613      	mov	r3, r2
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	4413      	add	r3, r2
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	440b      	add	r3, r1
 8005a7c:	3324      	adds	r3, #36	; 0x24
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a82:	6939      	ldr	r1, [r7, #16]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	4613      	mov	r3, r2
 8005a88:	005b      	lsls	r3, r3, #1
 8005a8a:	4413      	add	r3, r2
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	440b      	add	r3, r1
 8005a90:	332c      	adds	r3, #44	; 0x2c
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a96:	f3bf 8f5f 	dmb	sy
 8005a9a:	e002      	b.n	8005aa2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	2001c414 	.word	0x2001c414

08005ab8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005ac6:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ac8:	623b      	str	r3, [r7, #32]
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d101      	bne.n	8005ad8 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ad4:	f7ff fe8e 	bl	80057f4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005ad8:	4b1c      	ldr	r3, [pc, #112]	; (8005b4c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ada:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d82c      	bhi.n	8005b3c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae6:	f04f 0120 	mov.w	r1, #32
 8005aea:	f381 8811 	msr	BASEPRI, r1
 8005aee:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	4613      	mov	r3, r2
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	4413      	add	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	3360      	adds	r3, #96	; 0x60
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2200      	movs	r2, #0
 8005b24:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b2a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b2c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3a:	e002      	b.n	8005b42 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3728      	adds	r7, #40	; 0x28
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	2001c414 	.word	0x2001c414

08005b50 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00f      	beq.n	8005b86 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005b66:	e002      	b.n	8005b6e <_EncodeStr+0x1e>
      Len++;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4413      	add	r3, r2
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f6      	bne.n	8005b68 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005b7a:	693a      	ldr	r2, [r7, #16]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d901      	bls.n	8005b86 <_EncodeStr+0x36>
      Len = Limit;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2bfe      	cmp	r3, #254	; 0xfe
 8005b8a:	d806      	bhi.n	8005b9a <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	60fa      	str	r2, [r7, #12]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	e011      	b.n	8005bbe <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	60fa      	str	r2, [r7, #12]
 8005ba0:	22ff      	movs	r2, #255	; 0xff
 8005ba2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	60fa      	str	r2, [r7, #12]
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	0a19      	lsrs	r1, r3, #8
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	60fa      	str	r2, [r7, #12]
 8005bba:	b2ca      	uxtb	r2, r1
 8005bbc:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bc2:	e00a      	b.n	8005bda <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	1c53      	adds	r3, r2, #1
 8005bc8:	60bb      	str	r3, [r7, #8]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	1c59      	adds	r1, r3, #1
 8005bce:	60f9      	str	r1, [r7, #12]
 8005bd0:	7812      	ldrb	r2, [r2, #0]
 8005bd2:	701a      	strb	r2, [r3, #0]
    n++;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d3f0      	bcc.n	8005bc4 <_EncodeStr+0x74>
  }
  return pPayload;
 8005be2:	68fb      	ldr	r3, [r7, #12]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c0e:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <_HandleIncomingPacket+0xe0>)
 8005c10:	7e1b      	ldrb	r3, [r3, #24]
 8005c12:	4618      	mov	r0, r3
 8005c14:	1cfb      	adds	r3, r7, #3
 8005c16:	2201      	movs	r2, #1
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f7ff fe43 	bl	80058a4 <SEGGER_RTT_ReadNoLock>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	dd54      	ble.n	8005cd2 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	2b80      	cmp	r3, #128	; 0x80
 8005c2c:	d032      	beq.n	8005c94 <_HandleIncomingPacket+0x8c>
 8005c2e:	2b80      	cmp	r3, #128	; 0x80
 8005c30:	dc42      	bgt.n	8005cb8 <_HandleIncomingPacket+0xb0>
 8005c32:	2b07      	cmp	r3, #7
 8005c34:	dc16      	bgt.n	8005c64 <_HandleIncomingPacket+0x5c>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	dd3e      	ble.n	8005cb8 <_HandleIncomingPacket+0xb0>
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	2b06      	cmp	r3, #6
 8005c3e:	d83b      	bhi.n	8005cb8 <_HandleIncomingPacket+0xb0>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <_HandleIncomingPacket+0x40>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c6b 	.word	0x08005c6b
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c77 	.word	0x08005c77
 8005c54:	08005c7d 	.word	0x08005c7d
 8005c58:	08005c83 	.word	0x08005c83
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	08005c8f 	.word	0x08005c8f
 8005c64:	2b7f      	cmp	r3, #127	; 0x7f
 8005c66:	d036      	beq.n	8005cd6 <_HandleIncomingPacket+0xce>
 8005c68:	e026      	b.n	8005cb8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c6a:	f000 ff41 	bl	8006af0 <SEGGER_SYSVIEW_Start>
      break;
 8005c6e:	e037      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c70:	f000 fff8 	bl	8006c64 <SEGGER_SYSVIEW_Stop>
      break;
 8005c74:	e034      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c76:	f001 f9d1 	bl	800701c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c7a:	e031      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c7c:	f001 f996 	bl	8006fac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c80:	e02e      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c82:	f001 f815 	bl	8006cb0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c86:	e02b      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c88:	f001 fc64 	bl	8007554 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c8c:	e028      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c8e:	f001 fc43 	bl	8007518 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c92:	e025      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c94:	4b14      	ldr	r3, [pc, #80]	; (8005ce8 <_HandleIncomingPacket+0xe0>)
 8005c96:	7e1b      	ldrb	r3, [r3, #24]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	1cfb      	adds	r3, r7, #3
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	f7ff fe00 	bl	80058a4 <SEGGER_RTT_ReadNoLock>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	dd15      	ble.n	8005cda <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005cae:	78fb      	ldrb	r3, [r7, #3]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 fbb1 	bl	8007418 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005cb6:	e010      	b.n	8005cda <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cb8:	78fb      	ldrb	r3, [r7, #3]
 8005cba:	b25b      	sxtb	r3, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	da0e      	bge.n	8005cde <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cc0:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <_HandleIncomingPacket+0xe0>)
 8005cc2:	7e1b      	ldrb	r3, [r3, #24]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	1cfb      	adds	r3, r7, #3
 8005cc8:	2201      	movs	r2, #1
 8005cca:	4619      	mov	r1, r3
 8005ccc:	f7ff fdea 	bl	80058a4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005cd0:	e005      	b.n	8005cde <_HandleIncomingPacket+0xd6>
    }
  }
 8005cd2:	bf00      	nop
 8005cd4:	e004      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <_HandleIncomingPacket+0xd8>
      break;
 8005cde:	bf00      	nop
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	2001c25c 	.word	0x2001c25c

08005cec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d00:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <_TrySendOverflowPacket+0xdc>)
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d06:	e00b      	b.n	8005d20 <_TrySendOverflowPacket+0x34>
 8005d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	1c59      	adds	r1, r3, #1
 8005d10:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	09db      	lsrs	r3, r3, #7
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	2b7f      	cmp	r3, #127	; 0x7f
 8005d24:	d8f0      	bhi.n	8005d08 <_TrySendOverflowPacket+0x1c>
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d36:	4b25      	ldr	r3, [pc, #148]	; (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d3c:	4b22      	ldr	r3, [pc, #136]	; (8005dc8 <_TrySendOverflowPacket+0xdc>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	e00b      	b.n	8005d68 <_TrySendOverflowPacket+0x7c>
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	1c59      	adds	r1, r3, #1
 8005d58:	6279      	str	r1, [r7, #36]	; 0x24
 8005d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	09db      	lsrs	r3, r3, #7
 8005d66:	623b      	str	r3, [r7, #32]
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d6c:	d8f0      	bhi.n	8005d50 <_TrySendOverflowPacket+0x64>
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	627a      	str	r2, [r7, #36]	; 0x24
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <_TrySendOverflowPacket+0xdc>)
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	4618      	mov	r0, r3
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7fa fa36 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d94:	4603      	mov	r3, r0
 8005d96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d009      	beq.n	8005db2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d9e:	4a0a      	ldr	r2, [pc, #40]	; (8005dc8 <_TrySendOverflowPacket+0xdc>)
 8005da0:	69bb      	ldr	r3, [r7, #24]
 8005da2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005da4:	4b08      	ldr	r3, [pc, #32]	; (8005dc8 <_TrySendOverflowPacket+0xdc>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <_TrySendOverflowPacket+0xdc>)
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e004      	b.n	8005dbc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005db2:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <_TrySendOverflowPacket+0xdc>)
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	3301      	adds	r3, #1
 8005db8:	4a03      	ldr	r2, [pc, #12]	; (8005dc8 <_TrySendOverflowPacket+0xdc>)
 8005dba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005dbc:	693b      	ldr	r3, [r7, #16]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3730      	adds	r7, #48	; 0x30
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	2001c25c 	.word	0x2001c25c
 8005dcc:	e0001004 	.word	0xe0001004

08005dd0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b08a      	sub	sp, #40	; 0x28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005ddc:	4b6c      	ldr	r3, [pc, #432]	; (8005f90 <_SendPacket+0x1c0>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d010      	beq.n	8005e06 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005de4:	4b6a      	ldr	r3, [pc, #424]	; (8005f90 <_SendPacket+0x1c0>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 80a3 	beq.w	8005f34 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005dee:	4b68      	ldr	r3, [pc, #416]	; (8005f90 <_SendPacket+0x1c0>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d109      	bne.n	8005e0a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005df6:	f7ff ff79 	bl	8005cec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005dfa:	4b65      	ldr	r3, [pc, #404]	; (8005f90 <_SendPacket+0x1c0>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	f040 809a 	bne.w	8005f38 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005e04:	e001      	b.n	8005e0a <_SendPacket+0x3a>
    goto Send;
 8005e06:	bf00      	nop
 8005e08:	e000      	b.n	8005e0c <_SendPacket+0x3c>
Send:
 8005e0a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b1f      	cmp	r3, #31
 8005e10:	d809      	bhi.n	8005e26 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e12:	4b5f      	ldr	r3, [pc, #380]	; (8005f90 <_SendPacket+0x1c0>)
 8005e14:	69da      	ldr	r2, [r3, #28]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	fa22 f303 	lsr.w	r3, r2, r3
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 808b 	bne.w	8005f3c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b17      	cmp	r3, #23
 8005e2a:	d807      	bhi.n	8005e3c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	b2da      	uxtb	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	e03d      	b.n	8005eb8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b7f      	cmp	r3, #127	; 0x7f
 8005e48:	d912      	bls.n	8005e70 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	09da      	lsrs	r2, r3, #7
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	60fb      	str	r3, [r7, #12]
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	3a01      	subs	r2, #1
 8005e62:	60fa      	str	r2, [r7, #12]
 8005e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e006      	b.n	8005e7e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2b7f      	cmp	r3, #127	; 0x7f
 8005e82:	d912      	bls.n	8005eaa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	09da      	lsrs	r2, r3, #7
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	3a01      	subs	r2, #1
 8005e9c:	60fa      	str	r2, [r7, #12]
 8005e9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	e006      	b.n	8005eb8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005eb8:	4b36      	ldr	r3, [pc, #216]	; (8005f94 <_SendPacket+0x1c4>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ebe:	4b34      	ldr	r3, [pc, #208]	; (8005f90 <_SendPacket+0x1c0>)
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	623b      	str	r3, [r7, #32]
 8005ed0:	e00b      	b.n	8005eea <_SendPacket+0x11a>
 8005ed2:	6a3b      	ldr	r3, [r7, #32]
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	1c59      	adds	r1, r3, #1
 8005eda:	6279      	str	r1, [r7, #36]	; 0x24
 8005edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	09db      	lsrs	r3, r3, #7
 8005ee8:	623b      	str	r3, [r7, #32]
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	2b7f      	cmp	r3, #127	; 0x7f
 8005eee:	d8f0      	bhi.n	8005ed2 <_SendPacket+0x102>
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	627a      	str	r2, [r7, #36]	; 0x24
 8005ef6:	6a3a      	ldr	r2, [r7, #32]
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f00:	4b23      	ldr	r3, [pc, #140]	; (8005f90 <_SendPacket+0x1c0>)
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	4618      	mov	r0, r3
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	f7fa f976 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f14:	4603      	mov	r3, r0
 8005f16:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f1e:	4a1c      	ldr	r2, [pc, #112]	; (8005f90 <_SendPacket+0x1c0>)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	60d3      	str	r3, [r2, #12]
 8005f24:	e00b      	b.n	8005f3e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f26:	4b1a      	ldr	r3, [pc, #104]	; (8005f90 <_SendPacket+0x1c0>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	4b18      	ldr	r3, [pc, #96]	; (8005f90 <_SendPacket+0x1c0>)
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e004      	b.n	8005f3e <_SendPacket+0x16e>
    goto SendDone;
 8005f34:	bf00      	nop
 8005f36:	e002      	b.n	8005f3e <_SendPacket+0x16e>
      goto SendDone;
 8005f38:	bf00      	nop
 8005f3a:	e000      	b.n	8005f3e <_SendPacket+0x16e>
      goto SendDone;
 8005f3c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f3e:	4b14      	ldr	r3, [pc, #80]	; (8005f90 <_SendPacket+0x1c0>)
 8005f40:	7e1b      	ldrb	r3, [r3, #24]
 8005f42:	4619      	mov	r1, r3
 8005f44:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <_SendPacket+0x1c8>)
 8005f46:	460b      	mov	r3, r1
 8005f48:	005b      	lsls	r3, r3, #1
 8005f4a:	440b      	add	r3, r1
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	4413      	add	r3, r2
 8005f50:	336c      	adds	r3, #108	; 0x6c
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <_SendPacket+0x1c0>)
 8005f56:	7e1b      	ldrb	r3, [r3, #24]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	490f      	ldr	r1, [pc, #60]	; (8005f98 <_SendPacket+0x1c8>)
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	4403      	add	r3, r0
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	3370      	adds	r3, #112	; 0x70
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d00b      	beq.n	8005f86 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005f6e:	4b08      	ldr	r3, [pc, #32]	; (8005f90 <_SendPacket+0x1c0>)
 8005f70:	789b      	ldrb	r3, [r3, #2]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d107      	bne.n	8005f86 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <_SendPacket+0x1c0>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f7c:	f7ff fe44 	bl	8005c08 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f80:	4b03      	ldr	r3, [pc, #12]	; (8005f90 <_SendPacket+0x1c0>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f86:	bf00      	nop
 8005f88:	3728      	adds	r7, #40	; 0x28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	2001c25c 	.word	0x2001c25c
 8005f94:	e0001004 	.word	0xe0001004
 8005f98:	2001c414 	.word	0x2001c414

08005f9c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	2b80      	cmp	r3, #128	; 0x80
 8005fb4:	d80a      	bhi.n	8005fcc <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	1c59      	adds	r1, r3, #1
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6051      	str	r1, [r2, #4]
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	2b80      	cmp	r3, #128	; 0x80
 8005fd2:	d15a      	bne.n	800608a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	b2d2      	uxtb	r2, r2
 8005fde:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	e00b      	b.n	800600e <_StoreChar+0x72>
 8005ff6:	6a3b      	ldr	r3, [r7, #32]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	1c59      	adds	r1, r3, #1
 8005ffe:	6279      	str	r1, [r7, #36]	; 0x24
 8006000:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006004:	b2d2      	uxtb	r2, r2
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	6a3b      	ldr	r3, [r7, #32]
 800600a:	09db      	lsrs	r3, r3, #7
 800600c:	623b      	str	r3, [r7, #32]
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	2b7f      	cmp	r3, #127	; 0x7f
 8006012:	d8f0      	bhi.n	8005ff6 <_StoreChar+0x5a>
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	1c5a      	adds	r2, r3, #1
 8006018:	627a      	str	r2, [r7, #36]	; 0x24
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	b2d2      	uxtb	r2, r2
 800601e:	701a      	strb	r2, [r3, #0]
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
 800602c:	e00b      	b.n	8006046 <_StoreChar+0xaa>
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	b2da      	uxtb	r2, r3
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	1c59      	adds	r1, r3, #1
 8006036:	61f9      	str	r1, [r7, #28]
 8006038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800603c:	b2d2      	uxtb	r2, r2
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	09db      	lsrs	r3, r3, #7
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b7f      	cmp	r3, #127	; 0x7f
 800604a:	d8f0      	bhi.n	800602e <_StoreChar+0x92>
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	61fa      	str	r2, [r7, #28]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	b2d2      	uxtb	r2, r2
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	221a      	movs	r2, #26
 8006062:	6939      	ldr	r1, [r7, #16]
 8006064:	4618      	mov	r0, r3
 8006066:	f7ff feb3 	bl	8005dd0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff fdbe 	bl	8005bf0 <_PreparePacket>
 8006074:	4602      	mov	r2, r0
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	611a      	str	r2, [r3, #16]
  }
}
 800608a:	bf00      	nop
 800608c:	3728      	adds	r7, #40	; 0x28
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006094:	b580      	push	{r7, lr}
 8006096:	b08a      	sub	sp, #40	; 0x28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80060a6:	2301      	movs	r3, #1
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80060aa:	2301      	movs	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060ae:	e007      	b.n	80060c0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b8:	623b      	str	r3, [r7, #32]
    Width++;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	3301      	adds	r3, #1
 80060be:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060c0:	6a3a      	ldr	r2, [r7, #32]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d2f3      	bcs.n	80060b0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d901      	bls.n	80060d4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80060d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d11f      	bne.n	800611e <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01c      	beq.n	800611e <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80060e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <_PrintUnsigned+0x66>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <_PrintUnsigned+0x66>
        c = '0';
 80060f4:	2330      	movs	r3, #48	; 0x30
 80060f6:	76fb      	strb	r3, [r7, #27]
 80060f8:	e001      	b.n	80060fe <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80060fa:	2320      	movs	r3, #32
 80060fc:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060fe:	e007      	b.n	8006110 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	3b01      	subs	r3, #1
 8006104:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8006106:	7efb      	ldrb	r3, [r7, #27]
 8006108:	4619      	mov	r1, r3
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff ff46 	bl	8005f9c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <_PrintUnsigned+0x8a>
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	429a      	cmp	r2, r3
 800611c:	d3f0      	bcc.n	8006100 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d903      	bls.n	800612c <_PrintUnsigned+0x98>
      NumDigits--;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	3b01      	subs	r3, #1
 8006128:	603b      	str	r3, [r7, #0]
 800612a:	e009      	b.n	8006140 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	fbb2 f3f3 	udiv	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	429a      	cmp	r2, r3
 800613c:	d200      	bcs.n	8006140 <_PrintUnsigned+0xac>
        break;
 800613e:	e005      	b.n	800614c <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	fb02 f303 	mul.w	r3, r2, r3
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800614a:	e7e8      	b.n	800611e <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	fbb2 f3f3 	udiv	r3, r2, r3
 8006154:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800615a:	fb02 f303 	mul.w	r3, r2, r3
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006164:	4a15      	ldr	r2, [pc, #84]	; (80061bc <_PrintUnsigned+0x128>)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	4619      	mov	r1, r3
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff ff14 	bl	8005f9c <_StoreChar>
    Digit /= Base;
 8006174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	fbb2 f3f3 	udiv	r3, r2, r3
 800617c:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1e3      	bne.n	800614c <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d011      	beq.n	80061b2 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800618e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00e      	beq.n	80061b2 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006194:	e006      	b.n	80061a4 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	3b01      	subs	r3, #1
 800619a:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 800619c:	2120      	movs	r1, #32
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff fefc 	bl	8005f9c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <_PrintUnsigned+0x11e>
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d3f1      	bcc.n	8006196 <_PrintUnsigned+0x102>
      }
    }
  }
}
 80061b2:	bf00      	nop
 80061b4:	3728      	adds	r7, #40	; 0x28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	080078d4 	.word	0x080078d4

080061c0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
 80061cc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	bfb8      	it	lt
 80061d4:	425b      	neglt	r3, r3
 80061d6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80061d8:	2301      	movs	r3, #1
 80061da:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061dc:	e007      	b.n	80061ee <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80061e6:	613b      	str	r3, [r7, #16]
    Width++;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	3301      	adds	r3, #1
 80061ec:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	daf3      	bge.n	80061de <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d901      	bls.n	8006202 <_PrintInt+0x42>
    Width = NumDigits;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8006202:	6a3b      	ldr	r3, [r7, #32]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d00a      	beq.n	800621e <_PrintInt+0x5e>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	db04      	blt.n	8006218 <_PrintInt+0x58>
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <_PrintInt+0x5e>
    FieldWidth--;
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	3b01      	subs	r3, #1
 800621c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	f003 0302 	and.w	r3, r3, #2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <_PrintInt+0x6e>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <_PrintInt+0x9c>
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d111      	bne.n	800625c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00e      	beq.n	800625c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800623e:	e006      	b.n	800624e <_PrintInt+0x8e>
        FieldWidth--;
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	3b01      	subs	r3, #1
 8006244:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006246:	2120      	movs	r1, #32
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f7ff fea7 	bl	8005f9c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <_PrintInt+0x9c>
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	429a      	cmp	r2, r3
 800625a:	d3f1      	bcc.n	8006240 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	da07      	bge.n	8006272 <_PrintInt+0xb2>
    v = -v;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	425b      	negs	r3, r3
 8006266:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006268:	212d      	movs	r1, #45	; 0x2d
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fe96 	bl	8005f9c <_StoreChar>
 8006270:	e008      	b.n	8006284 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d003      	beq.n	8006284 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800627c:	212b      	movs	r1, #43	; 0x2b
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7ff fe8c 	bl	8005f9c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	f003 0302 	and.w	r3, r3, #2
 800628a:	2b00      	cmp	r3, #0
 800628c:	d019      	beq.n	80062c2 <_PrintInt+0x102>
 800628e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d114      	bne.n	80062c2 <_PrintInt+0x102>
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d111      	bne.n	80062c2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00e      	beq.n	80062c2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062a4:	e006      	b.n	80062b4 <_PrintInt+0xf4>
        FieldWidth--;
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80062ac:	2130      	movs	r1, #48	; 0x30
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff fe74 	bl	8005f9c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <_PrintInt+0x102>
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d3f1      	bcc.n	80062a6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff fedf 	bl	8006094 <_PrintUnsigned>
}
 80062d6:	bf00      	nop
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b098      	sub	sp, #96	; 0x60
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062ec:	f3ef 8311 	mrs	r3, BASEPRI
 80062f0:	f04f 0120 	mov.w	r1, #32
 80062f4:	f381 8811 	msr	BASEPRI, r1
 80062f8:	633b      	str	r3, [r7, #48]	; 0x30
 80062fa:	48b7      	ldr	r0, [pc, #732]	; (80065d8 <_VPrintTarget+0x2f8>)
 80062fc:	f7ff fc78 	bl	8005bf0 <_PreparePacket>
 8006300:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8006302:	4bb5      	ldr	r3, [pc, #724]	; (80065d8 <_VPrintTarget+0x2f8>)
 8006304:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8006306:	2300      	movs	r3, #0
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3301      	adds	r3, #1
 8006312:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3301      	adds	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006326:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800632a:	2b00      	cmp	r3, #0
 800632c:	f000 8183 	beq.w	8006636 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006334:	2b25      	cmp	r3, #37	; 0x25
 8006336:	f040 8170 	bne.w	800661a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800633a:	2300      	movs	r3, #0
 800633c:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800633e:	2301      	movs	r3, #1
 8006340:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800634a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800634e:	3b23      	subs	r3, #35	; 0x23
 8006350:	2b0d      	cmp	r3, #13
 8006352:	d83f      	bhi.n	80063d4 <_VPrintTarget+0xf4>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <_VPrintTarget+0x7c>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	080063c5 	.word	0x080063c5
 8006360:	080063d5 	.word	0x080063d5
 8006364:	080063d5 	.word	0x080063d5
 8006368:	080063d5 	.word	0x080063d5
 800636c:	080063d5 	.word	0x080063d5
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063d5 	.word	0x080063d5
 8006378:	080063d5 	.word	0x080063d5
 800637c:	080063b5 	.word	0x080063b5
 8006380:	080063d5 	.word	0x080063d5
 8006384:	08006395 	.word	0x08006395
 8006388:	080063d5 	.word	0x080063d5
 800638c:	080063d5 	.word	0x080063d5
 8006390:	080063a5 	.word	0x080063a5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	64bb      	str	r3, [r7, #72]	; 0x48
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	3301      	adds	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	e01a      	b.n	80063da <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80063a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a6:	f043 0302 	orr.w	r3, r3, #2
 80063aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
 80063b2:	e012      	b.n	80063da <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80063b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b6:	f043 0304 	orr.w	r3, r3, #4
 80063ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3301      	adds	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e00a      	b.n	80063da <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80063c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063c6:	f043 0308 	orr.w	r3, r3, #8
 80063ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	3301      	adds	r3, #1
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e002      	b.n	80063da <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80063d4:	2300      	movs	r3, #0
 80063d6:	653b      	str	r3, [r7, #80]	; 0x50
 80063d8:	bf00      	nop
        }
      } while (v);
 80063da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d1b0      	bne.n	8006342 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80063e0:	2300      	movs	r3, #0
 80063e2:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80063ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063f0:	2b2f      	cmp	r3, #47	; 0x2f
 80063f2:	d912      	bls.n	800641a <_VPrintTarget+0x13a>
 80063f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063f8:	2b39      	cmp	r3, #57	; 0x39
 80063fa:	d80e      	bhi.n	800641a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	461a      	mov	r2, r3
 800640e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006412:	4413      	add	r3, r2
 8006414:	3b30      	subs	r3, #48	; 0x30
 8006416:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006418:	e7e4      	b.n	80063e4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800641a:	2300      	movs	r3, #0
 800641c:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006426:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800642a:	2b2e      	cmp	r3, #46	; 0x2e
 800642c:	d11d      	bne.n	800646a <_VPrintTarget+0x18a>
        sFormat++;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3301      	adds	r3, #1
 8006432:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 800643c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006440:	2b2f      	cmp	r3, #47	; 0x2f
 8006442:	d912      	bls.n	800646a <_VPrintTarget+0x18a>
 8006444:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006448:	2b39      	cmp	r3, #57	; 0x39
 800644a:	d80e      	bhi.n	800646a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006452:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006454:	4613      	mov	r3, r2
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	461a      	mov	r2, r3
 800645e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006462:	4413      	add	r3, r2
 8006464:	3b30      	subs	r3, #48	; 0x30
 8006466:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006468:	e7e4      	b.n	8006434 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006472:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006476:	2b6c      	cmp	r3, #108	; 0x6c
 8006478:	d003      	beq.n	8006482 <_VPrintTarget+0x1a2>
 800647a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800647e:	2b68      	cmp	r3, #104	; 0x68
 8006480:	d107      	bne.n	8006492 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006490:	e7ef      	b.n	8006472 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006492:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006496:	2b25      	cmp	r3, #37	; 0x25
 8006498:	f000 80b3 	beq.w	8006602 <_VPrintTarget+0x322>
 800649c:	2b25      	cmp	r3, #37	; 0x25
 800649e:	f2c0 80b7 	blt.w	8006610 <_VPrintTarget+0x330>
 80064a2:	2b78      	cmp	r3, #120	; 0x78
 80064a4:	f300 80b4 	bgt.w	8006610 <_VPrintTarget+0x330>
 80064a8:	2b58      	cmp	r3, #88	; 0x58
 80064aa:	f2c0 80b1 	blt.w	8006610 <_VPrintTarget+0x330>
 80064ae:	3b58      	subs	r3, #88	; 0x58
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	f200 80ad 	bhi.w	8006610 <_VPrintTarget+0x330>
 80064b6:	a201      	add	r2, pc, #4	; (adr r2, 80064bc <_VPrintTarget+0x1dc>)
 80064b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064bc:	080065b3 	.word	0x080065b3
 80064c0:	08006611 	.word	0x08006611
 80064c4:	08006611 	.word	0x08006611
 80064c8:	08006611 	.word	0x08006611
 80064cc:	08006611 	.word	0x08006611
 80064d0:	08006611 	.word	0x08006611
 80064d4:	08006611 	.word	0x08006611
 80064d8:	08006611 	.word	0x08006611
 80064dc:	08006611 	.word	0x08006611
 80064e0:	08006611 	.word	0x08006611
 80064e4:	08006611 	.word	0x08006611
 80064e8:	08006541 	.word	0x08006541
 80064ec:	08006567 	.word	0x08006567
 80064f0:	08006611 	.word	0x08006611
 80064f4:	08006611 	.word	0x08006611
 80064f8:	08006611 	.word	0x08006611
 80064fc:	08006611 	.word	0x08006611
 8006500:	08006611 	.word	0x08006611
 8006504:	08006611 	.word	0x08006611
 8006508:	08006611 	.word	0x08006611
 800650c:	08006611 	.word	0x08006611
 8006510:	08006611 	.word	0x08006611
 8006514:	08006611 	.word	0x08006611
 8006518:	08006611 	.word	0x08006611
 800651c:	080065dd 	.word	0x080065dd
 8006520:	08006611 	.word	0x08006611
 8006524:	08006611 	.word	0x08006611
 8006528:	08006611 	.word	0x08006611
 800652c:	08006611 	.word	0x08006611
 8006530:	0800658d 	.word	0x0800658d
 8006534:	08006611 	.word	0x08006611
 8006538:	08006611 	.word	0x08006611
 800653c:	080065b3 	.word	0x080065b3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	1d19      	adds	r1, r3, #4
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800654e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006554:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006558:	f107 0314 	add.w	r3, r7, #20
 800655c:	4611      	mov	r1, r2
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fd1c 	bl	8005f9c <_StoreChar>
        break;
 8006564:	e055      	b.n	8006612 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	1d19      	adds	r1, r3, #4
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6011      	str	r1, [r2, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006574:	f107 0014 	add.w	r0, r7, #20
 8006578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006582:	220a      	movs	r2, #10
 8006584:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006586:	f7ff fe1b 	bl	80061c0 <_PrintInt>
        break;
 800658a:	e042      	b.n	8006612 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	1d19      	adds	r1, r3, #4
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	6011      	str	r1, [r2, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800659a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800659c:	f107 0014 	add.w	r0, r7, #20
 80065a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065aa:	220a      	movs	r2, #10
 80065ac:	f7ff fd72 	bl	8006094 <_PrintUnsigned>
        break;
 80065b0:	e02f      	b.n	8006612 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	1d19      	adds	r1, r3, #4
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6011      	str	r1, [r2, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80065c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065c2:	f107 0014 	add.w	r0, r7, #20
 80065c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c8:	9301      	str	r3, [sp, #4]
 80065ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d0:	2210      	movs	r2, #16
 80065d2:	f7ff fd5f 	bl	8006094 <_PrintUnsigned>
        break;
 80065d6:	e01c      	b.n	8006612 <_VPrintTarget+0x332>
 80065d8:	2001c28c 	.word	0x2001c28c
      case 'p':
        v = va_arg(*pParamList, int);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	1d19      	adds	r1, r3, #4
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	6011      	str	r1, [r2, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80065ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065ec:	f107 0014 	add.w	r0, r7, #20
 80065f0:	2300      	movs	r3, #0
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	2308      	movs	r3, #8
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2308      	movs	r3, #8
 80065fa:	2210      	movs	r2, #16
 80065fc:	f7ff fd4a 	bl	8006094 <_PrintUnsigned>
        break;
 8006600:	e007      	b.n	8006612 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006602:	f107 0314 	add.w	r3, r7, #20
 8006606:	2125      	movs	r1, #37	; 0x25
 8006608:	4618      	mov	r0, r3
 800660a:	f7ff fcc7 	bl	8005f9c <_StoreChar>
        break;
 800660e:	e000      	b.n	8006612 <_VPrintTarget+0x332>
      default:
        break;
 8006610:	bf00      	nop
      }
      sFormat++;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	3301      	adds	r3, #1
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	e007      	b.n	800662a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800661a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800661e:	f107 0314 	add.w	r3, r7, #20
 8006622:	4611      	mov	r1, r2
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fcb9 	bl	8005f9c <_StoreChar>
    }
  } while (*sFormat);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f47f ae72 	bne.w	8006318 <_VPrintTarget+0x38>
 8006634:	e000      	b.n	8006638 <_VPrintTarget+0x358>
      break;
 8006636:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d041      	beq.n	80066c2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800663e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	b2d2      	uxtb	r2, r2
 8006644:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	643b      	str	r3, [r7, #64]	; 0x40
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664e:	e00b      	b.n	8006668 <_VPrintTarget+0x388>
 8006650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006652:	b2da      	uxtb	r2, r3
 8006654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	6439      	str	r1, [r7, #64]	; 0x40
 800665a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006664:	09db      	lsrs	r3, r3, #7
 8006666:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	2b7f      	cmp	r3, #127	; 0x7f
 800666c:	d8f0      	bhi.n	8006650 <_VPrintTarget+0x370>
 800666e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	643a      	str	r2, [r7, #64]	; 0x40
 8006674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006676:	b2d2      	uxtb	r2, r2
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	63bb      	str	r3, [r7, #56]	; 0x38
 8006682:	2300      	movs	r3, #0
 8006684:	637b      	str	r3, [r7, #52]	; 0x34
 8006686:	e00b      	b.n	80066a0 <_VPrintTarget+0x3c0>
 8006688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	63b9      	str	r1, [r7, #56]	; 0x38
 8006692:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669c:	09db      	lsrs	r3, r3, #7
 800669e:	637b      	str	r3, [r7, #52]	; 0x34
 80066a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a2:	2b7f      	cmp	r3, #127	; 0x7f
 80066a4:	d8f0      	bhi.n	8006688 <_VPrintTarget+0x3a8>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	63ba      	str	r2, [r7, #56]	; 0x38
 80066ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	69b9      	ldr	r1, [r7, #24]
 80066ba:	221a      	movs	r2, #26
 80066bc:	4618      	mov	r0, r3
 80066be:	f7ff fb87 	bl	8005dd0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80066c8:	bf00      	nop
 80066ca:	3758      	adds	r7, #88	; 0x58
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
 80066dc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066de:	2300      	movs	r3, #0
 80066e0:	f44f 4210 	mov.w	r2, #36864	; 0x9000
 80066e4:	4917      	ldr	r1, [pc, #92]	; (8006744 <SEGGER_SYSVIEW_Init+0x74>)
 80066e6:	4818      	ldr	r0, [pc, #96]	; (8006748 <SEGGER_SYSVIEW_Init+0x78>)
 80066e8:	f7ff f962 	bl	80059b0 <SEGGER_RTT_AllocUpBuffer>
 80066ec:	4603      	mov	r3, r0
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	4b16      	ldr	r3, [pc, #88]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 80066f2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80066f4:	4b15      	ldr	r3, [pc, #84]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 80066f6:	785a      	ldrb	r2, [r3, #1]
 80066f8:	4b14      	ldr	r3, [pc, #80]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 80066fa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066fc:	4b13      	ldr	r3, [pc, #76]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 80066fe:	7e1b      	ldrb	r3, [r3, #24]
 8006700:	4618      	mov	r0, r3
 8006702:	2300      	movs	r3, #0
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	2308      	movs	r3, #8
 8006708:	4a11      	ldr	r2, [pc, #68]	; (8006750 <SEGGER_SYSVIEW_Init+0x80>)
 800670a:	490f      	ldr	r1, [pc, #60]	; (8006748 <SEGGER_SYSVIEW_Init+0x78>)
 800670c:	f7ff f9d4 	bl	8005ab8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006710:	4b0e      	ldr	r3, [pc, #56]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 8006712:	2200      	movs	r2, #0
 8006714:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006716:	4b0f      	ldr	r3, [pc, #60]	; (8006754 <SEGGER_SYSVIEW_Init+0x84>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a0c      	ldr	r2, [pc, #48]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 800671c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800671e:	4a0b      	ldr	r2, [pc, #44]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006724:	4a09      	ldr	r2, [pc, #36]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800672a:	4a08      	ldr	r2, [pc, #32]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006730:	4a06      	ldr	r2, [pc, #24]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <SEGGER_SYSVIEW_Init+0x7c>)
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	20013254 	.word	0x20013254
 8006748:	08007870 	.word	0x08007870
 800674c:	2001c25c 	.word	0x2001c25c
 8006750:	2001c254 	.word	0x2001c254
 8006754:	e0001004 	.word	0xe0001004

08006758 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006760:	4a04      	ldr	r2, [pc, #16]	; (8006774 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6113      	str	r3, [r2, #16]
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	2001c25c 	.word	0x2001c25c

08006778 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006780:	f3ef 8311 	mrs	r3, BASEPRI
 8006784:	f04f 0120 	mov.w	r1, #32
 8006788:	f381 8811 	msr	BASEPRI, r1
 800678c:	60fb      	str	r3, [r7, #12]
 800678e:	4808      	ldr	r0, [pc, #32]	; (80067b0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006790:	f7ff fa2e 	bl	8005bf0 <_PreparePacket>
 8006794:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	68b8      	ldr	r0, [r7, #8]
 800679c:	f7ff fb18 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f383 8811 	msr	BASEPRI, r3
}
 80067a6:	bf00      	nop
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	2001c28c 	.word	0x2001c28c

080067b4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067be:	f3ef 8311 	mrs	r3, BASEPRI
 80067c2:	f04f 0120 	mov.w	r1, #32
 80067c6:	f381 8811 	msr	BASEPRI, r1
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	4816      	ldr	r0, [pc, #88]	; (8006828 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80067ce:	f7ff fa0f 	bl	8005bf0 <_PreparePacket>
 80067d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	e00b      	b.n	80067fa <SEGGER_SYSVIEW_RecordU32+0x46>
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	1c59      	adds	r1, r3, #1
 80067ea:	61f9      	str	r1, [r7, #28]
 80067ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067f0:	b2d2      	uxtb	r2, r2
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	09db      	lsrs	r3, r3, #7
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	2b7f      	cmp	r3, #127	; 0x7f
 80067fe:	d8f0      	bhi.n	80067e2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	1c5a      	adds	r2, r3, #1
 8006804:	61fa      	str	r2, [r7, #28]
 8006806:	69ba      	ldr	r2, [r7, #24]
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	6938      	ldr	r0, [r7, #16]
 8006816:	f7ff fadb 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f383 8811 	msr	BASEPRI, r3
}
 8006820:	bf00      	nop
 8006822:	3720      	adds	r7, #32
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	2001c28c 	.word	0x2001c28c

0800682c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b08c      	sub	sp, #48	; 0x30
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006838:	f3ef 8311 	mrs	r3, BASEPRI
 800683c:	f04f 0120 	mov.w	r1, #32
 8006840:	f381 8811 	msr	BASEPRI, r1
 8006844:	61fb      	str	r3, [r7, #28]
 8006846:	4825      	ldr	r0, [pc, #148]	; (80068dc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006848:	f7ff f9d2 	bl	8005bf0 <_PreparePacket>
 800684c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	62bb      	str	r3, [r7, #40]	; 0x28
 800685a:	e00b      	b.n	8006874 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	b2da      	uxtb	r2, r3
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	1c59      	adds	r1, r3, #1
 8006864:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006866:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800686a:	b2d2      	uxtb	r2, r2
 800686c:	701a      	strb	r2, [r3, #0]
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	09db      	lsrs	r3, r3, #7
 8006872:	62bb      	str	r3, [r7, #40]	; 0x28
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	2b7f      	cmp	r3, #127	; 0x7f
 8006878:	d8f0      	bhi.n	800685c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006880:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006882:	b2d2      	uxtb	r2, r2
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	e00b      	b.n	80068ac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	1c59      	adds	r1, r3, #1
 800689c:	6279      	str	r1, [r7, #36]	; 0x24
 800689e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	09db      	lsrs	r3, r3, #7
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	2b7f      	cmp	r3, #127	; 0x7f
 80068b0:	d8f0      	bhi.n	8006894 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	627a      	str	r2, [r7, #36]	; 0x24
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	6979      	ldr	r1, [r7, #20]
 80068c6:	69b8      	ldr	r0, [r7, #24]
 80068c8:	f7ff fa82 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	f383 8811 	msr	BASEPRI, r3
}
 80068d2:	bf00      	nop
 80068d4:	3730      	adds	r7, #48	; 0x30
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	2001c28c 	.word	0x2001c28c

080068e0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08e      	sub	sp, #56	; 0x38
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ee:	f3ef 8311 	mrs	r3, BASEPRI
 80068f2:	f04f 0120 	mov.w	r1, #32
 80068f6:	f381 8811 	msr	BASEPRI, r1
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	4832      	ldr	r0, [pc, #200]	; (80069c8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80068fe:	f7ff f977 	bl	8005bf0 <_PreparePacket>
 8006902:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	633b      	str	r3, [r7, #48]	; 0x30
 8006910:	e00b      	b.n	800692a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006914:	b2da      	uxtb	r2, r3
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	1c59      	adds	r1, r3, #1
 800691a:	6379      	str	r1, [r7, #52]	; 0x34
 800691c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	701a      	strb	r2, [r3, #0]
 8006924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006926:	09db      	lsrs	r3, r3, #7
 8006928:	633b      	str	r3, [r7, #48]	; 0x30
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	2b7f      	cmp	r3, #127	; 0x7f
 800692e:	d8f0      	bhi.n	8006912 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	1c5a      	adds	r2, r3, #1
 8006934:	637a      	str	r2, [r7, #52]	; 0x34
 8006936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	701a      	strb	r2, [r3, #0]
 800693c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	62bb      	str	r3, [r7, #40]	; 0x28
 8006948:	e00b      	b.n	8006962 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	b2da      	uxtb	r2, r3
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	1c59      	adds	r1, r3, #1
 8006952:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006954:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	09db      	lsrs	r3, r3, #7
 8006960:	62bb      	str	r3, [r7, #40]	; 0x28
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	2b7f      	cmp	r3, #127	; 0x7f
 8006966:	d8f0      	bhi.n	800694a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800696e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	623b      	str	r3, [r7, #32]
 8006980:	e00b      	b.n	800699a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	b2da      	uxtb	r2, r3
 8006986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006988:	1c59      	adds	r1, r3, #1
 800698a:	6279      	str	r1, [r7, #36]	; 0x24
 800698c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006990:	b2d2      	uxtb	r2, r2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	09db      	lsrs	r3, r3, #7
 8006998:	623b      	str	r3, [r7, #32]
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	2b7f      	cmp	r3, #127	; 0x7f
 800699e:	d8f0      	bhi.n	8006982 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	1c5a      	adds	r2, r3, #1
 80069a4:	627a      	str	r2, [r7, #36]	; 0x24
 80069a6:	6a3a      	ldr	r2, [r7, #32]
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6979      	ldr	r1, [r7, #20]
 80069b4:	69b8      	ldr	r0, [r7, #24]
 80069b6:	f7ff fa0b 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	f383 8811 	msr	BASEPRI, r3
}
 80069c0:	bf00      	nop
 80069c2:	3738      	adds	r7, #56	; 0x38
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	2001c28c 	.word	0x2001c28c

080069cc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b090      	sub	sp, #64	; 0x40
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069da:	f3ef 8311 	mrs	r3, BASEPRI
 80069de:	f04f 0120 	mov.w	r1, #32
 80069e2:	f381 8811 	msr	BASEPRI, r1
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	4840      	ldr	r0, [pc, #256]	; (8006aec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80069ea:	f7ff f901 	bl	8005bf0 <_PreparePacket>
 80069ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80069fc:	e00b      	b.n	8006a16 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a04:	1c59      	adds	r1, r3, #1
 8006a06:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006a08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a0c:	b2d2      	uxtb	r2, r2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a12:	09db      	lsrs	r3, r3, #7
 8006a14:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	2b7f      	cmp	r3, #127	; 0x7f
 8006a1a:	d8f0      	bhi.n	80069fe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a24:	b2d2      	uxtb	r2, r2
 8006a26:	701a      	strb	r2, [r3, #0]
 8006a28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	633b      	str	r3, [r7, #48]	; 0x30
 8006a34:	e00b      	b.n	8006a4e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3c:	1c59      	adds	r1, r3, #1
 8006a3e:	6379      	str	r1, [r7, #52]	; 0x34
 8006a40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	09db      	lsrs	r3, r3, #7
 8006a4c:	633b      	str	r3, [r7, #48]	; 0x30
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	2b7f      	cmp	r3, #127	; 0x7f
 8006a52:	d8f0      	bhi.n	8006a36 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a56:	1c5a      	adds	r2, r3, #1
 8006a58:	637a      	str	r2, [r7, #52]	; 0x34
 8006a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a6c:	e00b      	b.n	8006a86 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	1c59      	adds	r1, r3, #1
 8006a76:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a7c:	b2d2      	uxtb	r2, r2
 8006a7e:	701a      	strb	r2, [r3, #0]
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	09db      	lsrs	r3, r3, #7
 8006a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8a:	d8f0      	bhi.n	8006a6e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	1c5a      	adds	r2, r3, #1
 8006a90:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	e00b      	b.n	8006abe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	b2da      	uxtb	r2, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	1c59      	adds	r1, r3, #1
 8006aae:	6279      	str	r1, [r7, #36]	; 0x24
 8006ab0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab4:	b2d2      	uxtb	r2, r2
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	09db      	lsrs	r3, r3, #7
 8006abc:	623b      	str	r3, [r7, #32]
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac2:	d8f0      	bhi.n	8006aa6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8006aca:	6a3a      	ldr	r2, [r7, #32]
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	6979      	ldr	r1, [r7, #20]
 8006ad8:	69b8      	ldr	r0, [r7, #24]
 8006ada:	f7ff f979 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	f383 8811 	msr	BASEPRI, r3
}
 8006ae4:	bf00      	nop
 8006ae6:	3740      	adds	r7, #64	; 0x40
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	2001c28c 	.word	0x2001c28c

08006af0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b08c      	sub	sp, #48	; 0x30
 8006af4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006af6:	4b58      	ldr	r3, [pc, #352]	; (8006c58 <SEGGER_SYSVIEW_Start+0x168>)
 8006af8:	2201      	movs	r2, #1
 8006afa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006afc:	f3ef 8311 	mrs	r3, BASEPRI
 8006b00:	f04f 0120 	mov.w	r1, #32
 8006b04:	f381 8811 	msr	BASEPRI, r1
 8006b08:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006b0a:	4b53      	ldr	r3, [pc, #332]	; (8006c58 <SEGGER_SYSVIEW_Start+0x168>)
 8006b0c:	785b      	ldrb	r3, [r3, #1]
 8006b0e:	220a      	movs	r2, #10
 8006b10:	4952      	ldr	r1, [pc, #328]	; (8006c5c <SEGGER_SYSVIEW_Start+0x16c>)
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7f9 fb74 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006b1e:	200a      	movs	r0, #10
 8006b20:	f7ff fe2a 	bl	8006778 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b24:	f3ef 8311 	mrs	r3, BASEPRI
 8006b28:	f04f 0120 	mov.w	r1, #32
 8006b2c:	f381 8811 	msr	BASEPRI, r1
 8006b30:	60bb      	str	r3, [r7, #8]
 8006b32:	484b      	ldr	r0, [pc, #300]	; (8006c60 <SEGGER_SYSVIEW_Start+0x170>)
 8006b34:	f7ff f85c 	bl	8005bf0 <_PreparePacket>
 8006b38:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b42:	4b45      	ldr	r3, [pc, #276]	; (8006c58 <SEGGER_SYSVIEW_Start+0x168>)
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b48:	e00b      	b.n	8006b62 <SEGGER_SYSVIEW_Start+0x72>
 8006b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4c:	b2da      	uxtb	r2, r3
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	1c59      	adds	r1, r3, #1
 8006b52:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	701a      	strb	r2, [r3, #0]
 8006b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5e:	09db      	lsrs	r3, r3, #7
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	2b7f      	cmp	r3, #127	; 0x7f
 8006b66:	d8f0      	bhi.n	8006b4a <SEGGER_SYSVIEW_Start+0x5a>
 8006b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b7c:	4b36      	ldr	r3, [pc, #216]	; (8006c58 <SEGGER_SYSVIEW_Start+0x168>)
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	623b      	str	r3, [r7, #32]
 8006b82:	e00b      	b.n	8006b9c <SEGGER_SYSVIEW_Start+0xac>
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	1c59      	adds	r1, r3, #1
 8006b8c:	6279      	str	r1, [r7, #36]	; 0x24
 8006b8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	09db      	lsrs	r3, r3, #7
 8006b9a:	623b      	str	r3, [r7, #32]
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8006ba0:	d8f0      	bhi.n	8006b84 <SEGGER_SYSVIEW_Start+0x94>
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	627a      	str	r2, [r7, #36]	; 0x24
 8006ba8:	6a3a      	ldr	r2, [r7, #32]
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	4b28      	ldr	r3, [pc, #160]	; (8006c58 <SEGGER_SYSVIEW_Start+0x168>)
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	61bb      	str	r3, [r7, #24]
 8006bbc:	e00b      	b.n	8006bd6 <SEGGER_SYSVIEW_Start+0xe6>
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	b2da      	uxtb	r2, r3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	1c59      	adds	r1, r3, #1
 8006bc6:	61f9      	str	r1, [r7, #28]
 8006bc8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bcc:	b2d2      	uxtb	r2, r2
 8006bce:	701a      	strb	r2, [r3, #0]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	09db      	lsrs	r3, r3, #7
 8006bd4:	61bb      	str	r3, [r7, #24]
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8006bda:	d8f0      	bhi.n	8006bbe <SEGGER_SYSVIEW_Start+0xce>
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	1c5a      	adds	r2, r3, #1
 8006be0:	61fa      	str	r2, [r7, #28]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	613b      	str	r3, [r7, #16]
 8006bf4:	e00b      	b.n	8006c0e <SEGGER_SYSVIEW_Start+0x11e>
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	1c59      	adds	r1, r3, #1
 8006bfe:	6179      	str	r1, [r7, #20]
 8006c00:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	09db      	lsrs	r3, r3, #7
 8006c0c:	613b      	str	r3, [r7, #16]
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	2b7f      	cmp	r3, #127	; 0x7f
 8006c12:	d8f0      	bhi.n	8006bf6 <SEGGER_SYSVIEW_Start+0x106>
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	617a      	str	r2, [r7, #20]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	b2d2      	uxtb	r2, r2
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c24:	2218      	movs	r2, #24
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f7ff f8d1 	bl	8005dd0 <_SendPacket>
      RECORD_END();
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c34:	4b08      	ldr	r3, [pc, #32]	; (8006c58 <SEGGER_SYSVIEW_Start+0x168>)
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006c3c:	4b06      	ldr	r3, [pc, #24]	; (8006c58 <SEGGER_SYSVIEW_Start+0x168>)
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006c42:	f000 f9eb 	bl	800701c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006c46:	f000 f9b1 	bl	8006fac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006c4a:	f000 fc83 	bl	8007554 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006c4e:	bf00      	nop
 8006c50:	3730      	adds	r7, #48	; 0x30
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	2001c25c 	.word	0x2001c25c
 8006c5c:	080078c8 	.word	0x080078c8
 8006c60:	2001c28c 	.word	0x2001c28c

08006c64 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c6e:	f04f 0120 	mov.w	r1, #32
 8006c72:	f381 8811 	msr	BASEPRI, r1
 8006c76:	607b      	str	r3, [r7, #4]
 8006c78:	480b      	ldr	r0, [pc, #44]	; (8006ca8 <SEGGER_SYSVIEW_Stop+0x44>)
 8006c7a:	f7fe ffb9 	bl	8005bf0 <_PreparePacket>
 8006c7e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <SEGGER_SYSVIEW_Stop+0x48>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d007      	beq.n	8006c98 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006c88:	220b      	movs	r2, #11
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6838      	ldr	r0, [r7, #0]
 8006c8e:	f7ff f89f 	bl	8005dd0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <SEGGER_SYSVIEW_Stop+0x48>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f383 8811 	msr	BASEPRI, r3
}
 8006c9e:	bf00      	nop
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	2001c28c 	.word	0x2001c28c
 8006cac:	2001c25c 	.word	0x2001c25c

08006cb0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08c      	sub	sp, #48	; 0x30
 8006cb4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cb6:	f3ef 8311 	mrs	r3, BASEPRI
 8006cba:	f04f 0120 	mov.w	r1, #32
 8006cbe:	f381 8811 	msr	BASEPRI, r1
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	4845      	ldr	r0, [pc, #276]	; (8006ddc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006cc6:	f7fe ff93 	bl	8005bf0 <_PreparePacket>
 8006cca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cd4:	4b42      	ldr	r3, [pc, #264]	; (8006de0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cda:	e00b      	b.n	8006cf4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ce6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	09db      	lsrs	r3, r3, #7
 8006cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8006cf8:	d8f0      	bhi.n	8006cdc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfc:	1c5a      	adds	r2, r3, #1
 8006cfe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d0e:	4b34      	ldr	r3, [pc, #208]	; (8006de0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	623b      	str	r3, [r7, #32]
 8006d14:	e00b      	b.n	8006d2e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	1c59      	adds	r1, r3, #1
 8006d1e:	6279      	str	r1, [r7, #36]	; 0x24
 8006d20:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	09db      	lsrs	r3, r3, #7
 8006d2c:	623b      	str	r3, [r7, #32]
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	2b7f      	cmp	r3, #127	; 0x7f
 8006d32:	d8f0      	bhi.n	8006d16 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	1c5a      	adds	r2, r3, #1
 8006d38:	627a      	str	r2, [r7, #36]	; 0x24
 8006d3a:	6a3a      	ldr	r2, [r7, #32]
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	61fb      	str	r3, [r7, #28]
 8006d48:	4b25      	ldr	r3, [pc, #148]	; (8006de0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e00b      	b.n	8006d68 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	1c59      	adds	r1, r3, #1
 8006d58:	61f9      	str	r1, [r7, #28]
 8006d5a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d5e:	b2d2      	uxtb	r2, r2
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	09db      	lsrs	r3, r3, #7
 8006d66:	61bb      	str	r3, [r7, #24]
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d6c:	d8f0      	bhi.n	8006d50 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	61fa      	str	r2, [r7, #28]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	617b      	str	r3, [r7, #20]
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	e00b      	b.n	8006da0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	1c59      	adds	r1, r3, #1
 8006d90:	6179      	str	r1, [r7, #20]
 8006d92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d96:	b2d2      	uxtb	r2, r2
 8006d98:	701a      	strb	r2, [r3, #0]
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	09db      	lsrs	r3, r3, #7
 8006d9e:	613b      	str	r3, [r7, #16]
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	2b7f      	cmp	r3, #127	; 0x7f
 8006da4:	d8f0      	bhi.n	8006d88 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	617a      	str	r2, [r7, #20]
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006db6:	2218      	movs	r2, #24
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	68b8      	ldr	r0, [r7, #8]
 8006dbc:	f7ff f808 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006dc6:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006dce:	4b04      	ldr	r3, [pc, #16]	; (8006de0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd2:	4798      	blx	r3
  }
}
 8006dd4:	bf00      	nop
 8006dd6:	3730      	adds	r7, #48	; 0x30
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	2001c28c 	.word	0x2001c28c
 8006de0:	2001c25c 	.word	0x2001c25c

08006de4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b092      	sub	sp, #72	; 0x48
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006dec:	f3ef 8311 	mrs	r3, BASEPRI
 8006df0:	f04f 0120 	mov.w	r1, #32
 8006df4:	f381 8811 	msr	BASEPRI, r1
 8006df8:	617b      	str	r3, [r7, #20]
 8006dfa:	486a      	ldr	r0, [pc, #424]	; (8006fa4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006dfc:	f7fe fef8 	bl	8005bf0 <_PreparePacket>
 8006e00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	4b66      	ldr	r3, [pc, #408]	; (8006fa8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	643b      	str	r3, [r7, #64]	; 0x40
 8006e16:	e00b      	b.n	8006e30 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1e:	1c59      	adds	r1, r3, #1
 8006e20:	6479      	str	r1, [r7, #68]	; 0x44
 8006e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e26:	b2d2      	uxtb	r2, r2
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e2c:	09db      	lsrs	r3, r3, #7
 8006e2e:	643b      	str	r3, [r7, #64]	; 0x40
 8006e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e32:	2b7f      	cmp	r3, #127	; 0x7f
 8006e34:	d8f0      	bhi.n	8006e18 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	647a      	str	r2, [r7, #68]	; 0x44
 8006e3c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e3e:	b2d2      	uxtb	r2, r2
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e50:	e00b      	b.n	8006e6a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e58:	1c59      	adds	r1, r3, #1
 8006e5a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006e5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	09db      	lsrs	r3, r3, #7
 8006e68:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e6e:	d8f0      	bhi.n	8006e52 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e72:	1c5a      	adds	r2, r3, #1
 8006e74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e78:	b2d2      	uxtb	r2, r2
 8006e7a:	701a      	strb	r2, [r3, #0]
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	4619      	mov	r1, r3
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7fe fe61 	bl	8005b50 <_EncodeStr>
 8006e8e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006e90:	2209      	movs	r2, #9
 8006e92:	68f9      	ldr	r1, [r7, #12]
 8006e94:	6938      	ldr	r0, [r7, #16]
 8006e96:	f7fe ff9b 	bl	8005dd0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	4b40      	ldr	r3, [pc, #256]	; (8006fa8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	633b      	str	r3, [r7, #48]	; 0x30
 8006eae:	e00b      	b.n	8006ec8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb6:	1c59      	adds	r1, r3, #1
 8006eb8:	6379      	str	r1, [r7, #52]	; 0x34
 8006eba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	09db      	lsrs	r3, r3, #7
 8006ec6:	633b      	str	r3, [r7, #48]	; 0x30
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	2b7f      	cmp	r3, #127	; 0x7f
 8006ecc:	d8f0      	bhi.n	8006eb0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	637a      	str	r2, [r7, #52]	; 0x34
 8006ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ee8:	e00b      	b.n	8006f02 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	1c59      	adds	r1, r3, #1
 8006ef2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006ef4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	09db      	lsrs	r3, r3, #7
 8006f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	2b7f      	cmp	r3, #127	; 0x7f
 8006f06:	d8f0      	bhi.n	8006eea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f10:	b2d2      	uxtb	r2, r2
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f16:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	623b      	str	r3, [r7, #32]
 8006f22:	e00b      	b.n	8006f3c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	b2da      	uxtb	r2, r3
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	1c59      	adds	r1, r3, #1
 8006f2c:	6279      	str	r1, [r7, #36]	; 0x24
 8006f2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	09db      	lsrs	r3, r3, #7
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006f40:	d8f0      	bhi.n	8006f24 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	1c5a      	adds	r2, r3, #1
 8006f46:	627a      	str	r2, [r7, #36]	; 0x24
 8006f48:	6a3a      	ldr	r2, [r7, #32]
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	61fb      	str	r3, [r7, #28]
 8006f56:	2300      	movs	r3, #0
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	e00b      	b.n	8006f74 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	1c59      	adds	r1, r3, #1
 8006f64:	61f9      	str	r1, [r7, #28]
 8006f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	09db      	lsrs	r3, r3, #7
 8006f72:	61bb      	str	r3, [r7, #24]
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	2b7f      	cmp	r3, #127	; 0x7f
 8006f78:	d8f0      	bhi.n	8006f5c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	61fa      	str	r2, [r7, #28]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006f8a:	2215      	movs	r2, #21
 8006f8c:	68f9      	ldr	r1, [r7, #12]
 8006f8e:	6938      	ldr	r0, [r7, #16]
 8006f90:	f7fe ff1e 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f383 8811 	msr	BASEPRI, r3
}
 8006f9a:	bf00      	nop
 8006f9c:	3748      	adds	r7, #72	; 0x48
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	2001c28c 	.word	0x2001c28c
 8006fa8:	2001c25c 	.word	0x2001c25c

08006fac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006fac:	b580      	push	{r7, lr}
 8006fae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006fb0:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d008      	beq.n	8006fca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006fb8:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fba:	6a1b      	ldr	r3, [r3, #32]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006fc2:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	4798      	blx	r3
  }
}
 8006fca:	bf00      	nop
 8006fcc:	bd80      	pop	{r7, pc}
 8006fce:	bf00      	nop
 8006fd0:	2001c25c 	.word	0x2001c25c

08006fd4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006fe0:	f04f 0120 	mov.w	r1, #32
 8006fe4:	f381 8811 	msr	BASEPRI, r1
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	480b      	ldr	r0, [pc, #44]	; (8007018 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006fec:	f7fe fe00 	bl	8005bf0 <_PreparePacket>
 8006ff0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ff2:	2280      	movs	r2, #128	; 0x80
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	6938      	ldr	r0, [r7, #16]
 8006ff8:	f7fe fdaa 	bl	8005b50 <_EncodeStr>
 8006ffc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ffe:	220e      	movs	r2, #14
 8007000:	68f9      	ldr	r1, [r7, #12]
 8007002:	6938      	ldr	r0, [r7, #16]
 8007004:	f7fe fee4 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f383 8811 	msr	BASEPRI, r3
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	2001c28c 	.word	0x2001c28c

0800701c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800701c:	b590      	push	{r4, r7, lr}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d01a      	beq.n	8007060 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d015      	beq.n	8007060 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007034:	4b10      	ldr	r3, [pc, #64]	; (8007078 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4798      	blx	r3
 800703c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007040:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8007042:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	000a      	movs	r2, r1
 8007050:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007052:	4613      	mov	r3, r2
 8007054:	461a      	mov	r2, r3
 8007056:	4621      	mov	r1, r4
 8007058:	200d      	movs	r0, #13
 800705a:	f7ff fbe7 	bl	800682c <SEGGER_SYSVIEW_RecordU32x2>
 800705e:	e006      	b.n	800706e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4619      	mov	r1, r3
 8007066:	200c      	movs	r0, #12
 8007068:	f7ff fba4 	bl	80067b4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	bd90      	pop	{r4, r7, pc}
 8007076:	bf00      	nop
 8007078:	2001c25c 	.word	0x2001c25c
 800707c:	e0001004 	.word	0xe0001004

08007080 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007086:	f3ef 8311 	mrs	r3, BASEPRI
 800708a:	f04f 0120 	mov.w	r1, #32
 800708e:	f381 8811 	msr	BASEPRI, r1
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	4819      	ldr	r0, [pc, #100]	; (80070fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007096:	f7fe fdab 	bl	8005bf0 <_PreparePacket>
 800709a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80070a0:	4b17      	ldr	r3, [pc, #92]	; (8007100 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	613b      	str	r3, [r7, #16]
 80070b2:	e00b      	b.n	80070cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	1c59      	adds	r1, r3, #1
 80070bc:	6179      	str	r1, [r7, #20]
 80070be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c2:	b2d2      	uxtb	r2, r2
 80070c4:	701a      	strb	r2, [r3, #0]
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	09db      	lsrs	r3, r3, #7
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b7f      	cmp	r3, #127	; 0x7f
 80070d0:	d8f0      	bhi.n	80070b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	617a      	str	r2, [r7, #20]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	b2d2      	uxtb	r2, r2
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80070e2:	2202      	movs	r2, #2
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	68b8      	ldr	r0, [r7, #8]
 80070e8:	f7fe fe72 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f383 8811 	msr	BASEPRI, r3
}
 80070f2:	bf00      	nop
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	2001c28c 	.word	0x2001c28c
 8007100:	e000ed04 	.word	0xe000ed04

08007104 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800710a:	f3ef 8311 	mrs	r3, BASEPRI
 800710e:	f04f 0120 	mov.w	r1, #32
 8007112:	f381 8811 	msr	BASEPRI, r1
 8007116:	607b      	str	r3, [r7, #4]
 8007118:	4807      	ldr	r0, [pc, #28]	; (8007138 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800711a:	f7fe fd69 	bl	8005bf0 <_PreparePacket>
 800711e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007120:	2203      	movs	r2, #3
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6838      	ldr	r0, [r7, #0]
 8007126:	f7fe fe53 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f383 8811 	msr	BASEPRI, r3
}
 8007130:	bf00      	nop
 8007132:	3708      	adds	r7, #8
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	2001c28c 	.word	0x2001c28c

0800713c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007142:	f3ef 8311 	mrs	r3, BASEPRI
 8007146:	f04f 0120 	mov.w	r1, #32
 800714a:	f381 8811 	msr	BASEPRI, r1
 800714e:	607b      	str	r3, [r7, #4]
 8007150:	4807      	ldr	r0, [pc, #28]	; (8007170 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007152:	f7fe fd4d 	bl	8005bf0 <_PreparePacket>
 8007156:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007158:	2212      	movs	r2, #18
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6838      	ldr	r0, [r7, #0]
 800715e:	f7fe fe37 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f383 8811 	msr	BASEPRI, r3
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	2001c28c 	.word	0x2001c28c

08007174 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800717a:	f3ef 8311 	mrs	r3, BASEPRI
 800717e:	f04f 0120 	mov.w	r1, #32
 8007182:	f381 8811 	msr	BASEPRI, r1
 8007186:	607b      	str	r3, [r7, #4]
 8007188:	4807      	ldr	r0, [pc, #28]	; (80071a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800718a:	f7fe fd31 	bl	8005bf0 <_PreparePacket>
 800718e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007190:	2211      	movs	r2, #17
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6838      	ldr	r0, [r7, #0]
 8007196:	f7fe fe1b 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f383 8811 	msr	BASEPRI, r3
}
 80071a0:	bf00      	nop
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	2001c28c 	.word	0x2001c28c

080071ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071b4:	f3ef 8311 	mrs	r3, BASEPRI
 80071b8:	f04f 0120 	mov.w	r1, #32
 80071bc:	f381 8811 	msr	BASEPRI, r1
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	4819      	ldr	r0, [pc, #100]	; (8007228 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80071c4:	f7fe fd14 	bl	8005bf0 <_PreparePacket>
 80071c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071ce:	4b17      	ldr	r3, [pc, #92]	; (800722c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	61bb      	str	r3, [r7, #24]
 80071e0:	e00b      	b.n	80071fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	1c59      	adds	r1, r3, #1
 80071ea:	61f9      	str	r1, [r7, #28]
 80071ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071f0:	b2d2      	uxtb	r2, r2
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	09db      	lsrs	r3, r3, #7
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	2b7f      	cmp	r3, #127	; 0x7f
 80071fe:	d8f0      	bhi.n	80071e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	1c5a      	adds	r2, r3, #1
 8007204:	61fa      	str	r2, [r7, #28]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007210:	2208      	movs	r2, #8
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	6938      	ldr	r0, [r7, #16]
 8007216:	f7fe fddb 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f383 8811 	msr	BASEPRI, r3
}
 8007220:	bf00      	nop
 8007222:	3720      	adds	r7, #32
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	2001c28c 	.word	0x2001c28c
 800722c:	2001c25c 	.word	0x2001c25c

08007230 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007238:	f3ef 8311 	mrs	r3, BASEPRI
 800723c:	f04f 0120 	mov.w	r1, #32
 8007240:	f381 8811 	msr	BASEPRI, r1
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	4819      	ldr	r0, [pc, #100]	; (80072ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007248:	f7fe fcd2 	bl	8005bf0 <_PreparePacket>
 800724c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007252:	4b17      	ldr	r3, [pc, #92]	; (80072b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	61bb      	str	r3, [r7, #24]
 8007264:	e00b      	b.n	800727e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	b2da      	uxtb	r2, r3
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	1c59      	adds	r1, r3, #1
 800726e:	61f9      	str	r1, [r7, #28]
 8007270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	09db      	lsrs	r3, r3, #7
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b7f      	cmp	r3, #127	; 0x7f
 8007282:	d8f0      	bhi.n	8007266 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	1c5a      	adds	r2, r3, #1
 8007288:	61fa      	str	r2, [r7, #28]
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	b2d2      	uxtb	r2, r2
 800728e:	701a      	strb	r2, [r3, #0]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007294:	2204      	movs	r2, #4
 8007296:	68f9      	ldr	r1, [r7, #12]
 8007298:	6938      	ldr	r0, [r7, #16]
 800729a:	f7fe fd99 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f383 8811 	msr	BASEPRI, r3
}
 80072a4:	bf00      	nop
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2001c28c 	.word	0x2001c28c
 80072b0:	2001c25c 	.word	0x2001c25c

080072b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b088      	sub	sp, #32
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072bc:	f3ef 8311 	mrs	r3, BASEPRI
 80072c0:	f04f 0120 	mov.w	r1, #32
 80072c4:	f381 8811 	msr	BASEPRI, r1
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	4819      	ldr	r0, [pc, #100]	; (8007330 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80072cc:	f7fe fc90 	bl	8005bf0 <_PreparePacket>
 80072d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072d6:	4b17      	ldr	r3, [pc, #92]	; (8007334 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	61fb      	str	r3, [r7, #28]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	e00b      	b.n	8007302 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	b2da      	uxtb	r2, r3
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	1c59      	adds	r1, r3, #1
 80072f2:	61f9      	str	r1, [r7, #28]
 80072f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072f8:	b2d2      	uxtb	r2, r2
 80072fa:	701a      	strb	r2, [r3, #0]
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	09db      	lsrs	r3, r3, #7
 8007300:	61bb      	str	r3, [r7, #24]
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	2b7f      	cmp	r3, #127	; 0x7f
 8007306:	d8f0      	bhi.n	80072ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	61fa      	str	r2, [r7, #28]
 800730e:	69ba      	ldr	r2, [r7, #24]
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007318:	2206      	movs	r2, #6
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	6938      	ldr	r0, [r7, #16]
 800731e:	f7fe fd57 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f383 8811 	msr	BASEPRI, r3
}
 8007328:	bf00      	nop
 800732a:	3720      	adds	r7, #32
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	2001c28c 	.word	0x2001c28c
 8007334:	2001c25c 	.word	0x2001c25c

08007338 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007338:	b580      	push	{r7, lr}
 800733a:	b08a      	sub	sp, #40	; 0x28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007342:	f3ef 8311 	mrs	r3, BASEPRI
 8007346:	f04f 0120 	mov.w	r1, #32
 800734a:	f381 8811 	msr	BASEPRI, r1
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	4827      	ldr	r0, [pc, #156]	; (80073f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007352:	f7fe fc4d 	bl	8005bf0 <_PreparePacket>
 8007356:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800735c:	4b25      	ldr	r3, [pc, #148]	; (80073f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	623b      	str	r3, [r7, #32]
 800736e:	e00b      	b.n	8007388 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	b2da      	uxtb	r2, r3
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	1c59      	adds	r1, r3, #1
 8007378:	6279      	str	r1, [r7, #36]	; 0x24
 800737a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	09db      	lsrs	r3, r3, #7
 8007386:	623b      	str	r3, [r7, #32]
 8007388:	6a3b      	ldr	r3, [r7, #32]
 800738a:	2b7f      	cmp	r3, #127	; 0x7f
 800738c:	d8f0      	bhi.n	8007370 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800738e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007390:	1c5a      	adds	r2, r3, #1
 8007392:	627a      	str	r2, [r7, #36]	; 0x24
 8007394:	6a3a      	ldr	r2, [r7, #32]
 8007396:	b2d2      	uxtb	r2, r2
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	61fb      	str	r3, [r7, #28]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	e00b      	b.n	80073c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	1c59      	adds	r1, r3, #1
 80073b0:	61f9      	str	r1, [r7, #28]
 80073b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073b6:	b2d2      	uxtb	r2, r2
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	09db      	lsrs	r3, r3, #7
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	2b7f      	cmp	r3, #127	; 0x7f
 80073c4:	d8f0      	bhi.n	80073a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	61fa      	str	r2, [r7, #28]
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80073d6:	2207      	movs	r2, #7
 80073d8:	68f9      	ldr	r1, [r7, #12]
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f7fe fcf8 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f383 8811 	msr	BASEPRI, r3
}
 80073e6:	bf00      	nop
 80073e8:	3728      	adds	r7, #40	; 0x28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	2001c28c 	.word	0x2001c28c
 80073f4:	2001c25c 	.word	0x2001c25c

080073f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007400:	4b04      	ldr	r3, [pc, #16]	; (8007414 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	1ad3      	subs	r3, r2, r3
}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	2001c25c 	.word	0x2001c25c

08007418 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007418:	b580      	push	{r7, lr}
 800741a:	b08c      	sub	sp, #48	; 0x30
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007422:	4b3b      	ldr	r3, [pc, #236]	; (8007510 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d06d      	beq.n	8007506 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800742a:	4b39      	ldr	r3, [pc, #228]	; (8007510 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007430:	2300      	movs	r3, #0
 8007432:	62bb      	str	r3, [r7, #40]	; 0x28
 8007434:	e008      	b.n	8007448 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 800743c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743e:	2b00      	cmp	r3, #0
 8007440:	d007      	beq.n	8007452 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	3301      	adds	r3, #1
 8007446:	62bb      	str	r3, [r7, #40]	; 0x28
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800744c:	429a      	cmp	r2, r3
 800744e:	d3f2      	bcc.n	8007436 <SEGGER_SYSVIEW_SendModule+0x1e>
 8007450:	e000      	b.n	8007454 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007452:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d055      	beq.n	8007506 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800745a:	f3ef 8311 	mrs	r3, BASEPRI
 800745e:	f04f 0120 	mov.w	r1, #32
 8007462:	f381 8811 	msr	BASEPRI, r1
 8007466:	617b      	str	r3, [r7, #20]
 8007468:	482a      	ldr	r0, [pc, #168]	; (8007514 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800746a:	f7fe fbc1 	bl	8005bf0 <_PreparePacket>
 800746e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
 8007478:	79fb      	ldrb	r3, [r7, #7]
 800747a:	623b      	str	r3, [r7, #32]
 800747c:	e00b      	b.n	8007496 <SEGGER_SYSVIEW_SendModule+0x7e>
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	b2da      	uxtb	r2, r3
 8007482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007484:	1c59      	adds	r1, r3, #1
 8007486:	6279      	str	r1, [r7, #36]	; 0x24
 8007488:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	09db      	lsrs	r3, r3, #7
 8007494:	623b      	str	r3, [r7, #32]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	2b7f      	cmp	r3, #127	; 0x7f
 800749a:	d8f0      	bhi.n	800747e <SEGGER_SYSVIEW_SendModule+0x66>
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	627a      	str	r2, [r7, #36]	; 0x24
 80074a2:	6a3a      	ldr	r2, [r7, #32]
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	61fb      	str	r3, [r7, #28]
 80074b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	e00b      	b.n	80074d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80074b8:	69bb      	ldr	r3, [r7, #24]
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	1c59      	adds	r1, r3, #1
 80074c0:	61f9      	str	r1, [r7, #28]
 80074c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074c6:	b2d2      	uxtb	r2, r2
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	09db      	lsrs	r3, r3, #7
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	2b7f      	cmp	r3, #127	; 0x7f
 80074d4:	d8f0      	bhi.n	80074b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	61fa      	str	r2, [r7, #28]
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2280      	movs	r2, #128	; 0x80
 80074ec:	4619      	mov	r1, r3
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f7fe fb2e 	bl	8005b50 <_EncodeStr>
 80074f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80074f6:	2216      	movs	r2, #22
 80074f8:	68f9      	ldr	r1, [r7, #12]
 80074fa:	6938      	ldr	r0, [r7, #16]
 80074fc:	f7fe fc68 	bl	8005dd0 <_SendPacket>
      RECORD_END();
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007506:	bf00      	nop
 8007508:	3730      	adds	r7, #48	; 0x30
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	2001c284 	.word	0x2001c284
 8007514:	2001c28c 	.word	0x2001c28c

08007518 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800751e:	4b0c      	ldr	r3, [pc, #48]	; (8007550 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00f      	beq.n	8007546 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007526:	4b0a      	ldr	r3, [pc, #40]	; (8007550 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1f2      	bne.n	800752c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007546:	bf00      	nop
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	2001c284 	.word	0x2001c284

08007554 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800755a:	f3ef 8311 	mrs	r3, BASEPRI
 800755e:	f04f 0120 	mov.w	r1, #32
 8007562:	f381 8811 	msr	BASEPRI, r1
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	4817      	ldr	r0, [pc, #92]	; (80075c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800756a:	f7fe fb41 	bl	8005bf0 <_PreparePacket>
 800756e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	4b14      	ldr	r3, [pc, #80]	; (80075cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	e00b      	b.n	8007598 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	b2da      	uxtb	r2, r3
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	1c59      	adds	r1, r3, #1
 8007588:	6179      	str	r1, [r7, #20]
 800758a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	09db      	lsrs	r3, r3, #7
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	2b7f      	cmp	r3, #127	; 0x7f
 800759c:	d8f0      	bhi.n	8007580 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	617a      	str	r2, [r7, #20]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	b2d2      	uxtb	r2, r2
 80075a8:	701a      	strb	r2, [r3, #0]
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80075ae:	221b      	movs	r2, #27
 80075b0:	6879      	ldr	r1, [r7, #4]
 80075b2:	68b8      	ldr	r0, [r7, #8]
 80075b4:	f7fe fc0c 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f383 8811 	msr	BASEPRI, r3
}
 80075be:	bf00      	nop
 80075c0:	3718      	adds	r7, #24
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	2001c28c 	.word	0x2001c28c
 80075cc:	2001c288 	.word	0x2001c288

080075d0 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80075d0:	b40f      	push	{r0, r1, r2, r3}
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b082      	sub	sp, #8
 80075d6:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80075d8:	f107 0314 	add.w	r3, r7, #20
 80075dc:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80075de:	1d3b      	adds	r3, r7, #4
 80075e0:	461a      	mov	r2, r3
 80075e2:	2100      	movs	r1, #0
 80075e4:	6938      	ldr	r0, [r7, #16]
 80075e6:	f7fe fe7b 	bl	80062e0 <_VPrintTarget>
  va_end(ParamList);
}
 80075ea:	bf00      	nop
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075f4:	b004      	add	sp, #16
 80075f6:	4770      	bx	lr

080075f8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b08a      	sub	sp, #40	; 0x28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007600:	f3ef 8311 	mrs	r3, BASEPRI
 8007604:	f04f 0120 	mov.w	r1, #32
 8007608:	f381 8811 	msr	BASEPRI, r1
 800760c:	617b      	str	r3, [r7, #20]
 800760e:	4827      	ldr	r0, [pc, #156]	; (80076ac <SEGGER_SYSVIEW_Warn+0xb4>)
 8007610:	f7fe faee 	bl	8005bf0 <_PreparePacket>
 8007614:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007616:	2280      	movs	r2, #128	; 0x80
 8007618:	6879      	ldr	r1, [r7, #4]
 800761a:	6938      	ldr	r0, [r7, #16]
 800761c:	f7fe fa98 	bl	8005b50 <_EncodeStr>
 8007620:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
 8007626:	2301      	movs	r3, #1
 8007628:	623b      	str	r3, [r7, #32]
 800762a:	e00b      	b.n	8007644 <SEGGER_SYSVIEW_Warn+0x4c>
 800762c:	6a3b      	ldr	r3, [r7, #32]
 800762e:	b2da      	uxtb	r2, r3
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	1c59      	adds	r1, r3, #1
 8007634:	6279      	str	r1, [r7, #36]	; 0x24
 8007636:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	09db      	lsrs	r3, r3, #7
 8007642:	623b      	str	r3, [r7, #32]
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	2b7f      	cmp	r3, #127	; 0x7f
 8007648:	d8f0      	bhi.n	800762c <SEGGER_SYSVIEW_Warn+0x34>
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	627a      	str	r2, [r7, #36]	; 0x24
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]
 8007656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	61fb      	str	r3, [r7, #28]
 800765e:	2300      	movs	r3, #0
 8007660:	61bb      	str	r3, [r7, #24]
 8007662:	e00b      	b.n	800767c <SEGGER_SYSVIEW_Warn+0x84>
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	1c59      	adds	r1, r3, #1
 800766c:	61f9      	str	r1, [r7, #28]
 800766e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	09db      	lsrs	r3, r3, #7
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	69bb      	ldr	r3, [r7, #24]
 800767e:	2b7f      	cmp	r3, #127	; 0x7f
 8007680:	d8f0      	bhi.n	8007664 <SEGGER_SYSVIEW_Warn+0x6c>
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	61fa      	str	r2, [r7, #28]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007692:	221a      	movs	r2, #26
 8007694:	68f9      	ldr	r1, [r7, #12]
 8007696:	6938      	ldr	r0, [r7, #16]
 8007698:	f7fe fb9a 	bl	8005dd0 <_SendPacket>
  RECORD_END();
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	f383 8811 	msr	BASEPRI, r3
}
 80076a2:	bf00      	nop
 80076a4:	3728      	adds	r7, #40	; 0x28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	2001c28c 	.word	0x2001c28c

080076b0 <__libc_init_array>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	4d0d      	ldr	r5, [pc, #52]	; (80076e8 <__libc_init_array+0x38>)
 80076b4:	4c0d      	ldr	r4, [pc, #52]	; (80076ec <__libc_init_array+0x3c>)
 80076b6:	1b64      	subs	r4, r4, r5
 80076b8:	10a4      	asrs	r4, r4, #2
 80076ba:	2600      	movs	r6, #0
 80076bc:	42a6      	cmp	r6, r4
 80076be:	d109      	bne.n	80076d4 <__libc_init_array+0x24>
 80076c0:	4d0b      	ldr	r5, [pc, #44]	; (80076f0 <__libc_init_array+0x40>)
 80076c2:	4c0c      	ldr	r4, [pc, #48]	; (80076f4 <__libc_init_array+0x44>)
 80076c4:	f000 f83c 	bl	8007740 <_init>
 80076c8:	1b64      	subs	r4, r4, r5
 80076ca:	10a4      	asrs	r4, r4, #2
 80076cc:	2600      	movs	r6, #0
 80076ce:	42a6      	cmp	r6, r4
 80076d0:	d105      	bne.n	80076de <__libc_init_array+0x2e>
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80076d8:	4798      	blx	r3
 80076da:	3601      	adds	r6, #1
 80076dc:	e7ee      	b.n	80076bc <__libc_init_array+0xc>
 80076de:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e2:	4798      	blx	r3
 80076e4:	3601      	adds	r6, #1
 80076e6:	e7f2      	b.n	80076ce <__libc_init_array+0x1e>
 80076e8:	080078e4 	.word	0x080078e4
 80076ec:	080078e4 	.word	0x080078e4
 80076f0:	080078e4 	.word	0x080078e4
 80076f4:	080078e8 	.word	0x080078e8

080076f8 <memcmp>:
 80076f8:	b530      	push	{r4, r5, lr}
 80076fa:	3901      	subs	r1, #1
 80076fc:	2400      	movs	r4, #0
 80076fe:	42a2      	cmp	r2, r4
 8007700:	d101      	bne.n	8007706 <memcmp+0xe>
 8007702:	2000      	movs	r0, #0
 8007704:	e005      	b.n	8007712 <memcmp+0x1a>
 8007706:	5d03      	ldrb	r3, [r0, r4]
 8007708:	3401      	adds	r4, #1
 800770a:	5d0d      	ldrb	r5, [r1, r4]
 800770c:	42ab      	cmp	r3, r5
 800770e:	d0f6      	beq.n	80076fe <memcmp+0x6>
 8007710:	1b58      	subs	r0, r3, r5
 8007712:	bd30      	pop	{r4, r5, pc}

08007714 <memcpy>:
 8007714:	440a      	add	r2, r1
 8007716:	4291      	cmp	r1, r2
 8007718:	f100 33ff 	add.w	r3, r0, #4294967295
 800771c:	d100      	bne.n	8007720 <memcpy+0xc>
 800771e:	4770      	bx	lr
 8007720:	b510      	push	{r4, lr}
 8007722:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800772a:	4291      	cmp	r1, r2
 800772c:	d1f9      	bne.n	8007722 <memcpy+0xe>
 800772e:	bd10      	pop	{r4, pc}

08007730 <memset>:
 8007730:	4402      	add	r2, r0
 8007732:	4603      	mov	r3, r0
 8007734:	4293      	cmp	r3, r2
 8007736:	d100      	bne.n	800773a <memset+0xa>
 8007738:	4770      	bx	lr
 800773a:	f803 1b01 	strb.w	r1, [r3], #1
 800773e:	e7f9      	b.n	8007734 <memset+0x4>

08007740 <_init>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	bf00      	nop
 8007744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007746:	bc08      	pop	{r3}
 8007748:	469e      	mov	lr, r3
 800774a:	4770      	bx	lr

0800774c <_fini>:
 800774c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774e:	bf00      	nop
 8007750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007752:	bc08      	pop	{r3}
 8007754:	469e      	mov	lr, r3
 8007756:	4770      	bx	lr
