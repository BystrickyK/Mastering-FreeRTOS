
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005824  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080059e4  080059e4  000159e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b54  08005b54  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005b54  08005b54  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b54  08005b54  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004220  20000078  08005bd4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004298  08005bd4  00024298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001684d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce9  00000000  00000000  000368f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  000395e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003a7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c006  00000000  00000000  0003b838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b52  00000000  00000000  0006783e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d902  00000000  00000000  0007a390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00187c92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ac  00000000  00000000  00187ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080059cc 	.word	0x080059cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	080059cc 	.word	0x080059cc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a6:	f000 fb1c 	bl	80008e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002aa:	f000 f853 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ae:	f000 f899 	bl	80003e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  printf("I'm working.\n");
 80002b2:	4820      	ldr	r0, [pc, #128]	; (8000334 <main+0x94>)
 80002b4:	f004 fc36 	bl	8004b24 <puts>

  status = xTaskCreate(task_handler, "Task-1", 200, "Hello world from Task1",
 80002b8:	f107 0308 	add.w	r3, r7, #8
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2302      	movs	r3, #2
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	4b1d      	ldr	r3, [pc, #116]	; (8000338 <main+0x98>)
 80002c4:	22c8      	movs	r2, #200	; 0xc8
 80002c6:	491d      	ldr	r1, [pc, #116]	; (800033c <main+0x9c>)
 80002c8:	481d      	ldr	r0, [pc, #116]	; (8000340 <main+0xa0>)
 80002ca:	f002 fcb3 	bl	8002c34 <xTaskCreate>
 80002ce:	6178      	str	r0, [r7, #20]
              2, &task1_handle);
  printf("Task 1 status: %ld", status);
 80002d0:	6979      	ldr	r1, [r7, #20]
 80002d2:	481c      	ldr	r0, [pc, #112]	; (8000344 <main+0xa4>)
 80002d4:	f004 fba0 	bl	8004a18 <iprintf>
  configASSERT(status == pdPASS);
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d00a      	beq.n	80002f4 <main+0x54>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80002de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002e2:	f383 8811 	msr	BASEPRI, r3
 80002e6:	f3bf 8f6f 	isb	sy
 80002ea:	f3bf 8f4f 	dsb	sy
 80002ee:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80002f0:	bf00      	nop
 80002f2:	e7fe      	b.n	80002f2 <main+0x52>

  status = xTaskCreate(task_handler, "Task-2", 200, "Hello world from Task2",
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	2302      	movs	r3, #2
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <main+0xa8>)
 80002fe:	22c8      	movs	r2, #200	; 0xc8
 8000300:	4912      	ldr	r1, [pc, #72]	; (800034c <main+0xac>)
 8000302:	480f      	ldr	r0, [pc, #60]	; (8000340 <main+0xa0>)
 8000304:	f002 fc96 	bl	8002c34 <xTaskCreate>
 8000308:	6178      	str	r0, [r7, #20]
              2, &task2_handle);
  printf("Task 2 status: %ld", status);
 800030a:	6979      	ldr	r1, [r7, #20]
 800030c:	4810      	ldr	r0, [pc, #64]	; (8000350 <main+0xb0>)
 800030e:	f004 fb83 	bl	8004a18 <iprintf>
  configASSERT(status == pdPASS);
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d00a      	beq.n	800032e <main+0x8e>
        __asm volatile
 8000318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800031c:	f383 8811 	msr	BASEPRI, r3
 8000320:	f3bf 8f6f 	isb	sy
 8000324:	f3bf 8f4f 	dsb	sy
 8000328:	60fb      	str	r3, [r7, #12]
    }
 800032a:	bf00      	nop
 800032c:	e7fe      	b.n	800032c <main+0x8c>

  vTaskStartScheduler();
 800032e:	f002 fdff 	bl	8002f30 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000332:	e7fe      	b.n	8000332 <main+0x92>
 8000334:	080059e4 	.word	0x080059e4
 8000338:	080059f4 	.word	0x080059f4
 800033c:	08005a0c 	.word	0x08005a0c
 8000340:	080005b5 	.word	0x080005b5
 8000344:	08005a14 	.word	0x08005a14
 8000348:	08005a28 	.word	0x08005a28
 800034c:	08005a40 	.word	0x08005a40
 8000350:	08005a48 	.word	0x08005a48

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b096      	sub	sp, #88	; 0x58
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0314 	add.w	r3, r7, #20
 800035e:	2244      	movs	r2, #68	; 0x44
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f004 fb50 	bl	8004a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	463b      	mov	r3, r7
 800036a:	2200      	movs	r2, #0
 800036c:	601a      	str	r2, [r3, #0]
 800036e:	605a      	str	r2, [r3, #4]
 8000370:	609a      	str	r2, [r3, #8]
 8000372:	60da      	str	r2, [r3, #12]
 8000374:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000376:	f44f 7000 	mov.w	r0, #512	; 0x200
 800037a:	f000 fd97 	bl	8000eac <HAL_PWREx_ControlVoltageScaling>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000384:	f000 f93a 	bl	80005fc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000388:	2310      	movs	r3, #16
 800038a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000390:	2300      	movs	r3, #0
 8000392:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000394:	2360      	movs	r3, #96	; 0x60
 8000396:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000398:	2300      	movs	r3, #0
 800039a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039c:	f107 0314 	add.w	r3, r7, #20
 80003a0:	4618      	mov	r0, r3
 80003a2:	f000 fe37 	bl	8001014 <HAL_RCC_OscConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80003ac:	f000 f926 	bl	80005fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003b0:	230f      	movs	r3, #15
 80003b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80003b4:	2300      	movs	r3, #0
 80003b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c6:	463b      	mov	r3, r7
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f001 fa48 	bl	8001860 <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x86>
  {
    Error_Handler();
 80003d6:	f000 f911 	bl	80005fc <Error_Handler>
  }
}
 80003da:	bf00      	nop
 80003dc:	3758      	adds	r7, #88	; 0x58
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
	...

080003e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b08c      	sub	sp, #48	; 0x30
 80003e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ea:	f107 031c 	add.w	r3, r7, #28
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	605a      	str	r2, [r3, #4]
 80003f4:	609a      	str	r2, [r3, #8]
 80003f6:	60da      	str	r2, [r3, #12]
 80003f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fa:	4b69      	ldr	r3, [pc, #420]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 80003fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fe:	4a68      	ldr	r2, [pc, #416]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000406:	4b66      	ldr	r3, [pc, #408]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040a:	f003 0304 	and.w	r3, r3, #4
 800040e:	61bb      	str	r3, [r7, #24]
 8000410:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000412:	4b63      	ldr	r3, [pc, #396]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000416:	4a62      	ldr	r2, [pc, #392]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800041c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800041e:	4b60      	ldr	r3, [pc, #384]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000426:	617b      	str	r3, [r7, #20]
 8000428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800042a:	4b5d      	ldr	r3, [pc, #372]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 800042c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042e:	4a5c      	ldr	r2, [pc, #368]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000430:	f043 0302 	orr.w	r3, r3, #2
 8000434:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000436:	4b5a      	ldr	r3, [pc, #360]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	613b      	str	r3, [r7, #16]
 8000440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000442:	4b57      	ldr	r3, [pc, #348]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000446:	4a56      	ldr	r2, [pc, #344]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000448:	f043 0308 	orr.w	r3, r3, #8
 800044c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044e:	4b54      	ldr	r3, [pc, #336]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000452:	f003 0308 	and.w	r3, r3, #8
 8000456:	60fb      	str	r3, [r7, #12]
 8000458:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800045a:	4b51      	ldr	r3, [pc, #324]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800045e:	4a50      	ldr	r2, [pc, #320]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000466:	4b4e      	ldr	r3, [pc, #312]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800046e:	60bb      	str	r3, [r7, #8]
 8000470:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000472:	f000 fdbf 	bl	8000ff4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b4a      	ldr	r3, [pc, #296]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a49      	ldr	r2, [pc, #292]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 800047c:	f043 0301 	orr.w	r3, r3, #1
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b47      	ldr	r3, [pc, #284]	; (80005a0 <MX_GPIO_Init+0x1bc>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000494:	4843      	ldr	r0, [pc, #268]	; (80005a4 <MX_GPIO_Init+0x1c0>)
 8000496:	f000 fcd1 	bl	8000e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2140      	movs	r1, #64	; 0x40
 800049e:	4842      	ldr	r0, [pc, #264]	; (80005a8 <MX_GPIO_Init+0x1c4>)
 80004a0:	f000 fccc 	bl	8000e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80004ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004b4:	f107 031c 	add.w	r3, r7, #28
 80004b8:	4619      	mov	r1, r3
 80004ba:	483c      	ldr	r0, [pc, #240]	; (80005ac <MX_GPIO_Init+0x1c8>)
 80004bc:	f000 fb2c 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80004c0:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80004c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c6:	2301      	movs	r3, #1
 80004c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ca:	2300      	movs	r3, #0
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ce:	2300      	movs	r3, #0
 80004d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d2:	f107 031c 	add.w	r3, r7, #28
 80004d6:	4619      	mov	r1, r3
 80004d8:	4832      	ldr	r0, [pc, #200]	; (80005a4 <MX_GPIO_Init+0x1c0>)
 80004da:	f000 fb1d 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80004de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80004e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e4:	2302      	movs	r3, #2
 80004e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e8:	2300      	movs	r3, #0
 80004ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004ec:	2303      	movs	r3, #3
 80004ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80004f0:	2307      	movs	r3, #7
 80004f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004f4:	f107 031c 	add.w	r3, r7, #28
 80004f8:	4619      	mov	r1, r3
 80004fa:	482d      	ldr	r0, [pc, #180]	; (80005b0 <MX_GPIO_Init+0x1cc>)
 80004fc:	f000 fb0c 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000500:	2320      	movs	r3, #32
 8000502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 031c 	add.w	r3, r7, #28
 8000510:	4619      	mov	r1, r3
 8000512:	4825      	ldr	r0, [pc, #148]	; (80005a8 <MX_GPIO_Init+0x1c4>)
 8000514:	f000 fb00 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000518:	2340      	movs	r3, #64	; 0x40
 800051a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051c:	2301      	movs	r3, #1
 800051e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000524:	2300      	movs	r3, #0
 8000526:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000528:	f107 031c 	add.w	r3, r7, #28
 800052c:	4619      	mov	r1, r3
 800052e:	481e      	ldr	r0, [pc, #120]	; (80005a8 <MX_GPIO_Init+0x1c4>)
 8000530:	f000 faf2 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000534:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800053a:	2302      	movs	r3, #2
 800053c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000542:	2303      	movs	r3, #3
 8000544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000546:	2308      	movs	r3, #8
 8000548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800054a:	f107 031c 	add.w	r3, r7, #28
 800054e:	4619      	mov	r1, r3
 8000550:	4815      	ldr	r0, [pc, #84]	; (80005a8 <MX_GPIO_Init+0x1c4>)
 8000552:	f000 fae1 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000556:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800055a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	2302      	movs	r3, #2
 800055e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000564:	2303      	movs	r3, #3
 8000566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000568:	230a      	movs	r3, #10
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056c:	f107 031c 	add.w	r3, r7, #28
 8000570:	4619      	mov	r1, r3
 8000572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000576:	f000 facf 	bl	8000b18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800057a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800057e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 031c 	add.w	r3, r7, #28
 800058c:	4619      	mov	r1, r3
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fac1 	bl	8000b18 <HAL_GPIO_Init>

}
 8000596:	bf00      	nop
 8000598:	3730      	adds	r7, #48	; 0x30
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000
 80005a4:	48000400 	.word	0x48000400
 80005a8:	48001800 	.word	0x48001800
 80005ac:	48000800 	.word	0x48000800
 80005b0:	48000c00 	.word	0x48000c00

080005b4 <task_handler>:

/* USER CODE BEGIN 4 */

static void task_handler(void* parameters)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	printf("%s\n", (char*)parameters);
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f004 fab1 	bl	8004b24 <puts>
	taskYIELD();
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <task_handler+0x20>)
 80005c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	f3bf 8f4f 	dsb	sy
 80005ce:	f3bf 8f6f 	isb	sy
	printf("%s\n", (char*)parameters);
 80005d2:	e7f3      	b.n	80005bc <task_handler+0x8>
 80005d4:	e000ed04 	.word	0xe000ed04

080005d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d101      	bne.n	80005ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005ea:	f000 f993 	bl	8000914 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40001000 	.word	0x40001000

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>
	...

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_MspInit+0x44>)
 8000610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000612:	4a0e      	ldr	r2, [pc, #56]	; (800064c <HAL_MspInit+0x44>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6613      	str	r3, [r2, #96]	; 0x60
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_MspInit+0x44>)
 800061c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_MspInit+0x44>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_MspInit+0x44>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	6593      	str	r3, [r2, #88]	; 0x58
 8000632:	4b06      	ldr	r3, [pc, #24]	; (800064c <HAL_MspInit+0x44>)
 8000634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	603b      	str	r3, [r7, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40021000 	.word	0x40021000

08000650 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	2036      	movs	r0, #54	; 0x36
 8000666:	f000 fa2d 	bl	8000ac4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800066a:	2036      	movs	r0, #54	; 0x36
 800066c:	f000 fa46 	bl	8000afc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <HAL_InitTick+0xa0>)
 8000672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000674:	4a1e      	ldr	r2, [pc, #120]	; (80006f0 <HAL_InitTick+0xa0>)
 8000676:	f043 0310 	orr.w	r3, r3, #16
 800067a:	6593      	str	r3, [r2, #88]	; 0x58
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <HAL_InitTick+0xa0>)
 800067e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000688:	f107 0210 	add.w	r2, r7, #16
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4611      	mov	r1, r2
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fabe 	bl	8001c14 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000698:	f001 faa6 	bl	8001be8 <HAL_RCC_GetPCLK1Freq>
 800069c:	4603      	mov	r3, r0
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <HAL_InitTick+0xa4>)
 80006a6:	fba2 2303 	umull	r2, r3, r2, r3
 80006aa:	0c9b      	lsrs	r3, r3, #18
 80006ac:	3b01      	subs	r3, #1
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <HAL_InitTick+0xa8>)
 80006b2:	4a12      	ldr	r2, [pc, #72]	; (80006fc <HAL_InitTick+0xac>)
 80006b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80006b6:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <HAL_InitTick+0xa8>)
 80006b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80006be:	4a0e      	ldr	r2, [pc, #56]	; (80006f8 <HAL_InitTick+0xa8>)
 80006c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <HAL_InitTick+0xa8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <HAL_InitTick+0xa8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80006d0:	4809      	ldr	r0, [pc, #36]	; (80006f8 <HAL_InitTick+0xa8>)
 80006d2:	f001 fb93 	bl	8001dfc <HAL_TIM_Base_Init>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d104      	bne.n	80006e6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <HAL_InitTick+0xa8>)
 80006de:	f001 fbef 	bl	8001ec0 <HAL_TIM_Base_Start_IT>
 80006e2:	4603      	mov	r3, r0
 80006e4:	e000      	b.n	80006e8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3730      	adds	r7, #48	; 0x30
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	431bde83 	.word	0x431bde83
 80006f8:	20004210 	.word	0x20004210
 80006fc:	40001000 	.word	0x40001000

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000704:	e7fe      	b.n	8000704 <NMI_Handler+0x4>

08000706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070a:	e7fe      	b.n	800070a <HardFault_Handler+0x4>

0800070c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <MemManage_Handler+0x4>

08000712 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <BusFault_Handler+0x4>

08000718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <UsageFault_Handler+0x4>

0800071e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr

0800072c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <TIM6_DAC_IRQHandler+0x10>)
 8000732:	f001 fc35 	bl	8001fa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20004210 	.word	0x20004210

08000740 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <ITM_SendChar+0x48>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <ITM_SendChar+0x48>)
 8000750:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000754:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <ITM_SendChar+0x4c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a0c      	ldr	r2, [pc, #48]	; (800078c <ITM_SendChar+0x4c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000762:	bf00      	nop
 8000764:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	2b00      	cmp	r3, #0
 8000770:	d0f8      	beq.n	8000764 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000772:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	6013      	str	r3, [r2, #0]
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	e000edfc 	.word	0xe000edfc
 800078c:	e0000e00 	.word	0xe0000e00

08000790 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	60b9      	str	r1, [r7, #8]
 800079a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	e00a      	b.n	80007b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007a2:	f3af 8000 	nop.w
 80007a6:	4601      	mov	r1, r0
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	60ba      	str	r2, [r7, #8]
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	429a      	cmp	r2, r3
 80007be:	dbf0      	blt.n	80007a2 <_read+0x12>
	}

return len;
 80007c0:	687b      	ldr	r3, [r7, #4]
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3718      	adds	r7, #24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	60f8      	str	r0, [r7, #12]
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	e009      	b.n	80007f0 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffab 	bl	8000740 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	3301      	adds	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697a      	ldr	r2, [r7, #20]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	dbf1      	blt.n	80007dc <_write+0x12>
	}
	return len;
 80007f8:	687b      	ldr	r3, [r7, #4]
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <_close>:

int _close(int file)
{
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
	return -1;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800080e:	4618      	mov	r0, r3
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800082a:	605a      	str	r2, [r3, #4]
	return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <_isatty>:

int _isatty(int file)
{
 800083a:	b480      	push	{r7}
 800083c:	b083      	sub	sp, #12
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
	return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	4618      	mov	r0, r3
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	return 0;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	3714      	adds	r7, #20
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
	...

0800086c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <SystemInit+0x20>)
 8000872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000876:	4a05      	ldr	r2, [pc, #20]	; (800088c <SystemInit+0x20>)
 8000878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800087c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000894:	f7ff ffea 	bl	800086c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	; (80008d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	; (80008dc <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008be:	f004 f871 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008c2:	f7ff fced 	bl	80002a0 <main>

080008c6 <LoopForever>:

LoopForever:
    b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008c8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80008d4:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 80008d8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80008dc:	20004298 	.word	0x20004298

080008e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC1_IRQHandler>

080008e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008e8:	2300      	movs	r3, #0
 80008ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ec:	2003      	movs	r0, #3
 80008ee:	f000 f8de 	bl	8000aae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008f2:	200f      	movs	r0, #15
 80008f4:	f7ff feac 	bl	8000650 <HAL_InitTick>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d002      	beq.n	8000904 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	e001      	b.n	8000908 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000904:	f7ff fe80 	bl	8000608 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000908:	79fb      	ldrb	r3, [r7, #7]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_IncTick+0x20>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_IncTick+0x24>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4413      	add	r3, r2
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <HAL_IncTick+0x24>)
 8000926:	6013      	str	r3, [r2, #0]
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20000008 	.word	0x20000008
 8000938:	2000425c 	.word	0x2000425c

0800093c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  return uwTick;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <HAL_GetTick+0x14>)
 8000942:	681b      	ldr	r3, [r3, #0]
}
 8000944:	4618      	mov	r0, r3
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2000425c 	.word	0x2000425c

08000954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096a:	68ba      	ldr	r2, [r7, #8]
 800096c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000970:	4013      	ands	r3, r2
 8000972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800097c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000986:	4a04      	ldr	r2, [pc, #16]	; (8000998 <__NVIC_SetPriorityGrouping+0x44>)
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	60d3      	str	r3, [r2, #12]
}
 800098c:	bf00      	nop
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	e000ed00 	.word	0xe000ed00

0800099c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a0:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <__NVIC_GetPriorityGrouping+0x18>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	0a1b      	lsrs	r3, r3, #8
 80009a6:	f003 0307 	and.w	r3, r3, #7
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	db0b      	blt.n	80009e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 021f 	and.w	r2, r3, #31
 80009d0:	4907      	ldr	r1, [pc, #28]	; (80009f0 <__NVIC_EnableIRQ+0x38>)
 80009d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d6:	095b      	lsrs	r3, r3, #5
 80009d8:	2001      	movs	r0, #1
 80009da:	fa00 f202 	lsl.w	r2, r0, r2
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000e100 	.word	0xe000e100

080009f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	db0a      	blt.n	8000a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	b2da      	uxtb	r2, r3
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <__NVIC_SetPriority+0x4c>)
 8000a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a12:	0112      	lsls	r2, r2, #4
 8000a14:	b2d2      	uxtb	r2, r2
 8000a16:	440b      	add	r3, r1
 8000a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a1c:	e00a      	b.n	8000a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4908      	ldr	r1, [pc, #32]	; (8000a44 <__NVIC_SetPriority+0x50>)
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	f003 030f 	and.w	r3, r3, #15
 8000a2a:	3b04      	subs	r3, #4
 8000a2c:	0112      	lsls	r2, r2, #4
 8000a2e:	b2d2      	uxtb	r2, r2
 8000a30:	440b      	add	r3, r1
 8000a32:	761a      	strb	r2, [r3, #24]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000e100 	.word	0xe000e100
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f1c3 0307 	rsb	r3, r3, #7
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	bf28      	it	cs
 8000a66:	2304      	movcs	r3, #4
 8000a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	3304      	adds	r3, #4
 8000a6e:	2b06      	cmp	r3, #6
 8000a70:	d902      	bls.n	8000a78 <NVIC_EncodePriority+0x30>
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3b03      	subs	r3, #3
 8000a76:	e000      	b.n	8000a7a <NVIC_EncodePriority+0x32>
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	43da      	mvns	r2, r3
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	401a      	ands	r2, r3
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a90:	f04f 31ff 	mov.w	r1, #4294967295
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9a:	43d9      	mvns	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa0:	4313      	orrs	r3, r2
         );
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3724      	adds	r7, #36	; 0x24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b082      	sub	sp, #8
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f7ff ff4c 	bl	8000954 <__NVIC_SetPriorityGrouping>
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad6:	f7ff ff61 	bl	800099c <__NVIC_GetPriorityGrouping>
 8000ada:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	68b9      	ldr	r1, [r7, #8]
 8000ae0:	6978      	ldr	r0, [r7, #20]
 8000ae2:	f7ff ffb1 	bl	8000a48 <NVIC_EncodePriority>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aec:	4611      	mov	r1, r2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff80 	bl	80009f4 <__NVIC_SetPriority>
}
 8000af4:	bf00      	nop
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff ff54 	bl	80009b8 <__NVIC_EnableIRQ>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b26:	e166      	b.n	8000df6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	4013      	ands	r3, r2
 8000b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f000 8158 	beq.w	8000df0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f003 0303 	and.w	r3, r3, #3
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d005      	beq.n	8000b58 <HAL_GPIO_Init+0x40>
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d130      	bne.n	8000bba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	2203      	movs	r2, #3
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b8e:	2201      	movs	r2, #1
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa02 f303 	lsl.w	r3, r2, r3
 8000b96:	43db      	mvns	r3, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4013      	ands	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	091b      	lsrs	r3, r3, #4
 8000ba4:	f003 0201 	and.w	r2, r3, #1
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d017      	beq.n	8000bf6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	43db      	mvns	r3, r3
 8000bd8:	693a      	ldr	r2, [r7, #16]
 8000bda:	4013      	ands	r3, r2
 8000bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d123      	bne.n	8000c4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	08da      	lsrs	r2, r3, #3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3208      	adds	r2, #8
 8000c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	220f      	movs	r2, #15
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	691a      	ldr	r2, [r3, #16]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f003 0307 	and.w	r3, r3, #7
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	08da      	lsrs	r2, r3, #3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3208      	adds	r2, #8
 8000c44:	6939      	ldr	r1, [r7, #16]
 8000c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0203 	and.w	r2, r3, #3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	693a      	ldr	r2, [r7, #16]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80b2 	beq.w	8000df0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8c:	4b61      	ldr	r3, [pc, #388]	; (8000e14 <HAL_GPIO_Init+0x2fc>)
 8000c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c90:	4a60      	ldr	r2, [pc, #384]	; (8000e14 <HAL_GPIO_Init+0x2fc>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6613      	str	r3, [r2, #96]	; 0x60
 8000c98:	4b5e      	ldr	r3, [pc, #376]	; (8000e14 <HAL_GPIO_Init+0x2fc>)
 8000c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ca4:	4a5c      	ldr	r2, [pc, #368]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cce:	d02b      	beq.n	8000d28 <HAL_GPIO_Init+0x210>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a52      	ldr	r2, [pc, #328]	; (8000e1c <HAL_GPIO_Init+0x304>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d025      	beq.n	8000d24 <HAL_GPIO_Init+0x20c>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a51      	ldr	r2, [pc, #324]	; (8000e20 <HAL_GPIO_Init+0x308>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d01f      	beq.n	8000d20 <HAL_GPIO_Init+0x208>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a50      	ldr	r2, [pc, #320]	; (8000e24 <HAL_GPIO_Init+0x30c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d019      	beq.n	8000d1c <HAL_GPIO_Init+0x204>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a4f      	ldr	r2, [pc, #316]	; (8000e28 <HAL_GPIO_Init+0x310>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d013      	beq.n	8000d18 <HAL_GPIO_Init+0x200>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <HAL_GPIO_Init+0x314>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d00d      	beq.n	8000d14 <HAL_GPIO_Init+0x1fc>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a4d      	ldr	r2, [pc, #308]	; (8000e30 <HAL_GPIO_Init+0x318>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d007      	beq.n	8000d10 <HAL_GPIO_Init+0x1f8>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a4c      	ldr	r2, [pc, #304]	; (8000e34 <HAL_GPIO_Init+0x31c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d101      	bne.n	8000d0c <HAL_GPIO_Init+0x1f4>
 8000d08:	2307      	movs	r3, #7
 8000d0a:	e00e      	b.n	8000d2a <HAL_GPIO_Init+0x212>
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	e00c      	b.n	8000d2a <HAL_GPIO_Init+0x212>
 8000d10:	2306      	movs	r3, #6
 8000d12:	e00a      	b.n	8000d2a <HAL_GPIO_Init+0x212>
 8000d14:	2305      	movs	r3, #5
 8000d16:	e008      	b.n	8000d2a <HAL_GPIO_Init+0x212>
 8000d18:	2304      	movs	r3, #4
 8000d1a:	e006      	b.n	8000d2a <HAL_GPIO_Init+0x212>
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e004      	b.n	8000d2a <HAL_GPIO_Init+0x212>
 8000d20:	2302      	movs	r3, #2
 8000d22:	e002      	b.n	8000d2a <HAL_GPIO_Init+0x212>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <HAL_GPIO_Init+0x212>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	f002 0203 	and.w	r2, r2, #3
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	4093      	lsls	r3, r2
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d3a:	4937      	ldr	r1, [pc, #220]	; (8000e18 <HAL_GPIO_Init+0x300>)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3302      	adds	r3, #2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43db      	mvns	r3, r3
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d003      	beq.n	8000d6c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d6c:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d003      	beq.n	8000d96 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d96:	4a28      	ldr	r2, [pc, #160]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d9c:	4b26      	ldr	r3, [pc, #152]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d003      	beq.n	8000dc0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	43db      	mvns	r3, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dea:	4a13      	ldr	r2, [pc, #76]	; (8000e38 <HAL_GPIO_Init+0x320>)
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f47f ae91 	bne.w	8000b28 <HAL_GPIO_Init+0x10>
  }
}
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	371c      	adds	r7, #28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010000 	.word	0x40010000
 8000e1c:	48000400 	.word	0x48000400
 8000e20:	48000800 	.word	0x48000800
 8000e24:	48000c00 	.word	0x48000c00
 8000e28:	48001000 	.word	0x48001000
 8000e2c:	48001400 	.word	0x48001400
 8000e30:	48001800 	.word	0x48001800
 8000e34:	48001c00 	.word	0x48001c00
 8000e38:	40010400 	.word	0x40010400

08000e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	807b      	strh	r3, [r7, #2]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e4c:	787b      	ldrb	r3, [r7, #1]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e7c:	d102      	bne.n	8000e84 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e82:	e00b      	b.n	8000e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000e84:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e92:	d102      	bne.n	8000e9a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000e94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e98:	e000      	b.n	8000e9c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000e9a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40007000 	.word	0x40007000

08000eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d141      	bne.n	8000f3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000eba:	4b4b      	ldr	r3, [pc, #300]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec6:	d131      	bne.n	8000f2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ec8:	4b47      	ldr	r3, [pc, #284]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ece:	4a46      	ldr	r2, [pc, #280]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ed4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ee0:	4a41      	ldr	r2, [pc, #260]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000ee8:	4b40      	ldr	r3, [pc, #256]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2232      	movs	r2, #50	; 0x32
 8000eee:	fb02 f303 	mul.w	r3, r2, r3
 8000ef2:	4a3f      	ldr	r2, [pc, #252]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef8:	0c9b      	lsrs	r3, r3, #18
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000efe:	e002      	b.n	8000f06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f06:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f12:	d102      	bne.n	8000f1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f2      	bne.n	8000f00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f1a:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f26:	d158      	bne.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e057      	b.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f2c:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f32:	4a2d      	ldr	r2, [pc, #180]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f3c:	e04d      	b.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f44:	d141      	bne.n	8000fca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f46:	4b28      	ldr	r3, [pc, #160]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f52:	d131      	bne.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f5a:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f6c:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2232      	movs	r2, #50	; 0x32
 8000f7a:	fb02 f303 	mul.w	r3, r2, r3
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	0c9b      	lsrs	r3, r3, #18
 8000f86:	3301      	adds	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f8a:	e002      	b.n	8000f92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f9e:	d102      	bne.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f2      	bne.n	8000f8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb2:	d112      	bne.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e011      	b.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fc8:	e007      	b.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	431bde83 	.word	0x431bde83

08000ff4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_PWREx_EnableVddIO2+0x1c>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6053      	str	r3, [r2, #4]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40007000 	.word	0x40007000

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	f000 bc16 	b.w	8001854 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001028:	4ba0      	ldr	r3, [pc, #640]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f003 030c 	and.w	r3, r3, #12
 8001030:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001032:	4b9e      	ldr	r3, [pc, #632]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	f003 0303 	and.w	r3, r3, #3
 800103a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0310 	and.w	r3, r3, #16
 8001044:	2b00      	cmp	r3, #0
 8001046:	f000 80e4 	beq.w	8001212 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d007      	beq.n	8001060 <HAL_RCC_OscConfig+0x4c>
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b0c      	cmp	r3, #12
 8001054:	f040 808b 	bne.w	800116e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b01      	cmp	r3, #1
 800105c:	f040 8087 	bne.w	800116e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001060:	4b92      	ldr	r3, [pc, #584]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <HAL_RCC_OscConfig+0x64>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e3ed      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	4b8b      	ldr	r3, [pc, #556]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0308 	and.w	r3, r3, #8
 8001084:	2b00      	cmp	r3, #0
 8001086:	d004      	beq.n	8001092 <HAL_RCC_OscConfig+0x7e>
 8001088:	4b88      	ldr	r3, [pc, #544]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001090:	e005      	b.n	800109e <HAL_RCC_OscConfig+0x8a>
 8001092:	4b86      	ldr	r3, [pc, #536]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001094:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800109e:	4293      	cmp	r3, r2
 80010a0:	d223      	bcs.n	80010ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fde6 	bl	8001c78 <RCC_SetFlashLatencyFromMSIRange>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e3ce      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b6:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a7c      	ldr	r2, [pc, #496]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010bc:	f043 0308 	orr.w	r3, r3, #8
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b7a      	ldr	r3, [pc, #488]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a1b      	ldr	r3, [r3, #32]
 80010ce:	4977      	ldr	r1, [pc, #476]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010d4:	4b75      	ldr	r3, [pc, #468]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	4972      	ldr	r1, [pc, #456]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
 80010e8:	e025      	b.n	8001136 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ea:	4b70      	ldr	r3, [pc, #448]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6f      	ldr	r2, [pc, #444]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6d      	ldr	r3, [pc, #436]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	496a      	ldr	r1, [pc, #424]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001104:	4313      	orrs	r3, r2
 8001106:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001108:	4b68      	ldr	r3, [pc, #416]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	69db      	ldr	r3, [r3, #28]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	4965      	ldr	r1, [pc, #404]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001118:	4313      	orrs	r3, r2
 800111a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d109      	bne.n	8001136 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fda6 	bl	8001c78 <RCC_SetFlashLatencyFromMSIRange>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e38e      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001136:	f000 fcbf 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 800113a:	4602      	mov	r2, r0
 800113c:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	495a      	ldr	r1, [pc, #360]	; (80012b0 <HAL_RCC_OscConfig+0x29c>)
 8001148:	5ccb      	ldrb	r3, [r1, r3]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	4a58      	ldr	r2, [pc, #352]	; (80012b4 <HAL_RCC_OscConfig+0x2a0>)
 8001154:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001156:	4b58      	ldr	r3, [pc, #352]	; (80012b8 <HAL_RCC_OscConfig+0x2a4>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fa78 	bl	8000650 <HAL_InitTick>
 8001160:	4603      	mov	r3, r0
 8001162:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d052      	beq.n	8001210 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	e372      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d032      	beq.n	80011dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001176:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a4c      	ldr	r2, [pc, #304]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001182:	f7ff fbdb 	bl	800093c <HAL_GetTick>
 8001186:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800118a:	f7ff fbd7 	bl	800093c <HAL_GetTick>
 800118e:	4602      	mov	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e35b      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800119c:	4b43      	ldr	r3, [pc, #268]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011a8:	4b40      	ldr	r3, [pc, #256]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a3f      	ldr	r2, [pc, #252]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80011ae:	f043 0308 	orr.w	r3, r3, #8
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	493a      	ldr	r1, [pc, #232]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011c6:	4b39      	ldr	r3, [pc, #228]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	4935      	ldr	r1, [pc, #212]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	604b      	str	r3, [r1, #4]
 80011da:	e01a      	b.n	8001212 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a32      	ldr	r2, [pc, #200]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011e8:	f7ff fba8 	bl	800093c <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011f0:	f7ff fba4 	bl	800093c <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e328      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f0      	bne.n	80011f0 <HAL_RCC_OscConfig+0x1dc>
 800120e:	e000      	b.n	8001212 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001210:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d073      	beq.n	8001306 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b08      	cmp	r3, #8
 8001222:	d005      	beq.n	8001230 <HAL_RCC_OscConfig+0x21c>
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2b0c      	cmp	r3, #12
 8001228:	d10e      	bne.n	8001248 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b03      	cmp	r3, #3
 800122e:	d10b      	bne.n	8001248 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d063      	beq.n	8001304 <HAL_RCC_OscConfig+0x2f0>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d15f      	bne.n	8001304 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e305      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001250:	d106      	bne.n	8001260 <HAL_RCC_OscConfig+0x24c>
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e01d      	b.n	800129c <HAL_RCC_OscConfig+0x288>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0x270>
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0x288>
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 800128a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a05      	ldr	r2, [pc, #20]	; (80012ac <HAL_RCC_OscConfig+0x298>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01b      	beq.n	80012dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fb4a 	bl	800093c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012aa:	e010      	b.n	80012ce <HAL_RCC_OscConfig+0x2ba>
 80012ac:	40021000 	.word	0x40021000
 80012b0:	08005a74 	.word	0x08005a74
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fb3e 	bl	800093c <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e2c2      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012ce:	4baf      	ldr	r3, [pc, #700]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f0      	beq.n	80012bc <HAL_RCC_OscConfig+0x2a8>
 80012da:	e014      	b.n	8001306 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012dc:	f7ff fb2e 	bl	800093c <HAL_GetTick>
 80012e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e4:	f7ff fb2a 	bl	800093c <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b64      	cmp	r3, #100	; 0x64
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e2ae      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012f6:	4ba5      	ldr	r3, [pc, #660]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x2d0>
 8001302:	e000      	b.n	8001306 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001304:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d060      	beq.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	2b04      	cmp	r3, #4
 8001316:	d005      	beq.n	8001324 <HAL_RCC_OscConfig+0x310>
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d119      	bne.n	8001352 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d116      	bne.n	8001352 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001324:	4b99      	ldr	r3, [pc, #612]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_OscConfig+0x328>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e28b      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133c:	4b93      	ldr	r3, [pc, #588]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	061b      	lsls	r3, r3, #24
 800134a:	4990      	ldr	r1, [pc, #576]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800134c:	4313      	orrs	r3, r2
 800134e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001350:	e040      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d023      	beq.n	80013a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135a:	4b8c      	ldr	r3, [pc, #560]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a8b      	ldr	r2, [pc, #556]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001366:	f7ff fae9 	bl	800093c <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136e:	f7ff fae5 	bl	800093c <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e269      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001380:	4b82      	ldr	r3, [pc, #520]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0f0      	beq.n	800136e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b7f      	ldr	r3, [pc, #508]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	061b      	lsls	r3, r3, #24
 800139a:	497c      	ldr	r1, [pc, #496]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	e018      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013a2:	4b7a      	ldr	r3, [pc, #488]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a79      	ldr	r2, [pc, #484]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80013a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fac5 	bl	800093c <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fac1 	bl	800093c <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e245      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c8:	4b70      	ldr	r3, [pc, #448]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f0      	bne.n	80013b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d03c      	beq.n	800145a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d01c      	beq.n	8001422 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e8:	4b68      	ldr	r3, [pc, #416]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80013ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ee:	4a67      	ldr	r2, [pc, #412]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff faa0 	bl	800093c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fa9c 	bl	800093c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e220      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001412:	4b5e      	ldr	r3, [pc, #376]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0ef      	beq.n	8001400 <HAL_RCC_OscConfig+0x3ec>
 8001420:	e01b      	b.n	800145a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001422:	4b5a      	ldr	r3, [pc, #360]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001428:	4a58      	ldr	r2, [pc, #352]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800142a:	f023 0301 	bic.w	r3, r3, #1
 800142e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff fa83 	bl	800093c <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fa7f 	bl	800093c <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e203      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800144c:	4b4f      	ldr	r3, [pc, #316]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800144e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1ef      	bne.n	800143a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80a6 	beq.w	80015b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800146e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d10d      	bne.n	8001494 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001478:	4b44      	ldr	r3, [pc, #272]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800147a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147c:	4a43      	ldr	r2, [pc, #268]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800147e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001482:	6593      	str	r3, [r2, #88]	; 0x58
 8001484:	4b41      	ldr	r3, [pc, #260]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001490:	2301      	movs	r3, #1
 8001492:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001494:	4b3e      	ldr	r3, [pc, #248]	; (8001590 <HAL_RCC_OscConfig+0x57c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d118      	bne.n	80014d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014a0:	4b3b      	ldr	r3, [pc, #236]	; (8001590 <HAL_RCC_OscConfig+0x57c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a3a      	ldr	r2, [pc, #232]	; (8001590 <HAL_RCC_OscConfig+0x57c>)
 80014a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ac:	f7ff fa46 	bl	800093c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b4:	f7ff fa42 	bl	800093c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e1c6      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c6:	4b32      	ldr	r3, [pc, #200]	; (8001590 <HAL_RCC_OscConfig+0x57c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d108      	bne.n	80014ec <HAL_RCC_OscConfig+0x4d8>
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80014dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e0:	4a2a      	ldr	r2, [pc, #168]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ea:	e024      	b.n	8001536 <HAL_RCC_OscConfig+0x522>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b05      	cmp	r3, #5
 80014f2:	d110      	bne.n	8001516 <HAL_RCC_OscConfig+0x502>
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80014f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fa:	4a24      	ldr	r2, [pc, #144]	; (800158c <HAL_RCC_OscConfig+0x578>)
 80014fc:	f043 0304 	orr.w	r3, r3, #4
 8001500:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001504:	4b21      	ldr	r3, [pc, #132]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150a:	4a20      	ldr	r2, [pc, #128]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001514:	e00f      	b.n	8001536 <HAL_RCC_OscConfig+0x522>
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151c:	4a1b      	ldr	r2, [pc, #108]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800151e:	f023 0301 	bic.w	r3, r3, #1
 8001522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001526:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_RCC_OscConfig+0x578>)
 8001528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800152e:	f023 0304 	bic.w	r3, r3, #4
 8001532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d016      	beq.n	800156c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800153e:	f7ff f9fd 	bl	800093c <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff f9f9 	bl	800093c <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	; 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e17b      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_RCC_OscConfig+0x578>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0ed      	beq.n	8001546 <HAL_RCC_OscConfig+0x532>
 800156a:	e01a      	b.n	80015a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff f9e6 	bl	800093c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001572:	e00f      	b.n	8001594 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff f9e2 	bl	800093c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d906      	bls.n	8001594 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e164      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001594:	4ba8      	ldr	r3, [pc, #672]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e8      	bne.n	8001574 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a8:	4ba3      	ldr	r3, [pc, #652]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80015aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ac:	4aa2      	ldr	r2, [pc, #648]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80015ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d03c      	beq.n	800163a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d01c      	beq.n	8001602 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015c8:	4b9b      	ldr	r3, [pc, #620]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80015ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ce:	4a9a      	ldr	r2, [pc, #616]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d8:	f7ff f9b0 	bl	800093c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015e0:	f7ff f9ac 	bl	800093c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e130      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015f2:	4b91      	ldr	r3, [pc, #580]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80015f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ef      	beq.n	80015e0 <HAL_RCC_OscConfig+0x5cc>
 8001600:	e01b      	b.n	800163a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001602:	4b8d      	ldr	r3, [pc, #564]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001608:	4a8b      	ldr	r2, [pc, #556]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001612:	f7ff f993 	bl	800093c <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800161a:	f7ff f98f 	bl	800093c <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e113      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800162c:	4b82      	ldr	r3, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 800162e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1ef      	bne.n	800161a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	2b00      	cmp	r3, #0
 8001640:	f000 8107 	beq.w	8001852 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001648:	2b02      	cmp	r3, #2
 800164a:	f040 80cb 	bne.w	80017e4 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800164e:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f003 0203 	and.w	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	429a      	cmp	r2, r3
 8001660:	d12c      	bne.n	80016bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	3b01      	subs	r3, #1
 800166e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001670:	429a      	cmp	r2, r3
 8001672:	d123      	bne.n	80016bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800167e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001680:	429a      	cmp	r2, r3
 8001682:	d11b      	bne.n	80016bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d113      	bne.n	80016bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800169e:	085b      	lsrs	r3, r3, #1
 80016a0:	3b01      	subs	r3, #1
 80016a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d109      	bne.n	80016bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	085b      	lsrs	r3, r3, #1
 80016b4:	3b01      	subs	r3, #1
 80016b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d06d      	beq.n	8001798 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	2b0c      	cmp	r3, #12
 80016c0:	d068      	beq.n	8001794 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016c2:	4b5d      	ldr	r3, [pc, #372]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016ce:	4b5a      	ldr	r3, [pc, #360]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0ba      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016de:	4b56      	ldr	r3, [pc, #344]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a55      	ldr	r2, [pc, #340]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80016e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016ea:	f7ff f927 	bl	800093c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7ff f923 	bl	800093c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0a7      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001704:	4b4c      	ldr	r3, [pc, #304]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001710:	4b49      	ldr	r3, [pc, #292]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4b49      	ldr	r3, [pc, #292]	; (800183c <HAL_RCC_OscConfig+0x828>)
 8001716:	4013      	ands	r3, r2
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001720:	3a01      	subs	r2, #1
 8001722:	0112      	lsls	r2, r2, #4
 8001724:	4311      	orrs	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800172a:	0212      	lsls	r2, r2, #8
 800172c:	4311      	orrs	r1, r2
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001732:	0852      	lsrs	r2, r2, #1
 8001734:	3a01      	subs	r2, #1
 8001736:	0552      	lsls	r2, r2, #21
 8001738:	4311      	orrs	r1, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800173e:	0852      	lsrs	r2, r2, #1
 8001740:	3a01      	subs	r2, #1
 8001742:	0652      	lsls	r2, r2, #25
 8001744:	4311      	orrs	r1, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800174a:	06d2      	lsls	r2, r2, #27
 800174c:	430a      	orrs	r2, r1
 800174e:	493a      	ldr	r1, [pc, #232]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001750:	4313      	orrs	r3, r2
 8001752:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a37      	ldr	r2, [pc, #220]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a34      	ldr	r2, [pc, #208]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800176a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800176c:	f7ff f8e6 	bl	800093c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f8e2 	bl	800093c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e066      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001786:	4b2c      	ldr	r3, [pc, #176]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001792:	e05e      	b.n	8001852 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e05d      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001798:	4b27      	ldr	r3, [pc, #156]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d156      	bne.n	8001852 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a23      	ldr	r2, [pc, #140]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80017aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017b0:	4b21      	ldr	r3, [pc, #132]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	4a20      	ldr	r2, [pc, #128]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80017b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017bc:	f7ff f8be 	bl	800093c <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017c4:	f7ff f8ba 	bl	800093c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e03e      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x7b0>
 80017e2:	e036      	b.n	8001852 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	2b0c      	cmp	r3, #12
 80017e8:	d031      	beq.n	800184e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80017f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017f4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d105      	bne.n	800180e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001808:	f023 0303 	bic.w	r3, r3, #3
 800180c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800180e:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4a09      	ldr	r2, [pc, #36]	; (8001838 <HAL_RCC_OscConfig+0x824>)
 8001814:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800181c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181e:	f7ff f88d 	bl	800093c <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001824:	e00c      	b.n	8001840 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff f889 	bl	800093c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d905      	bls.n	8001840 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e00d      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
 8001838:	40021000 	.word	0x40021000
 800183c:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <HAL_RCC_OscConfig+0x848>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ec      	bne.n	8001826 <HAL_RCC_OscConfig+0x812>
 800184c:	e001      	b.n	8001852 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e10f      	b.n	8001a98 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b89      	ldr	r3, [pc, #548]	; (8001aa0 <HAL_RCC_ClockConfig+0x240>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b86      	ldr	r3, [pc, #536]	; (8001aa0 <HAL_RCC_ClockConfig+0x240>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 020f 	bic.w	r2, r3, #15
 800188e:	4984      	ldr	r1, [pc, #528]	; (8001aa0 <HAL_RCC_ClockConfig+0x240>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b82      	ldr	r3, [pc, #520]	; (8001aa0 <HAL_RCC_ClockConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0f7      	b.n	8001a98 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8089 	beq.w	80019c8 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d133      	bne.n	8001926 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018be:	4b79      	ldr	r3, [pc, #484]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0e4      	b.n	8001a98 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80018ce:	f000 fa2d 	bl	8001d2c <RCC_GetSysClockFreqFromPLLSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4a74      	ldr	r2, [pc, #464]	; (8001aa8 <HAL_RCC_ClockConfig+0x248>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d955      	bls.n	8001986 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80018da:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10a      	bne.n	80018fc <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018e6:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018ee:	4a6d      	ldr	r2, [pc, #436]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	e044      	b.n	8001986 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d03e      	beq.n	8001986 <HAL_RCC_ClockConfig+0x126>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d13a      	bne.n	8001986 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001910:	4b64      	ldr	r3, [pc, #400]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001918:	4a62      	ldr	r2, [pc, #392]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 800191a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e02f      	b.n	8001986 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d107      	bne.n	800193e <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d115      	bne.n	8001966 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e0ac      	b.n	8001a98 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e0a0      	b.n	8001a98 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001956:	4b53      	ldr	r3, [pc, #332]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e098      	b.n	8001a98 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001966:	f000 f8a7 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 800196a:	4603      	mov	r3, r0
 800196c:	4a4e      	ldr	r2, [pc, #312]	; (8001aa8 <HAL_RCC_ClockConfig+0x248>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d909      	bls.n	8001986 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001972:	4b4c      	ldr	r3, [pc, #304]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800197a:	4a4a      	ldr	r2, [pc, #296]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 800197c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001980:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f023 0203 	bic.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	4944      	ldr	r1, [pc, #272]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001998:	f7fe ffd0 	bl	800093c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a0:	f7fe ffcc 	bl	800093c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e070      	b.n	8001a98 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 020c 	and.w	r2, r3, #12
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d1eb      	bne.n	80019a0 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d009      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	4930      	ldr	r1, [pc, #192]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	608b      	str	r3, [r1, #8]
 80019e6:	e008      	b.n	80019fa <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	2b80      	cmp	r3, #128	; 0x80
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019ee:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	4a2c      	ldr	r2, [pc, #176]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 80019f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019f8:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_RCC_ClockConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d210      	bcs.n	8001a2a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a08:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <HAL_RCC_ClockConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f023 020f 	bic.w	r2, r3, #15
 8001a10:	4923      	ldr	r1, [pc, #140]	; (8001aa0 <HAL_RCC_ClockConfig+0x240>)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_RCC_ClockConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 030f 	and.w	r3, r3, #15
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e036      	b.n	8001a98 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0304 	and.w	r3, r3, #4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4910      	ldr	r1, [pc, #64]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a68:	f000 f826 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	f003 030f 	and.w	r3, r3, #15
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <HAL_RCC_ClockConfig+0x24c>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	f003 031f 	and.w	r3, r3, #31
 8001a80:	fa22 f303 	lsr.w	r3, r2, r3
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <HAL_RCC_ClockConfig+0x250>)
 8001a86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_ClockConfig+0x254>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fddf 	bl	8000650 <HAL_InitTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	73fb      	strb	r3, [r7, #15]

  return status;
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3718      	adds	r7, #24
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40022000 	.word	0x40022000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	04c4b400 	.word	0x04c4b400
 8001aac:	08005a74 	.word	0x08005a74
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004

08001ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac6:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad0:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_GetSysClockFreq+0x34>
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d121      	bne.n	8001b2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d11e      	bne.n	8001b2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001aec:	4b34      	ldr	r3, [pc, #208]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0308 	and.w	r3, r3, #8
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001af8:	4b31      	ldr	r3, [pc, #196]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e005      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b08:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b14:	4a2b      	ldr	r2, [pc, #172]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d10d      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b28:	e00a      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d102      	bne.n	8001b36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b30:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	e004      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x114>)
 8001b3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d134      	bne.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0xa6>
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d003      	beq.n	8001b64 <HAL_RCC_GetSysClockFreq+0xac>
 8001b5c:	e005      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b60:	617b      	str	r3, [r7, #20]
      break;
 8001b62:	e005      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <HAL_RCC_GetSysClockFreq+0x114>)
 8001b66:	617b      	str	r3, [r7, #20]
      break;
 8001b68:	e002      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	617b      	str	r3, [r7, #20]
      break;
 8001b6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b70:	4b13      	ldr	r3, [pc, #76]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	091b      	lsrs	r3, r3, #4
 8001b76:	f003 030f 	and.w	r3, r3, #15
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	fb02 f203 	mul.w	r2, r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b96:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	0e5b      	lsrs	r3, r3, #25
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bb0:	69bb      	ldr	r3, [r7, #24]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	08005a8c 	.word	0x08005a8c
 8001bc8:	00f42400 	.word	0x00f42400
 8001bcc:	007a1200 	.word	0x007a1200

08001bd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000000 	.word	0x20000000

08001be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bec:	f7ff fff0 	bl	8001bd0 <HAL_RCC_GetHCLKFreq>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	0a1b      	lsrs	r3, r3, #8
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	4904      	ldr	r1, [pc, #16]	; (8001c10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bfe:	5ccb      	ldrb	r3, [r1, r3]
 8001c00:	f003 031f 	and.w	r3, r3, #31
 8001c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	08005a84 	.word	0x08005a84

08001c14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	220f      	movs	r2, #15
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c48:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_RCC_GetClockConfig+0x5c>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	08db      	lsrs	r3, r3, #3
 8001c4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c56:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_RCC_GetClockConfig+0x60>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	601a      	str	r2, [r3, #0]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40022000 	.word	0x40022000

08001c78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c90:	f7ff f8ec 	bl	8000e6c <HAL_PWREx_GetVoltageRange>
 8001c94:	6178      	str	r0, [r7, #20]
 8001c96:	e014      	b.n	8001cc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	4b22      	ldr	r3, [pc, #136]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cb0:	f7ff f8dc 	bl	8000e6c <HAL_PWREx_GetVoltageRange>
 8001cb4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cc8:	d10b      	bne.n	8001ce2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d913      	bls.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2ba0      	cmp	r3, #160	; 0xa0
 8001cd4:	d902      	bls.n	8001cdc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	e00d      	b.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	e00a      	b.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ce6:	d902      	bls.n	8001cee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001ce8:	2302      	movs	r3, #2
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	e004      	b.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b70      	cmp	r3, #112	; 0x70
 8001cf2:	d101      	bne.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 020f 	bic.w	r2, r3, #15
 8001d00:	4909      	ldr	r1, [pc, #36]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d08:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d001      	beq.n	8001d1a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40022000 	.word	0x40022000

08001d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b087      	sub	sp, #28
 8001d30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001d36:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d118      	bne.n	8001d74 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d42:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d107      	bne.n	8001d5e <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d4e:	4b27      	ldr	r3, [pc, #156]	; (8001dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e005      	b.n	8001d6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d5e:	4b23      	ldr	r3, [pc, #140]	; (8001dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d6a:	4a21      	ldr	r2, [pc, #132]	; (8001df0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d74:	4b1d      	ldr	r3, [pc, #116]	; (8001dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d003      	beq.n	8001d8c <RCC_GetSysClockFreqFromPLLSource+0x60>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d003      	beq.n	8001d92 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8001d8a:	e005      	b.n	8001d98 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001d8e:	613b      	str	r3, [r7, #16]
    break;
 8001d90:	e005      	b.n	8001d9e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001d94:	613b      	str	r3, [r7, #16]
    break;
 8001d96:	e002      	b.n	8001d9e <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
    break;
 8001d9c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d9e:	4b13      	ldr	r3, [pc, #76]	; (8001dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	3301      	adds	r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	fb02 f203 	mul.w	r2, r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0e5b      	lsrs	r3, r3, #25
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001dde:	683b      	ldr	r3, [r7, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	371c      	adds	r7, #28
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40021000 	.word	0x40021000
 8001df0:	08005a8c 	.word	0x08005a8c
 8001df4:	00f42400 	.word	0x00f42400
 8001df8:	007a1200 	.word	0x007a1200

08001dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e049      	b.n	8001ea2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f841 	bl	8001eaa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	f000 f9f8 	bl	8002230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d001      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e04f      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68da      	ldr	r2, [r3, #12]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f042 0201 	orr.w	r2, r2, #1
 8001eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01d      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x76>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f02:	d018      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x76>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x76>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <HAL_TIM_Base_Start_IT+0xcc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00e      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x76>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x76>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_TIM_Base_Start_IT+0x76>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d115      	bne.n	8001f62 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8001f3e:	4013      	ands	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d015      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0xb4>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f4e:	d011      	beq.n	8001f74 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 0201 	orr.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f60:	e008      	b.n	8001f74 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e000      	b.n	8001f76 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f74:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800
 8001f90:	40000c00 	.word	0x40000c00
 8001f94:	40013400 	.word	0x40013400
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	00010007 	.word	0x00010007

08001fa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d122      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d11b      	bne.n	8001ffc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0202 	mvn.w	r2, #2
 8001fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699b      	ldr	r3, [r3, #24]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f905 	bl	80021f2 <HAL_TIM_IC_CaptureCallback>
 8001fe8:	e005      	b.n	8001ff6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8f7 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f908 	bl	8002206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d122      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d11b      	bne.n	8002050 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f06f 0204 	mvn.w	r2, #4
 8002020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f8db 	bl	80021f2 <HAL_TIM_IC_CaptureCallback>
 800203c:	e005      	b.n	800204a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f8cd 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f8de 	bl	8002206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d122      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	2b08      	cmp	r3, #8
 800206a:	d11b      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0208 	mvn.w	r2, #8
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2204      	movs	r2, #4
 800207a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f8b1 	bl	80021f2 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8a3 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f8b4 	bl	8002206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d122      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0310 	and.w	r3, r3, #16
 80020bc:	2b10      	cmp	r3, #16
 80020be:	d11b      	bne.n	80020f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2208      	movs	r2, #8
 80020ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f887 	bl	80021f2 <HAL_TIM_IC_CaptureCallback>
 80020e4:	e005      	b.n	80020f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f879 	bl	80021de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f88a 	bl	8002206 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b01      	cmp	r3, #1
 8002112:	d107      	bne.n	8002124 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f06f 0201 	mvn.w	r2, #1
 800211c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe fa5a 	bl	80005d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f914 	bl	8002378 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800215e:	d10e      	bne.n	800217e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800216a:	2b80      	cmp	r3, #128	; 0x80
 800216c:	d107      	bne.n	800217e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f907 	bl	800238c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002188:	2b40      	cmp	r3, #64	; 0x40
 800218a:	d10e      	bne.n	80021aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002196:	2b40      	cmp	r3, #64	; 0x40
 8002198:	d107      	bne.n	80021aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f838 	bl	800221a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	d10e      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b20      	cmp	r3, #32
 80021c4:	d107      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0220 	mvn.w	r2, #32
 80021ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f8c7 	bl	8002364 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a40      	ldr	r2, [pc, #256]	; (8002344 <TIM_Base_SetConfig+0x114>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d013      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224e:	d00f      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3d      	ldr	r2, [pc, #244]	; (8002348 <TIM_Base_SetConfig+0x118>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d00b      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a3c      	ldr	r2, [pc, #240]	; (800234c <TIM_Base_SetConfig+0x11c>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d007      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a3b      	ldr	r2, [pc, #236]	; (8002350 <TIM_Base_SetConfig+0x120>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <TIM_Base_SetConfig+0x40>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a3a      	ldr	r2, [pc, #232]	; (8002354 <TIM_Base_SetConfig+0x124>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d108      	bne.n	8002282 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2f      	ldr	r2, [pc, #188]	; (8002344 <TIM_Base_SetConfig+0x114>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01f      	beq.n	80022ca <TIM_Base_SetConfig+0x9a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d01b      	beq.n	80022ca <TIM_Base_SetConfig+0x9a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <TIM_Base_SetConfig+0x118>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d017      	beq.n	80022ca <TIM_Base_SetConfig+0x9a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a2b      	ldr	r2, [pc, #172]	; (800234c <TIM_Base_SetConfig+0x11c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <TIM_Base_SetConfig+0x9a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	; (8002350 <TIM_Base_SetConfig+0x120>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00f      	beq.n	80022ca <TIM_Base_SetConfig+0x9a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a29      	ldr	r2, [pc, #164]	; (8002354 <TIM_Base_SetConfig+0x124>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00b      	beq.n	80022ca <TIM_Base_SetConfig+0x9a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a28      	ldr	r2, [pc, #160]	; (8002358 <TIM_Base_SetConfig+0x128>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d007      	beq.n	80022ca <TIM_Base_SetConfig+0x9a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a27      	ldr	r2, [pc, #156]	; (800235c <TIM_Base_SetConfig+0x12c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d003      	beq.n	80022ca <TIM_Base_SetConfig+0x9a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <TIM_Base_SetConfig+0x130>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d108      	bne.n	80022dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a10      	ldr	r2, [pc, #64]	; (8002344 <TIM_Base_SetConfig+0x114>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d00f      	beq.n	8002328 <TIM_Base_SetConfig+0xf8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <TIM_Base_SetConfig+0x124>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d00b      	beq.n	8002328 <TIM_Base_SetConfig+0xf8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <TIM_Base_SetConfig+0x128>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d007      	beq.n	8002328 <TIM_Base_SetConfig+0xf8>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a10      	ldr	r2, [pc, #64]	; (800235c <TIM_Base_SetConfig+0x12c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d003      	beq.n	8002328 <TIM_Base_SetConfig+0xf8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0f      	ldr	r2, [pc, #60]	; (8002360 <TIM_Base_SetConfig+0x130>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d103      	bne.n	8002330 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	615a      	str	r2, [r3, #20]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400
 800234c:	40000800 	.word	0x40000800
 8002350:	40000c00 	.word	0x40000c00
 8002354:	40013400 	.word	0x40013400
 8002358:	40014000 	.word	0x40014000
 800235c:	40014400 	.word	0x40014400
 8002360:	40014800 	.word	0x40014800

08002364 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f103 0208 	add.w	r2, r3, #8
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f103 0208 	add.w	r2, r3, #8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f103 0208 	add.w	r2, r3, #8
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023fa:	b480      	push	{r7}
 80023fc:	b085      	sub	sp, #20
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002410:	d103      	bne.n	800241a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e00c      	b.n	8002434 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3308      	adds	r3, #8
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e002      	b.n	8002428 <vListInsert+0x2e>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	429a      	cmp	r2, r3
 8002432:	d2f6      	bcs.n	8002422 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685a      	ldr	r2, [r3, #4]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6892      	ldr	r2, [r2, #8]
 8002482:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6852      	ldr	r2, [r2, #4]
 800248c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	d103      	bne.n	80024a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	1e5a      	subs	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b086      	sub	sp, #24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024ca:	2301      	movs	r3, #1
 80024cc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10a      	bne.n	80024ee <xQueueGenericReset+0x2e>
        __asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	60fb      	str	r3, [r7, #12]
    }
 80024ea:	bf00      	nop
 80024ec:	e7fe      	b.n	80024ec <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d052      	beq.n	800259a <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d04e      	beq.n	800259a <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002504:	2100      	movs	r1, #0
 8002506:	fba3 2302 	umull	r2, r3, r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d000      	beq.n	8002510 <xQueueGenericReset+0x50>
 800250e:	2101      	movs	r1, #1
 8002510:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d141      	bne.n	800259a <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8002516:	f001 ff6f 	bl	80043f8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	6939      	ldr	r1, [r7, #16]
 8002524:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	441a      	add	r2, r3
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2200      	movs	r2, #0
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	3b01      	subs	r3, #1
 8002548:	6939      	ldr	r1, [r7, #16]
 800254a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	441a      	add	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	22ff      	movs	r2, #255	; 0xff
 8002562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d109      	bne.n	8002580 <xQueueGenericReset+0xc0>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00f      	beq.n	8002594 <xQueueGenericReset+0xd4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	3310      	adds	r3, #16
 8002578:	4618      	mov	r0, r3
 800257a:	f001 f80b 	bl	8003594 <xTaskRemoveFromEventList>
 800257e:	e009      	b.n	8002594 <xQueueGenericReset+0xd4>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	3310      	adds	r3, #16
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff0b 	bl	80023a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	3324      	adds	r3, #36	; 0x24
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff06 	bl	80023a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002594:	f001 ff60 	bl	8004458 <vPortExitCritical>
 8002598:	e001      	b.n	800259e <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <xQueueGenericReset+0xfa>
        __asm volatile
 80025a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a8:	f383 8811 	msr	BASEPRI, r3
 80025ac:	f3bf 8f6f 	isb	sy
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	60bb      	str	r3, [r7, #8]
    }
 80025b6:	bf00      	nop
 80025b8:	e7fe      	b.n	80025b8 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025ba:	697b      	ldr	r3, [r7, #20]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	4613      	mov	r3, r2
 80025d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02e      	beq.n	800263a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025dc:	2100      	movs	r1, #0
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	fba3 2302 	umull	r2, r3, r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d000      	beq.n	80025ec <xQueueGenericCreate+0x28>
 80025ea:	2101      	movs	r1, #1
 80025ec:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d123      	bne.n	800263a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025fa:	f113 0f55 	cmn.w	r3, #85	; 0x55
 80025fe:	d81c      	bhi.n	800263a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3354      	adds	r3, #84	; 0x54
 800260e:	4618      	mov	r0, r3
 8002610:	f001 ffca 	bl	80045a8 <pvPortMalloc>
 8002614:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3354      	adds	r3, #84	; 0x54
 8002624:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002626:	79fa      	ldrb	r2, [r7, #7]
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	4613      	mov	r3, r2
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f814 	bl	8002660 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002638:	e00d      	b.n	8002656 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <xQueueGenericCreate+0x92>
        __asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	613b      	str	r3, [r7, #16]
    }
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002656:	69fb      	ldr	r3, [r7, #28]
    }
 8002658:	4618      	mov	r0, r3
 800265a:	3720      	adds	r7, #32
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
 800266c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d103      	bne.n	800267c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e002      	b.n	8002682 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800268e:	2101      	movs	r1, #1
 8002690:	69b8      	ldr	r0, [r7, #24]
 8002692:	f7ff ff15 	bl	80024c0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2200      	movs	r2, #0
 80026a2:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	; 0x30
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <xQueueReceive+0x30>
        __asm volatile
 80026c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	623b      	str	r3, [r7, #32]
    }
 80026d8:	bf00      	nop
 80026da:	e7fe      	b.n	80026da <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d103      	bne.n	80026ea <xQueueReceive+0x3e>
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <xQueueReceive+0x42>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <xQueueReceive+0x44>
 80026ee:	2300      	movs	r3, #0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10a      	bne.n	800270a <xQueueReceive+0x5e>
        __asm volatile
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	61fb      	str	r3, [r7, #28]
    }
 8002706:	bf00      	nop
 8002708:	e7fe      	b.n	8002708 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800270a:	f001 f95d 	bl	80039c8 <xTaskGetSchedulerState>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <xQueueReceive+0x6e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <xQueueReceive+0x72>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <xQueueReceive+0x74>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10a      	bne.n	800273a <xQueueReceive+0x8e>
        __asm volatile
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	61bb      	str	r3, [r7, #24]
    }
 8002736:	bf00      	nop
 8002738:	e7fe      	b.n	8002738 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800273a:	f001 fe5d 	bl	80043f8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002742:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d014      	beq.n	8002774 <xQueueReceive+0xc8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800274e:	f000 f8eb 	bl	8002928 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800275a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d004      	beq.n	800276c <xQueueReceive+0xc0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	3310      	adds	r3, #16
 8002766:	4618      	mov	r0, r3
 8002768:	f000 ff14 	bl	8003594 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800276c:	f001 fe74 	bl	8004458 <vPortExitCritical>
                return pdPASS;
 8002770:	2301      	movs	r3, #1
 8002772:	e069      	b.n	8002848 <xQueueReceive+0x19c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <xQueueReceive+0xd6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800277a:	f001 fe6d 	bl	8004458 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800277e:	2300      	movs	r3, #0
 8002780:	e062      	b.n	8002848 <xQueueReceive+0x19c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002784:	2b00      	cmp	r3, #0
 8002786:	d106      	bne.n	8002796 <xQueueReceive+0xea>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002788:	f107 0310 	add.w	r3, r7, #16
 800278c:	4618      	mov	r0, r3
 800278e:	f000 ffd7 	bl	8003740 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002792:	2301      	movs	r3, #1
 8002794:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002796:	f001 fe5f 	bl	8004458 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800279a:	f000 fc1b 	bl	8002fd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800279e:	f001 fe2b 	bl	80043f8 <vPortEnterCritical>
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027a8:	b25b      	sxtb	r3, r3
 80027aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ae:	d103      	bne.n	80027b8 <xQueueReceive+0x10c>
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027be:	b25b      	sxtb	r3, r3
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d103      	bne.n	80027ce <xQueueReceive+0x122>
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027ce:	f001 fe43 	bl	8004458 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d2:	1d3a      	adds	r2, r7, #4
 80027d4:	f107 0310 	add.w	r3, r7, #16
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 ffc6 	bl	800376c <xTaskCheckForTimeOut>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d123      	bne.n	800282e <xQueueReceive+0x182>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e8:	f000 f923 	bl	8002a32 <prvIsQueueEmpty>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d017      	beq.n	8002822 <xQueueReceive+0x176>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	3324      	adds	r3, #36	; 0x24
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fe60 	bl	80034c0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002802:	f000 f8b7 	bl	8002974 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002806:	f000 fbf3 	bl	8002ff0 <xTaskResumeAll>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d194      	bne.n	800273a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <xQueueReceive+0x1a4>)
 8002812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	e78b      	b.n	800273a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002824:	f000 f8a6 	bl	8002974 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002828:	f000 fbe2 	bl	8002ff0 <xTaskResumeAll>
 800282c:	e785      	b.n	800273a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800282e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002830:	f000 f8a0 	bl	8002974 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002834:	f000 fbdc 	bl	8002ff0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283a:	f000 f8fa 	bl	8002a32 <prvIsQueueEmpty>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	f43f af7a 	beq.w	800273a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002846:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002848:	4618      	mov	r0, r3
 800284a:	3730      	adds	r7, #48	; 0x30
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	e000ed04 	.word	0xe000ed04

08002854 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d14d      	bne.n	8002916 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f8c0 	bl	8003a04 <xTaskPriorityDisinherit>
 8002884:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
 800288c:	e043      	b.n	8002916 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d119      	bne.n	80028c8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6858      	ldr	r0, [r3, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	461a      	mov	r2, r3
 800289e:	68b9      	ldr	r1, [r7, #8]
 80028a0:	f002 f8a4 	bl	80049ec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	441a      	add	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d32b      	bcc.n	8002916 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	e026      	b.n	8002916 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	68d8      	ldr	r0, [r3, #12]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	461a      	mov	r2, r3
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	f002 f88a 	bl	80049ec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	425b      	negs	r3, r3
 80028e2:	441a      	add	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d207      	bcs.n	8002904 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	425b      	negs	r3, r3
 80028fe:	441a      	add	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d105      	bne.n	8002916 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d002      	beq.n	8002916 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	3b01      	subs	r3, #1
 8002914:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800291e:	697b      	ldr	r3, [r7, #20]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d018      	beq.n	800296c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	441a      	add	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	429a      	cmp	r2, r3
 8002952:	d303      	bcc.n	800295c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68d9      	ldr	r1, [r3, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	461a      	mov	r2, r3
 8002966:	6838      	ldr	r0, [r7, #0]
 8002968:	f002 f840 	bl	80049ec <memcpy>
    }
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800297c:	f001 fd3c 	bl	80043f8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002986:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002988:	e01e      	b.n	80029c8 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298e:	2b00      	cmp	r3, #0
 8002990:	d008      	beq.n	80029a4 <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8e6 	bl	8002b64 <prvNotifyQueueSetContainer>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 800299e:	f000 ff5b 	bl	8003858 <vTaskMissedYield>
 80029a2:	e00d      	b.n	80029c0 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d012      	beq.n	80029d2 <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3324      	adds	r3, #36	; 0x24
 80029b0:	4618      	mov	r0, r3
 80029b2:	f000 fdef 	bl	8003594 <xTaskRemoveFromEventList>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 80029bc:	f000 ff4c 	bl	8003858 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	dcdc      	bgt.n	800298a <prvUnlockQueue+0x16>
 80029d0:	e000      	b.n	80029d4 <prvUnlockQueue+0x60>
                            break;
 80029d2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80029dc:	f001 fd3c 	bl	8004458 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80029e0:	f001 fd0a 	bl	80043f8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029ea:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029ec:	e011      	b.n	8002a12 <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d012      	beq.n	8002a1c <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3310      	adds	r3, #16
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fdca 	bl	8003594 <xTaskRemoveFromEventList>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002a06:	f000 ff27 	bl	8003858 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a0a:	7bbb      	ldrb	r3, [r7, #14]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	dce9      	bgt.n	80029ee <prvUnlockQueue+0x7a>
 8002a1a:	e000      	b.n	8002a1e <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002a1c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	22ff      	movs	r2, #255	; 0xff
 8002a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a26:	f001 fd17 	bl	8004458 <vPortExitCritical>
}
 8002a2a:	bf00      	nop
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a3a:	f001 fcdd 	bl	80043f8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a46:	2301      	movs	r3, #1
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	e001      	b.n	8002a50 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a50:	f001 fd02 	bl	8004458 <vPortExitCritical>

    return xReturn;
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10a      	bne.n	8002a86 <vQueueAddToRegistry+0x26>
        __asm volatile
 8002a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a74:	f383 8811 	msr	BASEPRI, r3
 8002a78:	f3bf 8f6f 	isb	sy
 8002a7c:	f3bf 8f4f 	dsb	sy
 8002a80:	60fb      	str	r3, [r7, #12]
    }
 8002a82:	bf00      	nop
 8002a84:	e7fe      	b.n	8002a84 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d024      	beq.n	8002ada <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	e01e      	b.n	8002ad4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002a96:	4a18      	ldr	r2, [pc, #96]	; (8002af8 <vQueueAddToRegistry+0x98>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	4413      	add	r3, r2
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d105      	bne.n	8002ab2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <vQueueAddToRegistry+0x98>)
 8002aac:	4413      	add	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
                    break;
 8002ab0:	e013      	b.n	8002ada <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <vQueueAddToRegistry+0x6e>
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <vQueueAddToRegistry+0x98>)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <vQueueAddToRegistry+0x98>)
 8002aca:	4413      	add	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d9dd      	bls.n	8002a96 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	683a      	ldr	r2, [r7, #0]
 8002ae4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8002aec:	bf00      	nop
 8002aee:	371c      	adds	r7, #28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	20004260 	.word	0x20004260

08002afc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b0c:	f001 fc74 	bl	80043f8 <vPortEnterCritical>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b16:	b25b      	sxtb	r3, r3
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d103      	bne.n	8002b26 <vQueueWaitForMessageRestricted+0x2a>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2c:	b25b      	sxtb	r3, r3
 8002b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b32:	d103      	bne.n	8002b3c <vQueueWaitForMessageRestricted+0x40>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3c:	f001 fc8c 	bl	8004458 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	3324      	adds	r3, #36	; 0x24
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	68b9      	ldr	r1, [r7, #8]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 fcd9 	bl	8003508 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff ff0c 	bl	8002974 <prvUnlockQueue>
    }
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b088      	sub	sp, #32
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b70:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
        /* This function must be called form a critical section. */

        /* The following line is not reachable in unit tests because every call
         * to prvNotifyQueueSetContainer is preceded by a check that
         * pxQueueSetContainer != NULL */
        configASSERT( pxQueueSetContainer ); /* LCOV_EXCL_BR_LINE */
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <prvNotifyQueueSetContainer+0x2e>
        __asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	613b      	str	r3, [r7, #16]
    }
 8002b8e:	bf00      	nop
 8002b90:	e7fe      	b.n	8002b90 <prvNotifyQueueSetContainer+0x2c>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d30a      	bcc.n	8002bb4 <prvNotifyQueueSetContainer+0x50>
        __asm volatile
 8002b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba2:	f383 8811 	msr	BASEPRI, r3
 8002ba6:	f3bf 8f6f 	isb	sy
 8002baa:	f3bf 8f4f 	dsb	sy
 8002bae:	60fb      	str	r3, [r7, #12]
    }
 8002bb0:	bf00      	nop
 8002bb2:	e7fe      	b.n	8002bb2 <prvNotifyQueueSetContainer+0x4e>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d234      	bcs.n	8002c2a <prvNotifyQueueSetContainer+0xc6>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc6:	75fb      	strb	r3, [r7, #23]

            traceQUEUE_SET_SEND( pxQueueSetContainer );

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002bc8:	1d3b      	adds	r3, r7, #4
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4619      	mov	r1, r3
 8002bce:	69b8      	ldr	r0, [r7, #24]
 8002bd0:	f7ff fe40 	bl	8002854 <prvCopyDataToQueue>
 8002bd4:	61f8      	str	r0, [r7, #28]

            if( cTxLock == queueUNLOCKED )
 8002bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bde:	d10e      	bne.n	8002bfe <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d020      	beq.n	8002c2a <prvNotifyQueueSetContainer+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	3324      	adds	r3, #36	; 0x24
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fcd1 	bl	8003594 <xTaskRemoveFromEventList>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d018      	beq.n	8002c2a <prvNotifyQueueSetContainer+0xc6>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	e015      	b.n	8002c2a <prvNotifyQueueSetContainer+0xc6>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8002bfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c02:	2b7f      	cmp	r3, #127	; 0x7f
 8002c04:	d10a      	bne.n	8002c1c <prvNotifyQueueSetContainer+0xb8>
        __asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	60bb      	str	r3, [r7, #8]
    }
 8002c18:	bf00      	nop
 8002c1a:	e7fe      	b.n	8002c1a <prvNotifyQueueSetContainer+0xb6>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	b25a      	sxtb	r2, r3
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002c2a:	69fb      	ldr	r3, [r7, #28]
    }
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08c      	sub	sp, #48	; 0x30
 8002c38:	af04      	add	r7, sp, #16
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f001 fcad 	bl	80045a8 <pvPortMalloc>
 8002c4e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c56:	2068      	movs	r0, #104	; 0x68
 8002c58:	f001 fca6 	bl	80045a8 <pvPortMalloc>
 8002c5c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	631a      	str	r2, [r3, #48]	; 0x30
 8002c6a:	e005      	b.n	8002c78 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002c6c:	6978      	ldr	r0, [r7, #20]
 8002c6e:	f001 fd7b 	bl	8004768 <vPortFree>
 8002c72:	e001      	b.n	8002c78 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d013      	beq.n	8002ca6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c7e:	88fa      	ldrh	r2, [r7, #6]
 8002c80:	2300      	movs	r3, #0
 8002c82:	9303      	str	r3, [sp, #12]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	9302      	str	r3, [sp, #8]
 8002c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8a:	9301      	str	r3, [sp, #4]
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f80e 	bl	8002cb6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c9a:	69f8      	ldr	r0, [r7, #28]
 8002c9c:	f000 f8c0 	bl	8002e20 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e002      	b.n	8002cac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002cac:	69bb      	ldr	r3, [r7, #24]
    }
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b088      	sub	sp, #32
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	21a5      	movs	r1, #165	; 0xa5
 8002cd0:	f001 fe9a 	bl	8004a08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f023 0307 	bic.w	r3, r3, #7
 8002cec:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <prvInitialiseNewTask+0x58>
        __asm volatile
 8002cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfc:	f383 8811 	msr	BASEPRI, r3
 8002d00:	f3bf 8f6f 	isb	sy
 8002d04:	f3bf 8f4f 	dsb	sy
 8002d08:	617b      	str	r3, [r7, #20]
    }
 8002d0a:	bf00      	nop
 8002d0c:	e7fe      	b.n	8002d0c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d01f      	beq.n	8002d54 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
 8002d18:	e012      	b.n	8002d40 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	7819      	ldrb	r1, [r3, #0]
 8002d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	4413      	add	r3, r2
 8002d28:	3334      	adds	r3, #52	; 0x34
 8002d2a:	460a      	mov	r2, r1
 8002d2c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d006      	beq.n	8002d48 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b09      	cmp	r3, #9
 8002d44:	d9e9      	bls.n	8002d1a <prvInitialiseNewTask+0x64>
 8002d46:	e000      	b.n	8002d4a <prvInitialiseNewTask+0x94>
            {
                break;
 8002d48:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002d52:	e003      	b.n	8002d5c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d90a      	bls.n	8002d78 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	613b      	str	r3, [r7, #16]
    }
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d901      	bls.n	8002d82 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d7e:	2304      	movs	r3, #4
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d86:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d8c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d90:	2200      	movs	r2, #0
 8002d92:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	3304      	adds	r3, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fb21 	bl	80023e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	3318      	adds	r3, #24
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fb1c 	bl	80023e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db0:	f1c3 0205 	rsb	r2, r3, #5
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dbc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
    #endif

    #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
        {
            memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNewTCB->pvThreadLocalStoragePointers ) );
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	3354      	adds	r3, #84	; 0x54
 8002dce:	2208      	movs	r2, #8
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f001 fe18 	bl	8004a08 <memset>
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	3360      	adds	r3, #96	; 0x60
 8002ddc:	2204      	movs	r2, #4
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f001 fe11 	bl	8004a08 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	3364      	adds	r3, #100	; 0x64
 8002dea:	2201      	movs	r2, #1
 8002dec:	2100      	movs	r1, #0
 8002dee:	4618      	mov	r0, r3
 8002df0:	f001 fe0a 	bl	8004a08 <memset>
        }
    #endif

    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            pxNewTCB->ucDelayAborted = pdFALSE;
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	69b8      	ldr	r0, [r7, #24]
 8002e02:	f001 f9c7 	bl	8004194 <pxPortInitialiseStack>
 8002e06:	4602      	mov	r2, r0
 8002e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <prvInitialiseNewTask+0x162>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e16:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e18:	bf00      	nop
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002e28:	f001 fae6 	bl	80043f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002e2c:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <prvAddNewTaskToReadyList+0xf8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	4a39      	ldr	r2, [pc, #228]	; (8002f18 <prvAddNewTaskToReadyList+0xf8>)
 8002e34:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002e36:	4b39      	ldr	r3, [pc, #228]	; (8002f1c <prvAddNewTaskToReadyList+0xfc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002e3e:	4a37      	ldr	r2, [pc, #220]	; (8002f1c <prvAddNewTaskToReadyList+0xfc>)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e44:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <prvAddNewTaskToReadyList+0xf8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d110      	bne.n	8002e6e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002e4c:	f000 fd22 	bl	8003894 <prvInitialiseTaskLists>
 8002e50:	e00d      	b.n	8002e6e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002e52:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <prvAddNewTaskToReadyList+0x100>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <prvAddNewTaskToReadyList+0xfc>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d802      	bhi.n	8002e6e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002e68:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <prvAddNewTaskToReadyList+0xfc>)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <prvAddNewTaskToReadyList+0x104>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	4a2b      	ldr	r2, [pc, #172]	; (8002f24 <prvAddNewTaskToReadyList+0x104>)
 8002e76:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e78:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <prvAddNewTaskToReadyList+0x104>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	2201      	movs	r2, #1
 8002e86:	409a      	lsls	r2, r3
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <prvAddNewTaskToReadyList+0x108>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	4a26      	ldr	r2, [pc, #152]	; (8002f28 <prvAddNewTaskToReadyList+0x108>)
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4925      	ldr	r1, [pc, #148]	; (8002f2c <prvAddNewTaskToReadyList+0x10c>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	609a      	str	r2, [r3, #8]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689a      	ldr	r2, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	60da      	str	r2, [r3, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	3204      	adds	r2, #4
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1d1a      	adds	r2, r3, #4
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <prvAddNewTaskToReadyList+0x10c>)
 8002ed6:	441a      	add	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	615a      	str	r2, [r3, #20]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee0:	4912      	ldr	r1, [pc, #72]	; (8002f2c <prvAddNewTaskToReadyList+0x10c>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	1c59      	adds	r1, r3, #1
 8002ef0:	480e      	ldr	r0, [pc, #56]	; (8002f2c <prvAddNewTaskToReadyList+0x10c>)
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4403      	add	r3, r0
 8002efc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002efe:	f001 faab 	bl	8004458 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002f02:	4b07      	ldr	r3, [pc, #28]	; (8002f20 <prvAddNewTaskToReadyList+0x100>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <prvAddNewTaskToReadyList+0xfc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f0e:	bf00      	nop
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	2000016c 	.word	0x2000016c
 8002f1c:	20000094 	.word	0x20000094
 8002f20:	20000178 	.word	0x20000178
 8002f24:	20000188 	.word	0x20000188
 8002f28:	20000174 	.word	0x20000174
 8002f2c:	20000098 	.word	0x20000098

08002f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <vTaskStartScheduler+0x88>)
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f44:	491d      	ldr	r1, [pc, #116]	; (8002fbc <vTaskStartScheduler+0x8c>)
 8002f46:	481e      	ldr	r0, [pc, #120]	; (8002fc0 <vTaskStartScheduler+0x90>)
 8002f48:	f7ff fe74 	bl	8002c34 <xTaskCreate>
 8002f4c:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d102      	bne.n	8002f5a <vTaskStartScheduler+0x2a>
            {
                xReturn = xTimerCreateTimerTask();
 8002f54:	f000 fe7e 	bl	8003c54 <xTimerCreateTimerTask>
 8002f58:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d116      	bne.n	8002f8e <vTaskStartScheduler+0x5e>
        __asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	60bb      	str	r3, [r7, #8]
    }
 8002f72:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f74:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <vTaskStartScheduler+0x94>)
 8002f76:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7a:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <vTaskStartScheduler+0x98>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f82:	4b12      	ldr	r3, [pc, #72]	; (8002fcc <vTaskStartScheduler+0x9c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002f88:	f001 f994 	bl	80042b4 <xPortStartScheduler>
 8002f8c:	e00e      	b.n	8002fac <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d10a      	bne.n	8002fac <vTaskStartScheduler+0x7c>
        __asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	607b      	str	r3, [r7, #4]
    }
 8002fa8:	bf00      	nop
 8002faa:	e7fe      	b.n	8002faa <vTaskStartScheduler+0x7a>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <vTaskStartScheduler+0xa0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000190 	.word	0x20000190
 8002fbc:	08005a5c 	.word	0x08005a5c
 8002fc0:	08003871 	.word	0x08003871
 8002fc4:	2000018c 	.word	0x2000018c
 8002fc8:	20000178 	.word	0x20000178
 8002fcc:	20000170 	.word	0x20000170
 8002fd0:	2000000c 	.word	0x2000000c

08002fd4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <vTaskSuspendAll+0x18>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	4a03      	ldr	r2, [pc, #12]	; (8002fec <vTaskSuspendAll+0x18>)
 8002fe0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002fe2:	bf00      	nop
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	20000194 	.word	0x20000194

08002ff0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002ffe:	4b6b      	ldr	r3, [pc, #428]	; (80031ac <xTaskResumeAll+0x1bc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <xTaskResumeAll+0x2c>
        __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	607b      	str	r3, [r7, #4]
    }
 8003018:	bf00      	nop
 800301a:	e7fe      	b.n	800301a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800301c:	f001 f9ec 	bl	80043f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003020:	4b62      	ldr	r3, [pc, #392]	; (80031ac <xTaskResumeAll+0x1bc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3b01      	subs	r3, #1
 8003026:	4a61      	ldr	r2, [pc, #388]	; (80031ac <xTaskResumeAll+0x1bc>)
 8003028:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800302a:	4b60      	ldr	r3, [pc, #384]	; (80031ac <xTaskResumeAll+0x1bc>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	f040 80b4 	bne.w	800319c <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003034:	4b5e      	ldr	r3, [pc, #376]	; (80031b0 <xTaskResumeAll+0x1c0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80af 	beq.w	800319c <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800303e:	e08a      	b.n	8003156 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003040:	4b5c      	ldr	r3, [pc, #368]	; (80031b4 <xTaskResumeAll+0x1c4>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	6a12      	ldr	r2, [r2, #32]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	69d2      	ldr	r2, [r2, #28]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3318      	adds	r3, #24
 800306a:	429a      	cmp	r2, r3
 800306c:	d103      	bne.n	8003076 <xTaskResumeAll+0x86>
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	6a1a      	ldr	r2, [r3, #32]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2200      	movs	r2, #0
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	1e5a      	subs	r2, r3, #1
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	68d2      	ldr	r2, [r2, #12]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	6892      	ldr	r2, [r2, #8]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3304      	adds	r3, #4
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d103      	bne.n	80030b4 <xTaskResumeAll+0xc4>
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2200      	movs	r2, #0
 80030b8:	615a      	str	r2, [r3, #20]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	1e5a      	subs	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	2201      	movs	r2, #1
 80030ca:	409a      	lsls	r2, r3
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <xTaskResumeAll+0x1c8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	4a39      	ldr	r2, [pc, #228]	; (80031b8 <xTaskResumeAll+0x1c8>)
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030da:	4938      	ldr	r1, [pc, #224]	; (80031bc <xTaskResumeAll+0x1cc>)
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3304      	adds	r3, #4
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	3204      	adds	r2, #4
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	1d1a      	adds	r2, r3, #4
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <xTaskResumeAll+0x1cc>)
 800311a:	441a      	add	r2, r3
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	615a      	str	r2, [r3, #20]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003124:	4925      	ldr	r1, [pc, #148]	; (80031bc <xTaskResumeAll+0x1cc>)
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1c59      	adds	r1, r3, #1
 8003134:	4821      	ldr	r0, [pc, #132]	; (80031bc <xTaskResumeAll+0x1cc>)
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4403      	add	r3, r0
 8003140:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <xTaskResumeAll+0x1d0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	429a      	cmp	r2, r3
 800314e:	d302      	bcc.n	8003156 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <xTaskResumeAll+0x1d4>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <xTaskResumeAll+0x1c4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f47f af70 	bne.w	8003040 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003166:	f000 fc13 	bl	8003990 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <xTaskResumeAll+0x1d8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003176:	f000 f839 	bl	80031ec <xTaskIncrementTick>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d002      	beq.n	8003186 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003180:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <xTaskResumeAll+0x1d4>)
 8003182:	2201      	movs	r2, #1
 8003184:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	3b01      	subs	r3, #1
 800318a:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1f1      	bne.n	8003176 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <xTaskResumeAll+0x1d8>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <xTaskResumeAll+0x1d4>)
 800319a:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800319c:	f001 f95c 	bl	8004458 <vPortExitCritical>

    return xAlreadyYielded;
 80031a0:	697b      	ldr	r3, [r7, #20]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000194 	.word	0x20000194
 80031b0:	2000016c 	.word	0x2000016c
 80031b4:	2000012c 	.word	0x2000012c
 80031b8:	20000174 	.word	0x20000174
 80031bc:	20000098 	.word	0x20000098
 80031c0:	20000094 	.word	0x20000094
 80031c4:	20000180 	.word	0x20000180
 80031c8:	2000017c 	.word	0x2000017c

080031cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <xTaskGetTickCount+0x1c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031d8:	687b      	ldr	r3, [r7, #4]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	20000170 	.word	0x20000170

080031ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	; 0x28
 80031f0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031f2:	2300      	movs	r3, #0
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031f6:	4b6e      	ldr	r3, [pc, #440]	; (80033b0 <xTaskIncrementTick+0x1c4>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f040 80cd 	bne.w	800339a <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003200:	4b6c      	ldr	r3, [pc, #432]	; (80033b4 <xTaskIncrementTick+0x1c8>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3301      	adds	r3, #1
 8003206:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003208:	4a6a      	ldr	r2, [pc, #424]	; (80033b4 <xTaskIncrementTick+0x1c8>)
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d120      	bne.n	8003256 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <xTaskIncrementTick+0x1cc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <xTaskIncrementTick+0x48>
        __asm volatile
 800321e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
 800322e:	607b      	str	r3, [r7, #4]
    }
 8003230:	bf00      	nop
 8003232:	e7fe      	b.n	8003232 <xTaskIncrementTick+0x46>
 8003234:	4b60      	ldr	r3, [pc, #384]	; (80033b8 <xTaskIncrementTick+0x1cc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	4b60      	ldr	r3, [pc, #384]	; (80033bc <xTaskIncrementTick+0x1d0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5e      	ldr	r2, [pc, #376]	; (80033b8 <xTaskIncrementTick+0x1cc>)
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	4a5e      	ldr	r2, [pc, #376]	; (80033bc <xTaskIncrementTick+0x1d0>)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <xTaskIncrementTick+0x1d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3301      	adds	r3, #1
 800324e:	4a5c      	ldr	r2, [pc, #368]	; (80033c0 <xTaskIncrementTick+0x1d4>)
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	f000 fb9d 	bl	8003990 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003256:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <xTaskIncrementTick+0x1d8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	429a      	cmp	r2, r3
 800325e:	f0c0 80a1 	bcc.w	80033a4 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003262:	4b55      	ldr	r3, [pc, #340]	; (80033b8 <xTaskIncrementTick+0x1cc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326c:	4b55      	ldr	r3, [pc, #340]	; (80033c4 <xTaskIncrementTick+0x1d8>)
 800326e:	f04f 32ff 	mov.w	r2, #4294967295
 8003272:	601a      	str	r2, [r3, #0]
                    break;
 8003274:	e096      	b.n	80033a4 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003276:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <xTaskIncrementTick+0x1cc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003286:	6a3a      	ldr	r2, [r7, #32]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	429a      	cmp	r2, r3
 800328c:	d203      	bcs.n	8003296 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800328e:	4a4d      	ldr	r2, [pc, #308]	; (80033c4 <xTaskIncrementTick+0x1d8>)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003294:	e086      	b.n	80033a4 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	68d2      	ldr	r2, [r2, #12]
 80032a4:	609a      	str	r2, [r3, #8]
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	6892      	ldr	r2, [r2, #8]
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	3304      	adds	r3, #4
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d103      	bne.n	80032c4 <xTaskIncrementTick+0xd8>
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	68da      	ldr	r2, [r3, #12]
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	605a      	str	r2, [r3, #4]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2200      	movs	r2, #0
 80032c8:	615a      	str	r2, [r3, #20]
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	1e5a      	subs	r2, r3, #1
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01e      	beq.n	800331a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	6a12      	ldr	r2, [r2, #32]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	69d2      	ldr	r2, [r2, #28]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	3318      	adds	r3, #24
 80032fe:	429a      	cmp	r2, r3
 8003300:	d103      	bne.n	800330a <xTaskIncrementTick+0x11e>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6a1a      	ldr	r2, [r3, #32]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2200      	movs	r2, #0
 800330e:	629a      	str	r2, [r3, #40]	; 0x28
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	2201      	movs	r2, #1
 8003320:	409a      	lsls	r2, r3
 8003322:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <xTaskIncrementTick+0x1dc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4313      	orrs	r3, r2
 8003328:	4a27      	ldr	r2, [pc, #156]	; (80033c8 <xTaskIncrementTick+0x1dc>)
 800332a:	6013      	str	r3, [r2, #0]
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003330:	4926      	ldr	r1, [pc, #152]	; (80033cc <xTaskIncrementTick+0x1e0>)
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	3304      	adds	r3, #4
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	3204      	adds	r2, #4
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	1d1a      	adds	r2, r3, #4
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	609a      	str	r2, [r3, #8]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4a17      	ldr	r2, [pc, #92]	; (80033cc <xTaskIncrementTick+0x1e0>)
 8003370:	441a      	add	r2, r3
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	615a      	str	r2, [r3, #20]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337a:	4914      	ldr	r1, [pc, #80]	; (80033cc <xTaskIncrementTick+0x1e0>)
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	1c59      	adds	r1, r3, #1
 800338a:	4810      	ldr	r0, [pc, #64]	; (80033cc <xTaskIncrementTick+0x1e0>)
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4403      	add	r3, r0
 8003396:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003398:	e763      	b.n	8003262 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <xTaskIncrementTick+0x1e4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <xTaskIncrementTick+0x1e4>)
 80033a2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3728      	adds	r7, #40	; 0x28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	20000194 	.word	0x20000194
 80033b4:	20000170 	.word	0x20000170
 80033b8:	20000124 	.word	0x20000124
 80033bc:	20000128 	.word	0x20000128
 80033c0:	20000184 	.word	0x20000184
 80033c4:	2000018c 	.word	0x2000018c
 80033c8:	20000174 	.word	0x20000174
 80033cc:	20000098 	.word	0x20000098
 80033d0:	2000017c 	.word	0x2000017c

080033d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <vTaskSwitchContext+0xd0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80033e2:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <vTaskSwitchContext+0xd4>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80033e8:	e056      	b.n	8003498 <vTaskSwitchContext+0xc4>
        xYieldPending = pdFALSE;
 80033ea:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <vTaskSwitchContext+0xd4>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80033f0:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <vTaskSwitchContext+0xd8>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <vTaskSwitchContext+0xd8>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4b2d      	ldr	r3, [pc, #180]	; (80034b0 <vTaskSwitchContext+0xdc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d909      	bls.n	8003416 <vTaskSwitchContext+0x42>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <vTaskSwitchContext+0xd8>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	4b2a      	ldr	r3, [pc, #168]	; (80034b0 <vTaskSwitchContext+0xdc>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	1ad1      	subs	r1, r2, r3
 800340c:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <vTaskSwitchContext+0xe0>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003412:	440a      	add	r2, r1
 8003414:	65da      	str	r2, [r3, #92]	; 0x5c
                ulTaskSwitchedInTime = ulTotalRunTime;
 8003416:	4b25      	ldr	r3, [pc, #148]	; (80034ac <vTaskSwitchContext+0xd8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a25      	ldr	r2, [pc, #148]	; (80034b0 <vTaskSwitchContext+0xdc>)
 800341c:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800341e:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <vTaskSwitchContext+0xe4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800342c:	7afb      	ldrb	r3, [r7, #11]
 800342e:	f1c3 031f 	rsb	r3, r3, #31
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	4921      	ldr	r1, [pc, #132]	; (80034bc <vTaskSwitchContext+0xe8>)
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10a      	bne.n	800345e <vTaskSwitchContext+0x8a>
        __asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	607b      	str	r3, [r7, #4]
    }
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <vTaskSwitchContext+0x88>
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4a14      	ldr	r2, [pc, #80]	; (80034bc <vTaskSwitchContext+0xe8>)
 800346a:	4413      	add	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	605a      	str	r2, [r3, #4]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	3308      	adds	r3, #8
 8003480:	429a      	cmp	r2, r3
 8003482:	d104      	bne.n	800348e <vTaskSwitchContext+0xba>
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	605a      	str	r2, [r3, #4]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	4a07      	ldr	r2, [pc, #28]	; (80034b4 <vTaskSwitchContext+0xe0>)
 8003496:	6013      	str	r3, [r2, #0]
}
 8003498:	bf00      	nop
 800349a:	371c      	adds	r7, #28
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	20000194 	.word	0x20000194
 80034a8:	20000180 	.word	0x20000180
 80034ac:	2000019c 	.word	0x2000019c
 80034b0:	20000198 	.word	0x20000198
 80034b4:	20000094 	.word	0x20000094
 80034b8:	20000174 	.word	0x20000174
 80034bc:	20000098 	.word	0x20000098

080034c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	60fb      	str	r3, [r7, #12]
    }
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <vTaskPlaceOnEventList+0x44>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	3318      	adds	r3, #24
 80034ec:	4619      	mov	r1, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fe ff83 	bl	80023fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80034f4:	2101      	movs	r1, #1
 80034f6:	6838      	ldr	r0, [r7, #0]
 80034f8:	f000 fb28 	bl	8003b4c <prvAddCurrentTaskToDelayedList>
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000094 	.word	0x20000094

08003508 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	613b      	str	r3, [r7, #16]
    }
 800352c:	bf00      	nop
 800352e:	e7fe      	b.n	800352e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <vTaskPlaceOnEventListRestricted+0x88>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	61da      	str	r2, [r3, #28]
 800353e:	4b14      	ldr	r3, [pc, #80]	; (8003590 <vTaskPlaceOnEventListRestricted+0x88>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	6892      	ldr	r2, [r2, #8]
 8003546:	621a      	str	r2, [r3, #32]
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <vTaskPlaceOnEventListRestricted+0x88>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	3218      	adds	r2, #24
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <vTaskPlaceOnEventListRestricted+0x88>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f103 0218 	add.w	r2, r3, #24
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	4b0b      	ldr	r3, [pc, #44]	; (8003590 <vTaskPlaceOnEventListRestricted+0x88>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	68b8      	ldr	r0, [r7, #8]
 8003582:	f000 fae3 	bl	8003b4c <prvAddCurrentTaskToDelayedList>
    }
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000094 	.word	0x20000094

08003594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003594:	b480      	push	{r7}
 8003596:	b08b      	sub	sp, #44	; 0x2c
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80035a4:	6a3b      	ldr	r3, [r7, #32]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10a      	bne.n	80035c0 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60fb      	str	r3, [r7, #12]
    }
 80035bc:	bf00      	nop
 80035be:	e7fe      	b.n	80035be <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	6a3a      	ldr	r2, [r7, #32]
 80035cc:	6a12      	ldr	r2, [r2, #32]
 80035ce:	609a      	str	r2, [r3, #8]
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	69d2      	ldr	r2, [r2, #28]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	3318      	adds	r3, #24
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d103      	bne.n	80035ee <xTaskRemoveFromEventList+0x5a>
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	6a1a      	ldr	r2, [r3, #32]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	2200      	movs	r2, #0
 80035f2:	629a      	str	r2, [r3, #40]	; 0x28
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1e5a      	subs	r2, r3, #1
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035fe:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <xTaskRemoveFromEventList+0x194>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d15e      	bne.n	80036c4 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	68d2      	ldr	r2, [r2, #12]
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	6a3a      	ldr	r2, [r7, #32]
 800361c:	6892      	ldr	r2, [r2, #8]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	3304      	adds	r3, #4
 8003628:	429a      	cmp	r2, r3
 800362a:	d103      	bne.n	8003634 <xTaskRemoveFromEventList+0xa0>
 800362c:	6a3b      	ldr	r3, [r7, #32]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	605a      	str	r2, [r3, #4]
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	2200      	movs	r2, #0
 8003638:	615a      	str	r2, [r3, #20]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	1e5a      	subs	r2, r3, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	2201      	movs	r2, #1
 800364a:	409a      	lsls	r2, r3
 800364c:	4b37      	ldr	r3, [pc, #220]	; (800372c <xTaskRemoveFromEventList+0x198>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4313      	orrs	r3, r2
 8003652:	4a36      	ldr	r2, [pc, #216]	; (800372c <xTaskRemoveFromEventList+0x198>)
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800365a:	4935      	ldr	r1, [pc, #212]	; (8003730 <xTaskRemoveFromEventList+0x19c>)
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3304      	adds	r3, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	60da      	str	r2, [r3, #12]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	3204      	adds	r2, #4
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	609a      	str	r2, [r3, #8]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4a25      	ldr	r2, [pc, #148]	; (8003730 <xTaskRemoveFromEventList+0x19c>)
 800369a:	441a      	add	r2, r3
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	615a      	str	r2, [r3, #20]
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a4:	4922      	ldr	r1, [pc, #136]	; (8003730 <xTaskRemoveFromEventList+0x19c>)
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	1c59      	adds	r1, r3, #1
 80036b4:	481e      	ldr	r0, [pc, #120]	; (8003730 <xTaskRemoveFromEventList+0x19c>)
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4403      	add	r3, r0
 80036c0:	6019      	str	r1, [r3, #0]
 80036c2:	e01b      	b.n	80036fc <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <xTaskRemoveFromEventList+0x1a0>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	61da      	str	r2, [r3, #28]
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	621a      	str	r2, [r3, #32]
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	3218      	adds	r2, #24
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	f103 0218 	add.w	r2, r3, #24
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	4a11      	ldr	r2, [pc, #68]	; (8003734 <xTaskRemoveFromEventList+0x1a0>)
 80036f0:	629a      	str	r2, [r3, #40]	; 0x28
 80036f2:	4b10      	ldr	r3, [pc, #64]	; (8003734 <xTaskRemoveFromEventList+0x1a0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	3301      	adds	r3, #1
 80036f8:	4a0e      	ldr	r2, [pc, #56]	; (8003734 <xTaskRemoveFromEventList+0x1a0>)
 80036fa:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <xTaskRemoveFromEventList+0x1a4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	429a      	cmp	r2, r3
 8003708:	d905      	bls.n	8003716 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <xTaskRemoveFromEventList+0x1a8>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e001      	b.n	800371a <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800371c:	4618      	mov	r0, r3
 800371e:	372c      	adds	r7, #44	; 0x2c
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20000194 	.word	0x20000194
 800372c:	20000174 	.word	0x20000174
 8003730:	20000098 	.word	0x20000098
 8003734:	2000012c 	.word	0x2000012c
 8003738:	20000094 	.word	0x20000094
 800373c:	20000180 	.word	0x20000180

08003740 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <vTaskInternalSetTimeOutState+0x24>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <vTaskInternalSetTimeOutState+0x28>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	605a      	str	r2, [r3, #4]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	20000184 	.word	0x20000184
 8003768:	20000170 	.word	0x20000170

0800376c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	613b      	str	r3, [r7, #16]
    }
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	60fb      	str	r3, [r7, #12]
    }
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80037ae:	f000 fe23 	bl	80043f8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <xTaskCheckForTimeOut+0xe0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80037c2:	4b23      	ldr	r3, [pc, #140]	; (8003850 <xTaskCheckForTimeOut+0xe4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <xTaskCheckForTimeOut+0x72>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = pdFALSE;
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <xTaskCheckForTimeOut+0xe4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
                xReturn = pdTRUE;
 80037d8:	2301      	movs	r3, #1
 80037da:	61fb      	str	r3, [r7, #28]
 80037dc:	e02e      	b.n	800383c <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e6:	d102      	bne.n	80037ee <xTaskCheckForTimeOut+0x82>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037e8:	2300      	movs	r3, #0
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	e026      	b.n	800383c <xTaskCheckForTimeOut+0xd0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <xTaskCheckForTimeOut+0xe8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d00a      	beq.n	8003810 <xTaskCheckForTimeOut+0xa4>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	429a      	cmp	r2, r3
 8003802:	d305      	bcc.n	8003810 <xTaskCheckForTimeOut+0xa4>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003804:	2301      	movs	r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e015      	b.n	800383c <xTaskCheckForTimeOut+0xd0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	429a      	cmp	r2, r3
 8003818:	d20b      	bcs.n	8003832 <xTaskCheckForTimeOut+0xc6>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ff8a 	bl	8003740 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
 8003830:	e004      	b.n	800383c <xTaskCheckForTimeOut+0xd0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800383c:	f000 fe0c 	bl	8004458 <vPortExitCritical>

    return xReturn;
 8003840:	69fb      	ldr	r3, [r7, #28]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000170 	.word	0x20000170
 8003850:	20000094 	.word	0x20000094
 8003854:	20000184 	.word	0x20000184

08003858 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003858:	b480      	push	{r7}
 800385a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <vTaskMissedYield+0x14>)
 800385e:	2201      	movs	r2, #1
 8003860:	601a      	str	r2, [r3, #0]
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr
 800386c:	20000180 	.word	0x20000180

08003870 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003878:	f000 f84c 	bl	8003914 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800387c:	4b04      	ldr	r3, [pc, #16]	; (8003890 <prvIdleTask+0x20>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800388c:	e7f4      	b.n	8003878 <prvIdleTask+0x8>
 800388e:	bf00      	nop
 8003890:	e000ed04 	.word	0xe000ed04

08003894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800389a:	2300      	movs	r3, #0
 800389c:	607b      	str	r3, [r7, #4]
 800389e:	e00c      	b.n	80038ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <prvInitialiseTaskLists+0x60>)
 80038ac:	4413      	add	r3, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe fd76 	bl	80023a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3301      	adds	r3, #1
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b04      	cmp	r3, #4
 80038be:	d9ef      	bls.n	80038a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038c0:	480d      	ldr	r0, [pc, #52]	; (80038f8 <prvInitialiseTaskLists+0x64>)
 80038c2:	f7fe fd6d 	bl	80023a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038c6:	480d      	ldr	r0, [pc, #52]	; (80038fc <prvInitialiseTaskLists+0x68>)
 80038c8:	f7fe fd6a 	bl	80023a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038cc:	480c      	ldr	r0, [pc, #48]	; (8003900 <prvInitialiseTaskLists+0x6c>)
 80038ce:	f7fe fd67 	bl	80023a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80038d2:	480c      	ldr	r0, [pc, #48]	; (8003904 <prvInitialiseTaskLists+0x70>)
 80038d4:	f7fe fd64 	bl	80023a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038d8:	480b      	ldr	r0, [pc, #44]	; (8003908 <prvInitialiseTaskLists+0x74>)
 80038da:	f7fe fd61 	bl	80023a0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038de:	4b0b      	ldr	r3, [pc, #44]	; (800390c <prvInitialiseTaskLists+0x78>)
 80038e0:	4a05      	ldr	r2, [pc, #20]	; (80038f8 <prvInitialiseTaskLists+0x64>)
 80038e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038e4:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <prvInitialiseTaskLists+0x7c>)
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <prvInitialiseTaskLists+0x68>)
 80038e8:	601a      	str	r2, [r3, #0]
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000098 	.word	0x20000098
 80038f8:	200000fc 	.word	0x200000fc
 80038fc:	20000110 	.word	0x20000110
 8003900:	2000012c 	.word	0x2000012c
 8003904:	20000140 	.word	0x20000140
 8003908:	20000158 	.word	0x20000158
 800390c:	20000124 	.word	0x20000124
 8003910:	20000128 	.word	0x20000128

08003914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800391a:	e019      	b.n	8003950 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800391c:	f000 fd6c 	bl	80043f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003920:	4b10      	ldr	r3, [pc, #64]	; (8003964 <prvCheckTasksWaitingTermination+0x50>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3304      	adds	r3, #4
 800392c:	4618      	mov	r0, r3
 800392e:	f7fe fd9d 	bl	800246c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003932:	4b0d      	ldr	r3, [pc, #52]	; (8003968 <prvCheckTasksWaitingTermination+0x54>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3b01      	subs	r3, #1
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <prvCheckTasksWaitingTermination+0x54>)
 800393a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <prvCheckTasksWaitingTermination+0x58>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3b01      	subs	r3, #1
 8003942:	4a0a      	ldr	r2, [pc, #40]	; (800396c <prvCheckTasksWaitingTermination+0x58>)
 8003944:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003946:	f000 fd87 	bl	8004458 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f810 	bl	8003970 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003950:	4b06      	ldr	r3, [pc, #24]	; (800396c <prvCheckTasksWaitingTermination+0x58>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e1      	bne.n	800391c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003958:	bf00      	nop
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000140 	.word	0x20000140
 8003968:	2000016c 	.word	0x2000016c
 800396c:	20000154 	.word	0x20000154

08003970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fef3 	bl	8004768 <vPortFree>
                vPortFree( pxTCB );
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fef0 	bl	8004768 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003988:	bf00      	nop
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003994:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <prvResetNextTaskUnblockTime+0x30>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <prvResetNextTaskUnblockTime+0x34>)
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295
 80039a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039a6:	e005      	b.n	80039b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <prvResetNextTaskUnblockTime+0x30>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a04      	ldr	r2, [pc, #16]	; (80039c4 <prvResetNextTaskUnblockTime+0x34>)
 80039b2:	6013      	str	r3, [r2, #0]
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000124 	.word	0x20000124
 80039c4:	2000018c 	.word	0x2000018c

080039c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <xTaskGetSchedulerState+0x34>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d102      	bne.n	80039dc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039d6:	2301      	movs	r3, #1
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	e008      	b.n	80039ee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039dc:	4b08      	ldr	r3, [pc, #32]	; (8003a00 <xTaskGetSchedulerState+0x38>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d102      	bne.n	80039ea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039e4:	2302      	movs	r3, #2
 80039e6:	607b      	str	r3, [r7, #4]
 80039e8:	e001      	b.n	80039ee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039ee:	687b      	ldr	r3, [r7, #4]
    }
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	20000178 	.word	0x20000178
 8003a00:	20000194 	.word	0x20000194

08003a04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 808c 	beq.w	8003b34 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a1c:	4b48      	ldr	r3, [pc, #288]	; (8003b40 <xTaskPriorityDisinherit+0x13c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d00a      	beq.n	8003a3c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	613b      	str	r3, [r7, #16]
    }
 8003a38:	bf00      	nop
 8003a3a:	e7fe      	b.n	8003a3a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	60fb      	str	r3, [r7, #12]
    }
 8003a56:	bf00      	nop
 8003a58:	e7fe      	b.n	8003a58 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	1e5a      	subs	r2, r3, #1
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d061      	beq.n	8003b34 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d15d      	bne.n	8003b34 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fcf5 	bl	800246c <uxListRemove>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10a      	bne.n	8003a9e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	4b2b      	ldr	r3, [pc, #172]	; (8003b44 <xTaskPriorityDisinherit+0x140>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	4a2a      	ldr	r2, [pc, #168]	; (8003b44 <xTaskPriorityDisinherit+0x140>)
 8003a9c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f1c3 0205 	rsb	r2, r3, #5
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	4b22      	ldr	r3, [pc, #136]	; (8003b44 <xTaskPriorityDisinherit+0x140>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	4a20      	ldr	r2, [pc, #128]	; (8003b44 <xTaskPriorityDisinherit+0x140>)
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	491f      	ldr	r1, [pc, #124]	; (8003b48 <xTaskPriorityDisinherit+0x144>)
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	617b      	str	r3, [r7, #20]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	3204      	adds	r2, #4
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	609a      	str	r2, [r3, #8]
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4a10      	ldr	r2, [pc, #64]	; (8003b48 <xTaskPriorityDisinherit+0x144>)
 8003b08:	441a      	add	r2, r3
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	615a      	str	r2, [r3, #20]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b12:	490d      	ldr	r1, [pc, #52]	; (8003b48 <xTaskPriorityDisinherit+0x144>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c59      	adds	r1, r3, #1
 8003b22:	4809      	ldr	r0, [pc, #36]	; (8003b48 <xTaskPriorityDisinherit+0x144>)
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4403      	add	r3, r0
 8003b2e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003b30:	2301      	movs	r3, #1
 8003b32:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003b34:	69fb      	ldr	r3, [r7, #28]
    }
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000094 	.word	0x20000094
 8003b44:	20000174 	.word	0x20000174
 8003b48:	20000098 	.word	0x20000098

08003b4c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b56:	4b38      	ldr	r3, [pc, #224]	; (8003c38 <prvAddCurrentTaskToDelayedList+0xec>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
        {
            /* About to enter a delayed list, so ensure the ucDelayAborted flag is
             * reset to pdFALSE so it can be detected as having been set to pdTRUE
             * when the task leaves the Blocked state. */
            pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003b5c:	4b37      	ldr	r3, [pc, #220]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b66:	4b35      	ldr	r3, [pc, #212]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fe fc7d 	bl	800246c <uxListRemove>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <prvAddCurrentTaskToDelayedList+0x44>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b78:	4b30      	ldr	r3, [pc, #192]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	2201      	movs	r2, #1
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43da      	mvns	r2, r3
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003b8e:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b96:	d124      	bne.n	8003be2 <prvAddCurrentTaskToDelayedList+0x96>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d021      	beq.n	8003be2 <prvAddCurrentTaskToDelayedList+0x96>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b9e:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	4b25      	ldr	r3, [pc, #148]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	6892      	ldr	r2, [r2, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	3204      	adds	r2, #4
 8003bc0:	605a      	str	r2, [r3, #4]
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003bd2:	615a      	str	r2, [r3, #20]
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	4a1a      	ldr	r2, [pc, #104]	; (8003c44 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003be0:	e026      	b.n	8003c30 <prvAddCurrentTaskToDelayedList+0xe4>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bea:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d209      	bcs.n	8003c0e <prvAddCurrentTaskToDelayedList+0xc2>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3304      	adds	r3, #4
 8003c04:	4619      	mov	r1, r3
 8003c06:	4610      	mov	r0, r2
 8003c08:	f7fe fbf7 	bl	80023fa <vListInsert>
}
 8003c0c:	e010      	b.n	8003c30 <prvAddCurrentTaskToDelayedList+0xe4>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c0e:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <prvAddCurrentTaskToDelayedList+0x100>)
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f7fe fbed 	bl	80023fa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <prvAddCurrentTaskToDelayedList+0x104>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d202      	bcs.n	8003c30 <prvAddCurrentTaskToDelayedList+0xe4>
                        xNextTaskUnblockTime = xTimeToWake;
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <prvAddCurrentTaskToDelayedList+0x104>)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6013      	str	r3, [r2, #0]
}
 8003c30:	bf00      	nop
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000170 	.word	0x20000170
 8003c3c:	20000094 	.word	0x20000094
 8003c40:	20000174 	.word	0x20000174
 8003c44:	20000158 	.word	0x20000158
 8003c48:	20000128 	.word	0x20000128
 8003c4c:	20000124 	.word	0x20000124
 8003c50:	2000018c 	.word	0x2000018c

08003c54 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c5e:	f000 fa63 	bl	8004128 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <xTimerCreateTimerTask+0x54>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00b      	beq.n	8003c82 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <xTimerCreateTimerTask+0x58>)
 8003c6c:	9301      	str	r3, [sp, #4]
 8003c6e:	2302      	movs	r3, #2
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	2300      	movs	r3, #0
 8003c74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c78:	490d      	ldr	r1, [pc, #52]	; (8003cb0 <xTimerCreateTimerTask+0x5c>)
 8003c7a:	480e      	ldr	r0, [pc, #56]	; (8003cb4 <xTimerCreateTimerTask+0x60>)
 8003c7c:	f7fe ffda 	bl	8002c34 <xTaskCreate>
 8003c80:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	603b      	str	r3, [r7, #0]
    }
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c9e:	687b      	ldr	r3, [r7, #4]
    }
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	200001d0 	.word	0x200001d0
 8003cac:	200001d4 	.word	0x200001d4
 8003cb0:	08005a64 	.word	0x08005a64
 8003cb4:	08003d5d 	.word	0x08003d5d

08003cb8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cc4:	e008      	b.n	8003cd8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4413      	add	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	699a      	ldr	r2, [r3, #24]
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	18d1      	adds	r1, r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f8dd 	bl	8003ea4 <prvInsertTimerInActiveList>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ea      	bne.n	8003cc6 <prvReloadTimer+0xe>
        }
    }
 8003cf0:	bf00      	nop
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d06:	4b14      	ldr	r3, [pc, #80]	; (8003d58 <prvProcessExpiredTimer+0x5c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fe fba9 	bl	800246c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d20:	f003 0304 	and.w	r3, r3, #4
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff ffc3 	bl	8003cb8 <prvReloadTimer>
 8003d32:	e008      	b.n	8003d46 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	68f8      	ldr	r0, [r7, #12]
 8003d4c:	4798      	blx	r3
    }
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200001c8 	.word	0x200001c8

08003d5c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f857 	bl	8003e1c <prvGetNextExpireTime>
 8003d6e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4619      	mov	r1, r3
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f803 	bl	8003d80 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003d7a:	f000 f8d5 	bl	8003f28 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d7e:	e7f1      	b.n	8003d64 <prvTimerTask+0x8>

08003d80 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003d8a:	f7ff f923 	bl	8002fd4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d8e:	f107 0308 	add.w	r3, r7, #8
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 f866 	bl	8003e64 <prvSampleTimeNow>
 8003d98:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d130      	bne.n	8003e02 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <prvProcessTimerOrBlockTask+0x3c>
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d806      	bhi.n	8003dbc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003dae:	f7ff f91f 	bl	8002ff0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003db2:	68f9      	ldr	r1, [r7, #12]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f7ff ffa1 	bl	8003cfc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003dba:	e024      	b.n	8003e06 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d008      	beq.n	8003dd4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003dc2:	4b13      	ldr	r3, [pc, #76]	; (8003e10 <prvProcessTimerOrBlockTask+0x90>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <prvProcessTimerOrBlockTask+0x50>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <prvProcessTimerOrBlockTask+0x52>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003dd4:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <prvProcessTimerOrBlockTask+0x94>)
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	4619      	mov	r1, r3
 8003de2:	f7fe fe8b 	bl	8002afc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003de6:	f7ff f903 	bl	8002ff0 <xTaskResumeAll>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003df0:	4b09      	ldr	r3, [pc, #36]	; (8003e18 <prvProcessTimerOrBlockTask+0x98>)
 8003df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	f3bf 8f6f 	isb	sy
    }
 8003e00:	e001      	b.n	8003e06 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e02:	f7ff f8f5 	bl	8002ff0 <xTaskResumeAll>
    }
 8003e06:	bf00      	nop
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	200001cc 	.word	0x200001cc
 8003e14:	200001d0 	.word	0x200001d0
 8003e18:	e000ed04 	.word	0xe000ed04

08003e1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e24:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <prvGetNextExpireTime+0x44>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <prvGetNextExpireTime+0x16>
 8003e2e:	2201      	movs	r2, #1
 8003e30:	e000      	b.n	8003e34 <prvGetNextExpireTime+0x18>
 8003e32:	2200      	movs	r2, #0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d105      	bne.n	8003e4c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <prvGetNextExpireTime+0x44>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e001      	b.n	8003e50 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e50:	68fb      	ldr	r3, [r7, #12]
    }
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	200001c8 	.word	0x200001c8

08003e64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003e6c:	f7ff f9ae 	bl	80031cc <xTaskGetTickCount>
 8003e70:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003e72:	4b0b      	ldr	r3, [pc, #44]	; (8003ea0 <prvSampleTimeNow+0x3c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d205      	bcs.n	8003e88 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003e7c:	f000 f92e 	bl	80040dc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e002      	b.n	8003e8e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003e8e:	4a04      	ldr	r2, [pc, #16]	; (8003ea0 <prvSampleTimeNow+0x3c>)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e94:	68fb      	ldr	r3, [r7, #12]
    }
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200001d8 	.word	0x200001d8

08003ea4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d812      	bhi.n	8003ef0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	1ad2      	subs	r2, r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d302      	bcc.n	8003ede <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	e01b      	b.n	8003f16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <prvInsertTimerInActiveList+0x7c>)
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	4610      	mov	r0, r2
 8003eea:	f7fe fa86 	bl	80023fa <vListInsert>
 8003eee:	e012      	b.n	8003f16 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d206      	bcs.n	8003f06 <prvInsertTimerInActiveList+0x62>
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f00:	2301      	movs	r3, #1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	e007      	b.n	8003f16 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <prvInsertTimerInActiveList+0x80>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3304      	adds	r3, #4
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4610      	mov	r0, r2
 8003f12:	f7fe fa72 	bl	80023fa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f16:	697b      	ldr	r3, [r7, #20]
    }
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	200001cc 	.word	0x200001cc
 8003f24:	200001c8 	.word	0x200001c8

08003f28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	; 0x28
 8003f2c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f2e:	e0c2      	b.n	80040b6 <prvProcessReceivedCommands+0x18e>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	da18      	bge.n	8003f68 <prvProcessReceivedCommands+0x40>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f36:	1d3b      	adds	r3, r7, #4
 8003f38:	3304      	adds	r3, #4
 8003f3a:	627b      	str	r3, [r7, #36]	; 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <prvProcessReceivedCommands+0x30>
        __asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	61bb      	str	r3, [r7, #24]
    }
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <prvProcessReceivedCommands+0x2e>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5e:	6850      	ldr	r0, [r2, #4]
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	6892      	ldr	r2, [r2, #8]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f2c0 80a2 	blt.w	80040b4 <prvProcessReceivedCommands+0x18c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d004      	beq.n	8003f86 <prvProcessReceivedCommands+0x5e>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	3304      	adds	r3, #4
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe fa73 	bl	800246c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f86:	463b      	mov	r3, r7
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff ff6b 	bl	8003e64 <prvSampleTimeNow>
 8003f8e:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	f200 808e 	bhi.w	80040b6 <prvProcessReceivedCommands+0x18e>
 8003f9a:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <prvProcessReceivedCommands+0x78>)
 8003f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa0:	08003fc5 	.word	0x08003fc5
 8003fa4:	08003fc5 	.word	0x08003fc5
 8003fa8:	0800402d 	.word	0x0800402d
 8003fac:	08004041 	.word	0x08004041
 8003fb0:	0800408b 	.word	0x0800408b
 8003fb4:	08003fc5 	.word	0x08003fc5
 8003fb8:	08003fc5 	.word	0x08003fc5
 8003fbc:	0800402d 	.word	0x0800402d
 8003fc0:	08004041 	.word	0x08004041
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	18d1      	adds	r1, r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	69fa      	ldr	r2, [r7, #28]
 8003fe2:	6a38      	ldr	r0, [r7, #32]
 8003fe4:	f7ff ff5e 	bl	8003ea4 <prvInsertTimerInActiveList>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d063      	beq.n	80040b6 <prvProcessReceivedCommands+0x18e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <prvProcessReceivedCommands+0xe8>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	6a3b      	ldr	r3, [r7, #32]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	4413      	add	r3, r2
 8004004:	69fa      	ldr	r2, [r7, #28]
 8004006:	4619      	mov	r1, r3
 8004008:	6a38      	ldr	r0, [r7, #32]
 800400a:	f7ff fe55 	bl	8003cb8 <prvReloadTimer>
 800400e:	e008      	b.n	8004022 <prvProcessReceivedCommands+0xfa>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004016:	f023 0301 	bic.w	r3, r3, #1
 800401a:	b2da      	uxtb	r2, r3
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	6a38      	ldr	r0, [r7, #32]
 8004028:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800402a:	e044      	b.n	80040b6 <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004032:	f023 0301 	bic.w	r3, r3, #1
 8004036:	b2da      	uxtb	r2, r3
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800403e:	e03a      	b.n	80040b6 <prvProcessReceivedCommands+0x18e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	b2da      	uxtb	r2, r3
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10a      	bne.n	8004076 <prvProcessReceivedCommands+0x14e>
        __asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	617b      	str	r3, [r7, #20]
    }
 8004072:	bf00      	nop
 8004074:	e7fe      	b.n	8004074 <prvProcessReceivedCommands+0x14c>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	18d1      	adds	r1, r2, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	6a38      	ldr	r0, [r7, #32]
 8004084:	f7ff ff0e 	bl	8003ea4 <prvInsertTimerInActiveList>
                        break;
 8004088:	e015      	b.n	80040b6 <prvProcessReceivedCommands+0x18e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d103      	bne.n	80040a0 <prvProcessReceivedCommands+0x178>
                                {
                                    vPortFree( pxTimer );
 8004098:	6a38      	ldr	r0, [r7, #32]
 800409a:	f000 fb65 	bl	8004768 <vPortFree>
 800409e:	e00a      	b.n	80040b6 <prvProcessReceivedCommands+0x18e>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040b2:	e000      	b.n	80040b6 <prvProcessReceivedCommands+0x18e>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 80040b4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040b6:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <prvProcessReceivedCommands+0x1b0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	1d39      	adds	r1, r7, #4
 80040bc:	2200      	movs	r2, #0
 80040be:	4618      	mov	r0, r3
 80040c0:	f7fe faf4 	bl	80026ac <xQueueReceive>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f47f af32 	bne.w	8003f30 <prvProcessReceivedCommands+0x8>
        }
    }
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	3728      	adds	r7, #40	; 0x28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	200001d0 	.word	0x200001d0

080040dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040e2:	e009      	b.n	80040f8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040e4:	4b0e      	ldr	r3, [pc, #56]	; (8004120 <prvSwitchTimerLists+0x44>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80040ee:	f04f 31ff 	mov.w	r1, #4294967295
 80040f2:	6838      	ldr	r0, [r7, #0]
 80040f4:	f7ff fe02 	bl	8003cfc <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040f8:	4b09      	ldr	r3, [pc, #36]	; (8004120 <prvSwitchTimerLists+0x44>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004102:	4b07      	ldr	r3, [pc, #28]	; (8004120 <prvSwitchTimerLists+0x44>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <prvSwitchTimerLists+0x48>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <prvSwitchTimerLists+0x44>)
 800410e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <prvSwitchTimerLists+0x48>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6013      	str	r3, [r2, #0]
    }
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	200001c8 	.word	0x200001c8
 8004124:	200001cc 	.word	0x200001cc

08004128 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800412c:	f000 f964 	bl	80043f8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004130:	4b12      	ldr	r3, [pc, #72]	; (800417c <prvCheckForValidListAndQueue+0x54>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11d      	bne.n	8004174 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004138:	4811      	ldr	r0, [pc, #68]	; (8004180 <prvCheckForValidListAndQueue+0x58>)
 800413a:	f7fe f931 	bl	80023a0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800413e:	4811      	ldr	r0, [pc, #68]	; (8004184 <prvCheckForValidListAndQueue+0x5c>)
 8004140:	f7fe f92e 	bl	80023a0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004144:	4b10      	ldr	r3, [pc, #64]	; (8004188 <prvCheckForValidListAndQueue+0x60>)
 8004146:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <prvCheckForValidListAndQueue+0x58>)
 8004148:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800414a:	4b10      	ldr	r3, [pc, #64]	; (800418c <prvCheckForValidListAndQueue+0x64>)
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <prvCheckForValidListAndQueue+0x5c>)
 800414e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004150:	2200      	movs	r2, #0
 8004152:	2110      	movs	r1, #16
 8004154:	2005      	movs	r0, #5
 8004156:	f7fe fa35 	bl	80025c4 <xQueueGenericCreate>
 800415a:	4603      	mov	r3, r0
 800415c:	4a07      	ldr	r2, [pc, #28]	; (800417c <prvCheckForValidListAndQueue+0x54>)
 800415e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <prvCheckForValidListAndQueue+0x54>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d005      	beq.n	8004174 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <prvCheckForValidListAndQueue+0x54>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4908      	ldr	r1, [pc, #32]	; (8004190 <prvCheckForValidListAndQueue+0x68>)
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fc76 	bl	8002a60 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004174:	f000 f970 	bl	8004458 <vPortExitCritical>
    }
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	200001d0 	.word	0x200001d0
 8004180:	200001a0 	.word	0x200001a0
 8004184:	200001b4 	.word	0x200001b4
 8004188:	200001c8 	.word	0x200001c8
 800418c:	200001cc 	.word	0x200001cc
 8004190:	08005a6c 	.word	0x08005a6c

08004194 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	3b04      	subs	r3, #4
 80041a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3b04      	subs	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f023 0201 	bic.w	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b04      	subs	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041c4:	4a0c      	ldr	r2, [pc, #48]	; (80041f8 <pxPortInitialiseStack+0x64>)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b14      	subs	r3, #20
 80041ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b04      	subs	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f06f 0202 	mvn.w	r2, #2
 80041e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3b20      	subs	r3, #32
 80041e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	080041fd 	.word	0x080041fd

080041fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004206:	4b12      	ldr	r3, [pc, #72]	; (8004250 <prvTaskExitError+0x54>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d00a      	beq.n	8004226 <prvTaskExitError+0x2a>
        __asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	60fb      	str	r3, [r7, #12]
    }
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <prvTaskExitError+0x28>
        __asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60bb      	str	r3, [r7, #8]
    }
 8004238:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800423a:	bf00      	nop
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0fc      	beq.n	800423c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	20000010 	.word	0x20000010
	...

08004260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <pxCurrentTCBConst2>)
 8004262:	6819      	ldr	r1, [r3, #0]
 8004264:	6808      	ldr	r0, [r1, #0]
 8004266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800426a:	f380 8809 	msr	PSP, r0
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f04f 0000 	mov.w	r0, #0
 8004276:	f380 8811 	msr	BASEPRI, r0
 800427a:	4770      	bx	lr
 800427c:	f3af 8000 	nop.w

08004280 <pxCurrentTCBConst2>:
 8004280:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004284:	bf00      	nop
 8004286:	bf00      	nop

08004288 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004288:	4808      	ldr	r0, [pc, #32]	; (80042ac <prvPortStartFirstTask+0x24>)
 800428a:	6800      	ldr	r0, [r0, #0]
 800428c:	6800      	ldr	r0, [r0, #0]
 800428e:	f380 8808 	msr	MSP, r0
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f380 8814 	msr	CONTROL, r0
 800429a:	b662      	cpsie	i
 800429c:	b661      	cpsie	f
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	df00      	svc	0
 80042a8:	bf00      	nop
 80042aa:	0000      	.short	0x0000
 80042ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042b0:	bf00      	nop
 80042b2:	bf00      	nop

080042b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042ba:	4b46      	ldr	r3, [pc, #280]	; (80043d4 <xPortStartScheduler+0x120>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a46      	ldr	r2, [pc, #280]	; (80043d8 <xPortStartScheduler+0x124>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d10a      	bne.n	80042da <xPortStartScheduler+0x26>
        __asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	613b      	str	r3, [r7, #16]
    }
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80042da:	4b3e      	ldr	r3, [pc, #248]	; (80043d4 <xPortStartScheduler+0x120>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a3f      	ldr	r2, [pc, #252]	; (80043dc <xPortStartScheduler+0x128>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10a      	bne.n	80042fa <xPortStartScheduler+0x46>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	60fb      	str	r3, [r7, #12]
    }
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042fa:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <xPortStartScheduler+0x12c>)
 80042fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	22ff      	movs	r2, #255	; 0xff
 800430a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4b31      	ldr	r3, [pc, #196]	; (80043e4 <xPortStartScheduler+0x130>)
 8004320:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004322:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <xPortStartScheduler+0x134>)
 8004324:	2207      	movs	r2, #7
 8004326:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004328:	e009      	b.n	800433e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800432a:	4b2f      	ldr	r3, [pc, #188]	; (80043e8 <xPortStartScheduler+0x134>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	3b01      	subs	r3, #1
 8004330:	4a2d      	ldr	r2, [pc, #180]	; (80043e8 <xPortStartScheduler+0x134>)
 8004332:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	b2db      	uxtb	r3, r3
 800433c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004346:	2b80      	cmp	r3, #128	; 0x80
 8004348:	d0ef      	beq.n	800432a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800434a:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <xPortStartScheduler+0x134>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1c3 0307 	rsb	r3, r3, #7
 8004352:	2b04      	cmp	r3, #4
 8004354:	d00a      	beq.n	800436c <xPortStartScheduler+0xb8>
        __asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60bb      	str	r3, [r7, #8]
    }
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800436c:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <xPortStartScheduler+0x134>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	021b      	lsls	r3, r3, #8
 8004372:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <xPortStartScheduler+0x134>)
 8004374:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <xPortStartScheduler+0x134>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800437e:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <xPortStartScheduler+0x134>)
 8004380:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	b2da      	uxtb	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800438a:	4b18      	ldr	r3, [pc, #96]	; (80043ec <xPortStartScheduler+0x138>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a17      	ldr	r2, [pc, #92]	; (80043ec <xPortStartScheduler+0x138>)
 8004390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004394:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004396:	4b15      	ldr	r3, [pc, #84]	; (80043ec <xPortStartScheduler+0x138>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a14      	ldr	r2, [pc, #80]	; (80043ec <xPortStartScheduler+0x138>)
 800439c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80043a2:	f000 f8db 	bl	800455c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <xPortStartScheduler+0x13c>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80043ac:	f000 f8f0 	bl	8004590 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80043b0:	4b10      	ldr	r3, [pc, #64]	; (80043f4 <xPortStartScheduler+0x140>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a0f      	ldr	r2, [pc, #60]	; (80043f4 <xPortStartScheduler+0x140>)
 80043b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80043ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80043bc:	f7ff ff64 	bl	8004288 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80043c0:	f7ff f808 	bl	80033d4 <vTaskSwitchContext>
    prvTaskExitError();
 80043c4:	f7ff ff1a 	bl	80041fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	e000ed00 	.word	0xe000ed00
 80043d8:	410fc271 	.word	0x410fc271
 80043dc:	410fc270 	.word	0x410fc270
 80043e0:	e000e400 	.word	0xe000e400
 80043e4:	200001dc 	.word	0x200001dc
 80043e8:	200001e0 	.word	0x200001e0
 80043ec:	e000ed20 	.word	0xe000ed20
 80043f0:	20000010 	.word	0x20000010
 80043f4:	e000ef34 	.word	0xe000ef34

080043f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
        __asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	607b      	str	r3, [r7, #4]
    }
 8004410:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004412:	4b0f      	ldr	r3, [pc, #60]	; (8004450 <vPortEnterCritical+0x58>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3301      	adds	r3, #1
 8004418:	4a0d      	ldr	r2, [pc, #52]	; (8004450 <vPortEnterCritical+0x58>)
 800441a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800441c:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <vPortEnterCritical+0x58>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d10f      	bne.n	8004444 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <vPortEnterCritical+0x5c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <vPortEnterCritical+0x4c>
        __asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	603b      	str	r3, [r7, #0]
    }
 8004440:	bf00      	nop
 8004442:	e7fe      	b.n	8004442 <vPortEnterCritical+0x4a>
    }
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000010 	.word	0x20000010
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800445e:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <vPortExitCritical+0x50>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <vPortExitCritical+0x24>
        __asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	607b      	str	r3, [r7, #4]
    }
 8004478:	bf00      	nop
 800447a:	e7fe      	b.n	800447a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800447c:	4b0a      	ldr	r3, [pc, #40]	; (80044a8 <vPortExitCritical+0x50>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3b01      	subs	r3, #1
 8004482:	4a09      	ldr	r2, [pc, #36]	; (80044a8 <vPortExitCritical+0x50>)
 8004484:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <vPortExitCritical+0x50>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d105      	bne.n	800449a <vPortExitCritical+0x42>
 800448e:	2300      	movs	r3, #0
 8004490:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004498:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000010 	.word	0x20000010
 80044ac:	00000000 	.word	0x00000000

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f01e 0f10 	tst.w	lr, #16
 80044c0:	bf08      	it	eq
 80044c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80044d4:	f380 8811 	msr	BASEPRI, r0
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f7fe ff78 	bl	80033d4 <vTaskSwitchContext>
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f380 8811 	msr	BASEPRI, r0
 80044ec:	bc09      	pop	{r0, r3}
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	6808      	ldr	r0, [r1, #0]
 80044f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f6:	f01e 0f10 	tst.w	lr, #16
 80044fa:	bf08      	it	eq
 80044fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004500:	f380 8809 	msr	PSP, r0
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst>:
 8004510:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
        __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
    }
 8004530:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004532:	f7fe fe5b 	bl	80031ec <xTaskIncrementTick>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d003      	beq.n	8004544 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800453c:	4b06      	ldr	r3, [pc, #24]	; (8004558 <SysTick_Handler+0x40>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	2300      	movs	r3, #0
 8004546:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f383 8811 	msr	BASEPRI, r3
    }
 800454e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004550:	bf00      	nop
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	e000ed04 	.word	0xe000ed04

0800455c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <vPortSetupTimerInterrupt+0x28>)
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004566:	4b08      	ldr	r3, [pc, #32]	; (8004588 <vPortSetupTimerInterrupt+0x2c>)
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <vPortSetupTimerInterrupt+0x30>)
 800456e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8004572:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004574:	4b03      	ldr	r3, [pc, #12]	; (8004584 <vPortSetupTimerInterrupt+0x28>)
 8004576:	2207      	movs	r2, #7
 8004578:	601a      	str	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000e010 	.word	0xe000e010
 8004588:	e000e018 	.word	0xe000e018
 800458c:	e000e014 	.word	0xe000e014

08004590 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004590:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80045a0 <vPortEnableVFP+0x10>
 8004594:	6801      	ldr	r1, [r0, #0]
 8004596:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800459a:	6001      	str	r1, [r0, #0]
 800459c:	4770      	bx	lr
 800459e:	0000      	.short	0x0000
 80045a0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80045b4:	f7fe fd0e 	bl	8002fd4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80045b8:	4b65      	ldr	r3, [pc, #404]	; (8004750 <pvPortMalloc+0x1a8>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80045c0:	f000 f934 	bl	800482c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80045c4:	4b63      	ldr	r3, [pc, #396]	; (8004754 <pvPortMalloc+0x1ac>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4013      	ands	r3, r2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f040 80a7 	bne.w	8004720 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02d      	beq.n	8004634 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80045d8:	2208      	movs	r2, #8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d227      	bcs.n	8004634 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80045e4:	2208      	movs	r2, #8
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d021      	beq.n	800463a <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f023 0307 	bic.w	r3, r3, #7
 80045fc:	3308      	adds	r3, #8
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	429a      	cmp	r2, r3
 8004602:	d214      	bcs.n	800462e <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	3308      	adds	r3, #8
 800460c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <pvPortMalloc+0x92>
        __asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	617b      	str	r3, [r7, #20]
    }
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004632:	e002      	b.n	800463a <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	607b      	str	r3, [r7, #4]
 8004638:	e000      	b.n	800463c <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800463a:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d06e      	beq.n	8004720 <pvPortMalloc+0x178>
 8004642:	4b45      	ldr	r3, [pc, #276]	; (8004758 <pvPortMalloc+0x1b0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	d869      	bhi.n	8004720 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800464c:	4b43      	ldr	r3, [pc, #268]	; (800475c <pvPortMalloc+0x1b4>)
 800464e:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004650:	4b42      	ldr	r3, [pc, #264]	; (800475c <pvPortMalloc+0x1b4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004656:	e004      	b.n	8004662 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d903      	bls.n	8004674 <pvPortMalloc+0xcc>
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f1      	bne.n	8004658 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004674:	4b36      	ldr	r3, [pc, #216]	; (8004750 <pvPortMalloc+0x1a8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800467a:	429a      	cmp	r2, r3
 800467c:	d050      	beq.n	8004720 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2208      	movs	r2, #8
 8004684:	4413      	add	r3, r2
 8004686:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	1ad2      	subs	r2, r2, r3
 8004698:	2308      	movs	r3, #8
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	429a      	cmp	r2, r3
 800469e:	d91f      	bls.n	80046e0 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <pvPortMalloc+0x120>
        __asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	613b      	str	r3, [r7, #16]
    }
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80046d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80046da:	69b8      	ldr	r0, [r7, #24]
 80046dc:	f000 f908 	bl	80048f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80046e0:	4b1d      	ldr	r3, [pc, #116]	; (8004758 <pvPortMalloc+0x1b0>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	4a1b      	ldr	r2, [pc, #108]	; (8004758 <pvPortMalloc+0x1b0>)
 80046ec:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80046ee:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <pvPortMalloc+0x1b0>)
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b1b      	ldr	r3, [pc, #108]	; (8004760 <pvPortMalloc+0x1b8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d203      	bcs.n	8004702 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80046fa:	4b17      	ldr	r3, [pc, #92]	; (8004758 <pvPortMalloc+0x1b0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a18      	ldr	r2, [pc, #96]	; (8004760 <pvPortMalloc+0x1b8>)
 8004700:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	4b13      	ldr	r3, [pc, #76]	; (8004754 <pvPortMalloc+0x1ac>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	431a      	orrs	r2, r3
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004716:	4b13      	ldr	r3, [pc, #76]	; (8004764 <pvPortMalloc+0x1bc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a11      	ldr	r2, [pc, #68]	; (8004764 <pvPortMalloc+0x1bc>)
 800471e:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004720:	f7fe fc66 	bl	8002ff0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f003 0307 	and.w	r3, r3, #7
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <pvPortMalloc+0x19c>
        __asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	60fb      	str	r3, [r7, #12]
    }
 8004740:	bf00      	nop
 8004742:	e7fe      	b.n	8004742 <pvPortMalloc+0x19a>
    return pvReturn;
 8004744:	69fb      	ldr	r3, [r7, #28]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3728      	adds	r7, #40	; 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	200041ec 	.word	0x200041ec
 8004754:	20004200 	.word	0x20004200
 8004758:	200041f0 	.word	0x200041f0
 800475c:	200041e4 	.word	0x200041e4
 8004760:	200041f4 	.word	0x200041f4
 8004764:	200041f8 	.word	0x200041f8

08004768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d04d      	beq.n	8004816 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800477a:	2308      	movs	r3, #8
 800477c:	425b      	negs	r3, r3
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4413      	add	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	4b24      	ldr	r3, [pc, #144]	; (8004820 <vPortFree+0xb8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <vPortFree+0x44>
        __asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60fb      	str	r3, [r7, #12]
    }
 80047a8:	bf00      	nop
 80047aa:	e7fe      	b.n	80047aa <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00a      	beq.n	80047ca <vPortFree+0x62>
        __asm volatile
 80047b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b8:	f383 8811 	msr	BASEPRI, r3
 80047bc:	f3bf 8f6f 	isb	sy
 80047c0:	f3bf 8f4f 	dsb	sy
 80047c4:	60bb      	str	r3, [r7, #8]
    }
 80047c6:	bf00      	nop
 80047c8:	e7fe      	b.n	80047c8 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4b14      	ldr	r3, [pc, #80]	; (8004820 <vPortFree+0xb8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d01e      	beq.n	8004816 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d11a      	bne.n	8004816 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <vPortFree+0xb8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	43db      	mvns	r3, r3
 80047ea:	401a      	ands	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80047f0:	f7fe fbf0 	bl	8002fd4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <vPortFree+0xbc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <vPortFree+0xbc>)
 8004800:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004802:	6938      	ldr	r0, [r7, #16]
 8004804:	f000 f874 	bl	80048f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004808:	4b07      	ldr	r3, [pc, #28]	; (8004828 <vPortFree+0xc0>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3301      	adds	r3, #1
 800480e:	4a06      	ldr	r2, [pc, #24]	; (8004828 <vPortFree+0xc0>)
 8004810:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004812:	f7fe fbed 	bl	8002ff0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004816:	bf00      	nop
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20004200 	.word	0x20004200
 8004824:	200041f0 	.word	0x200041f0
 8004828:	200041fc 	.word	0x200041fc

0800482c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004832:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004836:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <prvHeapInit+0xac>)
 800483a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00c      	beq.n	8004860 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3307      	adds	r3, #7
 800484a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0307 	bic.w	r3, r3, #7
 8004852:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	4a1f      	ldr	r2, [pc, #124]	; (80048d8 <prvHeapInit+0xac>)
 800485c:	4413      	add	r3, r2
 800485e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004864:	4a1d      	ldr	r2, [pc, #116]	; (80048dc <prvHeapInit+0xb0>)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800486a:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <prvHeapInit+0xb0>)
 800486c:	2200      	movs	r2, #0
 800486e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68ba      	ldr	r2, [r7, #8]
 8004874:	4413      	add	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004878:	2208      	movs	r2, #8
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1a9b      	subs	r3, r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0307 	bic.w	r3, r3, #7
 8004886:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4a15      	ldr	r2, [pc, #84]	; (80048e0 <prvHeapInit+0xb4>)
 800488c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800488e:	4b14      	ldr	r3, [pc, #80]	; (80048e0 <prvHeapInit+0xb4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2200      	movs	r2, #0
 8004894:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004896:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <prvHeapInit+0xb4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	1ad2      	subs	r2, r2, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <prvHeapInit+0xb4>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <prvHeapInit+0xb8>)
 80048ba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <prvHeapInit+0xbc>)
 80048c2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <prvHeapInit+0xc0>)
 80048c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80048ca:	601a      	str	r2, [r3, #0]
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	200001e4 	.word	0x200001e4
 80048dc:	200041e4 	.word	0x200041e4
 80048e0:	200041ec 	.word	0x200041ec
 80048e4:	200041f4 	.word	0x200041f4
 80048e8:	200041f0 	.word	0x200041f0
 80048ec:	20004200 	.word	0x20004200

080048f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048f8:	4b28      	ldr	r3, [pc, #160]	; (800499c <prvInsertBlockIntoFreeList+0xac>)
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	e002      	b.n	8004904 <prvInsertBlockIntoFreeList+0x14>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d8f7      	bhi.n	80048fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4413      	add	r3, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	429a      	cmp	r2, r3
 800491e:	d108      	bne.n	8004932 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	441a      	add	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	441a      	add	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d118      	bne.n	8004978 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <prvInsertBlockIntoFreeList+0xb0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d00d      	beq.n	800496e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e008      	b.n	8004980 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <prvInsertBlockIntoFreeList+0xb0>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	e003      	b.n	8004980 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	429a      	cmp	r2, r3
 8004986:	d002      	beq.n	800498e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800498e:	bf00      	nop
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	200041e4 	.word	0x200041e4
 80049a0:	200041ec 	.word	0x200041ec

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	; (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	; (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <__libc_init_array+0x44>)
 80049b8:	f001 f808 	bl	80059cc <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	08005b54 	.word	0x08005b54
 80049e0:	08005b54 	.word	0x08005b54
 80049e4:	08005b54 	.word	0x08005b54
 80049e8:	08005b58 	.word	0x08005b58

080049ec <memcpy>:
 80049ec:	440a      	add	r2, r1
 80049ee:	4291      	cmp	r1, r2
 80049f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80049f4:	d100      	bne.n	80049f8 <memcpy+0xc>
 80049f6:	4770      	bx	lr
 80049f8:	b510      	push	{r4, lr}
 80049fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a02:	4291      	cmp	r1, r2
 8004a04:	d1f9      	bne.n	80049fa <memcpy+0xe>
 8004a06:	bd10      	pop	{r4, pc}

08004a08 <memset>:
 8004a08:	4402      	add	r2, r0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d100      	bne.n	8004a12 <memset+0xa>
 8004a10:	4770      	bx	lr
 8004a12:	f803 1b01 	strb.w	r1, [r3], #1
 8004a16:	e7f9      	b.n	8004a0c <memset+0x4>

08004a18 <iprintf>:
 8004a18:	b40f      	push	{r0, r1, r2, r3}
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	; (8004a44 <iprintf+0x2c>)
 8004a1c:	b513      	push	{r0, r1, r4, lr}
 8004a1e:	681c      	ldr	r4, [r3, #0]
 8004a20:	b124      	cbz	r4, 8004a2c <iprintf+0x14>
 8004a22:	69a3      	ldr	r3, [r4, #24]
 8004a24:	b913      	cbnz	r3, 8004a2c <iprintf+0x14>
 8004a26:	4620      	mov	r0, r4
 8004a28:	f000 fa5e 	bl	8004ee8 <__sinit>
 8004a2c:	ab05      	add	r3, sp, #20
 8004a2e:	9a04      	ldr	r2, [sp, #16]
 8004a30:	68a1      	ldr	r1, [r4, #8]
 8004a32:	9301      	str	r3, [sp, #4]
 8004a34:	4620      	mov	r0, r4
 8004a36:	f000 fc2f 	bl	8005298 <_vfiprintf_r>
 8004a3a:	b002      	add	sp, #8
 8004a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a40:	b004      	add	sp, #16
 8004a42:	4770      	bx	lr
 8004a44:	20000014 	.word	0x20000014

08004a48 <_puts_r>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	460e      	mov	r6, r1
 8004a4c:	4605      	mov	r5, r0
 8004a4e:	b118      	cbz	r0, 8004a58 <_puts_r+0x10>
 8004a50:	6983      	ldr	r3, [r0, #24]
 8004a52:	b90b      	cbnz	r3, 8004a58 <_puts_r+0x10>
 8004a54:	f000 fa48 	bl	8004ee8 <__sinit>
 8004a58:	69ab      	ldr	r3, [r5, #24]
 8004a5a:	68ac      	ldr	r4, [r5, #8]
 8004a5c:	b913      	cbnz	r3, 8004a64 <_puts_r+0x1c>
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 fa42 	bl	8004ee8 <__sinit>
 8004a64:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <_puts_r+0xd0>)
 8004a66:	429c      	cmp	r4, r3
 8004a68:	d120      	bne.n	8004aac <_puts_r+0x64>
 8004a6a:	686c      	ldr	r4, [r5, #4]
 8004a6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a6e:	07db      	lsls	r3, r3, #31
 8004a70:	d405      	bmi.n	8004a7e <_puts_r+0x36>
 8004a72:	89a3      	ldrh	r3, [r4, #12]
 8004a74:	0598      	lsls	r0, r3, #22
 8004a76:	d402      	bmi.n	8004a7e <_puts_r+0x36>
 8004a78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a7a:	f000 fad3 	bl	8005024 <__retarget_lock_acquire_recursive>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	0719      	lsls	r1, r3, #28
 8004a82:	d51d      	bpl.n	8004ac0 <_puts_r+0x78>
 8004a84:	6923      	ldr	r3, [r4, #16]
 8004a86:	b1db      	cbz	r3, 8004ac0 <_puts_r+0x78>
 8004a88:	3e01      	subs	r6, #1
 8004a8a:	68a3      	ldr	r3, [r4, #8]
 8004a8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a90:	3b01      	subs	r3, #1
 8004a92:	60a3      	str	r3, [r4, #8]
 8004a94:	bb39      	cbnz	r1, 8004ae6 <_puts_r+0x9e>
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da38      	bge.n	8004b0c <_puts_r+0xc4>
 8004a9a:	4622      	mov	r2, r4
 8004a9c:	210a      	movs	r1, #10
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 f848 	bl	8004b34 <__swbuf_r>
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d011      	beq.n	8004acc <_puts_r+0x84>
 8004aa8:	250a      	movs	r5, #10
 8004aaa:	e011      	b.n	8004ad0 <_puts_r+0x88>
 8004aac:	4b1b      	ldr	r3, [pc, #108]	; (8004b1c <_puts_r+0xd4>)
 8004aae:	429c      	cmp	r4, r3
 8004ab0:	d101      	bne.n	8004ab6 <_puts_r+0x6e>
 8004ab2:	68ac      	ldr	r4, [r5, #8]
 8004ab4:	e7da      	b.n	8004a6c <_puts_r+0x24>
 8004ab6:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <_puts_r+0xd8>)
 8004ab8:	429c      	cmp	r4, r3
 8004aba:	bf08      	it	eq
 8004abc:	68ec      	ldreq	r4, [r5, #12]
 8004abe:	e7d5      	b.n	8004a6c <_puts_r+0x24>
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 f888 	bl	8004bd8 <__swsetup_r>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d0dd      	beq.n	8004a88 <_puts_r+0x40>
 8004acc:	f04f 35ff 	mov.w	r5, #4294967295
 8004ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ad2:	07da      	lsls	r2, r3, #31
 8004ad4:	d405      	bmi.n	8004ae2 <_puts_r+0x9a>
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	059b      	lsls	r3, r3, #22
 8004ada:	d402      	bmi.n	8004ae2 <_puts_r+0x9a>
 8004adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ade:	f000 faa2 	bl	8005026 <__retarget_lock_release_recursive>
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	bd70      	pop	{r4, r5, r6, pc}
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	da04      	bge.n	8004af4 <_puts_r+0xac>
 8004aea:	69a2      	ldr	r2, [r4, #24]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	dc06      	bgt.n	8004afe <_puts_r+0xb6>
 8004af0:	290a      	cmp	r1, #10
 8004af2:	d004      	beq.n	8004afe <_puts_r+0xb6>
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	6022      	str	r2, [r4, #0]
 8004afa:	7019      	strb	r1, [r3, #0]
 8004afc:	e7c5      	b.n	8004a8a <_puts_r+0x42>
 8004afe:	4622      	mov	r2, r4
 8004b00:	4628      	mov	r0, r5
 8004b02:	f000 f817 	bl	8004b34 <__swbuf_r>
 8004b06:	3001      	adds	r0, #1
 8004b08:	d1bf      	bne.n	8004a8a <_puts_r+0x42>
 8004b0a:	e7df      	b.n	8004acc <_puts_r+0x84>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	250a      	movs	r5, #10
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	6022      	str	r2, [r4, #0]
 8004b14:	701d      	strb	r5, [r3, #0]
 8004b16:	e7db      	b.n	8004ad0 <_puts_r+0x88>
 8004b18:	08005ae0 	.word	0x08005ae0
 8004b1c:	08005b00 	.word	0x08005b00
 8004b20:	08005ac0 	.word	0x08005ac0

08004b24 <puts>:
 8004b24:	4b02      	ldr	r3, [pc, #8]	; (8004b30 <puts+0xc>)
 8004b26:	4601      	mov	r1, r0
 8004b28:	6818      	ldr	r0, [r3, #0]
 8004b2a:	f7ff bf8d 	b.w	8004a48 <_puts_r>
 8004b2e:	bf00      	nop
 8004b30:	20000014 	.word	0x20000014

08004b34 <__swbuf_r>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	460e      	mov	r6, r1
 8004b38:	4614      	mov	r4, r2
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	b118      	cbz	r0, 8004b46 <__swbuf_r+0x12>
 8004b3e:	6983      	ldr	r3, [r0, #24]
 8004b40:	b90b      	cbnz	r3, 8004b46 <__swbuf_r+0x12>
 8004b42:	f000 f9d1 	bl	8004ee8 <__sinit>
 8004b46:	4b21      	ldr	r3, [pc, #132]	; (8004bcc <__swbuf_r+0x98>)
 8004b48:	429c      	cmp	r4, r3
 8004b4a:	d12b      	bne.n	8004ba4 <__swbuf_r+0x70>
 8004b4c:	686c      	ldr	r4, [r5, #4]
 8004b4e:	69a3      	ldr	r3, [r4, #24]
 8004b50:	60a3      	str	r3, [r4, #8]
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	071a      	lsls	r2, r3, #28
 8004b56:	d52f      	bpl.n	8004bb8 <__swbuf_r+0x84>
 8004b58:	6923      	ldr	r3, [r4, #16]
 8004b5a:	b36b      	cbz	r3, 8004bb8 <__swbuf_r+0x84>
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	1ac0      	subs	r0, r0, r3
 8004b62:	6963      	ldr	r3, [r4, #20]
 8004b64:	b2f6      	uxtb	r6, r6
 8004b66:	4283      	cmp	r3, r0
 8004b68:	4637      	mov	r7, r6
 8004b6a:	dc04      	bgt.n	8004b76 <__swbuf_r+0x42>
 8004b6c:	4621      	mov	r1, r4
 8004b6e:	4628      	mov	r0, r5
 8004b70:	f000 f926 	bl	8004dc0 <_fflush_r>
 8004b74:	bb30      	cbnz	r0, 8004bc4 <__swbuf_r+0x90>
 8004b76:	68a3      	ldr	r3, [r4, #8]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	60a3      	str	r3, [r4, #8]
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	6022      	str	r2, [r4, #0]
 8004b82:	701e      	strb	r6, [r3, #0]
 8004b84:	6963      	ldr	r3, [r4, #20]
 8004b86:	3001      	adds	r0, #1
 8004b88:	4283      	cmp	r3, r0
 8004b8a:	d004      	beq.n	8004b96 <__swbuf_r+0x62>
 8004b8c:	89a3      	ldrh	r3, [r4, #12]
 8004b8e:	07db      	lsls	r3, r3, #31
 8004b90:	d506      	bpl.n	8004ba0 <__swbuf_r+0x6c>
 8004b92:	2e0a      	cmp	r6, #10
 8004b94:	d104      	bne.n	8004ba0 <__swbuf_r+0x6c>
 8004b96:	4621      	mov	r1, r4
 8004b98:	4628      	mov	r0, r5
 8004b9a:	f000 f911 	bl	8004dc0 <_fflush_r>
 8004b9e:	b988      	cbnz	r0, 8004bc4 <__swbuf_r+0x90>
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <__swbuf_r+0x9c>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d101      	bne.n	8004bae <__swbuf_r+0x7a>
 8004baa:	68ac      	ldr	r4, [r5, #8]
 8004bac:	e7cf      	b.n	8004b4e <__swbuf_r+0x1a>
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <__swbuf_r+0xa0>)
 8004bb0:	429c      	cmp	r4, r3
 8004bb2:	bf08      	it	eq
 8004bb4:	68ec      	ldreq	r4, [r5, #12]
 8004bb6:	e7ca      	b.n	8004b4e <__swbuf_r+0x1a>
 8004bb8:	4621      	mov	r1, r4
 8004bba:	4628      	mov	r0, r5
 8004bbc:	f000 f80c 	bl	8004bd8 <__swsetup_r>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d0cb      	beq.n	8004b5c <__swbuf_r+0x28>
 8004bc4:	f04f 37ff 	mov.w	r7, #4294967295
 8004bc8:	e7ea      	b.n	8004ba0 <__swbuf_r+0x6c>
 8004bca:	bf00      	nop
 8004bcc:	08005ae0 	.word	0x08005ae0
 8004bd0:	08005b00 	.word	0x08005b00
 8004bd4:	08005ac0 	.word	0x08005ac0

08004bd8 <__swsetup_r>:
 8004bd8:	4b32      	ldr	r3, [pc, #200]	; (8004ca4 <__swsetup_r+0xcc>)
 8004bda:	b570      	push	{r4, r5, r6, lr}
 8004bdc:	681d      	ldr	r5, [r3, #0]
 8004bde:	4606      	mov	r6, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	b125      	cbz	r5, 8004bee <__swsetup_r+0x16>
 8004be4:	69ab      	ldr	r3, [r5, #24]
 8004be6:	b913      	cbnz	r3, 8004bee <__swsetup_r+0x16>
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 f97d 	bl	8004ee8 <__sinit>
 8004bee:	4b2e      	ldr	r3, [pc, #184]	; (8004ca8 <__swsetup_r+0xd0>)
 8004bf0:	429c      	cmp	r4, r3
 8004bf2:	d10f      	bne.n	8004c14 <__swsetup_r+0x3c>
 8004bf4:	686c      	ldr	r4, [r5, #4]
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bfc:	0719      	lsls	r1, r3, #28
 8004bfe:	d42c      	bmi.n	8004c5a <__swsetup_r+0x82>
 8004c00:	06dd      	lsls	r5, r3, #27
 8004c02:	d411      	bmi.n	8004c28 <__swsetup_r+0x50>
 8004c04:	2309      	movs	r3, #9
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	e03e      	b.n	8004c92 <__swsetup_r+0xba>
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <__swsetup_r+0xd4>)
 8004c16:	429c      	cmp	r4, r3
 8004c18:	d101      	bne.n	8004c1e <__swsetup_r+0x46>
 8004c1a:	68ac      	ldr	r4, [r5, #8]
 8004c1c:	e7eb      	b.n	8004bf6 <__swsetup_r+0x1e>
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <__swsetup_r+0xd8>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	bf08      	it	eq
 8004c24:	68ec      	ldreq	r4, [r5, #12]
 8004c26:	e7e6      	b.n	8004bf6 <__swsetup_r+0x1e>
 8004c28:	0758      	lsls	r0, r3, #29
 8004c2a:	d512      	bpl.n	8004c52 <__swsetup_r+0x7a>
 8004c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c2e:	b141      	cbz	r1, 8004c42 <__swsetup_r+0x6a>
 8004c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d002      	beq.n	8004c3e <__swsetup_r+0x66>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f000 fa59 	bl	80050f0 <_free_r>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6363      	str	r3, [r4, #52]	; 0x34
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	f043 0308 	orr.w	r3, r3, #8
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	b94b      	cbnz	r3, 8004c72 <__swsetup_r+0x9a>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c68:	d003      	beq.n	8004c72 <__swsetup_r+0x9a>
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 f9ff 	bl	8005070 <__smakebuf_r>
 8004c72:	89a0      	ldrh	r0, [r4, #12]
 8004c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c78:	f010 0301 	ands.w	r3, r0, #1
 8004c7c:	d00a      	beq.n	8004c94 <__swsetup_r+0xbc>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60a3      	str	r3, [r4, #8]
 8004c82:	6963      	ldr	r3, [r4, #20]
 8004c84:	425b      	negs	r3, r3
 8004c86:	61a3      	str	r3, [r4, #24]
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	b943      	cbnz	r3, 8004c9e <__swsetup_r+0xc6>
 8004c8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c90:	d1ba      	bne.n	8004c08 <__swsetup_r+0x30>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	0781      	lsls	r1, r0, #30
 8004c96:	bf58      	it	pl
 8004c98:	6963      	ldrpl	r3, [r4, #20]
 8004c9a:	60a3      	str	r3, [r4, #8]
 8004c9c:	e7f4      	b.n	8004c88 <__swsetup_r+0xb0>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e7f7      	b.n	8004c92 <__swsetup_r+0xba>
 8004ca2:	bf00      	nop
 8004ca4:	20000014 	.word	0x20000014
 8004ca8:	08005ae0 	.word	0x08005ae0
 8004cac:	08005b00 	.word	0x08005b00
 8004cb0:	08005ac0 	.word	0x08005ac0

08004cb4 <__sflush_r>:
 8004cb4:	898a      	ldrh	r2, [r1, #12]
 8004cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cba:	4605      	mov	r5, r0
 8004cbc:	0710      	lsls	r0, r2, #28
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	d458      	bmi.n	8004d74 <__sflush_r+0xc0>
 8004cc2:	684b      	ldr	r3, [r1, #4]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	dc05      	bgt.n	8004cd4 <__sflush_r+0x20>
 8004cc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	dc02      	bgt.n	8004cd4 <__sflush_r+0x20>
 8004cce:	2000      	movs	r0, #0
 8004cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cd6:	2e00      	cmp	r6, #0
 8004cd8:	d0f9      	beq.n	8004cce <__sflush_r+0x1a>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce0:	682f      	ldr	r7, [r5, #0]
 8004ce2:	602b      	str	r3, [r5, #0]
 8004ce4:	d032      	beq.n	8004d4c <__sflush_r+0x98>
 8004ce6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	075a      	lsls	r2, r3, #29
 8004cec:	d505      	bpl.n	8004cfa <__sflush_r+0x46>
 8004cee:	6863      	ldr	r3, [r4, #4]
 8004cf0:	1ac0      	subs	r0, r0, r3
 8004cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cf4:	b10b      	cbz	r3, 8004cfa <__sflush_r+0x46>
 8004cf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cf8:	1ac0      	subs	r0, r0, r3
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d00:	6a21      	ldr	r1, [r4, #32]
 8004d02:	4628      	mov	r0, r5
 8004d04:	47b0      	blx	r6
 8004d06:	1c43      	adds	r3, r0, #1
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	d106      	bne.n	8004d1a <__sflush_r+0x66>
 8004d0c:	6829      	ldr	r1, [r5, #0]
 8004d0e:	291d      	cmp	r1, #29
 8004d10:	d82c      	bhi.n	8004d6c <__sflush_r+0xb8>
 8004d12:	4a2a      	ldr	r2, [pc, #168]	; (8004dbc <__sflush_r+0x108>)
 8004d14:	40ca      	lsrs	r2, r1
 8004d16:	07d6      	lsls	r6, r2, #31
 8004d18:	d528      	bpl.n	8004d6c <__sflush_r+0xb8>
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	6062      	str	r2, [r4, #4]
 8004d1e:	04d9      	lsls	r1, r3, #19
 8004d20:	6922      	ldr	r2, [r4, #16]
 8004d22:	6022      	str	r2, [r4, #0]
 8004d24:	d504      	bpl.n	8004d30 <__sflush_r+0x7c>
 8004d26:	1c42      	adds	r2, r0, #1
 8004d28:	d101      	bne.n	8004d2e <__sflush_r+0x7a>
 8004d2a:	682b      	ldr	r3, [r5, #0]
 8004d2c:	b903      	cbnz	r3, 8004d30 <__sflush_r+0x7c>
 8004d2e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d32:	602f      	str	r7, [r5, #0]
 8004d34:	2900      	cmp	r1, #0
 8004d36:	d0ca      	beq.n	8004cce <__sflush_r+0x1a>
 8004d38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d002      	beq.n	8004d46 <__sflush_r+0x92>
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 f9d5 	bl	80050f0 <_free_r>
 8004d46:	2000      	movs	r0, #0
 8004d48:	6360      	str	r0, [r4, #52]	; 0x34
 8004d4a:	e7c1      	b.n	8004cd0 <__sflush_r+0x1c>
 8004d4c:	6a21      	ldr	r1, [r4, #32]
 8004d4e:	2301      	movs	r3, #1
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b0      	blx	r6
 8004d54:	1c41      	adds	r1, r0, #1
 8004d56:	d1c7      	bne.n	8004ce8 <__sflush_r+0x34>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0c4      	beq.n	8004ce8 <__sflush_r+0x34>
 8004d5e:	2b1d      	cmp	r3, #29
 8004d60:	d001      	beq.n	8004d66 <__sflush_r+0xb2>
 8004d62:	2b16      	cmp	r3, #22
 8004d64:	d101      	bne.n	8004d6a <__sflush_r+0xb6>
 8004d66:	602f      	str	r7, [r5, #0]
 8004d68:	e7b1      	b.n	8004cce <__sflush_r+0x1a>
 8004d6a:	89a3      	ldrh	r3, [r4, #12]
 8004d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d70:	81a3      	strh	r3, [r4, #12]
 8004d72:	e7ad      	b.n	8004cd0 <__sflush_r+0x1c>
 8004d74:	690f      	ldr	r7, [r1, #16]
 8004d76:	2f00      	cmp	r7, #0
 8004d78:	d0a9      	beq.n	8004cce <__sflush_r+0x1a>
 8004d7a:	0793      	lsls	r3, r2, #30
 8004d7c:	680e      	ldr	r6, [r1, #0]
 8004d7e:	bf08      	it	eq
 8004d80:	694b      	ldreq	r3, [r1, #20]
 8004d82:	600f      	str	r7, [r1, #0]
 8004d84:	bf18      	it	ne
 8004d86:	2300      	movne	r3, #0
 8004d88:	eba6 0807 	sub.w	r8, r6, r7
 8004d8c:	608b      	str	r3, [r1, #8]
 8004d8e:	f1b8 0f00 	cmp.w	r8, #0
 8004d92:	dd9c      	ble.n	8004cce <__sflush_r+0x1a>
 8004d94:	6a21      	ldr	r1, [r4, #32]
 8004d96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d98:	4643      	mov	r3, r8
 8004d9a:	463a      	mov	r2, r7
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b0      	blx	r6
 8004da0:	2800      	cmp	r0, #0
 8004da2:	dc06      	bgt.n	8004db2 <__sflush_r+0xfe>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004daa:	81a3      	strh	r3, [r4, #12]
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	e78e      	b.n	8004cd0 <__sflush_r+0x1c>
 8004db2:	4407      	add	r7, r0
 8004db4:	eba8 0800 	sub.w	r8, r8, r0
 8004db8:	e7e9      	b.n	8004d8e <__sflush_r+0xda>
 8004dba:	bf00      	nop
 8004dbc:	20400001 	.word	0x20400001

08004dc0 <_fflush_r>:
 8004dc0:	b538      	push	{r3, r4, r5, lr}
 8004dc2:	690b      	ldr	r3, [r1, #16]
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	b913      	cbnz	r3, 8004dd0 <_fflush_r+0x10>
 8004dca:	2500      	movs	r5, #0
 8004dcc:	4628      	mov	r0, r5
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	b118      	cbz	r0, 8004dda <_fflush_r+0x1a>
 8004dd2:	6983      	ldr	r3, [r0, #24]
 8004dd4:	b90b      	cbnz	r3, 8004dda <_fflush_r+0x1a>
 8004dd6:	f000 f887 	bl	8004ee8 <__sinit>
 8004dda:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <_fflush_r+0x6c>)
 8004ddc:	429c      	cmp	r4, r3
 8004dde:	d11b      	bne.n	8004e18 <_fflush_r+0x58>
 8004de0:	686c      	ldr	r4, [r5, #4]
 8004de2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0ef      	beq.n	8004dca <_fflush_r+0xa>
 8004dea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004dec:	07d0      	lsls	r0, r2, #31
 8004dee:	d404      	bmi.n	8004dfa <_fflush_r+0x3a>
 8004df0:	0599      	lsls	r1, r3, #22
 8004df2:	d402      	bmi.n	8004dfa <_fflush_r+0x3a>
 8004df4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004df6:	f000 f915 	bl	8005024 <__retarget_lock_acquire_recursive>
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	f7ff ff59 	bl	8004cb4 <__sflush_r>
 8004e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e04:	07da      	lsls	r2, r3, #31
 8004e06:	4605      	mov	r5, r0
 8004e08:	d4e0      	bmi.n	8004dcc <_fflush_r+0xc>
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	059b      	lsls	r3, r3, #22
 8004e0e:	d4dd      	bmi.n	8004dcc <_fflush_r+0xc>
 8004e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e12:	f000 f908 	bl	8005026 <__retarget_lock_release_recursive>
 8004e16:	e7d9      	b.n	8004dcc <_fflush_r+0xc>
 8004e18:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <_fflush_r+0x70>)
 8004e1a:	429c      	cmp	r4, r3
 8004e1c:	d101      	bne.n	8004e22 <_fflush_r+0x62>
 8004e1e:	68ac      	ldr	r4, [r5, #8]
 8004e20:	e7df      	b.n	8004de2 <_fflush_r+0x22>
 8004e22:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <_fflush_r+0x74>)
 8004e24:	429c      	cmp	r4, r3
 8004e26:	bf08      	it	eq
 8004e28:	68ec      	ldreq	r4, [r5, #12]
 8004e2a:	e7da      	b.n	8004de2 <_fflush_r+0x22>
 8004e2c:	08005ae0 	.word	0x08005ae0
 8004e30:	08005b00 	.word	0x08005b00
 8004e34:	08005ac0 	.word	0x08005ac0

08004e38 <std>:
 8004e38:	2300      	movs	r3, #0
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e46:	6083      	str	r3, [r0, #8]
 8004e48:	8181      	strh	r1, [r0, #12]
 8004e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8004e4c:	81c2      	strh	r2, [r0, #14]
 8004e4e:	6183      	str	r3, [r0, #24]
 8004e50:	4619      	mov	r1, r3
 8004e52:	2208      	movs	r2, #8
 8004e54:	305c      	adds	r0, #92	; 0x5c
 8004e56:	f7ff fdd7 	bl	8004a08 <memset>
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <std+0x38>)
 8004e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e5e:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <std+0x3c>)
 8004e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <std+0x40>)
 8004e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e66:	4b05      	ldr	r3, [pc, #20]	; (8004e7c <std+0x44>)
 8004e68:	6224      	str	r4, [r4, #32]
 8004e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e6c:	bd10      	pop	{r4, pc}
 8004e6e:	bf00      	nop
 8004e70:	08005841 	.word	0x08005841
 8004e74:	08005863 	.word	0x08005863
 8004e78:	0800589b 	.word	0x0800589b
 8004e7c:	080058bf 	.word	0x080058bf

08004e80 <_cleanup_r>:
 8004e80:	4901      	ldr	r1, [pc, #4]	; (8004e88 <_cleanup_r+0x8>)
 8004e82:	f000 b8af 	b.w	8004fe4 <_fwalk_reent>
 8004e86:	bf00      	nop
 8004e88:	08004dc1 	.word	0x08004dc1

08004e8c <__sfmoreglue>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	1e4a      	subs	r2, r1, #1
 8004e90:	2568      	movs	r5, #104	; 0x68
 8004e92:	4355      	muls	r5, r2
 8004e94:	460e      	mov	r6, r1
 8004e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e9a:	f000 f979 	bl	8005190 <_malloc_r>
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	b140      	cbz	r0, 8004eb4 <__sfmoreglue+0x28>
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ea8:	300c      	adds	r0, #12
 8004eaa:	60a0      	str	r0, [r4, #8]
 8004eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004eb0:	f7ff fdaa 	bl	8004a08 <memset>
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}

08004eb8 <__sfp_lock_acquire>:
 8004eb8:	4801      	ldr	r0, [pc, #4]	; (8004ec0 <__sfp_lock_acquire+0x8>)
 8004eba:	f000 b8b3 	b.w	8005024 <__retarget_lock_acquire_recursive>
 8004ebe:	bf00      	nop
 8004ec0:	20004290 	.word	0x20004290

08004ec4 <__sfp_lock_release>:
 8004ec4:	4801      	ldr	r0, [pc, #4]	; (8004ecc <__sfp_lock_release+0x8>)
 8004ec6:	f000 b8ae 	b.w	8005026 <__retarget_lock_release_recursive>
 8004eca:	bf00      	nop
 8004ecc:	20004290 	.word	0x20004290

08004ed0 <__sinit_lock_acquire>:
 8004ed0:	4801      	ldr	r0, [pc, #4]	; (8004ed8 <__sinit_lock_acquire+0x8>)
 8004ed2:	f000 b8a7 	b.w	8005024 <__retarget_lock_acquire_recursive>
 8004ed6:	bf00      	nop
 8004ed8:	2000428b 	.word	0x2000428b

08004edc <__sinit_lock_release>:
 8004edc:	4801      	ldr	r0, [pc, #4]	; (8004ee4 <__sinit_lock_release+0x8>)
 8004ede:	f000 b8a2 	b.w	8005026 <__retarget_lock_release_recursive>
 8004ee2:	bf00      	nop
 8004ee4:	2000428b 	.word	0x2000428b

08004ee8 <__sinit>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	4604      	mov	r4, r0
 8004eec:	f7ff fff0 	bl	8004ed0 <__sinit_lock_acquire>
 8004ef0:	69a3      	ldr	r3, [r4, #24]
 8004ef2:	b11b      	cbz	r3, 8004efc <__sinit+0x14>
 8004ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef8:	f7ff bff0 	b.w	8004edc <__sinit_lock_release>
 8004efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004f00:	6523      	str	r3, [r4, #80]	; 0x50
 8004f02:	4b13      	ldr	r3, [pc, #76]	; (8004f50 <__sinit+0x68>)
 8004f04:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <__sinit+0x6c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f0a:	42a3      	cmp	r3, r4
 8004f0c:	bf04      	itt	eq
 8004f0e:	2301      	moveq	r3, #1
 8004f10:	61a3      	streq	r3, [r4, #24]
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f820 	bl	8004f58 <__sfp>
 8004f18:	6060      	str	r0, [r4, #4]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 f81c 	bl	8004f58 <__sfp>
 8004f20:	60a0      	str	r0, [r4, #8]
 8004f22:	4620      	mov	r0, r4
 8004f24:	f000 f818 	bl	8004f58 <__sfp>
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60e0      	str	r0, [r4, #12]
 8004f2c:	2104      	movs	r1, #4
 8004f2e:	6860      	ldr	r0, [r4, #4]
 8004f30:	f7ff ff82 	bl	8004e38 <std>
 8004f34:	68a0      	ldr	r0, [r4, #8]
 8004f36:	2201      	movs	r2, #1
 8004f38:	2109      	movs	r1, #9
 8004f3a:	f7ff ff7d 	bl	8004e38 <std>
 8004f3e:	68e0      	ldr	r0, [r4, #12]
 8004f40:	2202      	movs	r2, #2
 8004f42:	2112      	movs	r1, #18
 8004f44:	f7ff ff78 	bl	8004e38 <std>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	61a3      	str	r3, [r4, #24]
 8004f4c:	e7d2      	b.n	8004ef4 <__sinit+0xc>
 8004f4e:	bf00      	nop
 8004f50:	08005abc 	.word	0x08005abc
 8004f54:	08004e81 	.word	0x08004e81

08004f58 <__sfp>:
 8004f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5a:	4607      	mov	r7, r0
 8004f5c:	f7ff ffac 	bl	8004eb8 <__sfp_lock_acquire>
 8004f60:	4b1e      	ldr	r3, [pc, #120]	; (8004fdc <__sfp+0x84>)
 8004f62:	681e      	ldr	r6, [r3, #0]
 8004f64:	69b3      	ldr	r3, [r6, #24]
 8004f66:	b913      	cbnz	r3, 8004f6e <__sfp+0x16>
 8004f68:	4630      	mov	r0, r6
 8004f6a:	f7ff ffbd 	bl	8004ee8 <__sinit>
 8004f6e:	3648      	adds	r6, #72	; 0x48
 8004f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	d503      	bpl.n	8004f80 <__sfp+0x28>
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	b30b      	cbz	r3, 8004fc0 <__sfp+0x68>
 8004f7c:	6836      	ldr	r6, [r6, #0]
 8004f7e:	e7f7      	b.n	8004f70 <__sfp+0x18>
 8004f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f84:	b9d5      	cbnz	r5, 8004fbc <__sfp+0x64>
 8004f86:	4b16      	ldr	r3, [pc, #88]	; (8004fe0 <__sfp+0x88>)
 8004f88:	60e3      	str	r3, [r4, #12]
 8004f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8004f90:	f000 f847 	bl	8005022 <__retarget_lock_init_recursive>
 8004f94:	f7ff ff96 	bl	8004ec4 <__sfp_lock_release>
 8004f98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004fa0:	6025      	str	r5, [r4, #0]
 8004fa2:	61a5      	str	r5, [r4, #24]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004fac:	f7ff fd2c 	bl	8004a08 <memset>
 8004fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fb8:	4620      	mov	r0, r4
 8004fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fbc:	3468      	adds	r4, #104	; 0x68
 8004fbe:	e7d9      	b.n	8004f74 <__sfp+0x1c>
 8004fc0:	2104      	movs	r1, #4
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f7ff ff62 	bl	8004e8c <__sfmoreglue>
 8004fc8:	4604      	mov	r4, r0
 8004fca:	6030      	str	r0, [r6, #0]
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d1d5      	bne.n	8004f7c <__sfp+0x24>
 8004fd0:	f7ff ff78 	bl	8004ec4 <__sfp_lock_release>
 8004fd4:	230c      	movs	r3, #12
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	e7ee      	b.n	8004fb8 <__sfp+0x60>
 8004fda:	bf00      	nop
 8004fdc:	08005abc 	.word	0x08005abc
 8004fe0:	ffff0001 	.word	0xffff0001

08004fe4 <_fwalk_reent>:
 8004fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fe8:	4606      	mov	r6, r0
 8004fea:	4688      	mov	r8, r1
 8004fec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ff0:	2700      	movs	r7, #0
 8004ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8004ffa:	d505      	bpl.n	8005008 <_fwalk_reent+0x24>
 8004ffc:	6824      	ldr	r4, [r4, #0]
 8004ffe:	2c00      	cmp	r4, #0
 8005000:	d1f7      	bne.n	8004ff2 <_fwalk_reent+0xe>
 8005002:	4638      	mov	r0, r7
 8005004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005008:	89ab      	ldrh	r3, [r5, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d907      	bls.n	800501e <_fwalk_reent+0x3a>
 800500e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005012:	3301      	adds	r3, #1
 8005014:	d003      	beq.n	800501e <_fwalk_reent+0x3a>
 8005016:	4629      	mov	r1, r5
 8005018:	4630      	mov	r0, r6
 800501a:	47c0      	blx	r8
 800501c:	4307      	orrs	r7, r0
 800501e:	3568      	adds	r5, #104	; 0x68
 8005020:	e7e9      	b.n	8004ff6 <_fwalk_reent+0x12>

08005022 <__retarget_lock_init_recursive>:
 8005022:	4770      	bx	lr

08005024 <__retarget_lock_acquire_recursive>:
 8005024:	4770      	bx	lr

08005026 <__retarget_lock_release_recursive>:
 8005026:	4770      	bx	lr

08005028 <__swhatbuf_r>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	460e      	mov	r6, r1
 800502c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005030:	2900      	cmp	r1, #0
 8005032:	b096      	sub	sp, #88	; 0x58
 8005034:	4614      	mov	r4, r2
 8005036:	461d      	mov	r5, r3
 8005038:	da07      	bge.n	800504a <__swhatbuf_r+0x22>
 800503a:	2300      	movs	r3, #0
 800503c:	602b      	str	r3, [r5, #0]
 800503e:	89b3      	ldrh	r3, [r6, #12]
 8005040:	061a      	lsls	r2, r3, #24
 8005042:	d410      	bmi.n	8005066 <__swhatbuf_r+0x3e>
 8005044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005048:	e00e      	b.n	8005068 <__swhatbuf_r+0x40>
 800504a:	466a      	mov	r2, sp
 800504c:	f000 fc5e 	bl	800590c <_fstat_r>
 8005050:	2800      	cmp	r0, #0
 8005052:	dbf2      	blt.n	800503a <__swhatbuf_r+0x12>
 8005054:	9a01      	ldr	r2, [sp, #4]
 8005056:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800505a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800505e:	425a      	negs	r2, r3
 8005060:	415a      	adcs	r2, r3
 8005062:	602a      	str	r2, [r5, #0]
 8005064:	e7ee      	b.n	8005044 <__swhatbuf_r+0x1c>
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	2000      	movs	r0, #0
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	b016      	add	sp, #88	; 0x58
 800506e:	bd70      	pop	{r4, r5, r6, pc}

08005070 <__smakebuf_r>:
 8005070:	898b      	ldrh	r3, [r1, #12]
 8005072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005074:	079d      	lsls	r5, r3, #30
 8005076:	4606      	mov	r6, r0
 8005078:	460c      	mov	r4, r1
 800507a:	d507      	bpl.n	800508c <__smakebuf_r+0x1c>
 800507c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	6123      	str	r3, [r4, #16]
 8005084:	2301      	movs	r3, #1
 8005086:	6163      	str	r3, [r4, #20]
 8005088:	b002      	add	sp, #8
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	ab01      	add	r3, sp, #4
 800508e:	466a      	mov	r2, sp
 8005090:	f7ff ffca 	bl	8005028 <__swhatbuf_r>
 8005094:	9900      	ldr	r1, [sp, #0]
 8005096:	4605      	mov	r5, r0
 8005098:	4630      	mov	r0, r6
 800509a:	f000 f879 	bl	8005190 <_malloc_r>
 800509e:	b948      	cbnz	r0, 80050b4 <__smakebuf_r+0x44>
 80050a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a4:	059a      	lsls	r2, r3, #22
 80050a6:	d4ef      	bmi.n	8005088 <__smakebuf_r+0x18>
 80050a8:	f023 0303 	bic.w	r3, r3, #3
 80050ac:	f043 0302 	orr.w	r3, r3, #2
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	e7e3      	b.n	800507c <__smakebuf_r+0xc>
 80050b4:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <__smakebuf_r+0x7c>)
 80050b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	6020      	str	r0, [r4, #0]
 80050bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050c0:	81a3      	strh	r3, [r4, #12]
 80050c2:	9b00      	ldr	r3, [sp, #0]
 80050c4:	6163      	str	r3, [r4, #20]
 80050c6:	9b01      	ldr	r3, [sp, #4]
 80050c8:	6120      	str	r0, [r4, #16]
 80050ca:	b15b      	cbz	r3, 80050e4 <__smakebuf_r+0x74>
 80050cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050d0:	4630      	mov	r0, r6
 80050d2:	f000 fc2d 	bl	8005930 <_isatty_r>
 80050d6:	b128      	cbz	r0, 80050e4 <__smakebuf_r+0x74>
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	f023 0303 	bic.w	r3, r3, #3
 80050de:	f043 0301 	orr.w	r3, r3, #1
 80050e2:	81a3      	strh	r3, [r4, #12]
 80050e4:	89a0      	ldrh	r0, [r4, #12]
 80050e6:	4305      	orrs	r5, r0
 80050e8:	81a5      	strh	r5, [r4, #12]
 80050ea:	e7cd      	b.n	8005088 <__smakebuf_r+0x18>
 80050ec:	08004e81 	.word	0x08004e81

080050f0 <_free_r>:
 80050f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050f2:	2900      	cmp	r1, #0
 80050f4:	d048      	beq.n	8005188 <_free_r+0x98>
 80050f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050fa:	9001      	str	r0, [sp, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f1a1 0404 	sub.w	r4, r1, #4
 8005102:	bfb8      	it	lt
 8005104:	18e4      	addlt	r4, r4, r3
 8005106:	f000 fc35 	bl	8005974 <__malloc_lock>
 800510a:	4a20      	ldr	r2, [pc, #128]	; (800518c <_free_r+0x9c>)
 800510c:	9801      	ldr	r0, [sp, #4]
 800510e:	6813      	ldr	r3, [r2, #0]
 8005110:	4615      	mov	r5, r2
 8005112:	b933      	cbnz	r3, 8005122 <_free_r+0x32>
 8005114:	6063      	str	r3, [r4, #4]
 8005116:	6014      	str	r4, [r2, #0]
 8005118:	b003      	add	sp, #12
 800511a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800511e:	f000 bc2f 	b.w	8005980 <__malloc_unlock>
 8005122:	42a3      	cmp	r3, r4
 8005124:	d90b      	bls.n	800513e <_free_r+0x4e>
 8005126:	6821      	ldr	r1, [r4, #0]
 8005128:	1862      	adds	r2, r4, r1
 800512a:	4293      	cmp	r3, r2
 800512c:	bf04      	itt	eq
 800512e:	681a      	ldreq	r2, [r3, #0]
 8005130:	685b      	ldreq	r3, [r3, #4]
 8005132:	6063      	str	r3, [r4, #4]
 8005134:	bf04      	itt	eq
 8005136:	1852      	addeq	r2, r2, r1
 8005138:	6022      	streq	r2, [r4, #0]
 800513a:	602c      	str	r4, [r5, #0]
 800513c:	e7ec      	b.n	8005118 <_free_r+0x28>
 800513e:	461a      	mov	r2, r3
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	b10b      	cbz	r3, 8005148 <_free_r+0x58>
 8005144:	42a3      	cmp	r3, r4
 8005146:	d9fa      	bls.n	800513e <_free_r+0x4e>
 8005148:	6811      	ldr	r1, [r2, #0]
 800514a:	1855      	adds	r5, r2, r1
 800514c:	42a5      	cmp	r5, r4
 800514e:	d10b      	bne.n	8005168 <_free_r+0x78>
 8005150:	6824      	ldr	r4, [r4, #0]
 8005152:	4421      	add	r1, r4
 8005154:	1854      	adds	r4, r2, r1
 8005156:	42a3      	cmp	r3, r4
 8005158:	6011      	str	r1, [r2, #0]
 800515a:	d1dd      	bne.n	8005118 <_free_r+0x28>
 800515c:	681c      	ldr	r4, [r3, #0]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	6053      	str	r3, [r2, #4]
 8005162:	4421      	add	r1, r4
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	e7d7      	b.n	8005118 <_free_r+0x28>
 8005168:	d902      	bls.n	8005170 <_free_r+0x80>
 800516a:	230c      	movs	r3, #12
 800516c:	6003      	str	r3, [r0, #0]
 800516e:	e7d3      	b.n	8005118 <_free_r+0x28>
 8005170:	6825      	ldr	r5, [r4, #0]
 8005172:	1961      	adds	r1, r4, r5
 8005174:	428b      	cmp	r3, r1
 8005176:	bf04      	itt	eq
 8005178:	6819      	ldreq	r1, [r3, #0]
 800517a:	685b      	ldreq	r3, [r3, #4]
 800517c:	6063      	str	r3, [r4, #4]
 800517e:	bf04      	itt	eq
 8005180:	1949      	addeq	r1, r1, r5
 8005182:	6021      	streq	r1, [r4, #0]
 8005184:	6054      	str	r4, [r2, #4]
 8005186:	e7c7      	b.n	8005118 <_free_r+0x28>
 8005188:	b003      	add	sp, #12
 800518a:	bd30      	pop	{r4, r5, pc}
 800518c:	20004204 	.word	0x20004204

08005190 <_malloc_r>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	1ccd      	adds	r5, r1, #3
 8005194:	f025 0503 	bic.w	r5, r5, #3
 8005198:	3508      	adds	r5, #8
 800519a:	2d0c      	cmp	r5, #12
 800519c:	bf38      	it	cc
 800519e:	250c      	movcc	r5, #12
 80051a0:	2d00      	cmp	r5, #0
 80051a2:	4606      	mov	r6, r0
 80051a4:	db01      	blt.n	80051aa <_malloc_r+0x1a>
 80051a6:	42a9      	cmp	r1, r5
 80051a8:	d903      	bls.n	80051b2 <_malloc_r+0x22>
 80051aa:	230c      	movs	r3, #12
 80051ac:	6033      	str	r3, [r6, #0]
 80051ae:	2000      	movs	r0, #0
 80051b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051b2:	f000 fbdf 	bl	8005974 <__malloc_lock>
 80051b6:	4921      	ldr	r1, [pc, #132]	; (800523c <_malloc_r+0xac>)
 80051b8:	680a      	ldr	r2, [r1, #0]
 80051ba:	4614      	mov	r4, r2
 80051bc:	b99c      	cbnz	r4, 80051e6 <_malloc_r+0x56>
 80051be:	4f20      	ldr	r7, [pc, #128]	; (8005240 <_malloc_r+0xb0>)
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	b923      	cbnz	r3, 80051ce <_malloc_r+0x3e>
 80051c4:	4621      	mov	r1, r4
 80051c6:	4630      	mov	r0, r6
 80051c8:	f000 fb2a 	bl	8005820 <_sbrk_r>
 80051cc:	6038      	str	r0, [r7, #0]
 80051ce:	4629      	mov	r1, r5
 80051d0:	4630      	mov	r0, r6
 80051d2:	f000 fb25 	bl	8005820 <_sbrk_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	d123      	bne.n	8005222 <_malloc_r+0x92>
 80051da:	230c      	movs	r3, #12
 80051dc:	6033      	str	r3, [r6, #0]
 80051de:	4630      	mov	r0, r6
 80051e0:	f000 fbce 	bl	8005980 <__malloc_unlock>
 80051e4:	e7e3      	b.n	80051ae <_malloc_r+0x1e>
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	1b5b      	subs	r3, r3, r5
 80051ea:	d417      	bmi.n	800521c <_malloc_r+0x8c>
 80051ec:	2b0b      	cmp	r3, #11
 80051ee:	d903      	bls.n	80051f8 <_malloc_r+0x68>
 80051f0:	6023      	str	r3, [r4, #0]
 80051f2:	441c      	add	r4, r3
 80051f4:	6025      	str	r5, [r4, #0]
 80051f6:	e004      	b.n	8005202 <_malloc_r+0x72>
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	42a2      	cmp	r2, r4
 80051fc:	bf0c      	ite	eq
 80051fe:	600b      	streq	r3, [r1, #0]
 8005200:	6053      	strne	r3, [r2, #4]
 8005202:	4630      	mov	r0, r6
 8005204:	f000 fbbc 	bl	8005980 <__malloc_unlock>
 8005208:	f104 000b 	add.w	r0, r4, #11
 800520c:	1d23      	adds	r3, r4, #4
 800520e:	f020 0007 	bic.w	r0, r0, #7
 8005212:	1ac2      	subs	r2, r0, r3
 8005214:	d0cc      	beq.n	80051b0 <_malloc_r+0x20>
 8005216:	1a1b      	subs	r3, r3, r0
 8005218:	50a3      	str	r3, [r4, r2]
 800521a:	e7c9      	b.n	80051b0 <_malloc_r+0x20>
 800521c:	4622      	mov	r2, r4
 800521e:	6864      	ldr	r4, [r4, #4]
 8005220:	e7cc      	b.n	80051bc <_malloc_r+0x2c>
 8005222:	1cc4      	adds	r4, r0, #3
 8005224:	f024 0403 	bic.w	r4, r4, #3
 8005228:	42a0      	cmp	r0, r4
 800522a:	d0e3      	beq.n	80051f4 <_malloc_r+0x64>
 800522c:	1a21      	subs	r1, r4, r0
 800522e:	4630      	mov	r0, r6
 8005230:	f000 faf6 	bl	8005820 <_sbrk_r>
 8005234:	3001      	adds	r0, #1
 8005236:	d1dd      	bne.n	80051f4 <_malloc_r+0x64>
 8005238:	e7cf      	b.n	80051da <_malloc_r+0x4a>
 800523a:	bf00      	nop
 800523c:	20004204 	.word	0x20004204
 8005240:	20004208 	.word	0x20004208

08005244 <__sfputc_r>:
 8005244:	6893      	ldr	r3, [r2, #8]
 8005246:	3b01      	subs	r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	b410      	push	{r4}
 800524c:	6093      	str	r3, [r2, #8]
 800524e:	da08      	bge.n	8005262 <__sfputc_r+0x1e>
 8005250:	6994      	ldr	r4, [r2, #24]
 8005252:	42a3      	cmp	r3, r4
 8005254:	db01      	blt.n	800525a <__sfputc_r+0x16>
 8005256:	290a      	cmp	r1, #10
 8005258:	d103      	bne.n	8005262 <__sfputc_r+0x1e>
 800525a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800525e:	f7ff bc69 	b.w	8004b34 <__swbuf_r>
 8005262:	6813      	ldr	r3, [r2, #0]
 8005264:	1c58      	adds	r0, r3, #1
 8005266:	6010      	str	r0, [r2, #0]
 8005268:	7019      	strb	r1, [r3, #0]
 800526a:	4608      	mov	r0, r1
 800526c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005270:	4770      	bx	lr

08005272 <__sfputs_r>:
 8005272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005274:	4606      	mov	r6, r0
 8005276:	460f      	mov	r7, r1
 8005278:	4614      	mov	r4, r2
 800527a:	18d5      	adds	r5, r2, r3
 800527c:	42ac      	cmp	r4, r5
 800527e:	d101      	bne.n	8005284 <__sfputs_r+0x12>
 8005280:	2000      	movs	r0, #0
 8005282:	e007      	b.n	8005294 <__sfputs_r+0x22>
 8005284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005288:	463a      	mov	r2, r7
 800528a:	4630      	mov	r0, r6
 800528c:	f7ff ffda 	bl	8005244 <__sfputc_r>
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	d1f3      	bne.n	800527c <__sfputs_r+0xa>
 8005294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005298 <_vfiprintf_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	460d      	mov	r5, r1
 800529e:	b09d      	sub	sp, #116	; 0x74
 80052a0:	4614      	mov	r4, r2
 80052a2:	4698      	mov	r8, r3
 80052a4:	4606      	mov	r6, r0
 80052a6:	b118      	cbz	r0, 80052b0 <_vfiprintf_r+0x18>
 80052a8:	6983      	ldr	r3, [r0, #24]
 80052aa:	b90b      	cbnz	r3, 80052b0 <_vfiprintf_r+0x18>
 80052ac:	f7ff fe1c 	bl	8004ee8 <__sinit>
 80052b0:	4b89      	ldr	r3, [pc, #548]	; (80054d8 <_vfiprintf_r+0x240>)
 80052b2:	429d      	cmp	r5, r3
 80052b4:	d11b      	bne.n	80052ee <_vfiprintf_r+0x56>
 80052b6:	6875      	ldr	r5, [r6, #4]
 80052b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052ba:	07d9      	lsls	r1, r3, #31
 80052bc:	d405      	bmi.n	80052ca <_vfiprintf_r+0x32>
 80052be:	89ab      	ldrh	r3, [r5, #12]
 80052c0:	059a      	lsls	r2, r3, #22
 80052c2:	d402      	bmi.n	80052ca <_vfiprintf_r+0x32>
 80052c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052c6:	f7ff fead 	bl	8005024 <__retarget_lock_acquire_recursive>
 80052ca:	89ab      	ldrh	r3, [r5, #12]
 80052cc:	071b      	lsls	r3, r3, #28
 80052ce:	d501      	bpl.n	80052d4 <_vfiprintf_r+0x3c>
 80052d0:	692b      	ldr	r3, [r5, #16]
 80052d2:	b9eb      	cbnz	r3, 8005310 <_vfiprintf_r+0x78>
 80052d4:	4629      	mov	r1, r5
 80052d6:	4630      	mov	r0, r6
 80052d8:	f7ff fc7e 	bl	8004bd8 <__swsetup_r>
 80052dc:	b1c0      	cbz	r0, 8005310 <_vfiprintf_r+0x78>
 80052de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052e0:	07dc      	lsls	r4, r3, #31
 80052e2:	d50e      	bpl.n	8005302 <_vfiprintf_r+0x6a>
 80052e4:	f04f 30ff 	mov.w	r0, #4294967295
 80052e8:	b01d      	add	sp, #116	; 0x74
 80052ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ee:	4b7b      	ldr	r3, [pc, #492]	; (80054dc <_vfiprintf_r+0x244>)
 80052f0:	429d      	cmp	r5, r3
 80052f2:	d101      	bne.n	80052f8 <_vfiprintf_r+0x60>
 80052f4:	68b5      	ldr	r5, [r6, #8]
 80052f6:	e7df      	b.n	80052b8 <_vfiprintf_r+0x20>
 80052f8:	4b79      	ldr	r3, [pc, #484]	; (80054e0 <_vfiprintf_r+0x248>)
 80052fa:	429d      	cmp	r5, r3
 80052fc:	bf08      	it	eq
 80052fe:	68f5      	ldreq	r5, [r6, #12]
 8005300:	e7da      	b.n	80052b8 <_vfiprintf_r+0x20>
 8005302:	89ab      	ldrh	r3, [r5, #12]
 8005304:	0598      	lsls	r0, r3, #22
 8005306:	d4ed      	bmi.n	80052e4 <_vfiprintf_r+0x4c>
 8005308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800530a:	f7ff fe8c 	bl	8005026 <__retarget_lock_release_recursive>
 800530e:	e7e9      	b.n	80052e4 <_vfiprintf_r+0x4c>
 8005310:	2300      	movs	r3, #0
 8005312:	9309      	str	r3, [sp, #36]	; 0x24
 8005314:	2320      	movs	r3, #32
 8005316:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800531a:	f8cd 800c 	str.w	r8, [sp, #12]
 800531e:	2330      	movs	r3, #48	; 0x30
 8005320:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80054e4 <_vfiprintf_r+0x24c>
 8005324:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005328:	f04f 0901 	mov.w	r9, #1
 800532c:	4623      	mov	r3, r4
 800532e:	469a      	mov	sl, r3
 8005330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005334:	b10a      	cbz	r2, 800533a <_vfiprintf_r+0xa2>
 8005336:	2a25      	cmp	r2, #37	; 0x25
 8005338:	d1f9      	bne.n	800532e <_vfiprintf_r+0x96>
 800533a:	ebba 0b04 	subs.w	fp, sl, r4
 800533e:	d00b      	beq.n	8005358 <_vfiprintf_r+0xc0>
 8005340:	465b      	mov	r3, fp
 8005342:	4622      	mov	r2, r4
 8005344:	4629      	mov	r1, r5
 8005346:	4630      	mov	r0, r6
 8005348:	f7ff ff93 	bl	8005272 <__sfputs_r>
 800534c:	3001      	adds	r0, #1
 800534e:	f000 80aa 	beq.w	80054a6 <_vfiprintf_r+0x20e>
 8005352:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005354:	445a      	add	r2, fp
 8005356:	9209      	str	r2, [sp, #36]	; 0x24
 8005358:	f89a 3000 	ldrb.w	r3, [sl]
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 80a2 	beq.w	80054a6 <_vfiprintf_r+0x20e>
 8005362:	2300      	movs	r3, #0
 8005364:	f04f 32ff 	mov.w	r2, #4294967295
 8005368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800536c:	f10a 0a01 	add.w	sl, sl, #1
 8005370:	9304      	str	r3, [sp, #16]
 8005372:	9307      	str	r3, [sp, #28]
 8005374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005378:	931a      	str	r3, [sp, #104]	; 0x68
 800537a:	4654      	mov	r4, sl
 800537c:	2205      	movs	r2, #5
 800537e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005382:	4858      	ldr	r0, [pc, #352]	; (80054e4 <_vfiprintf_r+0x24c>)
 8005384:	f7fa ff3c 	bl	8000200 <memchr>
 8005388:	9a04      	ldr	r2, [sp, #16]
 800538a:	b9d8      	cbnz	r0, 80053c4 <_vfiprintf_r+0x12c>
 800538c:	06d1      	lsls	r1, r2, #27
 800538e:	bf44      	itt	mi
 8005390:	2320      	movmi	r3, #32
 8005392:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005396:	0713      	lsls	r3, r2, #28
 8005398:	bf44      	itt	mi
 800539a:	232b      	movmi	r3, #43	; 0x2b
 800539c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053a0:	f89a 3000 	ldrb.w	r3, [sl]
 80053a4:	2b2a      	cmp	r3, #42	; 0x2a
 80053a6:	d015      	beq.n	80053d4 <_vfiprintf_r+0x13c>
 80053a8:	9a07      	ldr	r2, [sp, #28]
 80053aa:	4654      	mov	r4, sl
 80053ac:	2000      	movs	r0, #0
 80053ae:	f04f 0c0a 	mov.w	ip, #10
 80053b2:	4621      	mov	r1, r4
 80053b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053b8:	3b30      	subs	r3, #48	; 0x30
 80053ba:	2b09      	cmp	r3, #9
 80053bc:	d94e      	bls.n	800545c <_vfiprintf_r+0x1c4>
 80053be:	b1b0      	cbz	r0, 80053ee <_vfiprintf_r+0x156>
 80053c0:	9207      	str	r2, [sp, #28]
 80053c2:	e014      	b.n	80053ee <_vfiprintf_r+0x156>
 80053c4:	eba0 0308 	sub.w	r3, r0, r8
 80053c8:	fa09 f303 	lsl.w	r3, r9, r3
 80053cc:	4313      	orrs	r3, r2
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	46a2      	mov	sl, r4
 80053d2:	e7d2      	b.n	800537a <_vfiprintf_r+0xe2>
 80053d4:	9b03      	ldr	r3, [sp, #12]
 80053d6:	1d19      	adds	r1, r3, #4
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	9103      	str	r1, [sp, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bfbb      	ittet	lt
 80053e0:	425b      	neglt	r3, r3
 80053e2:	f042 0202 	orrlt.w	r2, r2, #2
 80053e6:	9307      	strge	r3, [sp, #28]
 80053e8:	9307      	strlt	r3, [sp, #28]
 80053ea:	bfb8      	it	lt
 80053ec:	9204      	strlt	r2, [sp, #16]
 80053ee:	7823      	ldrb	r3, [r4, #0]
 80053f0:	2b2e      	cmp	r3, #46	; 0x2e
 80053f2:	d10c      	bne.n	800540e <_vfiprintf_r+0x176>
 80053f4:	7863      	ldrb	r3, [r4, #1]
 80053f6:	2b2a      	cmp	r3, #42	; 0x2a
 80053f8:	d135      	bne.n	8005466 <_vfiprintf_r+0x1ce>
 80053fa:	9b03      	ldr	r3, [sp, #12]
 80053fc:	1d1a      	adds	r2, r3, #4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	9203      	str	r2, [sp, #12]
 8005402:	2b00      	cmp	r3, #0
 8005404:	bfb8      	it	lt
 8005406:	f04f 33ff 	movlt.w	r3, #4294967295
 800540a:	3402      	adds	r4, #2
 800540c:	9305      	str	r3, [sp, #20]
 800540e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80054f4 <_vfiprintf_r+0x25c>
 8005412:	7821      	ldrb	r1, [r4, #0]
 8005414:	2203      	movs	r2, #3
 8005416:	4650      	mov	r0, sl
 8005418:	f7fa fef2 	bl	8000200 <memchr>
 800541c:	b140      	cbz	r0, 8005430 <_vfiprintf_r+0x198>
 800541e:	2340      	movs	r3, #64	; 0x40
 8005420:	eba0 000a 	sub.w	r0, r0, sl
 8005424:	fa03 f000 	lsl.w	r0, r3, r0
 8005428:	9b04      	ldr	r3, [sp, #16]
 800542a:	4303      	orrs	r3, r0
 800542c:	3401      	adds	r4, #1
 800542e:	9304      	str	r3, [sp, #16]
 8005430:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005434:	482c      	ldr	r0, [pc, #176]	; (80054e8 <_vfiprintf_r+0x250>)
 8005436:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800543a:	2206      	movs	r2, #6
 800543c:	f7fa fee0 	bl	8000200 <memchr>
 8005440:	2800      	cmp	r0, #0
 8005442:	d03f      	beq.n	80054c4 <_vfiprintf_r+0x22c>
 8005444:	4b29      	ldr	r3, [pc, #164]	; (80054ec <_vfiprintf_r+0x254>)
 8005446:	bb1b      	cbnz	r3, 8005490 <_vfiprintf_r+0x1f8>
 8005448:	9b03      	ldr	r3, [sp, #12]
 800544a:	3307      	adds	r3, #7
 800544c:	f023 0307 	bic.w	r3, r3, #7
 8005450:	3308      	adds	r3, #8
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005456:	443b      	add	r3, r7
 8005458:	9309      	str	r3, [sp, #36]	; 0x24
 800545a:	e767      	b.n	800532c <_vfiprintf_r+0x94>
 800545c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005460:	460c      	mov	r4, r1
 8005462:	2001      	movs	r0, #1
 8005464:	e7a5      	b.n	80053b2 <_vfiprintf_r+0x11a>
 8005466:	2300      	movs	r3, #0
 8005468:	3401      	adds	r4, #1
 800546a:	9305      	str	r3, [sp, #20]
 800546c:	4619      	mov	r1, r3
 800546e:	f04f 0c0a 	mov.w	ip, #10
 8005472:	4620      	mov	r0, r4
 8005474:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005478:	3a30      	subs	r2, #48	; 0x30
 800547a:	2a09      	cmp	r2, #9
 800547c:	d903      	bls.n	8005486 <_vfiprintf_r+0x1ee>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0c5      	beq.n	800540e <_vfiprintf_r+0x176>
 8005482:	9105      	str	r1, [sp, #20]
 8005484:	e7c3      	b.n	800540e <_vfiprintf_r+0x176>
 8005486:	fb0c 2101 	mla	r1, ip, r1, r2
 800548a:	4604      	mov	r4, r0
 800548c:	2301      	movs	r3, #1
 800548e:	e7f0      	b.n	8005472 <_vfiprintf_r+0x1da>
 8005490:	ab03      	add	r3, sp, #12
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	462a      	mov	r2, r5
 8005496:	4b16      	ldr	r3, [pc, #88]	; (80054f0 <_vfiprintf_r+0x258>)
 8005498:	a904      	add	r1, sp, #16
 800549a:	4630      	mov	r0, r6
 800549c:	f3af 8000 	nop.w
 80054a0:	4607      	mov	r7, r0
 80054a2:	1c78      	adds	r0, r7, #1
 80054a4:	d1d6      	bne.n	8005454 <_vfiprintf_r+0x1bc>
 80054a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054a8:	07d9      	lsls	r1, r3, #31
 80054aa:	d405      	bmi.n	80054b8 <_vfiprintf_r+0x220>
 80054ac:	89ab      	ldrh	r3, [r5, #12]
 80054ae:	059a      	lsls	r2, r3, #22
 80054b0:	d402      	bmi.n	80054b8 <_vfiprintf_r+0x220>
 80054b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054b4:	f7ff fdb7 	bl	8005026 <__retarget_lock_release_recursive>
 80054b8:	89ab      	ldrh	r3, [r5, #12]
 80054ba:	065b      	lsls	r3, r3, #25
 80054bc:	f53f af12 	bmi.w	80052e4 <_vfiprintf_r+0x4c>
 80054c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054c2:	e711      	b.n	80052e8 <_vfiprintf_r+0x50>
 80054c4:	ab03      	add	r3, sp, #12
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	462a      	mov	r2, r5
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <_vfiprintf_r+0x258>)
 80054cc:	a904      	add	r1, sp, #16
 80054ce:	4630      	mov	r0, r6
 80054d0:	f000 f880 	bl	80055d4 <_printf_i>
 80054d4:	e7e4      	b.n	80054a0 <_vfiprintf_r+0x208>
 80054d6:	bf00      	nop
 80054d8:	08005ae0 	.word	0x08005ae0
 80054dc:	08005b00 	.word	0x08005b00
 80054e0:	08005ac0 	.word	0x08005ac0
 80054e4:	08005b20 	.word	0x08005b20
 80054e8:	08005b2a 	.word	0x08005b2a
 80054ec:	00000000 	.word	0x00000000
 80054f0:	08005273 	.word	0x08005273
 80054f4:	08005b26 	.word	0x08005b26

080054f8 <_printf_common>:
 80054f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054fc:	4616      	mov	r6, r2
 80054fe:	4699      	mov	r9, r3
 8005500:	688a      	ldr	r2, [r1, #8]
 8005502:	690b      	ldr	r3, [r1, #16]
 8005504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005508:	4293      	cmp	r3, r2
 800550a:	bfb8      	it	lt
 800550c:	4613      	movlt	r3, r2
 800550e:	6033      	str	r3, [r6, #0]
 8005510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005514:	4607      	mov	r7, r0
 8005516:	460c      	mov	r4, r1
 8005518:	b10a      	cbz	r2, 800551e <_printf_common+0x26>
 800551a:	3301      	adds	r3, #1
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	0699      	lsls	r1, r3, #26
 8005522:	bf42      	ittt	mi
 8005524:	6833      	ldrmi	r3, [r6, #0]
 8005526:	3302      	addmi	r3, #2
 8005528:	6033      	strmi	r3, [r6, #0]
 800552a:	6825      	ldr	r5, [r4, #0]
 800552c:	f015 0506 	ands.w	r5, r5, #6
 8005530:	d106      	bne.n	8005540 <_printf_common+0x48>
 8005532:	f104 0a19 	add.w	sl, r4, #25
 8005536:	68e3      	ldr	r3, [r4, #12]
 8005538:	6832      	ldr	r2, [r6, #0]
 800553a:	1a9b      	subs	r3, r3, r2
 800553c:	42ab      	cmp	r3, r5
 800553e:	dc26      	bgt.n	800558e <_printf_common+0x96>
 8005540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005544:	1e13      	subs	r3, r2, #0
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	bf18      	it	ne
 800554a:	2301      	movne	r3, #1
 800554c:	0692      	lsls	r2, r2, #26
 800554e:	d42b      	bmi.n	80055a8 <_printf_common+0xb0>
 8005550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005554:	4649      	mov	r1, r9
 8005556:	4638      	mov	r0, r7
 8005558:	47c0      	blx	r8
 800555a:	3001      	adds	r0, #1
 800555c:	d01e      	beq.n	800559c <_printf_common+0xa4>
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	68e5      	ldr	r5, [r4, #12]
 8005562:	6832      	ldr	r2, [r6, #0]
 8005564:	f003 0306 	and.w	r3, r3, #6
 8005568:	2b04      	cmp	r3, #4
 800556a:	bf08      	it	eq
 800556c:	1aad      	subeq	r5, r5, r2
 800556e:	68a3      	ldr	r3, [r4, #8]
 8005570:	6922      	ldr	r2, [r4, #16]
 8005572:	bf0c      	ite	eq
 8005574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005578:	2500      	movne	r5, #0
 800557a:	4293      	cmp	r3, r2
 800557c:	bfc4      	itt	gt
 800557e:	1a9b      	subgt	r3, r3, r2
 8005580:	18ed      	addgt	r5, r5, r3
 8005582:	2600      	movs	r6, #0
 8005584:	341a      	adds	r4, #26
 8005586:	42b5      	cmp	r5, r6
 8005588:	d11a      	bne.n	80055c0 <_printf_common+0xc8>
 800558a:	2000      	movs	r0, #0
 800558c:	e008      	b.n	80055a0 <_printf_common+0xa8>
 800558e:	2301      	movs	r3, #1
 8005590:	4652      	mov	r2, sl
 8005592:	4649      	mov	r1, r9
 8005594:	4638      	mov	r0, r7
 8005596:	47c0      	blx	r8
 8005598:	3001      	adds	r0, #1
 800559a:	d103      	bne.n	80055a4 <_printf_common+0xac>
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a4:	3501      	adds	r5, #1
 80055a6:	e7c6      	b.n	8005536 <_printf_common+0x3e>
 80055a8:	18e1      	adds	r1, r4, r3
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	2030      	movs	r0, #48	; 0x30
 80055ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055b2:	4422      	add	r2, r4
 80055b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055bc:	3302      	adds	r3, #2
 80055be:	e7c7      	b.n	8005550 <_printf_common+0x58>
 80055c0:	2301      	movs	r3, #1
 80055c2:	4622      	mov	r2, r4
 80055c4:	4649      	mov	r1, r9
 80055c6:	4638      	mov	r0, r7
 80055c8:	47c0      	blx	r8
 80055ca:	3001      	adds	r0, #1
 80055cc:	d0e6      	beq.n	800559c <_printf_common+0xa4>
 80055ce:	3601      	adds	r6, #1
 80055d0:	e7d9      	b.n	8005586 <_printf_common+0x8e>
	...

080055d4 <_printf_i>:
 80055d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055d8:	460c      	mov	r4, r1
 80055da:	4691      	mov	r9, r2
 80055dc:	7e27      	ldrb	r7, [r4, #24]
 80055de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80055e0:	2f78      	cmp	r7, #120	; 0x78
 80055e2:	4680      	mov	r8, r0
 80055e4:	469a      	mov	sl, r3
 80055e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055ea:	d807      	bhi.n	80055fc <_printf_i+0x28>
 80055ec:	2f62      	cmp	r7, #98	; 0x62
 80055ee:	d80a      	bhi.n	8005606 <_printf_i+0x32>
 80055f0:	2f00      	cmp	r7, #0
 80055f2:	f000 80d8 	beq.w	80057a6 <_printf_i+0x1d2>
 80055f6:	2f58      	cmp	r7, #88	; 0x58
 80055f8:	f000 80a3 	beq.w	8005742 <_printf_i+0x16e>
 80055fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005604:	e03a      	b.n	800567c <_printf_i+0xa8>
 8005606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800560a:	2b15      	cmp	r3, #21
 800560c:	d8f6      	bhi.n	80055fc <_printf_i+0x28>
 800560e:	a001      	add	r0, pc, #4	; (adr r0, 8005614 <_printf_i+0x40>)
 8005610:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005614:	0800566d 	.word	0x0800566d
 8005618:	08005681 	.word	0x08005681
 800561c:	080055fd 	.word	0x080055fd
 8005620:	080055fd 	.word	0x080055fd
 8005624:	080055fd 	.word	0x080055fd
 8005628:	080055fd 	.word	0x080055fd
 800562c:	08005681 	.word	0x08005681
 8005630:	080055fd 	.word	0x080055fd
 8005634:	080055fd 	.word	0x080055fd
 8005638:	080055fd 	.word	0x080055fd
 800563c:	080055fd 	.word	0x080055fd
 8005640:	0800578d 	.word	0x0800578d
 8005644:	080056b1 	.word	0x080056b1
 8005648:	0800576f 	.word	0x0800576f
 800564c:	080055fd 	.word	0x080055fd
 8005650:	080055fd 	.word	0x080055fd
 8005654:	080057af 	.word	0x080057af
 8005658:	080055fd 	.word	0x080055fd
 800565c:	080056b1 	.word	0x080056b1
 8005660:	080055fd 	.word	0x080055fd
 8005664:	080055fd 	.word	0x080055fd
 8005668:	08005777 	.word	0x08005777
 800566c:	680b      	ldr	r3, [r1, #0]
 800566e:	1d1a      	adds	r2, r3, #4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	600a      	str	r2, [r1, #0]
 8005674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800567c:	2301      	movs	r3, #1
 800567e:	e0a3      	b.n	80057c8 <_printf_i+0x1f4>
 8005680:	6825      	ldr	r5, [r4, #0]
 8005682:	6808      	ldr	r0, [r1, #0]
 8005684:	062e      	lsls	r6, r5, #24
 8005686:	f100 0304 	add.w	r3, r0, #4
 800568a:	d50a      	bpl.n	80056a2 <_printf_i+0xce>
 800568c:	6805      	ldr	r5, [r0, #0]
 800568e:	600b      	str	r3, [r1, #0]
 8005690:	2d00      	cmp	r5, #0
 8005692:	da03      	bge.n	800569c <_printf_i+0xc8>
 8005694:	232d      	movs	r3, #45	; 0x2d
 8005696:	426d      	negs	r5, r5
 8005698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800569c:	485e      	ldr	r0, [pc, #376]	; (8005818 <_printf_i+0x244>)
 800569e:	230a      	movs	r3, #10
 80056a0:	e019      	b.n	80056d6 <_printf_i+0x102>
 80056a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80056a6:	6805      	ldr	r5, [r0, #0]
 80056a8:	600b      	str	r3, [r1, #0]
 80056aa:	bf18      	it	ne
 80056ac:	b22d      	sxthne	r5, r5
 80056ae:	e7ef      	b.n	8005690 <_printf_i+0xbc>
 80056b0:	680b      	ldr	r3, [r1, #0]
 80056b2:	6825      	ldr	r5, [r4, #0]
 80056b4:	1d18      	adds	r0, r3, #4
 80056b6:	6008      	str	r0, [r1, #0]
 80056b8:	0628      	lsls	r0, r5, #24
 80056ba:	d501      	bpl.n	80056c0 <_printf_i+0xec>
 80056bc:	681d      	ldr	r5, [r3, #0]
 80056be:	e002      	b.n	80056c6 <_printf_i+0xf2>
 80056c0:	0669      	lsls	r1, r5, #25
 80056c2:	d5fb      	bpl.n	80056bc <_printf_i+0xe8>
 80056c4:	881d      	ldrh	r5, [r3, #0]
 80056c6:	4854      	ldr	r0, [pc, #336]	; (8005818 <_printf_i+0x244>)
 80056c8:	2f6f      	cmp	r7, #111	; 0x6f
 80056ca:	bf0c      	ite	eq
 80056cc:	2308      	moveq	r3, #8
 80056ce:	230a      	movne	r3, #10
 80056d0:	2100      	movs	r1, #0
 80056d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80056d6:	6866      	ldr	r6, [r4, #4]
 80056d8:	60a6      	str	r6, [r4, #8]
 80056da:	2e00      	cmp	r6, #0
 80056dc:	bfa2      	ittt	ge
 80056de:	6821      	ldrge	r1, [r4, #0]
 80056e0:	f021 0104 	bicge.w	r1, r1, #4
 80056e4:	6021      	strge	r1, [r4, #0]
 80056e6:	b90d      	cbnz	r5, 80056ec <_printf_i+0x118>
 80056e8:	2e00      	cmp	r6, #0
 80056ea:	d04d      	beq.n	8005788 <_printf_i+0x1b4>
 80056ec:	4616      	mov	r6, r2
 80056ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80056f2:	fb03 5711 	mls	r7, r3, r1, r5
 80056f6:	5dc7      	ldrb	r7, [r0, r7]
 80056f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056fc:	462f      	mov	r7, r5
 80056fe:	42bb      	cmp	r3, r7
 8005700:	460d      	mov	r5, r1
 8005702:	d9f4      	bls.n	80056ee <_printf_i+0x11a>
 8005704:	2b08      	cmp	r3, #8
 8005706:	d10b      	bne.n	8005720 <_printf_i+0x14c>
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	07df      	lsls	r7, r3, #31
 800570c:	d508      	bpl.n	8005720 <_printf_i+0x14c>
 800570e:	6923      	ldr	r3, [r4, #16]
 8005710:	6861      	ldr	r1, [r4, #4]
 8005712:	4299      	cmp	r1, r3
 8005714:	bfde      	ittt	le
 8005716:	2330      	movle	r3, #48	; 0x30
 8005718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800571c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005720:	1b92      	subs	r2, r2, r6
 8005722:	6122      	str	r2, [r4, #16]
 8005724:	f8cd a000 	str.w	sl, [sp]
 8005728:	464b      	mov	r3, r9
 800572a:	aa03      	add	r2, sp, #12
 800572c:	4621      	mov	r1, r4
 800572e:	4640      	mov	r0, r8
 8005730:	f7ff fee2 	bl	80054f8 <_printf_common>
 8005734:	3001      	adds	r0, #1
 8005736:	d14c      	bne.n	80057d2 <_printf_i+0x1fe>
 8005738:	f04f 30ff 	mov.w	r0, #4294967295
 800573c:	b004      	add	sp, #16
 800573e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005742:	4835      	ldr	r0, [pc, #212]	; (8005818 <_printf_i+0x244>)
 8005744:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	680e      	ldr	r6, [r1, #0]
 800574c:	061f      	lsls	r7, r3, #24
 800574e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005752:	600e      	str	r6, [r1, #0]
 8005754:	d514      	bpl.n	8005780 <_printf_i+0x1ac>
 8005756:	07d9      	lsls	r1, r3, #31
 8005758:	bf44      	itt	mi
 800575a:	f043 0320 	orrmi.w	r3, r3, #32
 800575e:	6023      	strmi	r3, [r4, #0]
 8005760:	b91d      	cbnz	r5, 800576a <_printf_i+0x196>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	f023 0320 	bic.w	r3, r3, #32
 8005768:	6023      	str	r3, [r4, #0]
 800576a:	2310      	movs	r3, #16
 800576c:	e7b0      	b.n	80056d0 <_printf_i+0xfc>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	f043 0320 	orr.w	r3, r3, #32
 8005774:	6023      	str	r3, [r4, #0]
 8005776:	2378      	movs	r3, #120	; 0x78
 8005778:	4828      	ldr	r0, [pc, #160]	; (800581c <_printf_i+0x248>)
 800577a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800577e:	e7e3      	b.n	8005748 <_printf_i+0x174>
 8005780:	065e      	lsls	r6, r3, #25
 8005782:	bf48      	it	mi
 8005784:	b2ad      	uxthmi	r5, r5
 8005786:	e7e6      	b.n	8005756 <_printf_i+0x182>
 8005788:	4616      	mov	r6, r2
 800578a:	e7bb      	b.n	8005704 <_printf_i+0x130>
 800578c:	680b      	ldr	r3, [r1, #0]
 800578e:	6826      	ldr	r6, [r4, #0]
 8005790:	6960      	ldr	r0, [r4, #20]
 8005792:	1d1d      	adds	r5, r3, #4
 8005794:	600d      	str	r5, [r1, #0]
 8005796:	0635      	lsls	r5, r6, #24
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	d501      	bpl.n	80057a0 <_printf_i+0x1cc>
 800579c:	6018      	str	r0, [r3, #0]
 800579e:	e002      	b.n	80057a6 <_printf_i+0x1d2>
 80057a0:	0671      	lsls	r1, r6, #25
 80057a2:	d5fb      	bpl.n	800579c <_printf_i+0x1c8>
 80057a4:	8018      	strh	r0, [r3, #0]
 80057a6:	2300      	movs	r3, #0
 80057a8:	6123      	str	r3, [r4, #16]
 80057aa:	4616      	mov	r6, r2
 80057ac:	e7ba      	b.n	8005724 <_printf_i+0x150>
 80057ae:	680b      	ldr	r3, [r1, #0]
 80057b0:	1d1a      	adds	r2, r3, #4
 80057b2:	600a      	str	r2, [r1, #0]
 80057b4:	681e      	ldr	r6, [r3, #0]
 80057b6:	6862      	ldr	r2, [r4, #4]
 80057b8:	2100      	movs	r1, #0
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7fa fd20 	bl	8000200 <memchr>
 80057c0:	b108      	cbz	r0, 80057c6 <_printf_i+0x1f2>
 80057c2:	1b80      	subs	r0, r0, r6
 80057c4:	6060      	str	r0, [r4, #4]
 80057c6:	6863      	ldr	r3, [r4, #4]
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	2300      	movs	r3, #0
 80057cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057d0:	e7a8      	b.n	8005724 <_printf_i+0x150>
 80057d2:	6923      	ldr	r3, [r4, #16]
 80057d4:	4632      	mov	r2, r6
 80057d6:	4649      	mov	r1, r9
 80057d8:	4640      	mov	r0, r8
 80057da:	47d0      	blx	sl
 80057dc:	3001      	adds	r0, #1
 80057de:	d0ab      	beq.n	8005738 <_printf_i+0x164>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	079b      	lsls	r3, r3, #30
 80057e4:	d413      	bmi.n	800580e <_printf_i+0x23a>
 80057e6:	68e0      	ldr	r0, [r4, #12]
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	4298      	cmp	r0, r3
 80057ec:	bfb8      	it	lt
 80057ee:	4618      	movlt	r0, r3
 80057f0:	e7a4      	b.n	800573c <_printf_i+0x168>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4632      	mov	r2, r6
 80057f6:	4649      	mov	r1, r9
 80057f8:	4640      	mov	r0, r8
 80057fa:	47d0      	blx	sl
 80057fc:	3001      	adds	r0, #1
 80057fe:	d09b      	beq.n	8005738 <_printf_i+0x164>
 8005800:	3501      	adds	r5, #1
 8005802:	68e3      	ldr	r3, [r4, #12]
 8005804:	9903      	ldr	r1, [sp, #12]
 8005806:	1a5b      	subs	r3, r3, r1
 8005808:	42ab      	cmp	r3, r5
 800580a:	dcf2      	bgt.n	80057f2 <_printf_i+0x21e>
 800580c:	e7eb      	b.n	80057e6 <_printf_i+0x212>
 800580e:	2500      	movs	r5, #0
 8005810:	f104 0619 	add.w	r6, r4, #25
 8005814:	e7f5      	b.n	8005802 <_printf_i+0x22e>
 8005816:	bf00      	nop
 8005818:	08005b31 	.word	0x08005b31
 800581c:	08005b42 	.word	0x08005b42

08005820 <_sbrk_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d06      	ldr	r5, [pc, #24]	; (800583c <_sbrk_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4604      	mov	r4, r0
 8005828:	4608      	mov	r0, r1
 800582a:	602b      	str	r3, [r5, #0]
 800582c:	f000 f8c0 	bl	80059b0 <_sbrk>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_sbrk_r+0x1a>
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	b103      	cbz	r3, 800583a <_sbrk_r+0x1a>
 8005838:	6023      	str	r3, [r4, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	20004294 	.word	0x20004294

08005840 <__sread>:
 8005840:	b510      	push	{r4, lr}
 8005842:	460c      	mov	r4, r1
 8005844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005848:	f000 f8a0 	bl	800598c <_read_r>
 800584c:	2800      	cmp	r0, #0
 800584e:	bfab      	itete	ge
 8005850:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005852:	89a3      	ldrhlt	r3, [r4, #12]
 8005854:	181b      	addge	r3, r3, r0
 8005856:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800585a:	bfac      	ite	ge
 800585c:	6563      	strge	r3, [r4, #84]	; 0x54
 800585e:	81a3      	strhlt	r3, [r4, #12]
 8005860:	bd10      	pop	{r4, pc}

08005862 <__swrite>:
 8005862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005866:	461f      	mov	r7, r3
 8005868:	898b      	ldrh	r3, [r1, #12]
 800586a:	05db      	lsls	r3, r3, #23
 800586c:	4605      	mov	r5, r0
 800586e:	460c      	mov	r4, r1
 8005870:	4616      	mov	r6, r2
 8005872:	d505      	bpl.n	8005880 <__swrite+0x1e>
 8005874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005878:	2302      	movs	r3, #2
 800587a:	2200      	movs	r2, #0
 800587c:	f000 f868 	bl	8005950 <_lseek_r>
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005886:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800588a:	81a3      	strh	r3, [r4, #12]
 800588c:	4632      	mov	r2, r6
 800588e:	463b      	mov	r3, r7
 8005890:	4628      	mov	r0, r5
 8005892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005896:	f000 b817 	b.w	80058c8 <_write_r>

0800589a <__sseek>:
 800589a:	b510      	push	{r4, lr}
 800589c:	460c      	mov	r4, r1
 800589e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a2:	f000 f855 	bl	8005950 <_lseek_r>
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	89a3      	ldrh	r3, [r4, #12]
 80058aa:	bf15      	itete	ne
 80058ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80058ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058b6:	81a3      	strheq	r3, [r4, #12]
 80058b8:	bf18      	it	ne
 80058ba:	81a3      	strhne	r3, [r4, #12]
 80058bc:	bd10      	pop	{r4, pc}

080058be <__sclose>:
 80058be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c2:	f000 b813 	b.w	80058ec <_close_r>
	...

080058c8 <_write_r>:
 80058c8:	b538      	push	{r3, r4, r5, lr}
 80058ca:	4d07      	ldr	r5, [pc, #28]	; (80058e8 <_write_r+0x20>)
 80058cc:	4604      	mov	r4, r0
 80058ce:	4608      	mov	r0, r1
 80058d0:	4611      	mov	r1, r2
 80058d2:	2200      	movs	r2, #0
 80058d4:	602a      	str	r2, [r5, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	f7fa ff77 	bl	80007ca <_write>
 80058dc:	1c43      	adds	r3, r0, #1
 80058de:	d102      	bne.n	80058e6 <_write_r+0x1e>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	b103      	cbz	r3, 80058e6 <_write_r+0x1e>
 80058e4:	6023      	str	r3, [r4, #0]
 80058e6:	bd38      	pop	{r3, r4, r5, pc}
 80058e8:	20004294 	.word	0x20004294

080058ec <_close_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4d06      	ldr	r5, [pc, #24]	; (8005908 <_close_r+0x1c>)
 80058f0:	2300      	movs	r3, #0
 80058f2:	4604      	mov	r4, r0
 80058f4:	4608      	mov	r0, r1
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	f7fa ff83 	bl	8000802 <_close>
 80058fc:	1c43      	adds	r3, r0, #1
 80058fe:	d102      	bne.n	8005906 <_close_r+0x1a>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	b103      	cbz	r3, 8005906 <_close_r+0x1a>
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	bd38      	pop	{r3, r4, r5, pc}
 8005908:	20004294 	.word	0x20004294

0800590c <_fstat_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4d07      	ldr	r5, [pc, #28]	; (800592c <_fstat_r+0x20>)
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	f7fa ff7e 	bl	800081a <_fstat>
 800591e:	1c43      	adds	r3, r0, #1
 8005920:	d102      	bne.n	8005928 <_fstat_r+0x1c>
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	b103      	cbz	r3, 8005928 <_fstat_r+0x1c>
 8005926:	6023      	str	r3, [r4, #0]
 8005928:	bd38      	pop	{r3, r4, r5, pc}
 800592a:	bf00      	nop
 800592c:	20004294 	.word	0x20004294

08005930 <_isatty_r>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4d06      	ldr	r5, [pc, #24]	; (800594c <_isatty_r+0x1c>)
 8005934:	2300      	movs	r3, #0
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	602b      	str	r3, [r5, #0]
 800593c:	f7fa ff7d 	bl	800083a <_isatty>
 8005940:	1c43      	adds	r3, r0, #1
 8005942:	d102      	bne.n	800594a <_isatty_r+0x1a>
 8005944:	682b      	ldr	r3, [r5, #0]
 8005946:	b103      	cbz	r3, 800594a <_isatty_r+0x1a>
 8005948:	6023      	str	r3, [r4, #0]
 800594a:	bd38      	pop	{r3, r4, r5, pc}
 800594c:	20004294 	.word	0x20004294

08005950 <_lseek_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4d07      	ldr	r5, [pc, #28]	; (8005970 <_lseek_r+0x20>)
 8005954:	4604      	mov	r4, r0
 8005956:	4608      	mov	r0, r1
 8005958:	4611      	mov	r1, r2
 800595a:	2200      	movs	r2, #0
 800595c:	602a      	str	r2, [r5, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	f7fa ff76 	bl	8000850 <_lseek>
 8005964:	1c43      	adds	r3, r0, #1
 8005966:	d102      	bne.n	800596e <_lseek_r+0x1e>
 8005968:	682b      	ldr	r3, [r5, #0]
 800596a:	b103      	cbz	r3, 800596e <_lseek_r+0x1e>
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	20004294 	.word	0x20004294

08005974 <__malloc_lock>:
 8005974:	4801      	ldr	r0, [pc, #4]	; (800597c <__malloc_lock+0x8>)
 8005976:	f7ff bb55 	b.w	8005024 <__retarget_lock_acquire_recursive>
 800597a:	bf00      	nop
 800597c:	2000428c 	.word	0x2000428c

08005980 <__malloc_unlock>:
 8005980:	4801      	ldr	r0, [pc, #4]	; (8005988 <__malloc_unlock+0x8>)
 8005982:	f7ff bb50 	b.w	8005026 <__retarget_lock_release_recursive>
 8005986:	bf00      	nop
 8005988:	2000428c 	.word	0x2000428c

0800598c <_read_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d07      	ldr	r5, [pc, #28]	; (80059ac <_read_r+0x20>)
 8005990:	4604      	mov	r4, r0
 8005992:	4608      	mov	r0, r1
 8005994:	4611      	mov	r1, r2
 8005996:	2200      	movs	r2, #0
 8005998:	602a      	str	r2, [r5, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	f7fa fef8 	bl	8000790 <_read>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_read_r+0x1e>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_read_r+0x1e>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20004294 	.word	0x20004294

080059b0 <_sbrk>:
 80059b0:	4b04      	ldr	r3, [pc, #16]	; (80059c4 <_sbrk+0x14>)
 80059b2:	6819      	ldr	r1, [r3, #0]
 80059b4:	4602      	mov	r2, r0
 80059b6:	b909      	cbnz	r1, 80059bc <_sbrk+0xc>
 80059b8:	4903      	ldr	r1, [pc, #12]	; (80059c8 <_sbrk+0x18>)
 80059ba:	6019      	str	r1, [r3, #0]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	4402      	add	r2, r0
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	4770      	bx	lr
 80059c4:	2000420c 	.word	0x2000420c
 80059c8:	20004298 	.word	0x20004298

080059cc <_init>:
 80059cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ce:	bf00      	nop
 80059d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059d2:	bc08      	pop	{r3}
 80059d4:	469e      	mov	lr, r3
 80059d6:	4770      	bx	lr

080059d8 <_fini>:
 80059d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059da:	bf00      	nop
 80059dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059de:	bc08      	pop	{r3}
 80059e0:	469e      	mov	lr, r3
 80059e2:	4770      	bx	lr
