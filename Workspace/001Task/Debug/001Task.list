
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008424  08008424  00018424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008674  08008674  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08008674  08008674  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008674  08008674  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800867c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000144a8  20000078  080086f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014520  080086f4  00024520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d345  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000386f  00000000  00000000  0003d3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00040c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013e8  00000000  00000000  000421f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d7cf  00000000  00000000  000435d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c48  00000000  00000000  00070da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113464  00000000  00000000  000889ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019be53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b8  00000000  00000000  0019bea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800840c 	.word	0x0800840c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	0800840c 	.word	0x0800840c

08000200 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000200:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000202:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000206:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000290 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800020a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800020e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000212:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000214:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000216:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000218:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800021a:	d332      	bcc.n	8000282 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800021c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800021e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000220:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000222:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000224:	d314      	bcc.n	8000250 <_CheckCase2>

08000226 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000226:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000228:	19d0      	adds	r0, r2, r7
 800022a:	bf00      	nop

0800022c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000230:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000234:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000236:	d005      	beq.n	8000244 <_CSDone>
        LDRB     R3,[R1], #+1
 8000238:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000240:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000242:	d1f3      	bne.n	800022c <_LoopCopyStraight>

08000244 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000244:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000248:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800024a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800024e:	4770      	bx	lr

08000250 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000250:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000252:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000254:	d319      	bcc.n	800028a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000256:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000258:	1b12      	subs	r2, r2, r4

0800025a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800025a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800025e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000262:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000264:	d1f9      	bne.n	800025a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000266:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000268:	d005      	beq.n	8000276 <_No2ChunkNeeded>

0800026a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800026e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000272:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyAfterWrapAround>

08000276 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000276:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800027a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800027c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800027e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000280:	4770      	bx	lr

08000282 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000282:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000284:	3801      	subs	r0, #1
        CMP      R0,R2
 8000286:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000288:	d2cd      	bcs.n	8000226 <_Case4>

0800028a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800028a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800028e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000290:	20014468 	.word	0x20014468
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b088      	sub	sp, #32
 8000344:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000346:	f000 fae2 	bl	800090e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800034a:	f000 f85b 	bl	8000404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800034e:	f000 f8a1 	bl	8000494 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= (1 << 0);
 8000352:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <main+0xa4>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a23      	ldr	r2, [pc, #140]	; (80003e4 <main+0xa4>)
 8000358:	f043 0301 	orr.w	r3, r3, #1
 800035c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800035e:	f004 fcf7 	bl	8004d50 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000362:	f006 f8ef 	bl	8006544 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task_handler, "Task-1", 200, "Hello world from Task1",
 8000366:	f107 0308 	add.w	r3, r7, #8
 800036a:	9301      	str	r3, [sp, #4]
 800036c:	2302      	movs	r3, #2
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <main+0xa8>)
 8000372:	22c8      	movs	r2, #200	; 0xc8
 8000374:	491d      	ldr	r1, [pc, #116]	; (80003ec <main+0xac>)
 8000376:	481e      	ldr	r0, [pc, #120]	; (80003f0 <main+0xb0>)
 8000378:	f002 fe36 	bl	8002fe8 <xTaskCreate>
 800037c:	6178      	str	r0, [r7, #20]
              2, &task1_handle);
  printf("Task 1 status: %ld", status);
 800037e:	6979      	ldr	r1, [r7, #20]
 8000380:	481c      	ldr	r0, [pc, #112]	; (80003f4 <main+0xb4>)
 8000382:	f006 ff19 	bl	80071b8 <iprintf>
  configASSERT(status == pdPASS);
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d00a      	beq.n	80003a2 <main+0x62>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000390:	f383 8811 	msr	BASEPRI, r3
 8000394:	f3bf 8f6f 	isb	sy
 8000398:	f3bf 8f4f 	dsb	sy
 800039c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800039e:	bf00      	nop
 80003a0:	e7fe      	b.n	80003a0 <main+0x60>

  status = xTaskCreate(task_handler, "Task-2", 200, "Hello world from Task2",
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	2302      	movs	r3, #2
 80003a8:	9300      	str	r3, [sp, #0]
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <main+0xb8>)
 80003ac:	22c8      	movs	r2, #200	; 0xc8
 80003ae:	4913      	ldr	r1, [pc, #76]	; (80003fc <main+0xbc>)
 80003b0:	480f      	ldr	r0, [pc, #60]	; (80003f0 <main+0xb0>)
 80003b2:	f002 fe19 	bl	8002fe8 <xTaskCreate>
 80003b6:	6178      	str	r0, [r7, #20]
              2, &task2_handle);
  printf("Task 2 status: %ld", status);
 80003b8:	6979      	ldr	r1, [r7, #20]
 80003ba:	4811      	ldr	r0, [pc, #68]	; (8000400 <main+0xc0>)
 80003bc:	f006 fefc 	bl	80071b8 <iprintf>
  configASSERT(status == pdPASS);
 80003c0:	697b      	ldr	r3, [r7, #20]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d00a      	beq.n	80003dc <main+0x9c>
        __asm volatile
 80003c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003ca:	f383 8811 	msr	BASEPRI, r3
 80003ce:	f3bf 8f6f 	isb	sy
 80003d2:	f3bf 8f4f 	dsb	sy
 80003d6:	60fb      	str	r3, [r7, #12]
    }
 80003d8:	bf00      	nop
 80003da:	e7fe      	b.n	80003da <main+0x9a>

  vTaskStartScheduler();
 80003dc:	f002 ff68 	bl	80032b0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <main+0xa0>
 80003e2:	bf00      	nop
 80003e4:	e0001000 	.word	0xe0001000
 80003e8:	08008424 	.word	0x08008424
 80003ec:	0800843c 	.word	0x0800843c
 80003f0:	08000665 	.word	0x08000665
 80003f4:	08008444 	.word	0x08008444
 80003f8:	08008458 	.word	0x08008458
 80003fc:	08008470 	.word	0x08008470
 8000400:	08008478 	.word	0x08008478

08000404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b096      	sub	sp, #88	; 0x58
 8000408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040a:	f107 0314 	add.w	r3, r7, #20
 800040e:	2244      	movs	r2, #68	; 0x44
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f006 fec8 	bl	80071a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000418:	463b      	mov	r3, r7
 800041a:	2200      	movs	r2, #0
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	605a      	str	r2, [r3, #4]
 8000420:	609a      	str	r2, [r3, #8]
 8000422:	60da      	str	r2, [r3, #12]
 8000424:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000426:	f44f 7000 	mov.w	r0, #512	; 0x200
 800042a:	f000 fd55 	bl	8000ed8 <HAL_PWREx_ControlVoltageScaling>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000434:	f000 f93c 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000438:	2310      	movs	r3, #16
 800043a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800043c:	2301      	movs	r3, #1
 800043e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000440:	2300      	movs	r3, #0
 8000442:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000444:	2360      	movs	r3, #96	; 0x60
 8000446:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000448:	2300      	movs	r3, #0
 800044a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	4618      	mov	r0, r3
 8000452:	f000 fdf5 	bl	8001040 <HAL_RCC_OscConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800045c:	f000 f928 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000460:	230f      	movs	r3, #15
 8000462:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000464:	2300      	movs	r3, #0
 8000466:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000470:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000476:	463b      	mov	r3, r7
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f001 fa06 	bl	800188c <HAL_RCC_ClockConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000486:	f000 f913 	bl	80006b0 <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	3758      	adds	r7, #88	; 0x58
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	; 0x30
 8000498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049a:	f107 031c 	add.w	r3, r7, #28
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004aa:	4b69      	ldr	r3, [pc, #420]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ae:	4a68      	ldr	r2, [pc, #416]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b6:	4b66      	ldr	r3, [pc, #408]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	61bb      	str	r3, [r7, #24]
 80004c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004c2:	4b63      	ldr	r3, [pc, #396]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004c6:	4a62      	ldr	r2, [pc, #392]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004ce:	4b60      	ldr	r3, [pc, #384]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b5d      	ldr	r3, [pc, #372]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a5c      	ldr	r2, [pc, #368]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b5a      	ldr	r3, [pc, #360]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f2:	4b57      	ldr	r3, [pc, #348]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a56      	ldr	r2, [pc, #344]	; (8000650 <MX_GPIO_Init+0x1bc>)
 80004f8:	f043 0308 	orr.w	r3, r3, #8
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b54      	ldr	r3, [pc, #336]	; (8000650 <MX_GPIO_Init+0x1bc>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0308 	and.w	r3, r3, #8
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800050a:	4b51      	ldr	r3, [pc, #324]	; (8000650 <MX_GPIO_Init+0x1bc>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a50      	ldr	r2, [pc, #320]	; (8000650 <MX_GPIO_Init+0x1bc>)
 8000510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b4e      	ldr	r3, [pc, #312]	; (8000650 <MX_GPIO_Init+0x1bc>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8000522:	f000 fd7d 	bl	8001020 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000526:	4b4a      	ldr	r3, [pc, #296]	; (8000650 <MX_GPIO_Init+0x1bc>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052a:	4a49      	ldr	r2, [pc, #292]	; (8000650 <MX_GPIO_Init+0x1bc>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000532:	4b47      	ldr	r3, [pc, #284]	; (8000650 <MX_GPIO_Init+0x1bc>)
 8000534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000544:	4843      	ldr	r0, [pc, #268]	; (8000654 <MX_GPIO_Init+0x1c0>)
 8000546:	f000 fc8f 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2140      	movs	r1, #64	; 0x40
 800054e:	4842      	ldr	r0, [pc, #264]	; (8000658 <MX_GPIO_Init+0x1c4>)
 8000550:	f000 fc8a 	bl	8000e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800055a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800055e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000564:	f107 031c 	add.w	r3, r7, #28
 8000568:	4619      	mov	r1, r3
 800056a:	483c      	ldr	r0, [pc, #240]	; (800065c <MX_GPIO_Init+0x1c8>)
 800056c:	f000 faea 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000570:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2301      	movs	r3, #1
 8000578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057e:	2300      	movs	r3, #0
 8000580:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000582:	f107 031c 	add.w	r3, r7, #28
 8000586:	4619      	mov	r1, r3
 8000588:	4832      	ldr	r0, [pc, #200]	; (8000654 <MX_GPIO_Init+0x1c0>)
 800058a:	f000 fadb 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800058e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000594:	2302      	movs	r3, #2
 8000596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80005a0:	2307      	movs	r3, #7
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	4619      	mov	r1, r3
 80005aa:	482d      	ldr	r0, [pc, #180]	; (8000660 <MX_GPIO_Init+0x1cc>)
 80005ac:	f000 faca 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80005b0:	2320      	movs	r3, #32
 80005b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	4619      	mov	r1, r3
 80005c2:	4825      	ldr	r0, [pc, #148]	; (8000658 <MX_GPIO_Init+0x1c4>)
 80005c4:	f000 fabe 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80005c8:	2340      	movs	r3, #64	; 0x40
 80005ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d0:	2300      	movs	r3, #0
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4619      	mov	r1, r3
 80005de:	481e      	ldr	r0, [pc, #120]	; (8000658 <MX_GPIO_Init+0x1c4>)
 80005e0:	f000 fab0 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_TX_Pin STLINK_RX_Pin */
  GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80005e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80005e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ea:	2302      	movs	r3, #2
 80005ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f2:	2303      	movs	r3, #3
 80005f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80005f6:	2308      	movs	r3, #8
 80005f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	4815      	ldr	r0, [pc, #84]	; (8000658 <MX_GPIO_Init+0x1c4>)
 8000602:	f000 fa9f 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000606:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000618:	230a      	movs	r3, #10
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000626:	f000 fa8d 	bl	8000b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800062a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000630:	2300      	movs	r3, #0
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000638:	f107 031c 	add.w	r3, r7, #28
 800063c:	4619      	mov	r1, r3
 800063e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000642:	f000 fa7f 	bl	8000b44 <HAL_GPIO_Init>

}
 8000646:	bf00      	nop
 8000648:	3730      	adds	r7, #48	; 0x30
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021000 	.word	0x40021000
 8000654:	48000400 	.word	0x48000400
 8000658:	48001800 	.word	0x48001800
 800065c:	48000800 	.word	0x48000800
 8000660:	48000c00 	.word	0x48000c00

08000664 <task_handler>:

/* USER CODE BEGIN 4 */

static void task_handler(void* parameters)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b09c      	sub	sp, #112	; 0x70
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
	char msg[100];
	snprintf(msg, 100, "%s\n", (char*)parameters);
 800066c:	f107 000c 	add.w	r0, r7, #12
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a05      	ldr	r2, [pc, #20]	; (8000688 <task_handler+0x24>)
 8000674:	2164      	movs	r1, #100	; 0x64
 8000676:	f006 fdb7 	bl	80071e8 <sniprintf>
	SEGGER_SYSVIEW_PrintfTarget(msg);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4618      	mov	r0, r3
 8000680:	f006 fcd0 	bl	8007024 <SEGGER_SYSVIEW_PrintfTarget>
	{
 8000684:	e7f2      	b.n	800066c <task_handler+0x8>
 8000686:	bf00      	nop
 8000688:	0800848c 	.word	0x0800848c

0800068c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d101      	bne.n	80006a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800069e:	f000 f94f 	bl	8000940 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40001000 	.word	0x40001000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b4:	b672      	cpsid	i
}
 80006b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <Error_Handler+0x8>
	...

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_MspInit+0x44>)
 80006c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006c6:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_MspInit+0x44>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6613      	str	r3, [r2, #96]	; 0x60
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <HAL_MspInit+0x44>)
 80006d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x44>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x44>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6593      	str	r3, [r2, #88]	; 0x58
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x44>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue(); // Required for SEGGER SYSVIEW START function in Main.c
 80006f2:	f003 ff81 	bl	80045f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000

08000704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000714:	2200      	movs	r2, #0
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	2036      	movs	r0, #54	; 0x36
 800071a:	f000 f9e9 	bl	8000af0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800071e:	2036      	movs	r0, #54	; 0x36
 8000720:	f000 fa02 	bl	8000b28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <HAL_InitTick+0xa0>)
 8000726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_InitTick+0xa0>)
 800072a:	f043 0310 	orr.w	r3, r3, #16
 800072e:	6593      	str	r3, [r2, #88]	; 0x58
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_InitTick+0xa0>)
 8000732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000734:	f003 0310 	and.w	r3, r3, #16
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800073c:	f107 0210 	add.w	r2, r7, #16
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4611      	mov	r1, r2
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fa7a 	bl	8001c40 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800074c:	f001 fa62 	bl	8001c14 <HAL_RCC_GetPCLK1Freq>
 8000750:	4603      	mov	r3, r0
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000758:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <HAL_InitTick+0xa4>)
 800075a:	fba2 2303 	umull	r2, r3, r2, r3
 800075e:	0c9b      	lsrs	r3, r3, #18
 8000760:	3b01      	subs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_InitTick+0xa8>)
 8000766:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <HAL_InitTick+0xac>)
 8000768:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <HAL_InitTick+0xa8>)
 800076c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000770:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000772:	4a0e      	ldr	r2, [pc, #56]	; (80007ac <HAL_InitTick+0xa8>)
 8000774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000776:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_InitTick+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_InitTick+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <HAL_InitTick+0xa8>)
 8000786:	f001 fb4f 	bl	8001e28 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d104      	bne.n	800079a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000790:	4806      	ldr	r0, [pc, #24]	; (80007ac <HAL_InitTick+0xa8>)
 8000792:	f001 fbab 	bl	8001eec <HAL_TIM_Base_Start_IT>
 8000796:	4603      	mov	r3, r0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	3730      	adds	r7, #48	; 0x30
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40021000 	.word	0x40021000
 80007a8:	431bde83 	.word	0x431bde83
 80007ac:	200143d8 	.word	0x200143d8
 80007b0:	40001000 	.word	0x40001000

080007b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <NMI_Handler+0x4>

080007ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0x4>

080007c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <MemManage_Handler+0x4>

080007c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <BusFault_Handler+0x4>

080007cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <UsageFault_Handler+0x4>

080007d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d2:	b480      	push	{r7}
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80007e4:	4802      	ldr	r0, [pc, #8]	; (80007f0 <TIM6_DAC_IRQHandler+0x10>)
 80007e6:	f001 fbf1 	bl	8001fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200143d8 	.word	0x200143d8

080007f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	e00a      	b.n	800081c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000806:	f3af 8000 	nop.w
 800080a:	4601      	mov	r1, r0
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	60ba      	str	r2, [r7, #8]
 8000812:	b2ca      	uxtb	r2, r1
 8000814:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	3301      	adds	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697a      	ldr	r2, [r7, #20]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	429a      	cmp	r2, r3
 8000822:	dbf0      	blt.n	8000806 <_read+0x12>
	}

return len;
 8000824:	687b      	ldr	r3, [r7, #4]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3718      	adds	r7, #24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <_close>:
	}
	return len;
}

int _close(int file)
{
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
	return -1;
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800083a:	4618      	mov	r0, r3
 800083c:	370c      	adds	r7, #12
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000846:	b480      	push	{r7}
 8000848:	b083      	sub	sp, #12
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
 800084e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000856:	605a      	str	r2, [r3, #4]
	return 0;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <_isatty>:

int _isatty(int file)
{
 8000866:	b480      	push	{r7}
 8000868:	b083      	sub	sp, #12
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
	return 1;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087c:	b480      	push	{r7}
 800087e:	b085      	sub	sp, #20
 8000880:	af00      	add	r7, sp, #0
 8000882:	60f8      	str	r0, [r7, #12]
 8000884:	60b9      	str	r1, [r7, #8]
 8000886:	607a      	str	r2, [r7, #4]
	return 0;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <SystemInit+0x20>)
 800089e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <SystemInit+0x20>)
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008c0:	f7ff ffea 	bl	8000898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c4:	480c      	ldr	r0, [pc, #48]	; (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c6:	490d      	ldr	r1, [pc, #52]	; (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008cc:	e002      	b.n	80008d4 <LoopCopyDataInit>

080008ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008d2:	3304      	adds	r3, #4

080008d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d8:	d3f9      	bcc.n	80008ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008dc:	4c0a      	ldr	r4, [pc, #40]	; (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008e0:	e001      	b.n	80008e6 <LoopFillZerobss>

080008e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e4:	3204      	adds	r2, #4

080008e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e8:	d3fb      	bcc.n	80008e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ea:	f006 fc1d 	bl	8007128 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ee:	f7ff fd27 	bl	8000340 <main>

080008f2 <LoopForever>:

LoopForever:
    b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008f4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000900:	0800867c 	.word	0x0800867c
  ldr r2, =_sbss
 8000904:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000908:	20014520 	.word	0x20014520

0800090c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_IRQHandler>

0800090e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f8de 	bl	8000ada <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800091e:	200f      	movs	r0, #15
 8000920:	f7ff fef0 	bl	8000704 <HAL_InitTick>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d002      	beq.n	8000930 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	71fb      	strb	r3, [r7, #7]
 800092e:	e001      	b.n	8000934 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000930:	f7ff fec4 	bl	80006bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000934:	79fb      	ldrb	r3, [r7, #7]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_IncTick+0x20>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_IncTick+0x24>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <HAL_IncTick+0x24>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008
 8000964:	20014424 	.word	0x20014424

08000968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return uwTick;
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <HAL_GetTick+0x14>)
 800096e:	681b      	ldr	r3, [r3, #0]
}
 8000970:	4618      	mov	r0, r3
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20014424 	.word	0x20014424

08000980 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000996:	68ba      	ldr	r2, [r7, #8]
 8000998:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800099c:	4013      	ands	r3, r2
 800099e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <__NVIC_SetPriorityGrouping+0x44>)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	60d3      	str	r3, [r2, #12]
}
 80009b8:	bf00      	nop
 80009ba:	3714      	adds	r7, #20
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	f003 0307 	and.w	r3, r3, #7
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	db0b      	blt.n	8000a0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	f003 021f 	and.w	r2, r3, #31
 80009fc:	4907      	ldr	r1, [pc, #28]	; (8000a1c <__NVIC_EnableIRQ+0x38>)
 80009fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a02:	095b      	lsrs	r3, r3, #5
 8000a04:	2001      	movs	r0, #1
 8000a06:	fa00 f202 	lsl.w	r2, r0, r2
 8000a0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	db0a      	blt.n	8000a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	490c      	ldr	r1, [pc, #48]	; (8000a6c <__NVIC_SetPriority+0x4c>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	b2d2      	uxtb	r2, r2
 8000a42:	440b      	add	r3, r1
 8000a44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a48:	e00a      	b.n	8000a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	b2da      	uxtb	r2, r3
 8000a4e:	4908      	ldr	r1, [pc, #32]	; (8000a70 <__NVIC_SetPriority+0x50>)
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 030f 	and.w	r3, r3, #15
 8000a56:	3b04      	subs	r3, #4
 8000a58:	0112      	lsls	r2, r2, #4
 8000a5a:	b2d2      	uxtb	r2, r2
 8000a5c:	440b      	add	r3, r1
 8000a5e:	761a      	strb	r2, [r3, #24]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b089      	sub	sp, #36	; 0x24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f1c3 0307 	rsb	r3, r3, #7
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	bf28      	it	cs
 8000a92:	2304      	movcs	r3, #4
 8000a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d902      	bls.n	8000aa4 <NVIC_EncodePriority+0x30>
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	3b03      	subs	r3, #3
 8000aa2:	e000      	b.n	8000aa6 <NVIC_EncodePriority+0x32>
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43da      	mvns	r2, r3
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000abc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	43d9      	mvns	r1, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	4313      	orrs	r3, r2
         );
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3724      	adds	r7, #36	; 0x24
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b082      	sub	sp, #8
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f7ff ff4c 	bl	8000980 <__NVIC_SetPriorityGrouping>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
 8000afc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b02:	f7ff ff61 	bl	80009c8 <__NVIC_GetPriorityGrouping>
 8000b06:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	6978      	ldr	r0, [r7, #20]
 8000b0e:	f7ff ffb1 	bl	8000a74 <NVIC_EncodePriority>
 8000b12:	4602      	mov	r2, r0
 8000b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff80 	bl	8000a20 <__NVIC_SetPriority>
}
 8000b20:	bf00      	nop
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff ff54 	bl	80009e4 <__NVIC_EnableIRQ>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b087      	sub	sp, #28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b52:	e166      	b.n	8000e22 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	2101      	movs	r1, #1
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8158 	beq.w	8000e1c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d005      	beq.n	8000b84 <HAL_GPIO_Init+0x40>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d130      	bne.n	8000be6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	f003 0201 	and.w	r2, r3, #1
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d017      	beq.n	8000c22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	689a      	ldr	r2, [r3, #8]
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f003 0303 	and.w	r3, r3, #3
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d123      	bne.n	8000c76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	08da      	lsrs	r2, r3, #3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3208      	adds	r2, #8
 8000c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	220f      	movs	r2, #15
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	691a      	ldr	r2, [r3, #16]
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	f003 0307 	and.w	r3, r3, #7
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	08da      	lsrs	r2, r3, #3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3208      	adds	r2, #8
 8000c70:	6939      	ldr	r1, [r7, #16]
 8000c72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	2203      	movs	r2, #3
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 0203 	and.w	r2, r3, #3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80b2 	beq.w	8000e1c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb8:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <HAL_GPIO_Init+0x2fc>)
 8000cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbc:	4a60      	ldr	r2, [pc, #384]	; (8000e40 <HAL_GPIO_Init+0x2fc>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc4:	4b5e      	ldr	r3, [pc, #376]	; (8000e40 <HAL_GPIO_Init+0x2fc>)
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cd0:	4a5c      	ldr	r2, [pc, #368]	; (8000e44 <HAL_GPIO_Init+0x300>)
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	089b      	lsrs	r3, r3, #2
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cfa:	d02b      	beq.n	8000d54 <HAL_GPIO_Init+0x210>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a52      	ldr	r2, [pc, #328]	; (8000e48 <HAL_GPIO_Init+0x304>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d025      	beq.n	8000d50 <HAL_GPIO_Init+0x20c>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a51      	ldr	r2, [pc, #324]	; (8000e4c <HAL_GPIO_Init+0x308>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d01f      	beq.n	8000d4c <HAL_GPIO_Init+0x208>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a50      	ldr	r2, [pc, #320]	; (8000e50 <HAL_GPIO_Init+0x30c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d019      	beq.n	8000d48 <HAL_GPIO_Init+0x204>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a4f      	ldr	r2, [pc, #316]	; (8000e54 <HAL_GPIO_Init+0x310>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d013      	beq.n	8000d44 <HAL_GPIO_Init+0x200>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a4e      	ldr	r2, [pc, #312]	; (8000e58 <HAL_GPIO_Init+0x314>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d00d      	beq.n	8000d40 <HAL_GPIO_Init+0x1fc>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a4d      	ldr	r2, [pc, #308]	; (8000e5c <HAL_GPIO_Init+0x318>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d007      	beq.n	8000d3c <HAL_GPIO_Init+0x1f8>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a4c      	ldr	r2, [pc, #304]	; (8000e60 <HAL_GPIO_Init+0x31c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d101      	bne.n	8000d38 <HAL_GPIO_Init+0x1f4>
 8000d34:	2307      	movs	r3, #7
 8000d36:	e00e      	b.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d38:	2308      	movs	r3, #8
 8000d3a:	e00c      	b.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d3c:	2306      	movs	r3, #6
 8000d3e:	e00a      	b.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d40:	2305      	movs	r3, #5
 8000d42:	e008      	b.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d44:	2304      	movs	r3, #4
 8000d46:	e006      	b.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d48:	2303      	movs	r3, #3
 8000d4a:	e004      	b.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	e002      	b.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <HAL_GPIO_Init+0x212>
 8000d54:	2300      	movs	r3, #0
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	f002 0203 	and.w	r2, r2, #3
 8000d5c:	0092      	lsls	r2, r2, #2
 8000d5e:	4093      	lsls	r3, r2
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d66:	4937      	ldr	r1, [pc, #220]	; (8000e44 <HAL_GPIO_Init+0x300>)
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d74:	4b3b      	ldr	r3, [pc, #236]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	4013      	ands	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d98:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d9e:	4b31      	ldr	r3, [pc, #196]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dc2:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000df2:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <HAL_GPIO_Init+0x320>)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	fa22 f303 	lsr.w	r3, r2, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f47f ae91 	bne.w	8000b54 <HAL_GPIO_Init+0x10>
  }
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	371c      	adds	r7, #28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40010000 	.word	0x40010000
 8000e48:	48000400 	.word	0x48000400
 8000e4c:	48000800 	.word	0x48000800
 8000e50:	48000c00 	.word	0x48000c00
 8000e54:	48001000 	.word	0x48001000
 8000e58:	48001400 	.word	0x48001400
 8000e5c:	48001800 	.word	0x48001800
 8000e60:	48001c00 	.word	0x48001c00
 8000e64:	40010400 	.word	0x40010400

08000e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
 8000e74:	4613      	mov	r3, r2
 8000e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e78:	787b      	ldrb	r3, [r7, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e84:	e002      	b.n	8000e8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e86:	887a      	ldrh	r2, [r7, #2]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ea8:	d102      	bne.n	8000eb0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eae:	e00b      	b.n	8000ec8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ebe:	d102      	bne.n	8000ec6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec4:	e000      	b.n	8000ec8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000ec6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d141      	bne.n	8000f6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ee6:	4b4b      	ldr	r3, [pc, #300]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ef2:	d131      	bne.n	8000f58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ef4:	4b47      	ldr	r3, [pc, #284]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000efa:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f04:	4b43      	ldr	r3, [pc, #268]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f0c:	4a41      	ldr	r2, [pc, #260]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f14:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2232      	movs	r2, #50	; 0x32
 8000f1a:	fb02 f303 	mul.w	r3, r2, r3
 8000f1e:	4a3f      	ldr	r2, [pc, #252]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f20:	fba2 2303 	umull	r2, r3, r2, r3
 8000f24:	0c9b      	lsrs	r3, r3, #18
 8000f26:	3301      	adds	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f2a:	e002      	b.n	8000f32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f32:	4b38      	ldr	r3, [pc, #224]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3e:	d102      	bne.n	8000f46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f2      	bne.n	8000f2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f46:	4b33      	ldr	r3, [pc, #204]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f52:	d158      	bne.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e057      	b.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f58:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f5e:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f68:	e04d      	b.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f70:	d141      	bne.n	8000ff6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f7e:	d131      	bne.n	8000fe4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f80:	4b24      	ldr	r3, [pc, #144]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f86:	4a23      	ldr	r2, [pc, #140]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f98:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2232      	movs	r2, #50	; 0x32
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fac:	fba2 2303 	umull	r2, r3, r2, r3
 8000fb0:	0c9b      	lsrs	r3, r3, #18
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb6:	e002      	b.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d102      	bne.n	8000fd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f2      	bne.n	8000fb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fd4:	695b      	ldr	r3, [r3, #20]
 8000fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fde:	d112      	bne.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e011      	b.n	8001008 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fea:	4a0a      	ldr	r2, [pc, #40]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ff4:	e007      	b.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001000:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001004:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40007000 	.word	0x40007000
 8001018:	20000000 	.word	0x20000000
 800101c:	431bde83 	.word	0x431bde83

08001020 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001024:	4b05      	ldr	r3, [pc, #20]	; (800103c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_PWREx_EnableVddIO2+0x1c>)
 800102a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102e:	6053      	str	r3, [r2, #4]
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40007000 	.word	0x40007000

08001040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	f000 bc16 	b.w	8001880 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001054:	4ba0      	ldr	r3, [pc, #640]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800105e:	4b9e      	ldr	r3, [pc, #632]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0310 	and.w	r3, r3, #16
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80e4 	beq.w	800123e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <HAL_RCC_OscConfig+0x4c>
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2b0c      	cmp	r3, #12
 8001080:	f040 808b 	bne.w	800119a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	2b01      	cmp	r3, #1
 8001088:	f040 8087 	bne.w	800119a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800108c:	4b92      	ldr	r3, [pc, #584]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d005      	beq.n	80010a4 <HAL_RCC_OscConfig+0x64>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e3ed      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6a1a      	ldr	r2, [r3, #32]
 80010a8:	4b8b      	ldr	r3, [pc, #556]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <HAL_RCC_OscConfig+0x7e>
 80010b4:	4b88      	ldr	r3, [pc, #544]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010bc:	e005      	b.n	80010ca <HAL_RCC_OscConfig+0x8a>
 80010be:	4b86      	ldr	r3, [pc, #536]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c4:	091b      	lsrs	r3, r3, #4
 80010c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d223      	bcs.n	8001116 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 fde6 	bl	8001ca4 <RCC_SetFlashLatencyFromMSIRange>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e3ce      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e2:	4b7d      	ldr	r3, [pc, #500]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a7c      	ldr	r2, [pc, #496]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	4b7a      	ldr	r3, [pc, #488]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4977      	ldr	r1, [pc, #476]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001100:	4b75      	ldr	r3, [pc, #468]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	4972      	ldr	r1, [pc, #456]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
 8001114:	e025      	b.n	8001162 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001116:	4b70      	ldr	r3, [pc, #448]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6f      	ldr	r2, [pc, #444]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	496a      	ldr	r1, [pc, #424]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001134:	4b68      	ldr	r3, [pc, #416]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	4965      	ldr	r1, [pc, #404]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	4618      	mov	r0, r3
 8001154:	f000 fda6 	bl	8001ca4 <RCC_SetFlashLatencyFromMSIRange>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e38e      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001162:	f000 fcbf 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001166:	4602      	mov	r2, r0
 8001168:	4b5b      	ldr	r3, [pc, #364]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	091b      	lsrs	r3, r3, #4
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	495a      	ldr	r1, [pc, #360]	; (80012dc <HAL_RCC_OscConfig+0x29c>)
 8001174:	5ccb      	ldrb	r3, [r1, r3]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	fa22 f303 	lsr.w	r3, r2, r3
 800117e:	4a58      	ldr	r2, [pc, #352]	; (80012e0 <HAL_RCC_OscConfig+0x2a0>)
 8001180:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001182:	4b58      	ldr	r3, [pc, #352]	; (80012e4 <HAL_RCC_OscConfig+0x2a4>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fabc 	bl	8000704 <HAL_InitTick>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d052      	beq.n	800123c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	e372      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d032      	beq.n	8001208 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011a2:	4b4d      	ldr	r3, [pc, #308]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a4c      	ldr	r2, [pc, #304]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fbdb 	bl	8000968 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b6:	f7ff fbd7 	bl	8000968 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e35b      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011c8:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d4:	4b40      	ldr	r3, [pc, #256]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a3f      	ldr	r2, [pc, #252]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b3d      	ldr	r3, [pc, #244]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	493a      	ldr	r1, [pc, #232]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f2:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	021b      	lsls	r3, r3, #8
 8001200:	4935      	ldr	r1, [pc, #212]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]
 8001206:	e01a      	b.n	800123e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001214:	f7ff fba8 	bl	8000968 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121c:	f7ff fba4 	bl	8000968 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e328      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1dc>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d073      	beq.n	8001332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	2b08      	cmp	r3, #8
 800124e:	d005      	beq.n	800125c <HAL_RCC_OscConfig+0x21c>
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2b0c      	cmp	r3, #12
 8001254:	d10e      	bne.n	8001274 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	2b03      	cmp	r3, #3
 800125a:	d10b      	bne.n	8001274 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d063      	beq.n	8001330 <HAL_RCC_OscConfig+0x2f0>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d15f      	bne.n	8001330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e305      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800127c:	d106      	bne.n	800128c <HAL_RCC_OscConfig+0x24c>
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a15      	ldr	r2, [pc, #84]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e01d      	b.n	80012c8 <HAL_RCC_OscConfig+0x288>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001294:	d10c      	bne.n	80012b0 <HAL_RCC_OscConfig+0x270>
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 800129c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e00b      	b.n	80012c8 <HAL_RCC_OscConfig+0x288>
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <HAL_RCC_OscConfig+0x298>)
 80012c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d01b      	beq.n	8001308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d0:	f7ff fb4a 	bl	8000968 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012d6:	e010      	b.n	80012fa <HAL_RCC_OscConfig+0x2ba>
 80012d8:	40021000 	.word	0x40021000
 80012dc:	08008570 	.word	0x08008570
 80012e0:	20000000 	.word	0x20000000
 80012e4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fb3e 	bl	8000968 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e2c2      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fa:	4baf      	ldr	r3, [pc, #700]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2a8>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fb2e 	bl	8000968 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fb2a 	bl	8000968 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	; 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e2ae      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001322:	4ba5      	ldr	r3, [pc, #660]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x2d0>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d060      	beq.n	8001400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x310>
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d119      	bne.n	800137e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d116      	bne.n	800137e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001350:	4b99      	ldr	r3, [pc, #612]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_OscConfig+0x328>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e28b      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b93      	ldr	r3, [pc, #588]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	4990      	ldr	r1, [pc, #576]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	e040      	b.n	8001400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d023      	beq.n	80013ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001386:	4b8c      	ldr	r3, [pc, #560]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a8b      	ldr	r2, [pc, #556]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fae9 	bl	8000968 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fae5 	bl	8000968 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e269      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ac:	4b82      	ldr	r3, [pc, #520]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b7f      	ldr	r3, [pc, #508]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	497c      	ldr	r1, [pc, #496]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e018      	b.n	8001400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b7a      	ldr	r3, [pc, #488]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a79      	ldr	r2, [pc, #484]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fac5 	bl	8000968 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fac1 	bl	8000968 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e245      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d03c      	beq.n	8001486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01c      	beq.n	800144e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001414:	4b68      	ldr	r3, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001416:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800141a:	4a67      	ldr	r2, [pc, #412]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff faa0 	bl	8000968 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fa9c 	bl	8000968 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e220      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800143e:	4b5e      	ldr	r3, [pc, #376]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ef      	beq.n	800142c <HAL_RCC_OscConfig+0x3ec>
 800144c:	e01b      	b.n	8001486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144e:	4b5a      	ldr	r3, [pc, #360]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001454:	4a58      	ldr	r2, [pc, #352]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff fa83 	bl	8000968 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fa7f 	bl	8000968 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e203      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001478:	4b4f      	ldr	r3, [pc, #316]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800147a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ef      	bne.n	8001466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80a6 	beq.w	80015e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10d      	bne.n	80014c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	4b44      	ldr	r3, [pc, #272]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	4a43      	ldr	r2, [pc, #268]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ae:	6593      	str	r3, [r2, #88]	; 0x58
 80014b0:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014bc:	2301      	movs	r3, #1
 80014be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	4b3e      	ldr	r3, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x57c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d118      	bne.n	80014fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014cc:	4b3b      	ldr	r3, [pc, #236]	; (80015bc <HAL_RCC_OscConfig+0x57c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a3a      	ldr	r2, [pc, #232]	; (80015bc <HAL_RCC_OscConfig+0x57c>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d8:	f7ff fa46 	bl	8000968 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e0:	f7ff fa42 	bl	8000968 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1c6      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <HAL_RCC_OscConfig+0x57c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <HAL_RCC_OscConfig+0x4d8>
 8001506:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150c:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001516:	e024      	b.n	8001562 <HAL_RCC_OscConfig+0x522>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d110      	bne.n	8001542 <HAL_RCC_OscConfig+0x502>
 8001520:	4b25      	ldr	r3, [pc, #148]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001526:	4a24      	ldr	r2, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001530:	4b21      	ldr	r3, [pc, #132]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001536:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001540:	e00f      	b.n	8001562 <HAL_RCC_OscConfig+0x522>
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 8001554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001558:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d016      	beq.n	8001598 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156a:	f7ff f9fd 	bl	8000968 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff f9f9 	bl	8000968 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e17b      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_OscConfig+0x578>)
 800158a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0ed      	beq.n	8001572 <HAL_RCC_OscConfig+0x532>
 8001596:	e01a      	b.n	80015ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001598:	f7ff f9e6 	bl	8000968 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800159e:	e00f      	b.n	80015c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a0:	f7ff f9e2 	bl	8000968 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d906      	bls.n	80015c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e164      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
 80015b6:	bf00      	nop
 80015b8:	40021000 	.word	0x40021000
 80015bc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c0:	4ba8      	ldr	r3, [pc, #672]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e8      	bne.n	80015a0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7ffb      	ldrb	r3, [r7, #31]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4ba3      	ldr	r3, [pc, #652]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4aa2      	ldr	r2, [pc, #648]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d03c      	beq.n	8001666 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d01c      	beq.n	800162e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015f4:	4b9b      	ldr	r3, [pc, #620]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80015f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015fa:	4a9a      	ldr	r2, [pc, #616]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001604:	f7ff f9b0 	bl	8000968 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800160c:	f7ff f9ac 	bl	8000968 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e130      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800161e:	4b91      	ldr	r3, [pc, #580]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001620:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0ef      	beq.n	800160c <HAL_RCC_OscConfig+0x5cc>
 800162c:	e01b      	b.n	8001666 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800162e:	4b8d      	ldr	r3, [pc, #564]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001630:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001634:	4a8b      	ldr	r2, [pc, #556]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001636:	f023 0301 	bic.w	r3, r3, #1
 800163a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163e:	f7ff f993 	bl	8000968 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001646:	f7ff f98f 	bl	8000968 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e113      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001658:	4b82      	ldr	r3, [pc, #520]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 800165a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1ef      	bne.n	8001646 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8107 	beq.w	800187e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	2b02      	cmp	r3, #2
 8001676:	f040 80cb 	bne.w	8001810 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800167a:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f003 0203 	and.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168a:	429a      	cmp	r2, r3
 800168c:	d12c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	3b01      	subs	r3, #1
 800169a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d123      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d11b      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d113      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d109      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	085b      	lsrs	r3, r3, #1
 80016e0:	3b01      	subs	r3, #1
 80016e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d06d      	beq.n	80017c4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d068      	beq.n	80017c0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016ee:	4b5d      	ldr	r3, [pc, #372]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d105      	bne.n	8001706 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80016fa:	4b5a      	ldr	r3, [pc, #360]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0ba      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800170a:	4b56      	ldr	r3, [pc, #344]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a55      	ldr	r2, [pc, #340]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001710:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001714:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001716:	f7ff f927 	bl	8000968 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800171e:	f7ff f923 	bl	8000968 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e0a7      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1f0      	bne.n	800171e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173c:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 800173e:	68da      	ldr	r2, [r3, #12]
 8001740:	4b49      	ldr	r3, [pc, #292]	; (8001868 <HAL_RCC_OscConfig+0x828>)
 8001742:	4013      	ands	r3, r2
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800174c:	3a01      	subs	r2, #1
 800174e:	0112      	lsls	r2, r2, #4
 8001750:	4311      	orrs	r1, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001756:	0212      	lsls	r2, r2, #8
 8001758:	4311      	orrs	r1, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800175e:	0852      	lsrs	r2, r2, #1
 8001760:	3a01      	subs	r2, #1
 8001762:	0552      	lsls	r2, r2, #21
 8001764:	4311      	orrs	r1, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800176a:	0852      	lsrs	r2, r2, #1
 800176c:	3a01      	subs	r2, #1
 800176e:	0652      	lsls	r2, r2, #25
 8001770:	4311      	orrs	r1, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001776:	06d2      	lsls	r2, r2, #27
 8001778:	430a      	orrs	r2, r1
 800177a:	493a      	ldr	r1, [pc, #232]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 800177c:	4313      	orrs	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001780:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a37      	ldr	r2, [pc, #220]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800178c:	4b35      	ldr	r3, [pc, #212]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4a34      	ldr	r2, [pc, #208]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001796:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001798:	f7ff f8e6 	bl	8000968 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f8e2 	bl	8000968 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e066      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b2:	4b2c      	ldr	r3, [pc, #176]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017be:	e05e      	b.n	800187e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e05d      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d156      	bne.n	800187e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a23      	ldr	r2, [pc, #140]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	4a20      	ldr	r2, [pc, #128]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 80017e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017e8:	f7ff f8be 	bl	8000968 <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f0:	f7ff f8ba 	bl	8000968 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e03e      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x7b0>
 800180e:	e036      	b.n	800187e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d031      	beq.n	800187a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a12      	ldr	r2, [pc, #72]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 800181c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001820:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4a0c      	ldr	r2, [pc, #48]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001834:	f023 0303 	bic.w	r3, r3, #3
 8001838:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4a09      	ldr	r2, [pc, #36]	; (8001864 <HAL_RCC_OscConfig+0x824>)
 8001840:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff f88d 	bl	8000968 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	e00c      	b.n	800186c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff f889 	bl	8000968 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d905      	bls.n	800186c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e00d      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
 8001864:	40021000 	.word	0x40021000
 8001868:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <HAL_RCC_OscConfig+0x848>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ec      	bne.n	8001852 <HAL_RCC_OscConfig+0x812>
 8001878:	e001      	b.n	800187e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e10f      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018a4:	4b89      	ldr	r3, [pc, #548]	; (8001acc <HAL_RCC_ClockConfig+0x240>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d910      	bls.n	80018d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b86      	ldr	r3, [pc, #536]	; (8001acc <HAL_RCC_ClockConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 020f 	bic.w	r2, r3, #15
 80018ba:	4984      	ldr	r1, [pc, #528]	; (8001acc <HAL_RCC_ClockConfig+0x240>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b82      	ldr	r3, [pc, #520]	; (8001acc <HAL_RCC_ClockConfig+0x240>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0f7      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 8089 	beq.w	80019f4 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d133      	bne.n	8001952 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ea:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e0e4      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80018fa:	f000 fa2d 	bl	8001d58 <RCC_GetSysClockFreqFromPLLSource>
 80018fe:	4603      	mov	r3, r0
 8001900:	4a74      	ldr	r2, [pc, #464]	; (8001ad4 <HAL_RCC_ClockConfig+0x248>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d955      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001906:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10a      	bne.n	8001928 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001912:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800191a:	4a6d      	ldr	r2, [pc, #436]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 800191c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001920:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001922:	2380      	movs	r3, #128	; 0x80
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e044      	b.n	80019b2 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d03e      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x126>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d13a      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800193c:	4b64      	ldr	r3, [pc, #400]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001944:	4a62      	ldr	r2, [pc, #392]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800194a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800194c:	2380      	movs	r3, #128	; 0x80
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	e02f      	b.n	80019b2 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d107      	bne.n	800196a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800195a:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d115      	bne.n	8001992 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0ac      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001972:	4b57      	ldr	r3, [pc, #348]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d109      	bne.n	8001992 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e0a0      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001982:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e098      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001992:	f000 f8a7 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001996:	4603      	mov	r3, r0
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <HAL_RCC_ClockConfig+0x248>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d909      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800199e:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019a6:	4a4a      	ldr	r2, [pc, #296]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019b2:	4b47      	ldr	r3, [pc, #284]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f023 0203 	bic.w	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4944      	ldr	r1, [pc, #272]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019c4:	f7fe ffd0 	bl	8000968 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7fe ffcc 	bl	8000968 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e070      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 020c 	and.w	r2, r3, #12
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1eb      	bne.n	80019cc <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	4930      	ldr	r1, [pc, #192]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b80      	cmp	r3, #128	; 0x80
 8001a18:	d105      	bne.n	8001a26 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4a2c      	ldr	r2, [pc, #176]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a24:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a26:	4b29      	ldr	r3, [pc, #164]	; (8001acc <HAL_RCC_ClockConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d210      	bcs.n	8001a56 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_ClockConfig+0x240>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 020f 	bic.w	r2, r3, #15
 8001a3c:	4923      	ldr	r1, [pc, #140]	; (8001acc <HAL_RCC_ClockConfig+0x240>)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_ClockConfig+0x240>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d001      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e036      	b.n	8001ac4 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d008      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a62:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4918      	ldr	r1, [pc, #96]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d009      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4910      	ldr	r1, [pc, #64]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a94:	f000 f826 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_RCC_ClockConfig+0x244>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	490c      	ldr	r1, [pc, #48]	; (8001ad8 <HAL_RCC_ClockConfig+0x24c>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab0:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x250>)
 8001ab2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RCC_ClockConfig+0x254>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fe23 	bl	8000704 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	73fb      	strb	r3, [r7, #15]

  return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	04c4b400 	.word	0x04c4b400
 8001ad8:	08008570 	.word	0x08008570
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001af2:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001afc:	4b3b      	ldr	r3, [pc, #236]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x34>
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d121      	bne.n	8001b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d11e      	bne.n	8001b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b18:	4b34      	ldr	r3, [pc, #208]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d107      	bne.n	8001b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e005      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b40:	4a2b      	ldr	r2, [pc, #172]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10d      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b04      	cmp	r3, #4
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b5e:	61bb      	str	r3, [r7, #24]
 8001b60:	e004      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	2b08      	cmp	r3, #8
 8001b66:	d101      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b0c      	cmp	r3, #12
 8001b70:	d134      	bne.n	8001bdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0xa6>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d003      	beq.n	8001b90 <HAL_RCC_GetSysClockFreq+0xac>
 8001b88:	e005      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b8c:	617b      	str	r3, [r7, #20]
      break;
 8001b8e:	e005      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b92:	617b      	str	r3, [r7, #20]
      break;
 8001b94:	e002      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	617b      	str	r3, [r7, #20]
      break;
 8001b9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001baa:	4b10      	ldr	r3, [pc, #64]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	fb02 f203 	mul.w	r2, r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	0e5b      	lsrs	r3, r3, #25
 8001bc8:	f003 0303 	and.w	r3, r3, #3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bdc:	69bb      	ldr	r3, [r7, #24]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	08008588 	.word	0x08008588
 8001bf4:	00f42400 	.word	0x00f42400
 8001bf8:	007a1200 	.word	0x007a1200

08001bfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c00:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c02:	681b      	ldr	r3, [r3, #0]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000000 	.word	0x20000000

08001c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c18:	f7ff fff0 	bl	8001bfc <HAL_RCC_GetHCLKFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	4904      	ldr	r1, [pc, #16]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	08008580 	.word	0x08008580

08001c40 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	220f      	movs	r2, #15
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0203 	and.w	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_RCC_GetClockConfig+0x5c>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	08db      	lsrs	r3, r3, #3
 8001c7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RCC_GetClockConfig+0x60>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 020f 	and.w	r2, r3, #15
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	601a      	str	r2, [r3, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cbc:	f7ff f8ec 	bl	8000e98 <HAL_PWREx_GetVoltageRange>
 8001cc0:	6178      	str	r0, [r7, #20]
 8001cc2:	e014      	b.n	8001cee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cce:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd0:	4b1f      	ldr	r3, [pc, #124]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001cdc:	f7ff f8dc 	bl	8000e98 <HAL_PWREx_GetVoltageRange>
 8001ce0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	4a1a      	ldr	r2, [pc, #104]	; (8001d50 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cf4:	d10b      	bne.n	8001d0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b80      	cmp	r3, #128	; 0x80
 8001cfa:	d913      	bls.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2ba0      	cmp	r3, #160	; 0xa0
 8001d00:	d902      	bls.n	8001d08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d02:	2302      	movs	r3, #2
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	e00d      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d08:	2301      	movs	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	e00a      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b7f      	cmp	r3, #127	; 0x7f
 8001d12:	d902      	bls.n	8001d1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001d14:	2302      	movs	r3, #2
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	e004      	b.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b70      	cmp	r3, #112	; 0x70
 8001d1e:	d101      	bne.n	8001d24 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d20:	2301      	movs	r3, #1
 8001d22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 020f 	bic.w	r2, r3, #15
 8001d2c:	4909      	ldr	r1, [pc, #36]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40022000 	.word	0x40022000

08001d58 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b087      	sub	sp, #28
 8001d5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d118      	bne.n	8001da0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	; (8001e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d107      	bne.n	8001d8a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d7a:	4b27      	ldr	r3, [pc, #156]	; (8001e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e005      	b.n	8001d96 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d8a:	4b23      	ldr	r3, [pc, #140]	; (8001e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d96:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d003      	beq.n	8001db8 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d003      	beq.n	8001dbe <RCC_GetSysClockFreqFromPLLSource+0x66>
 8001db6:	e005      	b.n	8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001dba:	613b      	str	r3, [r7, #16]
    break;
 8001dbc:	e005      	b.n	8001dca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001dbe:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8001dc0:	613b      	str	r3, [r7, #16]
    break;
 8001dc2:	e002      	b.n	8001dca <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	613b      	str	r3, [r7, #16]
    break;
 8001dc8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	fb02 f203 	mul.w	r2, r2, r3
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dee:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0e5b      	lsrs	r3, r3, #25
 8001df6:	f003 0303 	and.w	r3, r3, #3
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001e0a:	683b      	ldr	r3, [r7, #0]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	371c      	adds	r7, #28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08008588 	.word	0x08008588
 8001e20:	00f42400 	.word	0x00f42400
 8001e24:	007a1200 	.word	0x007a1200

08001e28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d101      	bne.n	8001e3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e049      	b.n	8001ece <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d106      	bne.n	8001e54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f841 	bl	8001ed6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4610      	mov	r0, r2
 8001e68:	f000 f9f8 	bl	800225c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d001      	beq.n	8001f04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e04f      	b.n	8001fa4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0201 	orr.w	r2, r2, #1
 8001f1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d01d      	beq.n	8001f62 <HAL_TIM_Base_Start_IT+0x76>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d018      	beq.n	8001f62 <HAL_TIM_Base_Start_IT+0x76>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_TIM_Base_Start_IT+0x76>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00e      	beq.n	8001f62 <HAL_TIM_Base_Start_IT+0x76>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1c      	ldr	r2, [pc, #112]	; (8001fbc <HAL_TIM_Base_Start_IT+0xd0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d009      	beq.n	8001f62 <HAL_TIM_Base_Start_IT+0x76>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d004      	beq.n	8001f62 <HAL_TIM_Base_Start_IT+0x76>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d115      	bne.n	8001f8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b06      	cmp	r3, #6
 8001f72:	d015      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0xb4>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7a:	d011      	beq.n	8001fa0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f8c:	e008      	b.n	8001fa0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	e000      	b.n	8001fa2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40000400 	.word	0x40000400
 8001fb8:	40000800 	.word	0x40000800
 8001fbc:	40000c00 	.word	0x40000c00
 8001fc0:	40013400 	.word	0x40013400
 8001fc4:	40014000 	.word	0x40014000
 8001fc8:	00010007 	.word	0x00010007

08001fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0202 	mvn.w	r2, #2
 8001ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f905 	bl	800221e <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f8f7 	bl	800220a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f908 	bl	8002232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	2b04      	cmp	r3, #4
 8002034:	d122      	bne.n	800207c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b04      	cmp	r3, #4
 8002042:	d11b      	bne.n	800207c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0204 	mvn.w	r2, #4
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2202      	movs	r2, #2
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8db 	bl	800221e <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f8cd 	bl	800220a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f8de 	bl	8002232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d122      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b08      	cmp	r3, #8
 8002096:	d11b      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0208 	mvn.w	r2, #8
 80020a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2204      	movs	r2, #4
 80020a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8b1 	bl	800221e <HAL_TIM_IC_CaptureCallback>
 80020bc:	e005      	b.n	80020ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f8a3 	bl	800220a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f8b4 	bl	8002232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d122      	bne.n	8002124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	2b10      	cmp	r3, #16
 80020ea:	d11b      	bne.n	8002124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0210 	mvn.w	r2, #16
 80020f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2208      	movs	r2, #8
 80020fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f887 	bl	800221e <HAL_TIM_IC_CaptureCallback>
 8002110:	e005      	b.n	800211e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f879 	bl	800220a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 f88a 	bl	8002232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10e      	bne.n	8002150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d107      	bne.n	8002150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0201 	mvn.w	r2, #1
 8002148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7fe fa9e 	bl	800068c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215a:	2b80      	cmp	r3, #128	; 0x80
 800215c:	d10e      	bne.n	800217c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d107      	bne.n	800217c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f914 	bl	80023a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800218a:	d10e      	bne.n	80021aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002196:	2b80      	cmp	r3, #128	; 0x80
 8002198:	d107      	bne.n	80021aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80021a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f907 	bl	80023b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021b4:	2b40      	cmp	r3, #64	; 0x40
 80021b6:	d10e      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d107      	bne.n	80021d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f838 	bl	8002246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	2b20      	cmp	r3, #32
 80021e2:	d10e      	bne.n	8002202 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0320 	and.w	r3, r3, #32
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d107      	bne.n	8002202 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f06f 0220 	mvn.w	r2, #32
 80021fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f8c7 	bl	8002390 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800221e:	b480      	push	{r7}
 8002220:	b083      	sub	sp, #12
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a40      	ldr	r2, [pc, #256]	; (8002370 <TIM_Base_SetConfig+0x114>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227a:	d00f      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a3d      	ldr	r2, [pc, #244]	; (8002374 <TIM_Base_SetConfig+0x118>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a3c      	ldr	r2, [pc, #240]	; (8002378 <TIM_Base_SetConfig+0x11c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a3b      	ldr	r2, [pc, #236]	; (800237c <TIM_Base_SetConfig+0x120>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x40>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a3a      	ldr	r2, [pc, #232]	; (8002380 <TIM_Base_SetConfig+0x124>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a2f      	ldr	r2, [pc, #188]	; (8002370 <TIM_Base_SetConfig+0x114>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01f      	beq.n	80022f6 <TIM_Base_SetConfig+0x9a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022bc:	d01b      	beq.n	80022f6 <TIM_Base_SetConfig+0x9a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a2c      	ldr	r2, [pc, #176]	; (8002374 <TIM_Base_SetConfig+0x118>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d017      	beq.n	80022f6 <TIM_Base_SetConfig+0x9a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a2b      	ldr	r2, [pc, #172]	; (8002378 <TIM_Base_SetConfig+0x11c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <TIM_Base_SetConfig+0x9a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a2a      	ldr	r2, [pc, #168]	; (800237c <TIM_Base_SetConfig+0x120>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00f      	beq.n	80022f6 <TIM_Base_SetConfig+0x9a>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <TIM_Base_SetConfig+0x124>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d00b      	beq.n	80022f6 <TIM_Base_SetConfig+0x9a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a28      	ldr	r2, [pc, #160]	; (8002384 <TIM_Base_SetConfig+0x128>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d007      	beq.n	80022f6 <TIM_Base_SetConfig+0x9a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a27      	ldr	r2, [pc, #156]	; (8002388 <TIM_Base_SetConfig+0x12c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d003      	beq.n	80022f6 <TIM_Base_SetConfig+0x9a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <TIM_Base_SetConfig+0x130>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d108      	bne.n	8002308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4313      	orrs	r3, r2
 8002306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a10      	ldr	r2, [pc, #64]	; (8002370 <TIM_Base_SetConfig+0x114>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00f      	beq.n	8002354 <TIM_Base_SetConfig+0xf8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <TIM_Base_SetConfig+0x124>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d00b      	beq.n	8002354 <TIM_Base_SetConfig+0xf8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a11      	ldr	r2, [pc, #68]	; (8002384 <TIM_Base_SetConfig+0x128>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <TIM_Base_SetConfig+0xf8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <TIM_Base_SetConfig+0x12c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d003      	beq.n	8002354 <TIM_Base_SetConfig+0xf8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a0f      	ldr	r2, [pc, #60]	; (800238c <TIM_Base_SetConfig+0x130>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d103      	bne.n	800235c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	615a      	str	r2, [r3, #20]
}
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40012c00 	.word	0x40012c00
 8002374:	40000400 	.word	0x40000400
 8002378:	40000800 	.word	0x40000800
 800237c:	40000c00 	.word	0x40000c00
 8002380:	40013400 	.word	0x40013400
 8002384:	40014000 	.word	0x40014000
 8002388:	40014400 	.word	0x40014400
 800238c:	40014800 	.word	0x40014800

08002390 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f103 0208 	add.w	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f103 0208 	add.w	r2, r3, #8
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f103 0208 	add.w	r2, r3, #8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002426:	b480      	push	{r7}
 8002428:	b085      	sub	sp, #20
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	601a      	str	r2, [r3, #0]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002484:	d103      	bne.n	800248e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	e00c      	b.n	80024a8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3308      	adds	r3, #8
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	e002      	b.n	800249c <vListInsert+0x2e>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d2f6      	bcs.n	8002496 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	1c5a      	adds	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	601a      	str	r2, [r3, #0]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6892      	ldr	r2, [r2, #8]
 80024f6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6852      	ldr	r2, [r2, #4]
 8002500:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	429a      	cmp	r2, r3
 800250a:	d103      	bne.n	8002514 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10a      	bne.n	800255e <xQueueGenericReset+0x2a>
        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	60bb      	str	r3, [r7, #8]
    }
 800255a:	bf00      	nop
 800255c:	e7fe      	b.n	800255c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800255e:	f002 f8c9 	bl	80046f4 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	68f9      	ldr	r1, [r7, #12]
 800256c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	441a      	add	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800258e:	3b01      	subs	r3, #1
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	22ff      	movs	r2, #255	; 0xff
 80025a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	22ff      	movs	r2, #255	; 0xff
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d114      	bne.n	80025de <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01a      	beq.n	80025f2 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3310      	adds	r3, #16
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 f91f 	bl	8003804 <xTaskRemoveFromEventList>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d012      	beq.n	80025f2 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <xQueueGenericReset+0xcc>)
 80025ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	f3bf 8f6f 	isb	sy
 80025dc:	e009      	b.n	80025f2 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	3310      	adds	r3, #16
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fef2 	bl	80023cc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	3324      	adds	r3, #36	; 0x24
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff feed 	bl	80023cc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80025f2:	f002 f8af 	bl	8004754 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80025f6:	2301      	movs	r3, #1
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	; 0x30
 8002608:	af02      	add	r7, sp, #8
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	4613      	mov	r3, r2
 8002610:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <xQueueGenericCreate+0x2a>
        __asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	61bb      	str	r3, [r7, #24]
    }
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <xQueueGenericCreate+0x48>
 800263e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	fbb2 f3f3 	udiv	r3, r2, r3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d101      	bne.n	8002650 <xQueueGenericCreate+0x4c>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <xQueueGenericCreate+0x4e>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10a      	bne.n	800266c <xQueueGenericCreate+0x68>
        __asm volatile
 8002656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265a:	f383 8811 	msr	BASEPRI, r3
 800265e:	f3bf 8f6f 	isb	sy
 8002662:	f3bf 8f4f 	dsb	sy
 8002666:	617b      	str	r3, [r7, #20]
    }
 8002668:	bf00      	nop
 800266a:	e7fe      	b.n	800266a <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800266c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002672:	d90a      	bls.n	800268a <xQueueGenericCreate+0x86>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	613b      	str	r3, [r7, #16]
    }
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	3350      	adds	r3, #80	; 0x50
 800268e:	4618      	mov	r0, r3
 8002690:	f002 f952 	bl	8004938 <pvPortMalloc>
 8002694:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d00d      	beq.n	80026b8 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3350      	adds	r3, #80	; 0x50
 80026a4:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026a6:	79fa      	ldrb	r2, [r7, #7]
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 f805 	bl	80026c2 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80026b8:	6a3b      	ldr	r3, [r7, #32]
    }
 80026ba:	4618      	mov	r0, r3
 80026bc:	3728      	adds	r7, #40	; 0x28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	60f8      	str	r0, [r7, #12]
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e002      	b.n	80026e4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026f0:	2101      	movs	r1, #1
 80026f2:	69b8      	ldr	r0, [r7, #24]
 80026f4:	f7ff ff1e 	bl	8002534 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	2073      	movs	r0, #115	; 0x73
 8002708:	f003 fe14 	bl	8006334 <SEGGER_SYSVIEW_RecordU32x3>
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b090      	sub	sp, #64	; 0x40
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002722:	2300      	movs	r3, #0
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <xQueueGenericSend+0x32>
        __asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002742:	bf00      	nop
 8002744:	e7fe      	b.n	8002744 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d103      	bne.n	8002754 <xQueueGenericSend+0x40>
 800274c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <xQueueGenericSend+0x44>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <xQueueGenericSend+0x46>
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <xQueueGenericSend+0x60>
        __asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	2b02      	cmp	r3, #2
 8002778:	d103      	bne.n	8002782 <xQueueGenericSend+0x6e>
 800277a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	2b01      	cmp	r3, #1
 8002780:	d101      	bne.n	8002786 <xQueueGenericSend+0x72>
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <xQueueGenericSend+0x74>
 8002786:	2300      	movs	r3, #0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueGenericSend+0x8e>
        __asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	623b      	str	r3, [r7, #32]
    }
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027a2:	f001 f9cf 	bl	8003b44 <xTaskGetSchedulerState>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <xQueueGenericSend+0x9e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <xQueueGenericSend+0xa2>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <xQueueGenericSend+0xa4>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d10a      	bne.n	80027d2 <xQueueGenericSend+0xbe>
        __asm volatile
 80027bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c0:	f383 8811 	msr	BASEPRI, r3
 80027c4:	f3bf 8f6f 	isb	sy
 80027c8:	f3bf 8f4f 	dsb	sy
 80027cc:	61fb      	str	r3, [r7, #28]
    }
 80027ce:	bf00      	nop
 80027d0:	e7fe      	b.n	80027d0 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027d2:	f001 ff8f 	bl	80046f4 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	429a      	cmp	r2, r3
 80027e0:	d302      	bcc.n	80027e8 <xQueueGenericSend+0xd4>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d136      	bne.n	8002856 <xQueueGenericSend+0x142>
            {
                traceQUEUE_SEND( pxQueue );
 80027e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 fb2e 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	460b      	mov	r3, r1
 80027fa:	4601      	mov	r1, r0
 80027fc:	205a      	movs	r0, #90	; 0x5a
 80027fe:	f003 fe0f 	bl	8006420 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002808:	f000 fa78 	bl	8002cfc <prvCopyDataToQueue>
 800280c:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <xQueueGenericSend+0x124>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	3324      	adds	r3, #36	; 0x24
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fff2 	bl	8003804 <xTaskRemoveFromEventList>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d013      	beq.n	800284e <xQueueGenericSend+0x13a>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002826:	4b4d      	ldr	r3, [pc, #308]	; (800295c <xQueueGenericSend+0x248>)
 8002828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	e00a      	b.n	800284e <xQueueGenericSend+0x13a>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <xQueueGenericSend+0x13a>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800283e:	4b47      	ldr	r3, [pc, #284]	; (800295c <xQueueGenericSend+0x248>)
 8002840:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800284e:	f001 ff81 	bl	8004754 <vPortExitCritical>
                return pdPASS;
 8002852:	2301      	movs	r3, #1
 8002854:	e07d      	b.n	8002952 <xQueueGenericSend+0x23e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d110      	bne.n	800287e <xQueueGenericSend+0x16a>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800285c:	f001 ff7a 	bl	8004754 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002862:	4618      	mov	r0, r3
 8002864:	f004 faf2 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	460b      	mov	r3, r1
 8002872:	4601      	mov	r1, r0
 8002874:	205a      	movs	r0, #90	; 0x5a
 8002876:	f003 fdd3 	bl	8006420 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800287a:	2300      	movs	r3, #0
 800287c:	e069      	b.n	8002952 <xQueueGenericSend+0x23e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <xQueueGenericSend+0x17e>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4618      	mov	r0, r3
 800288a:	f001 f821 	bl	80038d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800288e:	2301      	movs	r3, #1
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002892:	f001 ff5f 	bl	8004754 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002896:	f000 fd6d 	bl	8003374 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800289a:	f001 ff2b 	bl	80046f4 <vPortEnterCritical>
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028aa:	d103      	bne.n	80028b4 <xQueueGenericSend+0x1a0>
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c0:	d103      	bne.n	80028ca <xQueueGenericSend+0x1b6>
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028ca:	f001 ff43 	bl	8004754 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ce:	1d3a      	adds	r2, r7, #4
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f001 f810 	bl	80038fc <xTaskCheckForTimeOut>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d124      	bne.n	800292c <xQueueGenericSend+0x218>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e4:	f000 fb02 	bl	8002eec <prvIsQueueFull>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d018      	beq.n	8002920 <xQueueGenericSend+0x20c>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	3310      	adds	r3, #16
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 ff32 	bl	8003760 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80028fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028fe:	f000 fa8d 	bl	8002e1c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002902:	f000 fd45 	bl	8003390 <xTaskResumeAll>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	f47f af62 	bne.w	80027d2 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <xQueueGenericSend+0x248>)
 8002910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	e758      	b.n	80027d2 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002922:	f000 fa7b 	bl	8002e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002926:	f000 fd33 	bl	8003390 <xTaskResumeAll>
 800292a:	e752      	b.n	80027d2 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800292c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800292e:	f000 fa75 	bl	8002e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002932:	f000 fd2d 	bl	8003390 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002938:	4618      	mov	r0, r3
 800293a:	f004 fa87 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	460b      	mov	r3, r1
 8002948:	4601      	mov	r1, r0
 800294a:	205a      	movs	r0, #90	; 0x5a
 800294c:	f003 fd68 	bl	8006420 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002950:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002952:	4618      	mov	r0, r3
 8002954:	3738      	adds	r7, #56	; 0x38
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	e000ed04 	.word	0xe000ed04

08002960 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b090      	sub	sp, #64	; 0x40
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <xQueueGenericSendFromISR+0x3c>
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <xQueueGenericSendFromISR+0x40>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <xQueueGenericSendFromISR+0x42>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10a      	bne.n	80029bc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80029b8:	bf00      	nop
 80029ba:	e7fe      	b.n	80029ba <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d103      	bne.n	80029ca <xQueueGenericSendFromISR+0x6a>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <xQueueGenericSendFromISR+0x6e>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <xQueueGenericSendFromISR+0x70>
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	623b      	str	r3, [r7, #32]
    }
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029ea:	f001 ff65 	bl	80048b8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80029ee:	f3ef 8211 	mrs	r2, BASEPRI
 80029f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	61fa      	str	r2, [r7, #28]
 8002a04:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002a06:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a08:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d302      	bcc.n	8002a1c <xQueueGenericSendFromISR+0xbc>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d148      	bne.n	8002aae <xQueueGenericSendFromISR+0x14e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f004 fa0c 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002a34:	4601      	mov	r1, r0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2060      	movs	r0, #96	; 0x60
 8002a3c:	f003 fc20 	bl	8006280 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a46:	f000 f959 	bl	8002cfc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002a4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a52:	d112      	bne.n	8002a7a <xQueueGenericSendFromISR+0x11a>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d025      	beq.n	8002aa8 <xQueueGenericSendFromISR+0x148>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5e:	3324      	adds	r3, #36	; 0x24
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 fecf 	bl	8003804 <xTaskRemoveFromEventList>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d01d      	beq.n	8002aa8 <xQueueGenericSendFromISR+0x148>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d01a      	beq.n	8002aa8 <xQueueGenericSendFromISR+0x148>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e016      	b.n	8002aa8 <xQueueGenericSendFromISR+0x148>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002a7a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a7e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a80:	d10a      	bne.n	8002a98 <xQueueGenericSendFromISR+0x138>
        __asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	617b      	str	r3, [r7, #20]
    }
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <xQueueGenericSendFromISR+0x136>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	b25a      	sxtb	r2, r3
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002aac:	e00b      	b.n	8002ac6 <xQueueGenericSendFromISR+0x166>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f004 f9cb 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002ab6:	4601      	mov	r1, r0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	461a      	mov	r2, r3
 8002abc:	2060      	movs	r0, #96	; 0x60
 8002abe:	f003 fbdf 	bl	8006280 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ad0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3740      	adds	r7, #64	; 0x40
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b08f      	sub	sp, #60	; 0x3c
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <xQueueReceive+0x30>
        __asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	623b      	str	r3, [r7, #32]
    }
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d103      	bne.n	8002b1a <xQueueReceive+0x3e>
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <xQueueReceive+0x42>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <xQueueReceive+0x44>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueReceive+0x5e>
        __asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	61fb      	str	r3, [r7, #28]
    }
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b3a:	f001 f803 	bl	8003b44 <xTaskGetSchedulerState>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <xQueueReceive+0x6e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <xQueueReceive+0x72>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <xQueueReceive+0x74>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueReceive+0x8e>
        __asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	61bb      	str	r3, [r7, #24]
    }
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b6a:	f001 fdc3 	bl	80046f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d02f      	beq.n	8002bda <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b7e:	f000 f927 	bl	8002dd0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 f961 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f004 f95d 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002b92:	4602      	mov	r2, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2101      	movs	r1, #1
 8002b98:	9100      	str	r1, [sp, #0]
 8002b9a:	4621      	mov	r1, r4
 8002b9c:	205c      	movs	r0, #92	; 0x5c
 8002b9e:	f003 fc3f 	bl	8006420 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	1e5a      	subs	r2, r3, #1
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00f      	beq.n	8002bd2 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	3310      	adds	r3, #16
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fe24 	bl	8003804 <xTaskRemoveFromEventList>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d007      	beq.n	8002bd2 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002bc2:	4b4d      	ldr	r3, [pc, #308]	; (8002cf8 <xQueueReceive+0x21c>)
 8002bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f3bf 8f4f 	dsb	sy
 8002bce:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002bd2:	f001 fdbf 	bl	8004754 <vPortExitCritical>
                return pdPASS;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e08a      	b.n	8002cf0 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d113      	bne.n	8002c08 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002be0:	f001 fdb8 	bl	8004754 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 f930 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002bec:	4604      	mov	r4, r0
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f004 f92c 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	9100      	str	r1, [sp, #0]
 8002bfc:	4621      	mov	r1, r4
 8002bfe:	205c      	movs	r0, #92	; 0x5c
 8002c00:	f003 fc0e 	bl	8006420 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e073      	b.n	8002cf0 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fe5c 	bl	80038d0 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c1c:	f001 fd9a 	bl	8004754 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c20:	f000 fba8 	bl	8003374 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c24:	f001 fd66 	bl	80046f4 <vPortEnterCritical>
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c2e:	b25b      	sxtb	r3, r3
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d103      	bne.n	8002c3e <xQueueReceive+0x162>
 8002c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c44:	b25b      	sxtb	r3, r3
 8002c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4a:	d103      	bne.n	8002c54 <xQueueReceive+0x178>
 8002c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c54:	f001 fd7e 	bl	8004754 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c58:	1d3a      	adds	r2, r7, #4
 8002c5a:	f107 0310 	add.w	r3, r7, #16
 8002c5e:	4611      	mov	r1, r2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fe4b 	bl	80038fc <xTaskCheckForTimeOut>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d124      	bne.n	8002cb6 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c6e:	f000 f927 	bl	8002ec0 <prvIsQueueEmpty>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d018      	beq.n	8002caa <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	3324      	adds	r3, #36	; 0x24
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fd6d 	bl	8003760 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c88:	f000 f8c8 	bl	8002e1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c8c:	f000 fb80 	bl	8003390 <xTaskResumeAll>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f47f af69 	bne.w	8002b6a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <xQueueReceive+0x21c>)
 8002c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	e75f      	b.n	8002b6a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002caa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cac:	f000 f8b6 	bl	8002e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002cb0:	f000 fb6e 	bl	8003390 <xTaskResumeAll>
 8002cb4:	e759      	b.n	8002b6a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb8:	f000 f8b0 	bl	8002e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002cbc:	f000 fb68 	bl	8003390 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc2:	f000 f8fd 	bl	8002ec0 <prvIsQueueEmpty>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f43f af4e 	beq.w	8002b6a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f004 f8bb 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f004 f8b7 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	9100      	str	r1, [sp, #0]
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	205c      	movs	r0, #92	; 0x5c
 8002cea:	f003 fb99 	bl	8006420 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002cee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3734      	adds	r7, #52	; 0x34
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd90      	pop	{r4, r7, pc}
 8002cf8:	e000ed04 	.word	0xe000ed04

08002cfc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10d      	bne.n	8002d36 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d14d      	bne.n	8002dbe <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 ff2a 	bl	8003b80 <xTaskPriorityDisinherit>
 8002d2c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	e043      	b.n	8002dbe <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d119      	bne.n	8002d70 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6858      	ldr	r0, [r3, #4]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	461a      	mov	r2, r3
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	f004 fa20 	bl	800718c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d32b      	bcc.n	8002dbe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	605a      	str	r2, [r3, #4]
 8002d6e:	e026      	b.n	8002dbe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68d8      	ldr	r0, [r3, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	461a      	mov	r2, r3
 8002d7a:	68b9      	ldr	r1, [r7, #8]
 8002d7c:	f004 fa06 	bl	800718c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	425b      	negs	r3, r3
 8002d8a:	441a      	add	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d207      	bcs.n	8002dac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	425b      	negs	r3, r3
 8002da6:	441a      	add	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d105      	bne.n	8002dbe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8002dc6:	697b      	ldr	r3, [r7, #20]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d018      	beq.n	8002e14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68da      	ldr	r2, [r3, #12]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	441a      	add	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d303      	bcc.n	8002e04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68d9      	ldr	r1, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6838      	ldr	r0, [r7, #0]
 8002e10:	f004 f9bc 	bl	800718c <memcpy>
    }
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002e24:	f001 fc66 	bl	80046f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e30:	e011      	b.n	8002e56 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3324      	adds	r3, #36	; 0x24
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fce0 	bl	8003804 <xTaskRemoveFromEventList>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002e4a:	f000 fdbd 	bl	80039c8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dce9      	bgt.n	8002e32 <prvUnlockQueue+0x16>
 8002e5e:	e000      	b.n	8002e62 <prvUnlockQueue+0x46>
                        break;
 8002e60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	22ff      	movs	r2, #255	; 0xff
 8002e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002e6a:	f001 fc73 	bl	8004754 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002e6e:	f001 fc41 	bl	80046f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e7a:	e011      	b.n	8002ea0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3310      	adds	r3, #16
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 fcbb 	bl	8003804 <xTaskRemoveFromEventList>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002e94:	f000 fd98 	bl	80039c8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002e98:	7bbb      	ldrb	r3, [r7, #14]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	dce9      	bgt.n	8002e7c <prvUnlockQueue+0x60>
 8002ea8:	e000      	b.n	8002eac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002eaa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	22ff      	movs	r2, #255	; 0xff
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002eb4:	f001 fc4e 	bl	8004754 <vPortExitCritical>
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ec8:	f001 fc14 	bl	80046f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	e001      	b.n	8002ede <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002ede:	f001 fc39 	bl	8004754 <vPortExitCritical>

    return xReturn;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ef4:	f001 fbfe 	bl	80046f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d102      	bne.n	8002f0a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002f04:	2301      	movs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	e001      	b.n	8002f0e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002f0e:	f001 fc21 	bl	8004754 <vPortExitCritical>

    return xReturn;
 8002f12:	68fb      	ldr	r3, [r7, #12]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e01e      	b.n	8002f6a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f2c:	4a13      	ldr	r2, [pc, #76]	; (8002f7c <vQueueAddToRegistry+0x60>)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d115      	bne.n	8002f64 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f38:	4910      	ldr	r1, [pc, #64]	; (8002f7c <vQueueAddToRegistry+0x60>)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002f42:	4a0e      	ldr	r2, [pc, #56]	; (8002f7c <vQueueAddToRegistry+0x60>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f003 ff7b 	bl	8006e4c <SEGGER_SYSVIEW_ShrinkId>
 8002f56:	4601      	mov	r1, r0
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	2071      	movs	r0, #113	; 0x71
 8002f5e:	f003 f98f 	bl	8006280 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002f62:	e006      	b.n	8002f72 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	3301      	adds	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b07      	cmp	r3, #7
 8002f6e:	d9dd      	bls.n	8002f2c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20014428 	.word	0x20014428

08002f80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f90:	f001 fbb0 	bl	80046f4 <vPortEnterCritical>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d103      	bne.n	8002faa <vQueueWaitForMessageRestricted+0x2a>
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fb0:	b25b      	sxtb	r3, r3
 8002fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb6:	d103      	bne.n	8002fc0 <vQueueWaitForMessageRestricted+0x40>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc0:	f001 fbc8 	bl	8004754 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3324      	adds	r3, #36	; 0x24
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fbe7 	bl	80037a8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002fda:	6978      	ldr	r0, [r7, #20]
 8002fdc:	f7ff ff1e 	bl	8002e1c <prvUnlockQueue>
    }
 8002fe0:	bf00      	nop
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af04      	add	r7, sp, #16
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fc9b 	bl	8004938 <pvPortMalloc>
 8003002:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00e      	beq.n	8003028 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800300a:	2058      	movs	r0, #88	; 0x58
 800300c:	f001 fc94 	bl	8004938 <pvPortMalloc>
 8003010:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
 800301e:	e005      	b.n	800302c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8003020:	6978      	ldr	r0, [r7, #20]
 8003022:	f001 fd69 	bl	8004af8 <vPortFree>
 8003026:	e001      	b.n	800302c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d013      	beq.n	800305a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003032:	88fa      	ldrh	r2, [r7, #6]
 8003034:	2300      	movs	r3, #0
 8003036:	9303      	str	r3, [sp, #12]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	9302      	str	r3, [sp, #8]
 800303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f80e 	bl	800306a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800304e:	69f8      	ldr	r0, [r7, #28]
 8003050:	f000 f8a2 	bl	8003198 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003054:	2301      	movs	r3, #1
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	e002      	b.n	8003060 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003060:	69bb      	ldr	r3, [r7, #24]
    }
 8003062:	4618      	mov	r0, r3
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b088      	sub	sp, #32
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	461a      	mov	r2, r3
 8003082:	21a5      	movs	r1, #165	; 0xa5
 8003084:	f004 f890 	bl	80071a8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003092:	3b01      	subs	r3, #1
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f023 0307 	bic.w	r3, r3, #7
 80030a0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80030ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b0:	f383 8811 	msr	BASEPRI, r3
 80030b4:	f3bf 8f6f 	isb	sy
 80030b8:	f3bf 8f4f 	dsb	sy
 80030bc:	617b      	str	r3, [r7, #20]
    }
 80030be:	bf00      	nop
 80030c0:	e7fe      	b.n	80030c0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01f      	beq.n	8003108 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030c8:	2300      	movs	r3, #0
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	e012      	b.n	80030f4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	7819      	ldrb	r1, [r3, #0]
 80030d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	3334      	adds	r3, #52	; 0x34
 80030de:	460a      	mov	r2, r1
 80030e0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d006      	beq.n	80030fc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	d9e9      	bls.n	80030ce <prvInitialiseNewTask+0x64>
 80030fa:	e000      	b.n	80030fe <prvInitialiseNewTask+0x94>
            {
                break;
 80030fc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003106:	e003      	b.n	8003110 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	2b04      	cmp	r3, #4
 8003114:	d901      	bls.n	800311a <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003116:	2304      	movs	r3, #4
 8003118:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800311a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003124:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003128:	2200      	movs	r2, #0
 800312a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	3304      	adds	r3, #4
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff f96b 	bl	800240c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	3318      	adds	r3, #24
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff f966 	bl	800240c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003144:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	f1c3 0205 	rsb	r2, r3, #5
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003154:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	3350      	adds	r3, #80	; 0x50
 800315a:	2204      	movs	r2, #4
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f004 f822 	bl	80071a8 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	3354      	adds	r3, #84	; 0x54
 8003168:	2201      	movs	r2, #1
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f004 f81b 	bl	80071a8 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	69b8      	ldr	r0, [r7, #24]
 8003178:	f001 f90c 	bl	8004394 <pxPortInitialiseStack>
 800317c:	4602      	mov	r2, r0
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800318e:	bf00      	nop
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003198:	b5b0      	push	{r4, r5, r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af02      	add	r7, sp, #8
 800319e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80031a0:	f001 faa8 	bl	80046f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80031a4:	4b3b      	ldr	r3, [pc, #236]	; (8003294 <prvAddNewTaskToReadyList+0xfc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a3a      	ldr	r2, [pc, #232]	; (8003294 <prvAddNewTaskToReadyList+0xfc>)
 80031ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80031ae:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80031b6:	4a38      	ldr	r2, [pc, #224]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <prvAddNewTaskToReadyList+0xfc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d110      	bne.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80031c4:	f000 fc24 	bl	8003a10 <prvInitialiseTaskLists>
 80031c8:	e00d      	b.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80031ca:	4b34      	ldr	r3, [pc, #208]	; (800329c <prvAddNewTaskToReadyList+0x104>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031d2:	4b31      	ldr	r3, [pc, #196]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	429a      	cmp	r2, r3
 80031de:	d802      	bhi.n	80031e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80031e0:	4a2d      	ldr	r2, [pc, #180]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80031e6:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <prvAddNewTaskToReadyList+0x108>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3301      	adds	r3, #1
 80031ec:	4a2c      	ldr	r2, [pc, #176]	; (80032a0 <prvAddNewTaskToReadyList+0x108>)
 80031ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <prvAddNewTaskToReadyList+0x108>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d016      	beq.n	800322c <prvAddNewTaskToReadyList+0x94>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fcfd 	bl	8006c00 <SEGGER_SYSVIEW_OnTaskCreate>
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	461d      	mov	r5, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461c      	mov	r4, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	1ae3      	subs	r3, r4, r3
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	462b      	mov	r3, r5
 8003228:	f001 fe46 	bl	8004eb8 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	f003 fd6a 	bl	8006d08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	2201      	movs	r2, #1
 800323a:	409a      	lsls	r2, r3
 800323c:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <prvAddNewTaskToReadyList+0x10c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <prvAddNewTaskToReadyList+0x10c>)
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <prvAddNewTaskToReadyList+0x110>)
 8003254:	441a      	add	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	4619      	mov	r1, r3
 800325c:	4610      	mov	r0, r2
 800325e:	f7ff f8e2 	bl	8002426 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003262:	f001 fa77 	bl	8004754 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <prvAddNewTaskToReadyList+0x104>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00e      	beq.n	800328c <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <prvAddNewTaskToReadyList+0x100>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	429a      	cmp	r2, r3
 800327a:	d207      	bcs.n	800328c <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <prvAddNewTaskToReadyList+0x114>)
 800327e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bdb0      	pop	{r4, r5, r7, pc}
 8003294:	2000016c 	.word	0x2000016c
 8003298:	20000094 	.word	0x20000094
 800329c:	20000178 	.word	0x20000178
 80032a0:	20000188 	.word	0x20000188
 80032a4:	20000174 	.word	0x20000174
 80032a8:	20000098 	.word	0x20000098
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <vTaskStartScheduler+0xa4>)
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	2282      	movs	r2, #130	; 0x82
 80032c2:	4925      	ldr	r1, [pc, #148]	; (8003358 <vTaskStartScheduler+0xa8>)
 80032c4:	4825      	ldr	r0, [pc, #148]	; (800335c <vTaskStartScheduler+0xac>)
 80032c6:	f7ff fe8f 	bl	8002fe8 <xTaskCreate>
 80032ca:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80032d2:	f000 fd4d 	bl	8003d70 <xTimerCreateTimerTask>
 80032d6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d124      	bne.n	8003328 <vTaskStartScheduler+0x78>
        __asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	60bb      	str	r3, [r7, #8]
    }
 80032f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80032f2:	4b1b      	ldr	r3, [pc, #108]	; (8003360 <vTaskStartScheduler+0xb0>)
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80032fa:	4b1a      	ldr	r3, [pc, #104]	; (8003364 <vTaskStartScheduler+0xb4>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003300:	4b19      	ldr	r3, [pc, #100]	; (8003368 <vTaskStartScheduler+0xb8>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003306:	4b19      	ldr	r3, [pc, #100]	; (800336c <vTaskStartScheduler+0xbc>)
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	4b12      	ldr	r3, [pc, #72]	; (8003354 <vTaskStartScheduler+0xa4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d102      	bne.n	8003318 <vTaskStartScheduler+0x68>
 8003312:	f003 fc59 	bl	8006bc8 <SEGGER_SYSVIEW_OnIdle>
 8003316:	e004      	b.n	8003322 <vTaskStartScheduler+0x72>
 8003318:	4b14      	ldr	r3, [pc, #80]	; (800336c <vTaskStartScheduler+0xbc>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f003 fcb1 	bl	8006c84 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003322:	f001 f8c7 	bl	80044b4 <xPortStartScheduler>
 8003326:	e00e      	b.n	8003346 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332e:	d10a      	bne.n	8003346 <vTaskStartScheduler+0x96>
        __asm volatile
 8003330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	607b      	str	r3, [r7, #4]
    }
 8003342:	bf00      	nop
 8003344:	e7fe      	b.n	8003344 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <vTaskStartScheduler+0xc0>)
 8003348:	681b      	ldr	r3, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000190 	.word	0x20000190
 8003358:	08008490 	.word	0x08008490
 800335c:	080039e1 	.word	0x080039e1
 8003360:	2000018c 	.word	0x2000018c
 8003364:	20000178 	.word	0x20000178
 8003368:	20000170 	.word	0x20000170
 800336c:	20000094 	.word	0x20000094
 8003370:	2000000c 	.word	0x2000000c

08003374 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <vTaskSuspendAll+0x18>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	4a03      	ldr	r2, [pc, #12]	; (800338c <vTaskSuspendAll+0x18>)
 8003380:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	20000194 	.word	0x20000194

08003390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800339a:	2300      	movs	r3, #0
 800339c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <xTaskResumeAll+0x11c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <xTaskResumeAll+0x2c>
        __asm volatile
 80033a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033aa:	f383 8811 	msr	BASEPRI, r3
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	603b      	str	r3, [r7, #0]
    }
 80033b8:	bf00      	nop
 80033ba:	e7fe      	b.n	80033ba <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80033bc:	f001 f99a 	bl	80046f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80033c0:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <xTaskResumeAll+0x11c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	4a39      	ldr	r2, [pc, #228]	; (80034ac <xTaskResumeAll+0x11c>)
 80033c8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <xTaskResumeAll+0x11c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d165      	bne.n	800349e <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033d2:	4b37      	ldr	r3, [pc, #220]	; (80034b0 <xTaskResumeAll+0x120>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d061      	beq.n	800349e <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033da:	e032      	b.n	8003442 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033dc:	4b35      	ldr	r3, [pc, #212]	; (80034b4 <xTaskResumeAll+0x124>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	3318      	adds	r3, #24
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff f879 	bl	80024e0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3304      	adds	r3, #4
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f874 	bl	80024e0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fc84 	bl	8006d08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <xTaskResumeAll+0x128>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <xTaskResumeAll+0x128>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	4613      	mov	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4a27      	ldr	r2, [pc, #156]	; (80034bc <xTaskResumeAll+0x12c>)
 8003420:	441a      	add	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3304      	adds	r3, #4
 8003426:	4619      	mov	r1, r3
 8003428:	4610      	mov	r0, r2
 800342a:	f7fe fffc 	bl	8002426 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003432:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <xTaskResumeAll+0x130>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	429a      	cmp	r2, r3
 800343a:	d302      	bcc.n	8003442 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 800343c:	4b21      	ldr	r3, [pc, #132]	; (80034c4 <xTaskResumeAll+0x134>)
 800343e:	2201      	movs	r2, #1
 8003440:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003442:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <xTaskResumeAll+0x124>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1c8      	bne.n	80033dc <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003450:	f000 fb5c 	bl	8003b0c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003454:	4b1c      	ldr	r3, [pc, #112]	; (80034c8 <xTaskResumeAll+0x138>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d010      	beq.n	8003482 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003460:	f000 f858 	bl	8003514 <xTaskIncrementTick>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 800346a:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <xTaskResumeAll+0x134>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f1      	bne.n	8003460 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <xTaskResumeAll+0x138>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <xTaskResumeAll+0x134>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800348a:	2301      	movs	r3, #1
 800348c:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <xTaskResumeAll+0x13c>)
 8003490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800349e:	f001 f959 	bl	8004754 <vPortExitCritical>

    return xAlreadyYielded;
 80034a2:	68bb      	ldr	r3, [r7, #8]
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000194 	.word	0x20000194
 80034b0:	2000016c 	.word	0x2000016c
 80034b4:	2000012c 	.word	0x2000012c
 80034b8:	20000174 	.word	0x20000174
 80034bc:	20000098 	.word	0x20000098
 80034c0:	20000094 	.word	0x20000094
 80034c4:	20000180 	.word	0x20000180
 80034c8:	2000017c 	.word	0x2000017c
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <xTaskGetTickCount+0x1c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034dc:	687b      	ldr	r3, [r7, #4]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000170 	.word	0x20000170

080034f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034f6:	f001 f9df 	bl	80048b8 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80034fe:	4b04      	ldr	r3, [pc, #16]	; (8003510 <xTaskGetTickCountFromISR+0x20>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003504:	683b      	ldr	r3, [r7, #0]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000170 	.word	0x20000170

08003514 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800351e:	4b50      	ldr	r3, [pc, #320]	; (8003660 <xTaskIncrementTick+0x14c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 8092 	bne.w	800364c <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003528:	4b4e      	ldr	r3, [pc, #312]	; (8003664 <xTaskIncrementTick+0x150>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003530:	4a4c      	ldr	r2, [pc, #304]	; (8003664 <xTaskIncrementTick+0x150>)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d120      	bne.n	800357e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800353c:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <xTaskIncrementTick+0x154>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <xTaskIncrementTick+0x48>
        __asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	603b      	str	r3, [r7, #0]
    }
 8003558:	bf00      	nop
 800355a:	e7fe      	b.n	800355a <xTaskIncrementTick+0x46>
 800355c:	4b42      	ldr	r3, [pc, #264]	; (8003668 <xTaskIncrementTick+0x154>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	60fb      	str	r3, [r7, #12]
 8003562:	4b42      	ldr	r3, [pc, #264]	; (800366c <xTaskIncrementTick+0x158>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a40      	ldr	r2, [pc, #256]	; (8003668 <xTaskIncrementTick+0x154>)
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4a40      	ldr	r2, [pc, #256]	; (800366c <xTaskIncrementTick+0x158>)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	4b3f      	ldr	r3, [pc, #252]	; (8003670 <xTaskIncrementTick+0x15c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	4a3e      	ldr	r2, [pc, #248]	; (8003670 <xTaskIncrementTick+0x15c>)
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	f000 fac7 	bl	8003b0c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800357e:	4b3d      	ldr	r3, [pc, #244]	; (8003674 <xTaskIncrementTick+0x160>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d34c      	bcc.n	8003622 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003588:	4b37      	ldr	r3, [pc, #220]	; (8003668 <xTaskIncrementTick+0x154>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d104      	bne.n	800359c <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <xTaskIncrementTick+0x160>)
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	601a      	str	r2, [r3, #0]
                    break;
 800359a:	e042      	b.n	8003622 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800359c:	4b32      	ldr	r3, [pc, #200]	; (8003668 <xTaskIncrementTick+0x154>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d203      	bcs.n	80035bc <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035b4:	4a2f      	ldr	r2, [pc, #188]	; (8003674 <xTaskIncrementTick+0x160>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035ba:	e032      	b.n	8003622 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	3304      	adds	r3, #4
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe ff8d 	bl	80024e0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	3318      	adds	r3, #24
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe ff84 	bl	80024e0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4618      	mov	r0, r3
 80035dc:	f003 fb94 	bl	8006d08 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	4b23      	ldr	r3, [pc, #140]	; (8003678 <xTaskIncrementTick+0x164>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	4a22      	ldr	r2, [pc, #136]	; (8003678 <xTaskIncrementTick+0x164>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f6:	4613      	mov	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4a1f      	ldr	r2, [pc, #124]	; (800367c <xTaskIncrementTick+0x168>)
 8003600:	441a      	add	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3304      	adds	r3, #4
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fe ff0c 	bl	8002426 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003612:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <xTaskIncrementTick+0x16c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	429a      	cmp	r2, r3
 800361a:	d3b5      	bcc.n	8003588 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003620:	e7b2      	b.n	8003588 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003622:	4b17      	ldr	r3, [pc, #92]	; (8003680 <xTaskIncrementTick+0x16c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003628:	4914      	ldr	r1, [pc, #80]	; (800367c <xTaskIncrementTick+0x168>)
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d901      	bls.n	800363e <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800363a:	2301      	movs	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800363e:	4b11      	ldr	r3, [pc, #68]	; (8003684 <xTaskIncrementTick+0x170>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d007      	beq.n	8003656 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 8003646:	2301      	movs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
 800364a:	e004      	b.n	8003656 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800364c:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <xTaskIncrementTick+0x174>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <xTaskIncrementTick+0x174>)
 8003654:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003656:	697b      	ldr	r3, [r7, #20]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000194 	.word	0x20000194
 8003664:	20000170 	.word	0x20000170
 8003668:	20000124 	.word	0x20000124
 800366c:	20000128 	.word	0x20000128
 8003670:	20000184 	.word	0x20000184
 8003674:	2000018c 	.word	0x2000018c
 8003678:	20000174 	.word	0x20000174
 800367c:	20000098 	.word	0x20000098
 8003680:	20000094 	.word	0x20000094
 8003684:	20000180 	.word	0x20000180
 8003688:	2000017c 	.word	0x2000017c

0800368c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <vTaskSwitchContext+0xbc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800369a:	4b2c      	ldr	r3, [pc, #176]	; (800374c <vTaskSwitchContext+0xc0>)
 800369c:	2201      	movs	r2, #1
 800369e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80036a0:	e04d      	b.n	800373e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 80036a2:	4b2a      	ldr	r3, [pc, #168]	; (800374c <vTaskSwitchContext+0xc0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a8:	4b29      	ldr	r3, [pc, #164]	; (8003750 <vTaskSwitchContext+0xc4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	fab3 f383 	clz	r3, r3
 80036b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80036b6:	7afb      	ldrb	r3, [r7, #11]
 80036b8:	f1c3 031f 	rsb	r3, r3, #31
 80036bc:	617b      	str	r3, [r7, #20]
 80036be:	4925      	ldr	r1, [pc, #148]	; (8003754 <vTaskSwitchContext+0xc8>)
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4613      	mov	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	607b      	str	r3, [r7, #4]
    }
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <vTaskSwitchContext+0x5a>
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4a18      	ldr	r2, [pc, #96]	; (8003754 <vTaskSwitchContext+0xc8>)
 80036f4:	4413      	add	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	3308      	adds	r3, #8
 800370a:	429a      	cmp	r2, r3
 800370c:	d104      	bne.n	8003718 <vTaskSwitchContext+0x8c>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	4a0e      	ldr	r2, [pc, #56]	; (8003758 <vTaskSwitchContext+0xcc>)
 8003720:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <vTaskSwitchContext+0xcc>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <vTaskSwitchContext+0xd0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d102      	bne.n	8003734 <vTaskSwitchContext+0xa8>
 800372e:	f003 fa4b 	bl	8006bc8 <SEGGER_SYSVIEW_OnIdle>
}
 8003732:	e004      	b.n	800373e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <vTaskSwitchContext+0xcc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f003 faa3 	bl	8006c84 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800373e:	bf00      	nop
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20000194 	.word	0x20000194
 800374c:	20000180 	.word	0x20000180
 8003750:	20000174 	.word	0x20000174
 8003754:	20000098 	.word	0x20000098
 8003758:	20000094 	.word	0x20000094
 800375c:	20000190 	.word	0x20000190

08003760 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10a      	bne.n	8003786 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003774:	f383 8811 	msr	BASEPRI, r3
 8003778:	f3bf 8f6f 	isb	sy
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	60fb      	str	r3, [r7, #12]
    }
 8003782:	bf00      	nop
 8003784:	e7fe      	b.n	8003784 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003786:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <vTaskPlaceOnEventList+0x44>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3318      	adds	r3, #24
 800378c:	4619      	mov	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fe fe6d 	bl	800246e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003794:	2101      	movs	r1, #1
 8003796:	6838      	ldr	r0, [r7, #0]
 8003798:	f000 fa72 	bl	8003c80 <prvAddCurrentTaskToDelayedList>
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000094 	.word	0x20000094

080037a8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80037ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037be:	f383 8811 	msr	BASEPRI, r3
 80037c2:	f3bf 8f6f 	isb	sy
 80037c6:	f3bf 8f4f 	dsb	sy
 80037ca:	617b      	str	r3, [r7, #20]
    }
 80037cc:	bf00      	nop
 80037ce:	e7fe      	b.n	80037ce <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <vTaskPlaceOnEventListRestricted+0x58>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3318      	adds	r3, #24
 80037d6:	4619      	mov	r1, r3
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f7fe fe24 	bl	8002426 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 80037e4:	f04f 33ff 	mov.w	r3, #4294967295
 80037e8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037ea:	2024      	movs	r0, #36	; 0x24
 80037ec:	f002 fcee 	bl	80061cc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	68b8      	ldr	r0, [r7, #8]
 80037f4:	f000 fa44 	bl	8003c80 <prvAddCurrentTaskToDelayedList>
    }
 80037f8:	bf00      	nop
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000094 	.word	0x20000094

08003804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10a      	bne.n	8003830 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	60fb      	str	r3, [r7, #12]
    }
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	3318      	adds	r3, #24
 8003834:	4618      	mov	r0, r3
 8003836:	f7fe fe53 	bl	80024e0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800383a:	4b1f      	ldr	r3, [pc, #124]	; (80038b8 <xTaskRemoveFromEventList+0xb4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d120      	bne.n	8003884 <xTaskRemoveFromEventList+0x80>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3304      	adds	r3, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fe4a 	bl	80024e0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4618      	mov	r0, r3
 8003850:	f003 fa5a 	bl	8006d08 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	2201      	movs	r2, #1
 800385a:	409a      	lsls	r2, r3
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <xTaskRemoveFromEventList+0xb8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4313      	orrs	r3, r2
 8003862:	4a16      	ldr	r2, [pc, #88]	; (80038bc <xTaskRemoveFromEventList+0xb8>)
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4a13      	ldr	r2, [pc, #76]	; (80038c0 <xTaskRemoveFromEventList+0xbc>)
 8003874:	441a      	add	r2, r3
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	3304      	adds	r3, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4610      	mov	r0, r2
 800387e:	f7fe fdd2 	bl	8002426 <vListInsertEnd>
 8003882:	e005      	b.n	8003890 <xTaskRemoveFromEventList+0x8c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	3318      	adds	r3, #24
 8003888:	4619      	mov	r1, r3
 800388a:	480e      	ldr	r0, [pc, #56]	; (80038c4 <xTaskRemoveFromEventList+0xc0>)
 800388c:	f7fe fdcb 	bl	8002426 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <xTaskRemoveFromEventList+0xc4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	429a      	cmp	r2, r3
 800389c:	d905      	bls.n	80038aa <xTaskRemoveFromEventList+0xa6>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <xTaskRemoveFromEventList+0xc8>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e001      	b.n	80038ae <xTaskRemoveFromEventList+0xaa>
    }
    else
    {
        xReturn = pdFALSE;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80038ae:	697b      	ldr	r3, [r7, #20]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000194 	.word	0x20000194
 80038bc:	20000174 	.word	0x20000174
 80038c0:	20000098 	.word	0x20000098
 80038c4:	2000012c 	.word	0x2000012c
 80038c8:	20000094 	.word	0x20000094
 80038cc:	20000180 	.word	0x20000180

080038d0 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038d8:	4b06      	ldr	r3, [pc, #24]	; (80038f4 <vTaskInternalSetTimeOutState+0x24>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038e0:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <vTaskInternalSetTimeOutState+0x28>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	605a      	str	r2, [r3, #4]
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	20000184 	.word	0x20000184
 80038f8:	20000170 	.word	0x20000170

080038fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b088      	sub	sp, #32
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10a      	bne.n	8003922 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	613b      	str	r3, [r7, #16]
    }
 800391e:	bf00      	nop
 8003920:	e7fe      	b.n	8003920 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10a      	bne.n	800393e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	60fb      	str	r3, [r7, #12]
    }
 800393a:	bf00      	nop
 800393c:	e7fe      	b.n	800393c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800393e:	f000 fed9 	bl	80046f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003942:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <xTaskCheckForTimeOut+0xc4>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d102      	bne.n	8003962 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800395c:	2300      	movs	r3, #0
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	e026      	b.n	80039b0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b17      	ldr	r3, [pc, #92]	; (80039c4 <xTaskCheckForTimeOut+0xc8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d00a      	beq.n	8003984 <xTaskCheckForTimeOut+0x88>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	429a      	cmp	r2, r3
 8003976:	d305      	bcc.n	8003984 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003978:	2301      	movs	r3, #1
 800397a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e015      	b.n	80039b0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	429a      	cmp	r2, r3
 800398c:	d20b      	bcs.n	80039a6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	1ad2      	subs	r2, r2, r3
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff ff98 	bl	80038d0 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	e004      	b.n	80039b0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039ac:	2301      	movs	r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039b0:	f000 fed0 	bl	8004754 <vPortExitCritical>

    return xReturn;
 80039b4:	69fb      	ldr	r3, [r7, #28]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	20000170 	.word	0x20000170
 80039c4:	20000184 	.word	0x20000184

080039c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <vTaskMissedYield+0x14>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	20000180 	.word	0x20000180

080039e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039e8:	f000 f852 	bl	8003a90 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <prvIdleTask+0x28>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d9f9      	bls.n	80039e8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <prvIdleTask+0x2c>)
 80039f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003a04:	e7f0      	b.n	80039e8 <prvIdleTask+0x8>
 8003a06:	bf00      	nop
 8003a08:	20000098 	.word	0x20000098
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	e00c      	b.n	8003a36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <prvInitialiseTaskLists+0x60>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fcce 	bl	80023cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3301      	adds	r3, #1
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d9ef      	bls.n	8003a1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a3c:	480d      	ldr	r0, [pc, #52]	; (8003a74 <prvInitialiseTaskLists+0x64>)
 8003a3e:	f7fe fcc5 	bl	80023cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a42:	480d      	ldr	r0, [pc, #52]	; (8003a78 <prvInitialiseTaskLists+0x68>)
 8003a44:	f7fe fcc2 	bl	80023cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a48:	480c      	ldr	r0, [pc, #48]	; (8003a7c <prvInitialiseTaskLists+0x6c>)
 8003a4a:	f7fe fcbf 	bl	80023cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a4e:	480c      	ldr	r0, [pc, #48]	; (8003a80 <prvInitialiseTaskLists+0x70>)
 8003a50:	f7fe fcbc 	bl	80023cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a54:	480b      	ldr	r0, [pc, #44]	; (8003a84 <prvInitialiseTaskLists+0x74>)
 8003a56:	f7fe fcb9 	bl	80023cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <prvInitialiseTaskLists+0x78>)
 8003a5c:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <prvInitialiseTaskLists+0x64>)
 8003a5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <prvInitialiseTaskLists+0x7c>)
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <prvInitialiseTaskLists+0x68>)
 8003a64:	601a      	str	r2, [r3, #0]
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000098 	.word	0x20000098
 8003a74:	200000fc 	.word	0x200000fc
 8003a78:	20000110 	.word	0x20000110
 8003a7c:	2000012c 	.word	0x2000012c
 8003a80:	20000140 	.word	0x20000140
 8003a84:	20000158 	.word	0x20000158
 8003a88:	20000124 	.word	0x20000124
 8003a8c:	20000128 	.word	0x20000128

08003a90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a96:	e019      	b.n	8003acc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a98:	f000 fe2c 	bl	80046f4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a9c:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <prvCheckTasksWaitingTermination+0x50>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe fd19 	bl	80024e0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <prvCheckTasksWaitingTermination+0x54>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <prvCheckTasksWaitingTermination+0x54>)
 8003ab6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <prvCheckTasksWaitingTermination+0x58>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <prvCheckTasksWaitingTermination+0x58>)
 8003ac0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003ac2:	f000 fe47 	bl	8004754 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f810 	bl	8003aec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <prvCheckTasksWaitingTermination+0x58>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e1      	bne.n	8003a98 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000140 	.word	0x20000140
 8003ae4:	2000016c 	.word	0x2000016c
 8003ae8:	20000154 	.word	0x20000154

08003aec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fffd 	bl	8004af8 <vPortFree>
                vPortFree( pxTCB );
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fffa 	bl	8004af8 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b10:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <prvResetNextTaskUnblockTime+0x30>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d104      	bne.n	8003b24 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b1a:	4b09      	ldr	r3, [pc, #36]	; (8003b40 <prvResetNextTaskUnblockTime+0x34>)
 8003b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b20:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b22:	e005      	b.n	8003b30 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <prvResetNextTaskUnblockTime+0x30>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <prvResetNextTaskUnblockTime+0x34>)
 8003b2e:	6013      	str	r3, [r2, #0]
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	20000124 	.word	0x20000124
 8003b40:	2000018c 	.word	0x2000018c

08003b44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <xTaskGetSchedulerState+0x34>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b52:	2301      	movs	r3, #1
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	e008      	b.n	8003b6a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <xTaskGetSchedulerState+0x38>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b60:	2302      	movs	r3, #2
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	e001      	b.n	8003b6a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b66:	2300      	movs	r3, #0
 8003b68:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b6a:	687b      	ldr	r3, [r7, #4]
    }
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	20000178 	.word	0x20000178
 8003b7c:	20000194 	.word	0x20000194

08003b80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d068      	beq.n	8003c68 <xTaskPriorityDisinherit+0xe8>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b96:	4b37      	ldr	r3, [pc, #220]	; (8003c74 <xTaskPriorityDisinherit+0xf4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d00a      	beq.n	8003bb6 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	60fb      	str	r3, [r7, #12]
    }
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	60bb      	str	r3, [r7, #8]
    }
 8003bd0:	bf00      	nop
 8003bd2:	e7fe      	b.n	8003bd2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d03e      	beq.n	8003c68 <xTaskPriorityDisinherit+0xe8>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d13a      	bne.n	8003c68 <xTaskPriorityDisinherit+0xe8>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fe fc72 	bl	80024e0 <uxListRemove>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	2201      	movs	r2, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <xTaskPriorityDisinherit+0xf8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4013      	ands	r3, r2
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <xTaskPriorityDisinherit+0xf8>)
 8003c16:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	204a      	movs	r0, #74	; 0x4a
 8003c1e:	f002 faf3 	bl	8006208 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	f1c3 0205 	rsb	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <xTaskPriorityDisinherit+0xf8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <xTaskPriorityDisinherit+0xf8>)
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4a09      	ldr	r2, [pc, #36]	; (8003c7c <xTaskPriorityDisinherit+0xfc>)
 8003c56:	441a      	add	r2, r3
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	4610      	mov	r0, r2
 8003c60:	f7fe fbe1 	bl	8002426 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c64:	2301      	movs	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c68:	697b      	ldr	r3, [r7, #20]
    }
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000094 	.word	0x20000094
 8003c78:	20000174 	.word	0x20000174
 8003c7c:	20000098 	.word	0x20000098

08003c80 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c8a:	4b32      	ldr	r3, [pc, #200]	; (8003d54 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c90:	4b31      	ldr	r3, [pc, #196]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fc22 	bl	80024e0 <uxListRemove>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ca2:	4b2d      	ldr	r3, [pc, #180]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	2201      	movs	r2, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	4b2a      	ldr	r3, [pc, #168]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003cb8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d110      	bne.n	8003ce4 <prvAddCurrentTaskToDelayedList+0x64>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003cc8:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	211b      	movs	r1, #27
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f003 f85c 	bl	8006d8c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4820      	ldr	r0, [pc, #128]	; (8003d60 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003cde:	f7fe fba2 	bl	8002426 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ce2:	e032      	b.n	8003d4a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cec:	4b1a      	ldr	r3, [pc, #104]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d20f      	bcs.n	8003d1c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003cfc:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2104      	movs	r1, #4
 8003d02:	4618      	mov	r0, r3
 8003d04:	f003 f842 	bl	8006d8c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d08:	4b16      	ldr	r3, [pc, #88]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4b12      	ldr	r3, [pc, #72]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3304      	adds	r3, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7fe fbaa 	bl	800246e <vListInsert>
}
 8003d1a:	e016      	b.n	8003d4a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003d1c:	4b0e      	ldr	r3, [pc, #56]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2104      	movs	r1, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f003 f832 	bl	8006d8c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d28:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f7fe fb9a 	bl	800246e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d202      	bcs.n	8003d4a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d44:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xec>)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	6013      	str	r3, [r2, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000170 	.word	0x20000170
 8003d58:	20000094 	.word	0x20000094
 8003d5c:	20000174 	.word	0x20000174
 8003d60:	20000158 	.word	0x20000158
 8003d64:	20000128 	.word	0x20000128
 8003d68:	20000124 	.word	0x20000124
 8003d6c:	2000018c 	.word	0x2000018c

08003d70 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d7a:	f000 fad5 	bl	8004328 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d7e:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <xTimerCreateTimerTask+0x54>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <xTimerCreateTimerTask+0x58>)
 8003d88:	9301      	str	r3, [sp, #4]
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d94:	490d      	ldr	r1, [pc, #52]	; (8003dcc <xTimerCreateTimerTask+0x5c>)
 8003d96:	480e      	ldr	r0, [pc, #56]	; (8003dd0 <xTimerCreateTimerTask+0x60>)
 8003d98:	f7ff f926 	bl	8002fe8 <xTaskCreate>
 8003d9c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	603b      	str	r3, [r7, #0]
    }
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003dba:	687b      	ldr	r3, [r7, #4]
    }
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	200001c8 	.word	0x200001c8
 8003dc8:	200001cc 	.word	0x200001cc
 8003dcc:	08008498 	.word	0x08008498
 8003dd0:	08003f09 	.word	0x08003f09

08003dd4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08a      	sub	sp, #40	; 0x28
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <xTimerGenericCommand+0x2e>
        __asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	623b      	str	r3, [r7, #32]
    }
 8003dfe:	bf00      	nop
 8003e00:	e7fe      	b.n	8003e00 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003e02:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <xTimerGenericCommand+0x98>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d02a      	beq.n	8003e60 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	dc18      	bgt.n	8003e4e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e1c:	f7ff fe92 	bl	8003b44 <xTaskGetSchedulerState>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d109      	bne.n	8003e3a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e26:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <xTimerGenericCommand+0x98>)
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	f107 0114 	add.w	r1, r7, #20
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e32:	f7fe fc6f 	bl	8002714 <xQueueGenericSend>
 8003e36:	6278      	str	r0, [r7, #36]	; 0x24
 8003e38:	e012      	b.n	8003e60 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	; (8003e6c <xTimerGenericCommand+0x98>)
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	f107 0114 	add.w	r1, r7, #20
 8003e42:	2300      	movs	r3, #0
 8003e44:	2200      	movs	r2, #0
 8003e46:	f7fe fc65 	bl	8002714 <xQueueGenericSend>
 8003e4a:	6278      	str	r0, [r7, #36]	; 0x24
 8003e4c:	e008      	b.n	8003e60 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <xTimerGenericCommand+0x98>)
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	f107 0114 	add.w	r1, r7, #20
 8003e56:	2300      	movs	r3, #0
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	f7fe fd81 	bl	8002960 <xQueueGenericSendFromISR>
 8003e5e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003e62:	4618      	mov	r0, r3
 8003e64:	3728      	adds	r7, #40	; 0x28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200001c8 	.word	0x200001c8

08003e70 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e7a:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <prvProcessExpiredTimer+0x94>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3304      	adds	r3, #4
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe fb29 	bl	80024e0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d022      	beq.n	8003ee2 <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	699a      	ldr	r2, [r3, #24]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	18d1      	adds	r1, r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	6978      	ldr	r0, [r7, #20]
 8003eaa:	f000 f8d1 	bl	8004050 <prvInsertTimerInActiveList>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01f      	beq.n	8003ef4 <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	2300      	movs	r3, #0
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f7ff ff88 	bl	8003dd4 <xTimerGenericCommand>
 8003ec4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d113      	bne.n	8003ef4 <prvProcessExpiredTimer+0x84>
        __asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	60fb      	str	r3, [r7, #12]
    }
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ee8:	f023 0301 	bic.w	r3, r3, #1
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	6978      	ldr	r0, [r7, #20]
 8003efa:	4798      	blx	r3
    }
 8003efc:	bf00      	nop
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200001c0 	.word	0x200001c0

08003f08 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f10:	f107 0308 	add.w	r3, r7, #8
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 f857 	bl	8003fc8 <prvGetNextExpireTime>
 8003f1a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f803 	bl	8003f2c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f26:	f000 f8d5 	bl	80040d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f2a:	e7f1      	b.n	8003f10 <prvTimerTask+0x8>

08003f2c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f36:	f7ff fa1d 	bl	8003374 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f3a:	f107 0308 	add.w	r3, r7, #8
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f866 	bl	8004010 <prvSampleTimeNow>
 8003f44:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d130      	bne.n	8003fae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <prvProcessTimerOrBlockTask+0x3c>
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d806      	bhi.n	8003f68 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f5a:	f7ff fa19 	bl	8003390 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff85 	bl	8003e70 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f66:	e024      	b.n	8003fb2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f6e:	4b13      	ldr	r3, [pc, #76]	; (8003fbc <prvProcessTimerOrBlockTask+0x90>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <prvProcessTimerOrBlockTask+0x50>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <prvProcessTimerOrBlockTask+0x52>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f80:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <prvProcessTimerOrBlockTask+0x94>)
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7fe fff7 	bl	8002f80 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f92:	f7ff f9fd 	bl	8003390 <xTaskResumeAll>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f9c:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <prvProcessTimerOrBlockTask+0x98>)
 8003f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	f3bf 8f6f 	isb	sy
    }
 8003fac:	e001      	b.n	8003fb2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003fae:	f7ff f9ef 	bl	8003390 <xTaskResumeAll>
    }
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200001c4 	.word	0x200001c4
 8003fc0:	200001c8 	.word	0x200001c8
 8003fc4:	e000ed04 	.word	0xe000ed04

08003fc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	; (800400c <prvGetNextExpireTime+0x44>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <prvGetNextExpireTime+0x16>
 8003fda:	2201      	movs	r2, #1
 8003fdc:	e000      	b.n	8003fe0 <prvGetNextExpireTime+0x18>
 8003fde:	2200      	movs	r2, #0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <prvGetNextExpireTime+0x44>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e001      	b.n	8003ffc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
    }
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	200001c0 	.word	0x200001c0

08004010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004018:	f7ff fa5a 	bl	80034d0 <xTaskGetTickCount>
 800401c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <prvSampleTimeNow+0x3c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d205      	bcs.n	8004034 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004028:	f000 f91a 	bl	8004260 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e002      	b.n	800403a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800403a:	4a04      	ldr	r2, [pc, #16]	; (800404c <prvSampleTimeNow+0x3c>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004040:	68fb      	ldr	r3, [r7, #12]
    }
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200001d0 	.word	0x200001d0

08004050 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d812      	bhi.n	800409c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	1ad2      	subs	r2, r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e01b      	b.n	80040c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <prvInsertTimerInActiveList+0x7c>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7fe f9ea 	bl	800246e <vListInsert>
 800409a:	e012      	b.n	80040c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d206      	bcs.n	80040b2 <prvInsertTimerInActiveList+0x62>
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e007      	b.n	80040c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <prvInsertTimerInActiveList+0x80>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f7fe f9d6 	bl	800246e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80040c2:	697b      	ldr	r3, [r7, #20]
    }
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	200001c4 	.word	0x200001c4
 80040d0:	200001c0 	.word	0x200001c0

080040d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08c      	sub	sp, #48	; 0x30
 80040d8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040da:	e0ae      	b.n	800423a <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f2c0 80aa 	blt.w	8004238 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	3304      	adds	r3, #4
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe f9f3 	bl	80024e0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040fa:	1d3b      	adds	r3, r7, #4
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff87 	bl	8004010 <prvSampleTimeNow>
 8004102:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b09      	cmp	r3, #9
 8004108:	f200 8097 	bhi.w	800423a <prvProcessReceivedCommands+0x166>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <prvProcessReceivedCommands+0x40>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	0800413d 	.word	0x0800413d
 8004118:	0800413d 	.word	0x0800413d
 800411c:	0800413d 	.word	0x0800413d
 8004120:	080041b1 	.word	0x080041b1
 8004124:	080041c5 	.word	0x080041c5
 8004128:	0800420f 	.word	0x0800420f
 800412c:	0800413d 	.word	0x0800413d
 8004130:	0800413d 	.word	0x0800413d
 8004134:	080041b1 	.word	0x080041b1
 8004138:	080041c5 	.word	0x080041c5
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	b2da      	uxtb	r2, r3
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	18d1      	adds	r1, r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a3a      	ldr	r2, [r7, #32]
 800415a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800415c:	f7ff ff78 	bl	8004050 <prvInsertTimerInActiveList>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d069      	beq.n	800423a <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d05e      	beq.n	800423a <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	441a      	add	r2, r3
 8004184:	2300      	movs	r3, #0
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	2300      	movs	r3, #0
 800418a:	2100      	movs	r1, #0
 800418c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800418e:	f7ff fe21 	bl	8003dd4 <xTimerGenericCommand>
 8004192:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d14f      	bne.n	800423a <prvProcessReceivedCommands+0x166>
        __asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	61bb      	str	r3, [r7, #24]
    }
 80041ac:	bf00      	nop
 80041ae:	e7fe      	b.n	80041ae <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80041c2:	e03a      	b.n	800423a <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <prvProcessReceivedCommands+0x126>
        __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	617b      	str	r3, [r7, #20]
    }
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	18d1      	adds	r1, r2, r3
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004208:	f7ff ff22 	bl	8004050 <prvInsertTimerInActiveList>
                        break;
 800420c:	e015      	b.n	800423a <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 800421c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800421e:	f000 fc6b 	bl	8004af8 <vPortFree>
 8004222:	e00a      	b.n	800423a <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004236:	e000      	b.n	800423a <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004238:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800423a:	4b08      	ldr	r3, [pc, #32]	; (800425c <prvProcessReceivedCommands+0x188>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f107 0108 	add.w	r1, r7, #8
 8004242:	2200      	movs	r2, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe fc49 	bl	8002adc <xQueueReceive>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	f47f af45 	bne.w	80040dc <prvProcessReceivedCommands+0x8>
        }
    }
 8004252:	bf00      	nop
 8004254:	bf00      	nop
 8004256:	3728      	adds	r7, #40	; 0x28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	200001c8 	.word	0x200001c8

08004260 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004266:	e048      	b.n	80042fa <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004268:	4b2d      	ldr	r3, [pc, #180]	; (8004320 <prvSwitchTimerLists+0xc0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004272:	4b2b      	ldr	r3, [pc, #172]	; (8004320 <prvSwitchTimerLists+0xc0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3304      	adds	r3, #4
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe f92d 	bl	80024e0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02e      	beq.n	80042fa <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4413      	add	r3, r2
 80042a4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d90e      	bls.n	80042cc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042ba:	4b19      	ldr	r3, [pc, #100]	; (8004320 <prvSwitchTimerLists+0xc0>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7fe f8d2 	bl	800246e <vListInsert>
 80042ca:	e016      	b.n	80042fa <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042cc:	2300      	movs	r3, #0
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	2300      	movs	r3, #0
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	2100      	movs	r1, #0
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7ff fd7c 	bl	8003dd4 <xTimerGenericCommand>
 80042dc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <prvSwitchTimerLists+0x9a>
        __asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	603b      	str	r3, [r7, #0]
    }
 80042f6:	bf00      	nop
 80042f8:	e7fe      	b.n	80042f8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042fa:	4b09      	ldr	r3, [pc, #36]	; (8004320 <prvSwitchTimerLists+0xc0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d1b1      	bne.n	8004268 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8004304:	4b06      	ldr	r3, [pc, #24]	; (8004320 <prvSwitchTimerLists+0xc0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800430a:	4b06      	ldr	r3, [pc, #24]	; (8004324 <prvSwitchTimerLists+0xc4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a04      	ldr	r2, [pc, #16]	; (8004320 <prvSwitchTimerLists+0xc0>)
 8004310:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004312:	4a04      	ldr	r2, [pc, #16]	; (8004324 <prvSwitchTimerLists+0xc4>)
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	6013      	str	r3, [r2, #0]
    }
 8004318:	bf00      	nop
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	200001c0 	.word	0x200001c0
 8004324:	200001c4 	.word	0x200001c4

08004328 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800432c:	f000 f9e2 	bl	80046f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <prvCheckForValidListAndQueue+0x54>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d11d      	bne.n	8004374 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004338:	4811      	ldr	r0, [pc, #68]	; (8004380 <prvCheckForValidListAndQueue+0x58>)
 800433a:	f7fe f847 	bl	80023cc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800433e:	4811      	ldr	r0, [pc, #68]	; (8004384 <prvCheckForValidListAndQueue+0x5c>)
 8004340:	f7fe f844 	bl	80023cc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <prvCheckForValidListAndQueue+0x60>)
 8004346:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <prvCheckForValidListAndQueue+0x58>)
 8004348:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <prvCheckForValidListAndQueue+0x64>)
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <prvCheckForValidListAndQueue+0x5c>)
 800434e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004350:	2200      	movs	r2, #0
 8004352:	210c      	movs	r1, #12
 8004354:	200a      	movs	r0, #10
 8004356:	f7fe f955 	bl	8002604 <xQueueGenericCreate>
 800435a:	4603      	mov	r3, r0
 800435c:	4a07      	ldr	r2, [pc, #28]	; (800437c <prvCheckForValidListAndQueue+0x54>)
 800435e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <prvCheckForValidListAndQueue+0x54>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004368:	4b04      	ldr	r3, [pc, #16]	; (800437c <prvCheckForValidListAndQueue+0x54>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4908      	ldr	r1, [pc, #32]	; (8004390 <prvCheckForValidListAndQueue+0x68>)
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fdd4 	bl	8002f1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004374:	f000 f9ee 	bl	8004754 <vPortExitCritical>
    }
 8004378:	bf00      	nop
 800437a:	bd80      	pop	{r7, pc}
 800437c:	200001c8 	.word	0x200001c8
 8004380:	20000198 	.word	0x20000198
 8004384:	200001ac 	.word	0x200001ac
 8004388:	200001c0 	.word	0x200001c0
 800438c:	200001c4 	.word	0x200001c4
 8004390:	080084a0 	.word	0x080084a0

08004394 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3b04      	subs	r3, #4
 80043a4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043ac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3b04      	subs	r3, #4
 80043b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f023 0201 	bic.w	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b04      	subs	r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043c4:	4a0c      	ldr	r2, [pc, #48]	; (80043f8 <pxPortInitialiseStack+0x64>)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3b14      	subs	r3, #20
 80043ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	3b04      	subs	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f06f 0202 	mvn.w	r2, #2
 80043e2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3b20      	subs	r3, #32
 80043e8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043ea:	68fb      	ldr	r3, [r7, #12]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	080043fd 	.word	0x080043fd

080043fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004406:	4b12      	ldr	r3, [pc, #72]	; (8004450 <prvTaskExitError+0x54>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d00a      	beq.n	8004426 <prvTaskExitError+0x2a>
        __asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	60fb      	str	r3, [r7, #12]
    }
 8004422:	bf00      	nop
 8004424:	e7fe      	b.n	8004424 <prvTaskExitError+0x28>
        __asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	60bb      	str	r3, [r7, #8]
    }
 8004438:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800443a:	bf00      	nop
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0fc      	beq.n	800443c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000010 	.word	0x20000010
	...

08004460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004460:	4b07      	ldr	r3, [pc, #28]	; (8004480 <pxCurrentTCBConst2>)
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	f380 8809 	msr	PSP, r0
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8811 	msr	BASEPRI, r0
 800447a:	4770      	bx	lr
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst2>:
 8004480:	20000094 	.word	0x20000094
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004488:	4808      	ldr	r0, [pc, #32]	; (80044ac <prvPortStartFirstTask+0x24>)
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	f380 8808 	msr	MSP, r0
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8814 	msr	CONTROL, r0
 800449a:	b662      	cpsie	i
 800449c:	b661      	cpsie	f
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	df00      	svc	0
 80044a8:	bf00      	nop
 80044aa:	0000      	.short	0x0000
 80044ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop

080044b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044ba:	4b46      	ldr	r3, [pc, #280]	; (80045d4 <xPortStartScheduler+0x120>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a46      	ldr	r2, [pc, #280]	; (80045d8 <xPortStartScheduler+0x124>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10a      	bne.n	80044da <xPortStartScheduler+0x26>
        __asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	613b      	str	r3, [r7, #16]
    }
 80044d6:	bf00      	nop
 80044d8:	e7fe      	b.n	80044d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044da:	4b3e      	ldr	r3, [pc, #248]	; (80045d4 <xPortStartScheduler+0x120>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a3f      	ldr	r2, [pc, #252]	; (80045dc <xPortStartScheduler+0x128>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10a      	bne.n	80044fa <xPortStartScheduler+0x46>
        __asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	60fb      	str	r3, [r7, #12]
    }
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044fa:	4b39      	ldr	r3, [pc, #228]	; (80045e0 <xPortStartScheduler+0x12c>)
 80044fc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	22ff      	movs	r2, #255	; 0xff
 800450a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4b31      	ldr	r3, [pc, #196]	; (80045e4 <xPortStartScheduler+0x130>)
 8004520:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004522:	4b31      	ldr	r3, [pc, #196]	; (80045e8 <xPortStartScheduler+0x134>)
 8004524:	2207      	movs	r2, #7
 8004526:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004528:	e009      	b.n	800453e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800452a:	4b2f      	ldr	r3, [pc, #188]	; (80045e8 <xPortStartScheduler+0x134>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	3b01      	subs	r3, #1
 8004530:	4a2d      	ldr	r2, [pc, #180]	; (80045e8 <xPortStartScheduler+0x134>)
 8004532:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004534:	78fb      	ldrb	r3, [r7, #3]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	b2db      	uxtb	r3, r3
 800453c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800453e:	78fb      	ldrb	r3, [r7, #3]
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004546:	2b80      	cmp	r3, #128	; 0x80
 8004548:	d0ef      	beq.n	800452a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800454a:	4b27      	ldr	r3, [pc, #156]	; (80045e8 <xPortStartScheduler+0x134>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1c3 0307 	rsb	r3, r3, #7
 8004552:	2b04      	cmp	r3, #4
 8004554:	d00a      	beq.n	800456c <xPortStartScheduler+0xb8>
        __asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	60bb      	str	r3, [r7, #8]
    }
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800456c:	4b1e      	ldr	r3, [pc, #120]	; (80045e8 <xPortStartScheduler+0x134>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <xPortStartScheduler+0x134>)
 8004574:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004576:	4b1c      	ldr	r3, [pc, #112]	; (80045e8 <xPortStartScheduler+0x134>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800457e:	4a1a      	ldr	r2, [pc, #104]	; (80045e8 <xPortStartScheduler+0x134>)
 8004580:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	b2da      	uxtb	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800458a:	4b18      	ldr	r3, [pc, #96]	; (80045ec <xPortStartScheduler+0x138>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a17      	ldr	r2, [pc, #92]	; (80045ec <xPortStartScheduler+0x138>)
 8004590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004594:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <xPortStartScheduler+0x138>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a14      	ldr	r2, [pc, #80]	; (80045ec <xPortStartScheduler+0x138>)
 800459c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80045a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80045a2:	f000 f963 	bl	800486c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <xPortStartScheduler+0x13c>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80045ac:	f000 f978 	bl	80048a0 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045b0:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <xPortStartScheduler+0x140>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0f      	ldr	r2, [pc, #60]	; (80045f4 <xPortStartScheduler+0x140>)
 80045b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80045ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045bc:	f7ff ff64 	bl	8004488 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045c0:	f7ff f864 	bl	800368c <vTaskSwitchContext>
    prvTaskExitError();
 80045c4:	f7ff ff1a 	bl	80043fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3718      	adds	r7, #24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000ed00 	.word	0xe000ed00
 80045d8:	410fc271 	.word	0x410fc271
 80045dc:	410fc270 	.word	0x410fc270
 80045e0:	e000e400 	.word	0xe000e400
 80045e4:	200001d4 	.word	0x200001d4
 80045e8:	200001d8 	.word	0x200001d8
 80045ec:	e000ed20 	.word	0xe000ed20
 80045f0:	20000010 	.word	0x20000010
 80045f4:	e000ef34 	.word	0xe000ef34

080045f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <vInitPrioGroupValue+0xe4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a37      	ldr	r2, [pc, #220]	; (80046e0 <vInitPrioGroupValue+0xe8>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d10a      	bne.n	800461e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	613b      	str	r3, [r7, #16]
    }
 800461a:	bf00      	nop
 800461c:	e7fe      	b.n	800461c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800461e:	4b2f      	ldr	r3, [pc, #188]	; (80046dc <vInitPrioGroupValue+0xe4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a30      	ldr	r2, [pc, #192]	; (80046e4 <vInitPrioGroupValue+0xec>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d10a      	bne.n	800463e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60fb      	str	r3, [r7, #12]
    }
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800463e:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <vInitPrioGroupValue+0xf0>)
 8004640:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b2db      	uxtb	r3, r3
 8004648:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004660:	b2da      	uxtb	r2, r3
 8004662:	4b22      	ldr	r3, [pc, #136]	; (80046ec <vInitPrioGroupValue+0xf4>)
 8004664:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <vInitPrioGroupValue+0xf8>)
 8004668:	2207      	movs	r2, #7
 800466a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800466c:	e009      	b.n	8004682 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <vInitPrioGroupValue+0xf8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3b01      	subs	r3, #1
 8004674:	4a1e      	ldr	r2, [pc, #120]	; (80046f0 <vInitPrioGroupValue+0xf8>)
 8004676:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004682:	78fb      	ldrb	r3, [r7, #3]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468a:	2b80      	cmp	r3, #128	; 0x80
 800468c:	d0ef      	beq.n	800466e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <vInitPrioGroupValue+0xf8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1c3 0307 	rsb	r3, r3, #7
 8004696:	2b04      	cmp	r3, #4
 8004698:	d00a      	beq.n	80046b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800469a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469e:	f383 8811 	msr	BASEPRI, r3
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	f3bf 8f4f 	dsb	sy
 80046aa:	60bb      	str	r3, [r7, #8]
    }
 80046ac:	bf00      	nop
 80046ae:	e7fe      	b.n	80046ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046b0:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <vInitPrioGroupValue+0xf8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	021b      	lsls	r3, r3, #8
 80046b6:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <vInitPrioGroupValue+0xf8>)
 80046b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046ba:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <vInitPrioGroupValue+0xf8>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046c2:	4a0b      	ldr	r2, [pc, #44]	; (80046f0 <vInitPrioGroupValue+0xf8>)
 80046c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	e000ed00 	.word	0xe000ed00
 80046e0:	410fc271 	.word	0x410fc271
 80046e4:	410fc270 	.word	0x410fc270
 80046e8:	e000e400 	.word	0xe000e400
 80046ec:	200001d4 	.word	0x200001d4
 80046f0:	200001d8 	.word	0x200001d8

080046f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
        __asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	607b      	str	r3, [r7, #4]
    }
 800470c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800470e:	4b0f      	ldr	r3, [pc, #60]	; (800474c <vPortEnterCritical+0x58>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	4a0d      	ldr	r2, [pc, #52]	; (800474c <vPortEnterCritical+0x58>)
 8004716:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <vPortEnterCritical+0x58>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d10f      	bne.n	8004740 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <vPortEnterCritical+0x5c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <vPortEnterCritical+0x4c>
        __asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	603b      	str	r3, [r7, #0]
    }
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <vPortEnterCritical+0x4a>
    }
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	20000010 	.word	0x20000010
 8004750:	e000ed04 	.word	0xe000ed04

08004754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800475a:	4b12      	ldr	r3, [pc, #72]	; (80047a4 <vPortExitCritical+0x50>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <vPortExitCritical+0x24>
        __asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	607b      	str	r3, [r7, #4]
    }
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004778:	4b0a      	ldr	r3, [pc, #40]	; (80047a4 <vPortExitCritical+0x50>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3b01      	subs	r3, #1
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <vPortExitCritical+0x50>)
 8004780:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <vPortExitCritical+0x50>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <vPortExitCritical+0x42>
 800478a:	2300      	movs	r3, #0
 800478c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	f383 8811 	msr	BASEPRI, r3
    }
 8004794:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	20000010 	.word	0x20000010
	...

080047b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047b0:	f3ef 8009 	mrs	r0, PSP
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4b15      	ldr	r3, [pc, #84]	; (8004810 <pxCurrentTCBConst>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f01e 0f10 	tst.w	lr, #16
 80047c0:	bf08      	it	eq
 80047c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047d4:	f380 8811 	msr	BASEPRI, r0
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f7fe ff54 	bl	800368c <vTaskSwitchContext>
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f380 8811 	msr	BASEPRI, r0
 80047ec:	bc09      	pop	{r0, r3}
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6808      	ldr	r0, [r1, #0]
 80047f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f6:	f01e 0f10 	tst.w	lr, #16
 80047fa:	bf08      	it	eq
 80047fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004800:	f380 8809 	msr	PSP, r0
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst>:
 8004810:	20000094 	.word	0x20000094
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
        __asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	607b      	str	r3, [r7, #4]
    }
 8004830:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004832:	f002 f94f 	bl	8006ad4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004836:	f7fe fe6d 	bl	8003514 <xTaskIncrementTick>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d006      	beq.n	800484e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004840:	f002 f9a6 	bl	8006b90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <SysTick_Handler+0x50>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e001      	b.n	8004852 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800484e:	f002 f983 	bl	8006b58 <SEGGER_SYSVIEW_RecordExitISR>
 8004852:	2300      	movs	r3, #0
 8004854:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f383 8811 	msr	BASEPRI, r3
    }
 800485c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004870:	4b08      	ldr	r3, [pc, #32]	; (8004894 <vPortSetupTimerInterrupt+0x28>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <vPortSetupTimerInterrupt+0x2c>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800487c:	4b07      	ldr	r3, [pc, #28]	; (800489c <vPortSetupTimerInterrupt+0x30>)
 800487e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8004882:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004884:	4b03      	ldr	r3, [pc, #12]	; (8004894 <vPortSetupTimerInterrupt+0x28>)
 8004886:	2207      	movs	r2, #7
 8004888:	601a      	str	r2, [r3, #0]
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	e000e010 	.word	0xe000e010
 8004898:	e000e018 	.word	0xe000e018
 800489c:	e000e014 	.word	0xe000e014

080048a0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048a0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048b0 <vPortEnableVFP+0x10>
 80048a4:	6801      	ldr	r1, [r0, #0]
 80048a6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048aa:	6001      	str	r1, [r0, #0]
 80048ac:	4770      	bx	lr
 80048ae:	0000      	.short	0x0000
 80048b0:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop

080048b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048be:	f3ef 8305 	mrs	r3, IPSR
 80048c2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d914      	bls.n	80048f4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ca:	4a17      	ldr	r2, [pc, #92]	; (8004928 <vPortValidateInterruptPriority+0x70>)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048d4:	4b15      	ldr	r3, [pc, #84]	; (800492c <vPortValidateInterruptPriority+0x74>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	7afa      	ldrb	r2, [r7, #11]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20a      	bcs.n	80048f4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
    }
 80048f0:	bf00      	nop
 80048f2:	e7fe      	b.n	80048f2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <vPortValidateInterruptPriority+0x78>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048fc:	4b0d      	ldr	r3, [pc, #52]	; (8004934 <vPortValidateInterruptPriority+0x7c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d90a      	bls.n	800491a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	603b      	str	r3, [r7, #0]
    }
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <vPortValidateInterruptPriority+0x60>
    }
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	e000e3f0 	.word	0xe000e3f0
 800492c:	200001d4 	.word	0x200001d4
 8004930:	e000ed0c 	.word	0xe000ed0c
 8004934:	200001d8 	.word	0x200001d8

08004938 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	; 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004944:	f7fe fd16 	bl	8003374 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004948:	4b65      	ldr	r3, [pc, #404]	; (8004ae0 <pvPortMalloc+0x1a8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004950:	f000 f934 	bl	8004bbc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004954:	4b63      	ldr	r3, [pc, #396]	; (8004ae4 <pvPortMalloc+0x1ac>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 80a7 	bne.w	8004ab0 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d02d      	beq.n	80049c4 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004968:	2208      	movs	r2, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	429a      	cmp	r2, r3
 8004972:	d227      	bcs.n	80049c4 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004974:	2208      	movs	r2, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4413      	add	r3, r2
 800497a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	2b00      	cmp	r3, #0
 8004984:	d021      	beq.n	80049ca <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f023 0307 	bic.w	r3, r3, #7
 800498c:	3308      	adds	r3, #8
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	429a      	cmp	r2, r3
 8004992:	d214      	bcs.n	80049be <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f023 0307 	bic.w	r3, r3, #7
 800499a:	3308      	adds	r3, #8
 800499c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d010      	beq.n	80049ca <pvPortMalloc+0x92>
        __asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	617b      	str	r3, [r7, #20]
    }
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049c2:	e002      	b.n	80049ca <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	607b      	str	r3, [r7, #4]
 80049c8:	e000      	b.n	80049cc <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ca:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d06e      	beq.n	8004ab0 <pvPortMalloc+0x178>
 80049d2:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <pvPortMalloc+0x1b0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d869      	bhi.n	8004ab0 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049dc:	4b43      	ldr	r3, [pc, #268]	; (8004aec <pvPortMalloc+0x1b4>)
 80049de:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049e0:	4b42      	ldr	r3, [pc, #264]	; (8004aec <pvPortMalloc+0x1b4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049e6:	e004      	b.n	80049f2 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d903      	bls.n	8004a04 <pvPortMalloc+0xcc>
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f1      	bne.n	80049e8 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a04:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <pvPortMalloc+0x1a8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d050      	beq.n	8004ab0 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2208      	movs	r2, #8
 8004a14:	4413      	add	r3, r2
 8004a16:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	1ad2      	subs	r2, r2, r3
 8004a28:	2308      	movs	r3, #8
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d91f      	bls.n	8004a70 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f003 0307 	and.w	r3, r3, #7
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <pvPortMalloc+0x120>
        __asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	613b      	str	r3, [r7, #16]
    }
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a6a:	69b8      	ldr	r0, [r7, #24]
 8004a6c:	f000 f908 	bl	8004c80 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a70:	4b1d      	ldr	r3, [pc, #116]	; (8004ae8 <pvPortMalloc+0x1b0>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	4a1b      	ldr	r2, [pc, #108]	; (8004ae8 <pvPortMalloc+0x1b0>)
 8004a7c:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <pvPortMalloc+0x1b0>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <pvPortMalloc+0x1b8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d203      	bcs.n	8004a92 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <pvPortMalloc+0x1b0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <pvPortMalloc+0x1b8>)
 8004a90:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <pvPortMalloc+0x1ac>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <pvPortMalloc+0x1bc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	4a11      	ldr	r2, [pc, #68]	; (8004af4 <pvPortMalloc+0x1bc>)
 8004aae:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004ab0:	f7fe fc6e 	bl	8003390 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <pvPortMalloc+0x19c>
        __asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	60fb      	str	r3, [r7, #12]
    }
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <pvPortMalloc+0x19a>
    return pvReturn;
 8004ad4:	69fb      	ldr	r3, [r7, #28]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3728      	adds	r7, #40	; 0x28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20012de4 	.word	0x20012de4
 8004ae4:	20012df8 	.word	0x20012df8
 8004ae8:	20012de8 	.word	0x20012de8
 8004aec:	20012ddc 	.word	0x20012ddc
 8004af0:	20012dec 	.word	0x20012dec
 8004af4:	20012df0 	.word	0x20012df0

08004af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d04d      	beq.n	8004ba6 <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4413      	add	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <vPortFree+0xb8>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <vPortFree+0x44>
        __asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60fb      	str	r3, [r7, #12]
    }
 8004b38:	bf00      	nop
 8004b3a:	e7fe      	b.n	8004b3a <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <vPortFree+0x62>
        __asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	60bb      	str	r3, [r7, #8]
    }
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	685a      	ldr	r2, [r3, #4]
 8004b5e:	4b14      	ldr	r3, [pc, #80]	; (8004bb0 <vPortFree+0xb8>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4013      	ands	r3, r2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d01e      	beq.n	8004ba6 <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11a      	bne.n	8004ba6 <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	4b0e      	ldr	r3, [pc, #56]	; (8004bb0 <vPortFree+0xb8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	401a      	ands	r2, r3
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004b80:	f7fe fbf8 	bl	8003374 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <vPortFree+0xbc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <vPortFree+0xbc>)
 8004b90:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b92:	6938      	ldr	r0, [r7, #16]
 8004b94:	f000 f874 	bl	8004c80 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <vPortFree+0xc0>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4a06      	ldr	r2, [pc, #24]	; (8004bb8 <vPortFree+0xc0>)
 8004ba0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ba2:	f7fe fbf5 	bl	8003390 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004ba6:	bf00      	nop
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20012df8 	.word	0x20012df8
 8004bb4:	20012de8 	.word	0x20012de8
 8004bb8:	20012df4 	.word	0x20012df4

08004bbc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bc2:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004bc6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bc8:	4b27      	ldr	r3, [pc, #156]	; (8004c68 <prvHeapInit+0xac>)
 8004bca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3307      	adds	r3, #7
 8004bda:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0307 	bic.w	r3, r3, #7
 8004be2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	4a1f      	ldr	r2, [pc, #124]	; (8004c68 <prvHeapInit+0xac>)
 8004bec:	4413      	add	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bf4:	4a1d      	ldr	r2, [pc, #116]	; (8004c6c <prvHeapInit+0xb0>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <prvHeapInit+0xb0>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	4413      	add	r3, r2
 8004c06:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c08:	2208      	movs	r2, #8
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1a9b      	subs	r3, r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0307 	bic.w	r3, r3, #7
 8004c16:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a15      	ldr	r2, [pc, #84]	; (8004c70 <prvHeapInit+0xb4>)
 8004c1c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <prvHeapInit+0xb4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <prvHeapInit+0xb4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	1ad2      	subs	r2, r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <prvHeapInit+0xb4>)
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <prvHeapInit+0xb8>)
 8004c4a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <prvHeapInit+0xbc>)
 8004c52:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <prvHeapInit+0xc0>)
 8004c56:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c5a:	601a      	str	r2, [r3, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	3714      	adds	r7, #20
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	200001dc 	.word	0x200001dc
 8004c6c:	20012ddc 	.word	0x20012ddc
 8004c70:	20012de4 	.word	0x20012de4
 8004c74:	20012dec 	.word	0x20012dec
 8004c78:	20012de8 	.word	0x20012de8
 8004c7c:	20012df8 	.word	0x20012df8

08004c80 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c88:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <prvInsertBlockIntoFreeList+0xac>)
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e002      	b.n	8004c94 <prvInsertBlockIntoFreeList+0x14>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d8f7      	bhi.n	8004c8e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d108      	bne.n	8004cc2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	441a      	add	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d118      	bne.n	8004d08 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <prvInsertBlockIntoFreeList+0xb0>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d00d      	beq.n	8004cfe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	441a      	add	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	e008      	b.n	8004d10 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <prvInsertBlockIntoFreeList+0xb0>)
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
 8004d06:	e003      	b.n	8004d10 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d002      	beq.n	8004d1e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	20012ddc 	.word	0x20012ddc
 8004d30:	20012de4 	.word	0x20012de4

08004d34 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d38:	4803      	ldr	r0, [pc, #12]	; (8004d48 <_cbSendSystemDesc+0x14>)
 8004d3a:	f001 fe75 	bl	8006a28 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d3e:	4803      	ldr	r0, [pc, #12]	; (8004d4c <_cbSendSystemDesc+0x18>)
 8004d40:	f001 fe72 	bl	8006a28 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	080084a8 	.word	0x080084a8
 8004d4c:	080084e8 	.word	0x080084e8

08004d50 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <SEGGER_SYSVIEW_Conf+0x1c>)
 8004d56:	4a06      	ldr	r2, [pc, #24]	; (8004d70 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d58:	4906      	ldr	r1, [pc, #24]	; (8004d74 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d5a:	4806      	ldr	r0, [pc, #24]	; (8004d74 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d5c:	f001 f9e2 	bl	8006124 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d60:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004d64:	f001 fa22 	bl	80061ac <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d68:	bf00      	nop
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	08004d35 	.word	0x08004d35
 8004d70:	080085b8 	.word	0x080085b8
 8004d74:	003d0900 	.word	0x003d0900

08004d78 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d7e:	2300      	movs	r3, #0
 8004d80:	607b      	str	r3, [r7, #4]
 8004d82:	e033      	b.n	8004dec <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d84:	491e      	ldr	r1, [pc, #120]	; (8004e00 <_cbSendTaskList+0x88>)
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	440b      	add	r3, r1
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	491a      	ldr	r1, [pc, #104]	; (8004e00 <_cbSendTaskList+0x88>)
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	3304      	adds	r3, #4
 8004da4:	6819      	ldr	r1, [r3, #0]
 8004da6:	4c16      	ldr	r4, [pc, #88]	; (8004e00 <_cbSendTaskList+0x88>)
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4423      	add	r3, r4
 8004db4:	3308      	adds	r3, #8
 8004db6:	681c      	ldr	r4, [r3, #0]
 8004db8:	4d11      	ldr	r5, [pc, #68]	; (8004e00 <_cbSendTaskList+0x88>)
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	442b      	add	r3, r5
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	681d      	ldr	r5, [r3, #0]
 8004dca:	4e0d      	ldr	r6, [pc, #52]	; (8004e00 <_cbSendTaskList+0x88>)
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4433      	add	r3, r6
 8004dd8:	3310      	adds	r3, #16
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	462b      	mov	r3, r5
 8004de0:	4622      	mov	r2, r4
 8004de2:	f000 f8d1 	bl	8004f88 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3301      	adds	r3, #1
 8004dea:	607b      	str	r3, [r7, #4]
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <_cbSendTaskList+0x8c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d3c6      	bcc.n	8004d84 <_cbSendTaskList+0xc>
  }
}
 8004df6:	bf00      	nop
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e00:	20012dfc 	.word	0x20012dfc
 8004e04:	20012e9c 	.word	0x20012e9c

08004e08 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e0c:	b082      	sub	sp, #8
 8004e0e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e10:	f7fe fb6e 	bl	80034f0 <xTaskGetTickCountFromISR>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= portTICK_PERIOD_MS;
 8004e20:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e24:	4622      	mov	r2, r4
 8004e26:	462b      	mov	r3, r5
 8004e28:	f04f 0000 	mov.w	r0, #0
 8004e2c:	f04f 0100 	mov.w	r1, #0
 8004e30:	0099      	lsls	r1, r3, #2
 8004e32:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8004e36:	0090      	lsls	r0, r2, #2
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	1912      	adds	r2, r2, r4
 8004e3e:	eb45 0303 	adc.w	r3, r5, r3
 8004e42:	eb12 0802 	adds.w	r8, r2, r2
 8004e46:	eb43 0903 	adc.w	r9, r3, r3
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	e9c7 2300 	strd	r2, r3, [r7]
  Time *= 1000;
 8004e52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	f04f 0400 	mov.w	r4, #0
 8004e5e:	f04f 0500 	mov.w	r5, #0
 8004e62:	015d      	lsls	r5, r3, #5
 8004e64:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8004e68:	0154      	lsls	r4, r2, #5
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	1a12      	subs	r2, r2, r0
 8004e70:	eb63 0301 	sbc.w	r3, r3, r1
 8004e74:	f04f 0400 	mov.w	r4, #0
 8004e78:	f04f 0500 	mov.w	r5, #0
 8004e7c:	009d      	lsls	r5, r3, #2
 8004e7e:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8004e82:	0094      	lsls	r4, r2, #2
 8004e84:	4622      	mov	r2, r4
 8004e86:	462b      	mov	r3, r5
 8004e88:	1812      	adds	r2, r2, r0
 8004e8a:	eb41 0303 	adc.w	r3, r1, r3
 8004e8e:	f04f 0000 	mov.w	r0, #0
 8004e92:	f04f 0100 	mov.w	r1, #0
 8004e96:	00d9      	lsls	r1, r3, #3
 8004e98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e9c:	00d0      	lsls	r0, r2, #3
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	e9c7 2300 	strd	r2, r3, [r7]
  return Time;
 8004ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08004eb8 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	492b      	ldr	r1, [pc, #172]	; (8004f78 <SYSVIEW_AddTask+0xc0>)
 8004eca:	68b8      	ldr	r0, [r7, #8]
 8004ecc:	f002 f950 	bl	8007170 <memcmp>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d04b      	beq.n	8004f6e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ed6:	4b29      	ldr	r3, [pc, #164]	; (8004f7c <SYSVIEW_AddTask+0xc4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b07      	cmp	r3, #7
 8004edc:	d903      	bls.n	8004ee6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004ede:	4828      	ldr	r0, [pc, #160]	; (8004f80 <SYSVIEW_AddTask+0xc8>)
 8004ee0:	f002 f8b4 	bl	800704c <SEGGER_SYSVIEW_Warn>
    return;
 8004ee4:	e044      	b.n	8004f70 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ee6:	4b25      	ldr	r3, [pc, #148]	; (8004f7c <SYSVIEW_AddTask+0xc4>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4926      	ldr	r1, [pc, #152]	; (8004f84 <SYSVIEW_AddTask+0xcc>)
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004efa:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <SYSVIEW_AddTask+0xc4>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4921      	ldr	r1, [pc, #132]	; (8004f84 <SYSVIEW_AddTask+0xcc>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f10:	4b1a      	ldr	r3, [pc, #104]	; (8004f7c <SYSVIEW_AddTask+0xc4>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	491b      	ldr	r1, [pc, #108]	; (8004f84 <SYSVIEW_AddTask+0xcc>)
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	3308      	adds	r3, #8
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f26:	4b15      	ldr	r3, [pc, #84]	; (8004f7c <SYSVIEW_AddTask+0xc4>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4916      	ldr	r1, [pc, #88]	; (8004f84 <SYSVIEW_AddTask+0xcc>)
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	330c      	adds	r3, #12
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <SYSVIEW_AddTask+0xc4>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4910      	ldr	r1, [pc, #64]	; (8004f84 <SYSVIEW_AddTask+0xcc>)
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	3310      	adds	r3, #16
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f52:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <SYSVIEW_AddTask+0xc4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	4a08      	ldr	r2, [pc, #32]	; (8004f7c <SYSVIEW_AddTask+0xc4>)
 8004f5a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	68b9      	ldr	r1, [r7, #8]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 f80e 	bl	8004f88 <SYSVIEW_SendTaskInfo>
 8004f6c:	e000      	b.n	8004f70 <SYSVIEW_AddTask+0xb8>
    return;
 8004f6e:	bf00      	nop

}
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	080084f8 	.word	0x080084f8
 8004f7c:	20012e9c 	.word	0x20012e9c
 8004f80:	08008500 	.word	0x08008500
 8004f84:	20012dfc 	.word	0x20012dfc

08004f88 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b08a      	sub	sp, #40	; 0x28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f96:	f107 0314 	add.w	r3, r7, #20
 8004f9a:	2214      	movs	r2, #20
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f002 f902 	bl	80071a8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004fb8:	f107 0314 	add.w	r3, r7, #20
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 fc3b 	bl	8006838 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004fc2:	bf00      	nop
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
	...

08004fcc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004fd2:	4b24      	ldr	r3, [pc, #144]	; (8005064 <_DoInit+0x98>)
 8004fd4:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2203      	movs	r2, #3
 8004fda:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2203      	movs	r2, #3
 8004fe0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	; (8005068 <_DoInit+0x9c>)
 8004fe6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a20      	ldr	r2, [pc, #128]	; (800506c <_DoInit+0xa0>)
 8004fec:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ff4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a17      	ldr	r2, [pc, #92]	; (8005068 <_DoInit+0x9c>)
 800500c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a17      	ldr	r2, [pc, #92]	; (8005070 <_DoInit+0xa4>)
 8005012:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2210      	movs	r2, #16
 8005018:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3307      	adds	r3, #7
 8005030:	4a10      	ldr	r2, [pc, #64]	; (8005074 <_DoInit+0xa8>)
 8005032:	6810      	ldr	r0, [r2, #0]
 8005034:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005036:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a0e      	ldr	r2, [pc, #56]	; (8005078 <_DoInit+0xac>)
 800503e:	6810      	ldr	r0, [r2, #0]
 8005040:	6018      	str	r0, [r3, #0]
 8005042:	8891      	ldrh	r1, [r2, #4]
 8005044:	7992      	ldrb	r2, [r2, #6]
 8005046:	8099      	strh	r1, [r3, #4]
 8005048:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800504a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005054:	f3bf 8f5f 	dmb	sy
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20014468 	.word	0x20014468
 8005068:	08008550 	.word	0x08008550
 800506c:	20012ea0 	.word	0x20012ea0
 8005070:	200132a0 	.word	0x200132a0
 8005074:	0800855c 	.word	0x0800855c
 8005078:	08008560 	.word	0x08008560

0800507c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005088:	2300      	movs	r3, #0
 800508a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	429a      	cmp	r2, r3
 800509e:	d905      	bls.n	80050ac <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
 80050aa:	e007      	b.n	80050bc <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	69b9      	ldr	r1, [r7, #24]
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1acb      	subs	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	3b01      	subs	r3, #1
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050c6:	4293      	cmp	r3, r2
 80050c8:	bf28      	it	cs
 80050ca:	4613      	movcs	r3, r2
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80050ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4293      	cmp	r3, r2
 80050d4:	bf28      	it	cs
 80050d6:	4613      	movcs	r3, r2
 80050d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	4413      	add	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80050e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	6978      	ldr	r0, [r7, #20]
 80050ea:	f002 f84f 	bl	800718c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80050ee:	6a3a      	ldr	r2, [r7, #32]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	4413      	add	r3, r2
 80050f4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	4413      	add	r3, r2
 80050fc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	4413      	add	r3, r2
 800510c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	429a      	cmp	r2, r3
 8005116:	d101      	bne.n	800511c <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005118:	2300      	movs	r3, #0
 800511a:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800511c:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1b2      	bne.n	8005092 <_WriteBlocking+0x16>
  return NumBytesWritten;
 800512c:	6a3b      	ldr	r3, [r7, #32]
}
 800512e:	4618      	mov	r0, r3
 8005130:	3728      	adds	r7, #40	; 0x28
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005136:	b580      	push	{r7, lr}
 8005138:	b088      	sub	sp, #32
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	429a      	cmp	r2, r3
 8005158:	d911      	bls.n	800517e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	68b9      	ldr	r1, [r7, #8]
 8005168:	6938      	ldr	r0, [r7, #16]
 800516a:	f002 f80f 	bl	800718c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800516e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	441a      	add	r2, r3
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800517c:	e01f      	b.n	80051be <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	4413      	add	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	6938      	ldr	r0, [r7, #16]
 8005192:	f001 fffb 	bl	800718c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	4413      	add	r3, r2
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4619      	mov	r1, r3
 80051ae:	6938      	ldr	r0, [r7, #16]
 80051b0:	f001 ffec 	bl	800718c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051b4:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	60da      	str	r2, [r3, #12]
}
 80051be:	bf00      	nop
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80051c6:	b480      	push	{r7}
 80051c8:	b087      	sub	sp, #28
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d808      	bhi.n	80051f4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	1ad2      	subs	r2, r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	4413      	add	r3, r2
 80051ee:	3b01      	subs	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	e004      	b.n	80051fe <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80051fe:	697b      	ldr	r3, [r7, #20]
}
 8005200:	4618      	mov	r0, r3
 8005202:	371c      	adds	r7, #28
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b08c      	sub	sp, #48	; 0x30
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005218:	4b3e      	ldr	r3, [pc, #248]	; (8005314 <SEGGER_RTT_ReadNoLock+0x108>)
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <SEGGER_RTT_ReadNoLock+0x1e>
 8005226:	f7ff fed1 	bl	8004fcc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4613      	mov	r3, r2
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	4413      	add	r3, r2
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	3360      	adds	r3, #96	; 0x60
 8005236:	4a37      	ldr	r2, [pc, #220]	; (8005314 <SEGGER_RTT_ReadNoLock+0x108>)
 8005238:	4413      	add	r3, r2
 800523a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800524c:	2300      	movs	r3, #0
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	429a      	cmp	r2, r3
 8005256:	d92b      	bls.n	80052b0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4293      	cmp	r3, r2
 8005268:	bf28      	it	cs
 800526a:	4613      	movcs	r3, r2
 800526c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	4413      	add	r3, r2
 8005276:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	6939      	ldr	r1, [r7, #16]
 800527c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800527e:	f001 ff85 	bl	800718c <memcpy>
    NumBytesRead += NumBytesRem;
 8005282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	4413      	add	r3, r2
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	4413      	add	r3, r2
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800529a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d101      	bne.n	80052b0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80052ac:	2300      	movs	r3, #0
 80052ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4293      	cmp	r3, r2
 80052be:	bf28      	it	cs
 80052c0:	4613      	movcs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d019      	beq.n	80052fe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	4413      	add	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	6939      	ldr	r1, [r7, #16]
 80052d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052da:	f001 ff57 	bl	800718c <memcpy>
    NumBytesRead += NumBytesRem;
 80052de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	4413      	add	r3, r2
 80052e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80052e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	4413      	add	r3, r2
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d002      	beq.n	800530a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005308:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800530a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800530c:	4618      	mov	r0, r3
 800530e:	3730      	adds	r7, #48	; 0x30
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	20014468 	.word	0x20014468

08005318 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	4613      	mov	r3, r2
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	4413      	add	r3, r2
 8005332:	00db      	lsls	r3, r3, #3
 8005334:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <SEGGER_RTT_WriteNoLock+0x9c>)
 8005336:	4413      	add	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d029      	beq.n	8005396 <SEGGER_RTT_WriteNoLock+0x7e>
 8005342:	2b02      	cmp	r3, #2
 8005344:	d82e      	bhi.n	80053a4 <SEGGER_RTT_WriteNoLock+0x8c>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d002      	beq.n	8005350 <SEGGER_RTT_WriteNoLock+0x38>
 800534a:	2b01      	cmp	r3, #1
 800534c:	d013      	beq.n	8005376 <SEGGER_RTT_WriteNoLock+0x5e>
 800534e:	e029      	b.n	80053a4 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005350:	6978      	ldr	r0, [r7, #20]
 8005352:	f7ff ff38 	bl	80051c6 <_GetAvailWriteSpace>
 8005356:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d202      	bcs.n	8005366 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005364:	e021      	b.n	80053aa <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	69b9      	ldr	r1, [r7, #24]
 800536e:	6978      	ldr	r0, [r7, #20]
 8005370:	f7ff fee1 	bl	8005136 <_WriteNoCheck>
    break;
 8005374:	e019      	b.n	80053aa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005376:	6978      	ldr	r0, [r7, #20]
 8005378:	f7ff ff25 	bl	80051c6 <_GetAvailWriteSpace>
 800537c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	4293      	cmp	r3, r2
 8005384:	bf28      	it	cs
 8005386:	4613      	movcs	r3, r2
 8005388:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	69b9      	ldr	r1, [r7, #24]
 800538e:	6978      	ldr	r0, [r7, #20]
 8005390:	f7ff fed1 	bl	8005136 <_WriteNoCheck>
    break;
 8005394:	e009      	b.n	80053aa <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	69b9      	ldr	r1, [r7, #24]
 800539a:	6978      	ldr	r0, [r7, #20]
 800539c:	f7ff fe6e 	bl	800507c <_WriteBlocking>
 80053a0:	61f8      	str	r0, [r7, #28]
    break;
 80053a2:	e002      	b.n	80053aa <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
    break;
 80053a8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80053aa:	69fb      	ldr	r3, [r7, #28]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	20014468 	.word	0x20014468

080053b8 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80053c4:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <SEGGER_RTT_Write+0x48>)
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <SEGGER_RTT_Write+0x1e>
 80053d2:	f7ff fdfb 	bl	8004fcc <_DoInit>
  SEGGER_RTT_LOCK();
 80053d6:	f3ef 8311 	mrs	r3, BASEPRI
 80053da:	f04f 0120 	mov.w	r1, #32
 80053de:	f381 8811 	msr	BASEPRI, r1
 80053e2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f7ff ff95 	bl	8005318 <SEGGER_RTT_WriteNoLock>
 80053ee:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80053f6:	697b      	ldr	r3, [r7, #20]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3720      	adds	r7, #32
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20014468 	.word	0x20014468

08005404 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005412:	4b3d      	ldr	r3, [pc, #244]	; (8005508 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005414:	61bb      	str	r3, [r7, #24]
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005420:	f7ff fdd4 	bl	8004fcc <_DoInit>
  SEGGER_RTT_LOCK();
 8005424:	f3ef 8311 	mrs	r3, BASEPRI
 8005428:	f04f 0120 	mov.w	r1, #32
 800542c:	f381 8811 	msr	BASEPRI, r1
 8005430:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005432:	4b35      	ldr	r3, [pc, #212]	; (8005508 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005434:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800543a:	6939      	ldr	r1, [r7, #16]
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	4613      	mov	r3, r2
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	440b      	add	r3, r1
 800544a:	3304      	adds	r3, #4
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	3301      	adds	r3, #1
 8005456:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	69fa      	ldr	r2, [r7, #28]
 800545e:	429a      	cmp	r2, r3
 8005460:	dbeb      	blt.n	800543a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005462:	e000      	b.n	8005466 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005464:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	429a      	cmp	r2, r3
 800546e:	da3f      	bge.n	80054f0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005470:	6939      	ldr	r1, [r7, #16]
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	4613      	mov	r3, r2
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	4413      	add	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	440b      	add	r3, r1
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005484:	6939      	ldr	r1, [r7, #16]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	4613      	mov	r3, r2
 800548c:	005b      	lsls	r3, r3, #1
 800548e:	4413      	add	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	440b      	add	r3, r1
 8005494:	3304      	adds	r3, #4
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800549a:	6939      	ldr	r1, [r7, #16]
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	4613      	mov	r3, r2
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	4413      	add	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	440b      	add	r3, r1
 80054a8:	3320      	adds	r3, #32
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80054ae:	6939      	ldr	r1, [r7, #16]
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	4613      	mov	r3, r2
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	4413      	add	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	440b      	add	r3, r1
 80054bc:	3328      	adds	r3, #40	; 0x28
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80054c2:	6939      	ldr	r1, [r7, #16]
 80054c4:	69fa      	ldr	r2, [r7, #28]
 80054c6:	4613      	mov	r3, r2
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	4413      	add	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	440b      	add	r3, r1
 80054d0:	3324      	adds	r3, #36	; 0x24
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80054d6:	6939      	ldr	r1, [r7, #16]
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	4613      	mov	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	440b      	add	r3, r1
 80054e4:	332c      	adds	r3, #44	; 0x2c
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054ea:	f3bf 8f5f 	dmb	sy
 80054ee:	e002      	b.n	80054f6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80054f0:	f04f 33ff 	mov.w	r3, #4294967295
 80054f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80054fc:	69fb      	ldr	r3, [r7, #28]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20014468 	.word	0x20014468

0800550c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800550c:	b580      	push	{r7, lr}
 800550e:	b08a      	sub	sp, #40	; 0x28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800551a:	4b21      	ldr	r3, [pc, #132]	; (80055a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800551c:	623b      	str	r3, [r7, #32]
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005528:	f7ff fd50 	bl	8004fcc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800552c:	4b1c      	ldr	r3, [pc, #112]	; (80055a0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800552e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d82c      	bhi.n	8005590 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005536:	f3ef 8311 	mrs	r3, BASEPRI
 800553a:	f04f 0120 	mov.w	r1, #32
 800553e:	f381 8811 	msr	BASEPRI, r1
 8005542:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4613      	mov	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	3360      	adds	r3, #96	; 0x60
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	4413      	add	r3, r2
 8005554:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00e      	beq.n	800557a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	683a      	ldr	r2, [r7, #0]
 800556c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2200      	movs	r2, #0
 8005578:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800557e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005580:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800558a:	2300      	movs	r3, #0
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
 800558e:	e002      	b.n	8005596 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005590:	f04f 33ff 	mov.w	r3, #4294967295
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20014468 	.word	0x20014468

080055a4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80055a4:	b480      	push	{r7}
 80055a6:	b087      	sub	sp, #28
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00f      	beq.n	80055da <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 80055ba:	e002      	b.n	80055c2 <_EncodeStr+0x1e>
      Len++;
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	3301      	adds	r3, #1
 80055c0:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	4413      	add	r3, r2
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f6      	bne.n	80055bc <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d901      	bls.n	80055da <_EncodeStr+0x36>
      Len = Limit;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2bfe      	cmp	r3, #254	; 0xfe
 80055de:	d806      	bhi.n	80055ee <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	60fa      	str	r2, [r7, #12]
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]
 80055ec:	e011      	b.n	8005612 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	60fa      	str	r2, [r7, #12]
 80055f4:	22ff      	movs	r2, #255	; 0xff
 80055f6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	1c5a      	adds	r2, r3, #1
 80055fc:	60fa      	str	r2, [r7, #12]
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	b2d2      	uxtb	r2, r2
 8005602:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	0a19      	lsrs	r1, r3, #8
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1c5a      	adds	r2, r3, #1
 800560c:	60fa      	str	r2, [r7, #12]
 800560e:	b2ca      	uxtb	r2, r1
 8005610:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005616:	e00a      	b.n	800562e <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	1c53      	adds	r3, r2, #1
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	1c59      	adds	r1, r3, #1
 8005622:	60f9      	str	r1, [r7, #12]
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	701a      	strb	r2, [r3, #0]
    n++;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	3301      	adds	r3, #1
 800562c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	429a      	cmp	r2, r3
 8005634:	d3f0      	bcc.n	8005618 <_EncodeStr+0x74>
  }
  return pPayload;
 8005636:	68fb      	ldr	r3, [r7, #12]
}
 8005638:	4618      	mov	r0, r3
 800563a:	371c      	adds	r7, #28
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3304      	adds	r3, #4
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005662:	4b36      	ldr	r3, [pc, #216]	; (800573c <_HandleIncomingPacket+0xe0>)
 8005664:	7e1b      	ldrb	r3, [r3, #24]
 8005666:	4618      	mov	r0, r3
 8005668:	1cfb      	adds	r3, r7, #3
 800566a:	2201      	movs	r2, #1
 800566c:	4619      	mov	r1, r3
 800566e:	f7ff fdcd 	bl	800520c <SEGGER_RTT_ReadNoLock>
 8005672:	4603      	mov	r3, r0
 8005674:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	dd54      	ble.n	8005726 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	2b80      	cmp	r3, #128	; 0x80
 8005680:	d032      	beq.n	80056e8 <_HandleIncomingPacket+0x8c>
 8005682:	2b80      	cmp	r3, #128	; 0x80
 8005684:	dc42      	bgt.n	800570c <_HandleIncomingPacket+0xb0>
 8005686:	2b07      	cmp	r3, #7
 8005688:	dc16      	bgt.n	80056b8 <_HandleIncomingPacket+0x5c>
 800568a:	2b00      	cmp	r3, #0
 800568c:	dd3e      	ble.n	800570c <_HandleIncomingPacket+0xb0>
 800568e:	3b01      	subs	r3, #1
 8005690:	2b06      	cmp	r3, #6
 8005692:	d83b      	bhi.n	800570c <_HandleIncomingPacket+0xb0>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <_HandleIncomingPacket+0x40>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056bf 	.word	0x080056bf
 80056a0:	080056c5 	.word	0x080056c5
 80056a4:	080056cb 	.word	0x080056cb
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d7 	.word	0x080056d7
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	080056e3 	.word	0x080056e3
 80056b8:	2b7f      	cmp	r3, #127	; 0x7f
 80056ba:	d036      	beq.n	800572a <_HandleIncomingPacket+0xce>
 80056bc:	e026      	b.n	800570c <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80056be:	f000 ff41 	bl	8006544 <SEGGER_SYSVIEW_Start>
      break;
 80056c2:	e037      	b.n	8005734 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80056c4:	f000 fff8 	bl	80066b8 <SEGGER_SYSVIEW_Stop>
      break;
 80056c8:	e034      	b.n	8005734 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80056ca:	f001 f9d1 	bl	8006a70 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80056ce:	e031      	b.n	8005734 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80056d0:	f001 f996 	bl	8006a00 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80056d4:	e02e      	b.n	8005734 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80056d6:	f001 f815 	bl	8006704 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80056da:	e02b      	b.n	8005734 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80056dc:	f001 fc64 	bl	8006fa8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80056e0:	e028      	b.n	8005734 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80056e2:	f001 fc43 	bl	8006f6c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80056e6:	e025      	b.n	8005734 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80056e8:	4b14      	ldr	r3, [pc, #80]	; (800573c <_HandleIncomingPacket+0xe0>)
 80056ea:	7e1b      	ldrb	r3, [r3, #24]
 80056ec:	4618      	mov	r0, r3
 80056ee:	1cfb      	adds	r3, r7, #3
 80056f0:	2201      	movs	r2, #1
 80056f2:	4619      	mov	r1, r3
 80056f4:	f7ff fd8a 	bl	800520c <SEGGER_RTT_ReadNoLock>
 80056f8:	4603      	mov	r3, r0
 80056fa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	dd15      	ble.n	800572e <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005702:	78fb      	ldrb	r3, [r7, #3]
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fbb1 	bl	8006e6c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800570a:	e010      	b.n	800572e <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800570c:	78fb      	ldrb	r3, [r7, #3]
 800570e:	b25b      	sxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	da0e      	bge.n	8005732 <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <_HandleIncomingPacket+0xe0>)
 8005716:	7e1b      	ldrb	r3, [r3, #24]
 8005718:	4618      	mov	r0, r3
 800571a:	1cfb      	adds	r3, r7, #3
 800571c:	2201      	movs	r2, #1
 800571e:	4619      	mov	r1, r3
 8005720:	f7ff fd74 	bl	800520c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005724:	e005      	b.n	8005732 <_HandleIncomingPacket+0xd6>
    }
  }
 8005726:	bf00      	nop
 8005728:	e004      	b.n	8005734 <_HandleIncomingPacket+0xd8>
      break;
 800572a:	bf00      	nop
 800572c:	e002      	b.n	8005734 <_HandleIncomingPacket+0xd8>
      break;
 800572e:	bf00      	nop
 8005730:	e000      	b.n	8005734 <_HandleIncomingPacket+0xd8>
      break;
 8005732:	bf00      	nop
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	200142b8 	.word	0x200142b8

08005740 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b08c      	sub	sp, #48	; 0x30
 8005744:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005746:	2301      	movs	r3, #1
 8005748:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800574a:	1d3b      	adds	r3, r7, #4
 800574c:	3301      	adds	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005754:	4b31      	ldr	r3, [pc, #196]	; (800581c <_TrySendOverflowPacket+0xdc>)
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
 800575a:	e00b      	b.n	8005774 <_TrySendOverflowPacket+0x34>
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	b2da      	uxtb	r2, r3
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	1c59      	adds	r1, r3, #1
 8005764:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005766:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005770:	09db      	lsrs	r3, r3, #7
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	2b7f      	cmp	r3, #127	; 0x7f
 8005778:	d8f0      	bhi.n	800575c <_TrySendOverflowPacket+0x1c>
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	1c5a      	adds	r2, r3, #1
 800577e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005788:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800578a:	4b25      	ldr	r3, [pc, #148]	; (8005820 <_TrySendOverflowPacket+0xe0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005790:	4b22      	ldr	r3, [pc, #136]	; (800581c <_TrySendOverflowPacket+0xdc>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	623b      	str	r3, [r7, #32]
 80057a2:	e00b      	b.n	80057bc <_TrySendOverflowPacket+0x7c>
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	1c59      	adds	r1, r3, #1
 80057ac:	6279      	str	r1, [r7, #36]	; 0x24
 80057ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
 80057b6:	6a3b      	ldr	r3, [r7, #32]
 80057b8:	09db      	lsrs	r3, r3, #7
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2b7f      	cmp	r3, #127	; 0x7f
 80057c0:	d8f0      	bhi.n	80057a4 <_TrySendOverflowPacket+0x64>
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	1c5a      	adds	r2, r3, #1
 80057c6:	627a      	str	r2, [r7, #36]	; 0x24
 80057c8:	6a3a      	ldr	r2, [r7, #32]
 80057ca:	b2d2      	uxtb	r2, r2
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80057d2:	4b12      	ldr	r3, [pc, #72]	; (800581c <_TrySendOverflowPacket+0xdc>)
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	4618      	mov	r0, r3
 80057d8:	1d3b      	adds	r3, r7, #4
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	461a      	mov	r2, r3
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	f7fa fd0c 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057e8:	4603      	mov	r3, r0
 80057ea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057f2:	4a0a      	ldr	r2, [pc, #40]	; (800581c <_TrySendOverflowPacket+0xdc>)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <_TrySendOverflowPacket+0xdc>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4b06      	ldr	r3, [pc, #24]	; (800581c <_TrySendOverflowPacket+0xdc>)
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e004      	b.n	8005810 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005806:	4b05      	ldr	r3, [pc, #20]	; (800581c <_TrySendOverflowPacket+0xdc>)
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	3301      	adds	r3, #1
 800580c:	4a03      	ldr	r2, [pc, #12]	; (800581c <_TrySendOverflowPacket+0xdc>)
 800580e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005810:	693b      	ldr	r3, [r7, #16]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3730      	adds	r7, #48	; 0x30
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	200142b8 	.word	0x200142b8
 8005820:	e0001004 	.word	0xe0001004

08005824 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005824:	b580      	push	{r7, lr}
 8005826:	b08a      	sub	sp, #40	; 0x28
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005830:	4b6c      	ldr	r3, [pc, #432]	; (80059e4 <_SendPacket+0x1c0>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d010      	beq.n	800585a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005838:	4b6a      	ldr	r3, [pc, #424]	; (80059e4 <_SendPacket+0x1c0>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80a3 	beq.w	8005988 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005842:	4b68      	ldr	r3, [pc, #416]	; (80059e4 <_SendPacket+0x1c0>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b02      	cmp	r3, #2
 8005848:	d109      	bne.n	800585e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800584a:	f7ff ff79 	bl	8005740 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800584e:	4b65      	ldr	r3, [pc, #404]	; (80059e4 <_SendPacket+0x1c0>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	f040 809a 	bne.w	800598c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005858:	e001      	b.n	800585e <_SendPacket+0x3a>
    goto Send;
 800585a:	bf00      	nop
 800585c:	e000      	b.n	8005860 <_SendPacket+0x3c>
Send:
 800585e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b1f      	cmp	r3, #31
 8005864:	d809      	bhi.n	800587a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005866:	4b5f      	ldr	r3, [pc, #380]	; (80059e4 <_SendPacket+0x1c0>)
 8005868:	69da      	ldr	r2, [r3, #28]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	f040 808b 	bne.w	8005990 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b17      	cmp	r3, #23
 800587e:	d807      	bhi.n	8005890 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	3b01      	subs	r3, #1
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	b2da      	uxtb	r2, r3
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	701a      	strb	r2, [r3, #0]
 800588e:	e03d      	b.n	800590c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005898:	69fb      	ldr	r3, [r7, #28]
 800589a:	2b7f      	cmp	r3, #127	; 0x7f
 800589c:	d912      	bls.n	80058c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	09da      	lsrs	r2, r3, #7
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	3a01      	subs	r2, #1
 80058b6:	60fa      	str	r2, [r7, #12]
 80058b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e006      	b.n	80058d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b7f      	cmp	r3, #127	; 0x7f
 80058d6:	d912      	bls.n	80058fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	09da      	lsrs	r2, r3, #7
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3b01      	subs	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	3a01      	subs	r2, #1
 80058f0:	60fa      	str	r2, [r7, #12]
 80058f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	e006      	b.n	800590c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	3b01      	subs	r3, #1
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800590c:	4b36      	ldr	r3, [pc, #216]	; (80059e8 <_SendPacket+0x1c4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005912:	4b34      	ldr	r3, [pc, #208]	; (80059e4 <_SendPacket+0x1c0>)
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	e00b      	b.n	800593e <_SendPacket+0x11a>
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	b2da      	uxtb	r2, r3
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1c59      	adds	r1, r3, #1
 800592e:	6279      	str	r1, [r7, #36]	; 0x24
 8005930:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	09db      	lsrs	r3, r3, #7
 800593c:	623b      	str	r3, [r7, #32]
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	2b7f      	cmp	r3, #127	; 0x7f
 8005942:	d8f0      	bhi.n	8005926 <_SendPacket+0x102>
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	627a      	str	r2, [r7, #36]	; 0x24
 800594a:	6a3a      	ldr	r2, [r7, #32]
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]
 8005950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005952:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005954:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <_SendPacket+0x1c0>)
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	4618      	mov	r0, r3
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	461a      	mov	r2, r3
 8005962:	68f9      	ldr	r1, [r7, #12]
 8005964:	f7fa fc4c 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005968:	4603      	mov	r3, r0
 800596a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005972:	4a1c      	ldr	r2, [pc, #112]	; (80059e4 <_SendPacket+0x1c0>)
 8005974:	69bb      	ldr	r3, [r7, #24]
 8005976:	60d3      	str	r3, [r2, #12]
 8005978:	e00b      	b.n	8005992 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800597a:	4b1a      	ldr	r3, [pc, #104]	; (80059e4 <_SendPacket+0x1c0>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	3301      	adds	r3, #1
 8005980:	b2da      	uxtb	r2, r3
 8005982:	4b18      	ldr	r3, [pc, #96]	; (80059e4 <_SendPacket+0x1c0>)
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	e004      	b.n	8005992 <_SendPacket+0x16e>
    goto SendDone;
 8005988:	bf00      	nop
 800598a:	e002      	b.n	8005992 <_SendPacket+0x16e>
      goto SendDone;
 800598c:	bf00      	nop
 800598e:	e000      	b.n	8005992 <_SendPacket+0x16e>
      goto SendDone;
 8005990:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005992:	4b14      	ldr	r3, [pc, #80]	; (80059e4 <_SendPacket+0x1c0>)
 8005994:	7e1b      	ldrb	r3, [r3, #24]
 8005996:	4619      	mov	r1, r3
 8005998:	4a14      	ldr	r2, [pc, #80]	; (80059ec <_SendPacket+0x1c8>)
 800599a:	460b      	mov	r3, r1
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	440b      	add	r3, r1
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	4413      	add	r3, r2
 80059a4:	336c      	adds	r3, #108	; 0x6c
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	4b0e      	ldr	r3, [pc, #56]	; (80059e4 <_SendPacket+0x1c0>)
 80059aa:	7e1b      	ldrb	r3, [r3, #24]
 80059ac:	4618      	mov	r0, r3
 80059ae:	490f      	ldr	r1, [pc, #60]	; (80059ec <_SendPacket+0x1c8>)
 80059b0:	4603      	mov	r3, r0
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4403      	add	r3, r0
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	440b      	add	r3, r1
 80059ba:	3370      	adds	r3, #112	; 0x70
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d00b      	beq.n	80059da <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <_SendPacket+0x1c0>)
 80059c4:	789b      	ldrb	r3, [r3, #2]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d107      	bne.n	80059da <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <_SendPacket+0x1c0>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80059d0:	f7ff fe44 	bl	800565c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80059d4:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <_SendPacket+0x1c0>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80059da:	bf00      	nop
 80059dc:	3728      	adds	r7, #40	; 0x28
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	200142b8 	.word	0x200142b8
 80059e8:	e0001004 	.word	0xe0001004
 80059ec:	20014468 	.word	0x20014468

080059f0 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	460b      	mov	r3, r1
 80059fa:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	3301      	adds	r3, #1
 8005a06:	2b80      	cmp	r3, #128	; 0x80
 8005a08:	d80a      	bhi.n	8005a20 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6051      	str	r1, [r2, #4]
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b80      	cmp	r3, #128	; 0x80
 8005a26:	d15a      	bne.n	8005ade <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	b2d2      	uxtb	r2, r2
 8005a32:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	623b      	str	r3, [r7, #32]
 8005a48:	e00b      	b.n	8005a62 <_StoreChar+0x72>
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1c59      	adds	r1, r3, #1
 8005a52:	6279      	str	r1, [r7, #36]	; 0x24
 8005a54:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	09db      	lsrs	r3, r3, #7
 8005a60:	623b      	str	r3, [r7, #32]
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	2b7f      	cmp	r3, #127	; 0x7f
 8005a66:	d8f0      	bhi.n	8005a4a <_StoreChar+0x5a>
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	627a      	str	r2, [r7, #36]	; 0x24
 8005a6e:	6a3a      	ldr	r2, [r7, #32]
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	61fb      	str	r3, [r7, #28]
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61bb      	str	r3, [r7, #24]
 8005a80:	e00b      	b.n	8005a9a <_StoreChar+0xaa>
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	1c59      	adds	r1, r3, #1
 8005a8a:	61f9      	str	r1, [r7, #28]
 8005a8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	09db      	lsrs	r3, r3, #7
 8005a98:	61bb      	str	r3, [r7, #24]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a9e:	d8f0      	bhi.n	8005a82 <_StoreChar+0x92>
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	61fa      	str	r2, [r7, #28]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	221a      	movs	r2, #26
 8005ab6:	6939      	ldr	r1, [r7, #16]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff feb3 	bl	8005824 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7ff fdbe 	bl	8005644 <_PreparePacket>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	611a      	str	r2, [r3, #16]
  }
}
 8005ade:	bf00      	nop
 8005ae0:	3728      	adds	r7, #40	; 0x28
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
 8005af4:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005afa:	2301      	movs	r3, #1
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005afe:	2301      	movs	r3, #1
 8005b00:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005b02:	e007      	b.n	8005b14 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0c:	623b      	str	r3, [r7, #32]
    Width++;
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	3301      	adds	r3, #1
 8005b12:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005b14:	6a3a      	ldr	r2, [r7, #32]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d2f3      	bcs.n	8005b04 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d901      	bls.n	8005b28 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11f      	bne.n	8005b72 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01c      	beq.n	8005b72 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <_PrintUnsigned+0x66>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d102      	bne.n	8005b4e <_PrintUnsigned+0x66>
        c = '0';
 8005b48:	2330      	movs	r3, #48	; 0x30
 8005b4a:	76fb      	strb	r3, [r7, #27]
 8005b4c:	e001      	b.n	8005b52 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005b4e:	2320      	movs	r3, #32
 8005b50:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b52:	e007      	b.n	8005b64 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	3b01      	subs	r3, #1
 8005b58:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005b5a:	7efb      	ldrb	r3, [r7, #27]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f7ff ff46 	bl	80059f0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <_PrintUnsigned+0x8a>
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d3f0      	bcc.n	8005b54 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d903      	bls.n	8005b80 <_PrintUnsigned+0x98>
      NumDigits--;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	603b      	str	r3, [r7, #0]
 8005b7e:	e009      	b.n	8005b94 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8005b80:	68ba      	ldr	r2, [r7, #8]
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b88:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d200      	bcs.n	8005b94 <_PrintUnsigned+0xac>
        break;
 8005b92:	e005      	b.n	8005ba0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b9e:	e7e8      	b.n	8005b72 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bae:	fb02 f303 	mul.w	r3, r2, r3
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <_PrintUnsigned+0x128>)
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7ff ff14 	bl	80059f0 <_StoreChar>
    Digit /= Base;
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e3      	bne.n	8005ba0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d011      	beq.n	8005c06 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00e      	beq.n	8005c06 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005be8:	e006      	b.n	8005bf8 <_PrintUnsigned+0x110>
        FieldWidth--;
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	3b01      	subs	r3, #1
 8005bee:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005bf0:	2120      	movs	r1, #32
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f7ff fefc 	bl	80059f0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <_PrintUnsigned+0x11e>
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d3f1      	bcc.n	8005bea <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005c06:	bf00      	nop
 8005c08:	3728      	adds	r7, #40	; 0x28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	080085cc 	.word	0x080085cc

08005c14 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b088      	sub	sp, #32
 8005c18:	af02      	add	r7, sp, #8
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	bfb8      	it	lt
 8005c28:	425b      	neglt	r3, r3
 8005c2a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005c30:	e007      	b.n	8005c42 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	fb92 f3f3 	sdiv	r3, r2, r3
 8005c3a:	613b      	str	r3, [r7, #16]
    Width++;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	daf3      	bge.n	8005c32 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d901      	bls.n	8005c56 <_PrintInt+0x42>
    Width = NumDigits;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00a      	beq.n	8005c72 <_PrintInt+0x5e>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	db04      	blt.n	8005c6c <_PrintInt+0x58>
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <_PrintInt+0x5e>
    FieldWidth--;
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	f003 0302 	and.w	r3, r3, #2
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <_PrintInt+0x6e>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d016      	beq.n	8005cb0 <_PrintInt+0x9c>
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d111      	bne.n	8005cb0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00e      	beq.n	8005cb0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c92:	e006      	b.n	8005ca2 <_PrintInt+0x8e>
        FieldWidth--;
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005c9a:	2120      	movs	r1, #32
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f7ff fea7 	bl	80059f0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <_PrintInt+0x9c>
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d3f1      	bcc.n	8005c94 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da07      	bge.n	8005cc6 <_PrintInt+0xb2>
    v = -v;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	425b      	negs	r3, r3
 8005cba:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005cbc:	212d      	movs	r1, #45	; 0x2d
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff fe96 	bl	80059f0 <_StoreChar>
 8005cc4:	e008      	b.n	8005cd8 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d003      	beq.n	8005cd8 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005cd0:	212b      	movs	r1, #43	; 0x2b
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f7ff fe8c 	bl	80059f0 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	f003 0302 	and.w	r3, r3, #2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d019      	beq.n	8005d16 <_PrintInt+0x102>
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d114      	bne.n	8005d16 <_PrintInt+0x102>
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d111      	bne.n	8005d16 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00e      	beq.n	8005d16 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005cf8:	e006      	b.n	8005d08 <_PrintInt+0xf4>
        FieldWidth--;
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005d00:	2130      	movs	r1, #48	; 0x30
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff fe74 	bl	80059f0 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <_PrintInt+0x102>
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	6a3b      	ldr	r3, [r7, #32]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d3f1      	bcc.n	8005cfa <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f7ff fedf 	bl	8005ae8 <_PrintUnsigned>
}
 8005d2a:	bf00      	nop
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b098      	sub	sp, #96	; 0x60
 8005d38:	af02      	add	r7, sp, #8
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d40:	f3ef 8311 	mrs	r3, BASEPRI
 8005d44:	f04f 0120 	mov.w	r1, #32
 8005d48:	f381 8811 	msr	BASEPRI, r1
 8005d4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005d4e:	48b7      	ldr	r0, [pc, #732]	; (800602c <_VPrintTarget+0x2f8>)
 8005d50:	f7ff fc78 	bl	8005644 <_PreparePacket>
 8005d54:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005d56:	4bb5      	ldr	r3, [pc, #724]	; (800602c <_VPrintTarget+0x2f8>)
 8005d58:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3301      	adds	r3, #1
 8005d66:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005d7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8183 	beq.w	800608a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005d84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d88:	2b25      	cmp	r3, #37	; 0x25
 8005d8a:	f040 8170 	bne.w	800606e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8005d92:	2301      	movs	r3, #1
 8005d94:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8005d9e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005da2:	3b23      	subs	r3, #35	; 0x23
 8005da4:	2b0d      	cmp	r3, #13
 8005da6:	d83f      	bhi.n	8005e28 <_VPrintTarget+0xf4>
 8005da8:	a201      	add	r2, pc, #4	; (adr r2, 8005db0 <_VPrintTarget+0x7c>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005e29 	.word	0x08005e29
 8005db8:	08005e29 	.word	0x08005e29
 8005dbc:	08005e29 	.word	0x08005e29
 8005dc0:	08005e29 	.word	0x08005e29
 8005dc4:	08005e29 	.word	0x08005e29
 8005dc8:	08005e29 	.word	0x08005e29
 8005dcc:	08005e29 	.word	0x08005e29
 8005dd0:	08005e09 	.word	0x08005e09
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005de9 	.word	0x08005de9
 8005ddc:	08005e29 	.word	0x08005e29
 8005de0:	08005e29 	.word	0x08005e29
 8005de4:	08005df9 	.word	0x08005df9
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e01a      	b.n	8005e2e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dfa:	f043 0302 	orr.w	r3, r3, #2
 8005dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e012      	b.n	8005e2e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e0a:	f043 0304 	orr.w	r3, r3, #4
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	3301      	adds	r3, #1
 8005e14:	60fb      	str	r3, [r7, #12]
 8005e16:	e00a      	b.n	8005e2e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e1a:	f043 0308 	orr.w	r3, r3, #8
 8005e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	e002      	b.n	8005e2e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e2c:	bf00      	nop
        }
      } while (v);
 8005e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1b0      	bne.n	8005d96 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005e34:	2300      	movs	r3, #0
 8005e36:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e44:	2b2f      	cmp	r3, #47	; 0x2f
 8005e46:	d912      	bls.n	8005e6e <_VPrintTarget+0x13a>
 8005e48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e4c:	2b39      	cmp	r3, #57	; 0x39
 8005e4e:	d80e      	bhi.n	8005e6e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005e56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e58:	4613      	mov	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	461a      	mov	r2, r3
 8005e62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e66:	4413      	add	r3, r2
 8005e68:	3b30      	subs	r3, #48	; 0x30
 8005e6a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8005e6c:	e7e4      	b.n	8005e38 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8005e7a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8005e80:	d11d      	bne.n	8005ebe <_VPrintTarget+0x18a>
        sFormat++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8005e90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e94:	2b2f      	cmp	r3, #47	; 0x2f
 8005e96:	d912      	bls.n	8005ebe <_VPrintTarget+0x18a>
 8005e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005e9c:	2b39      	cmp	r3, #57	; 0x39
 8005e9e:	d80e      	bhi.n	8005ebe <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3b30      	subs	r3, #48	; 0x30
 8005eba:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8005ebc:	e7e4      	b.n	8005e88 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005ec6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eca:	2b6c      	cmp	r3, #108	; 0x6c
 8005ecc:	d003      	beq.n	8005ed6 <_VPrintTarget+0x1a2>
 8005ece:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005ed2:	2b68      	cmp	r3, #104	; 0x68
 8005ed4:	d107      	bne.n	8005ee6 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005ee4:	e7ef      	b.n	8005ec6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005ee6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005eea:	2b25      	cmp	r3, #37	; 0x25
 8005eec:	f000 80b3 	beq.w	8006056 <_VPrintTarget+0x322>
 8005ef0:	2b25      	cmp	r3, #37	; 0x25
 8005ef2:	f2c0 80b7 	blt.w	8006064 <_VPrintTarget+0x330>
 8005ef6:	2b78      	cmp	r3, #120	; 0x78
 8005ef8:	f300 80b4 	bgt.w	8006064 <_VPrintTarget+0x330>
 8005efc:	2b58      	cmp	r3, #88	; 0x58
 8005efe:	f2c0 80b1 	blt.w	8006064 <_VPrintTarget+0x330>
 8005f02:	3b58      	subs	r3, #88	; 0x58
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	f200 80ad 	bhi.w	8006064 <_VPrintTarget+0x330>
 8005f0a:	a201      	add	r2, pc, #4	; (adr r2, 8005f10 <_VPrintTarget+0x1dc>)
 8005f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f10:	08006007 	.word	0x08006007
 8005f14:	08006065 	.word	0x08006065
 8005f18:	08006065 	.word	0x08006065
 8005f1c:	08006065 	.word	0x08006065
 8005f20:	08006065 	.word	0x08006065
 8005f24:	08006065 	.word	0x08006065
 8005f28:	08006065 	.word	0x08006065
 8005f2c:	08006065 	.word	0x08006065
 8005f30:	08006065 	.word	0x08006065
 8005f34:	08006065 	.word	0x08006065
 8005f38:	08006065 	.word	0x08006065
 8005f3c:	08005f95 	.word	0x08005f95
 8005f40:	08005fbb 	.word	0x08005fbb
 8005f44:	08006065 	.word	0x08006065
 8005f48:	08006065 	.word	0x08006065
 8005f4c:	08006065 	.word	0x08006065
 8005f50:	08006065 	.word	0x08006065
 8005f54:	08006065 	.word	0x08006065
 8005f58:	08006065 	.word	0x08006065
 8005f5c:	08006065 	.word	0x08006065
 8005f60:	08006065 	.word	0x08006065
 8005f64:	08006065 	.word	0x08006065
 8005f68:	08006065 	.word	0x08006065
 8005f6c:	08006065 	.word	0x08006065
 8005f70:	08006031 	.word	0x08006031
 8005f74:	08006065 	.word	0x08006065
 8005f78:	08006065 	.word	0x08006065
 8005f7c:	08006065 	.word	0x08006065
 8005f80:	08006065 	.word	0x08006065
 8005f84:	08005fe1 	.word	0x08005fe1
 8005f88:	08006065 	.word	0x08006065
 8005f8c:	08006065 	.word	0x08006065
 8005f90:	08006007 	.word	0x08006007
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1d19      	adds	r1, r3, #4
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6011      	str	r1, [r2, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005fa8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005fac:	f107 0314 	add.w	r3, r7, #20
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff fd1c 	bl	80059f0 <_StoreChar>
        break;
 8005fb8:	e055      	b.n	8006066 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	1d19      	adds	r1, r3, #4
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	6011      	str	r1, [r2, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005fc8:	f107 0014 	add.w	r0, r7, #20
 8005fcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd6:	220a      	movs	r2, #10
 8005fd8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005fda:	f7ff fe1b 	bl	8005c14 <_PrintInt>
        break;
 8005fde:	e042      	b.n	8006066 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	1d19      	adds	r1, r3, #4
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	6011      	str	r1, [r2, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005fee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005ff0:	f107 0014 	add.w	r0, r7, #20
 8005ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff6:	9301      	str	r3, [sp, #4]
 8005ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffe:	220a      	movs	r2, #10
 8006000:	f7ff fd72 	bl	8005ae8 <_PrintUnsigned>
        break;
 8006004:	e02f      	b.n	8006066 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1d19      	adds	r1, r3, #4
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6011      	str	r1, [r2, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8006014:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006016:	f107 0014 	add.w	r0, r7, #20
 800601a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	2210      	movs	r2, #16
 8006026:	f7ff fd5f 	bl	8005ae8 <_PrintUnsigned>
        break;
 800602a:	e01c      	b.n	8006066 <_VPrintTarget+0x332>
 800602c:	200142e8 	.word	0x200142e8
      case 'p':
        v = va_arg(*pParamList, int);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	1d19      	adds	r1, r3, #4
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6011      	str	r1, [r2, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800603e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006040:	f107 0014 	add.w	r0, r7, #20
 8006044:	2300      	movs	r3, #0
 8006046:	9301      	str	r3, [sp, #4]
 8006048:	2308      	movs	r3, #8
 800604a:	9300      	str	r3, [sp, #0]
 800604c:	2308      	movs	r3, #8
 800604e:	2210      	movs	r2, #16
 8006050:	f7ff fd4a 	bl	8005ae8 <_PrintUnsigned>
        break;
 8006054:	e007      	b.n	8006066 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006056:	f107 0314 	add.w	r3, r7, #20
 800605a:	2125      	movs	r1, #37	; 0x25
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff fcc7 	bl	80059f0 <_StoreChar>
        break;
 8006062:	e000      	b.n	8006066 <_VPrintTarget+0x332>
      default:
        break;
 8006064:	bf00      	nop
      }
      sFormat++;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3301      	adds	r3, #1
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	e007      	b.n	800607e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800606e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006072:	f107 0314 	add.w	r3, r7, #20
 8006076:	4611      	mov	r1, r2
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff fcb9 	bl	80059f0 <_StoreChar>
    }
  } while (*sFormat);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f47f ae72 	bne.w	8005d6c <_VPrintTarget+0x38>
 8006088:	e000      	b.n	800608c <_VPrintTarget+0x358>
      break;
 800608a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	2b00      	cmp	r3, #0
 8006090:	d041      	beq.n	8006116 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	643b      	str	r3, [r7, #64]	; 0x40
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060a2:	e00b      	b.n	80060bc <_VPrintTarget+0x388>
 80060a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060aa:	1c59      	adds	r1, r3, #1
 80060ac:	6439      	str	r1, [r7, #64]	; 0x40
 80060ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b8:	09db      	lsrs	r3, r3, #7
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060be:	2b7f      	cmp	r3, #127	; 0x7f
 80060c0:	d8f0      	bhi.n	80060a4 <_VPrintTarget+0x370>
 80060c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	643a      	str	r2, [r7, #64]	; 0x40
 80060c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]
 80060ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d0:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80060d6:	2300      	movs	r3, #0
 80060d8:	637b      	str	r3, [r7, #52]	; 0x34
 80060da:	e00b      	b.n	80060f4 <_VPrintTarget+0x3c0>
 80060dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	1c59      	adds	r1, r3, #1
 80060e4:	63b9      	str	r1, [r7, #56]	; 0x38
 80060e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f0:	09db      	lsrs	r3, r3, #7
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
 80060f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060f6:	2b7f      	cmp	r3, #127	; 0x7f
 80060f8:	d8f0      	bhi.n	80060dc <_VPrintTarget+0x3a8>
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	63ba      	str	r2, [r7, #56]	; 0x38
 8006100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006108:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	69b9      	ldr	r1, [r7, #24]
 800610e:	221a      	movs	r2, #26
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fb87 	bl	8005824 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	f383 8811 	msr	BASEPRI, r3
#endif
}
 800611c:	bf00      	nop
 800611e:	3758      	adds	r7, #88	; 0x58
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af02      	add	r7, sp, #8
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
 8006130:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006132:	2300      	movs	r3, #0
 8006134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006138:	4917      	ldr	r1, [pc, #92]	; (8006198 <SEGGER_SYSVIEW_Init+0x74>)
 800613a:	4818      	ldr	r0, [pc, #96]	; (800619c <SEGGER_SYSVIEW_Init+0x78>)
 800613c:	f7ff f962 	bl	8005404 <SEGGER_RTT_AllocUpBuffer>
 8006140:	4603      	mov	r3, r0
 8006142:	b2da      	uxtb	r2, r3
 8006144:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006146:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006148:	4b15      	ldr	r3, [pc, #84]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800614a:	785a      	ldrb	r2, [r3, #1]
 800614c:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800614e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006150:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006152:	7e1b      	ldrb	r3, [r3, #24]
 8006154:	4618      	mov	r0, r3
 8006156:	2300      	movs	r3, #0
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	2308      	movs	r3, #8
 800615c:	4a11      	ldr	r2, [pc, #68]	; (80061a4 <SEGGER_SYSVIEW_Init+0x80>)
 800615e:	490f      	ldr	r1, [pc, #60]	; (800619c <SEGGER_SYSVIEW_Init+0x78>)
 8006160:	f7ff f9d4 	bl	800550c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006164:	4b0e      	ldr	r3, [pc, #56]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006166:	2200      	movs	r2, #0
 8006168:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <SEGGER_SYSVIEW_Init+0x84>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a0c      	ldr	r2, [pc, #48]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006170:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006172:	4a0b      	ldr	r2, [pc, #44]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006178:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800617e:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006184:	4a06      	ldr	r2, [pc, #24]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <SEGGER_SYSVIEW_Init+0x7c>)
 800618c:	2200      	movs	r2, #0
 800618e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	200132b0 	.word	0x200132b0
 800619c:	08008568 	.word	0x08008568
 80061a0:	200142b8 	.word	0x200142b8
 80061a4:	200142b0 	.word	0x200142b0
 80061a8:	e0001004 	.word	0xe0001004

080061ac <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80061b4:	4a04      	ldr	r2, [pc, #16]	; (80061c8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6113      	str	r3, [r2, #16]
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	200142b8 	.word	0x200142b8

080061cc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061d4:	f3ef 8311 	mrs	r3, BASEPRI
 80061d8:	f04f 0120 	mov.w	r1, #32
 80061dc:	f381 8811 	msr	BASEPRI, r1
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	4808      	ldr	r0, [pc, #32]	; (8006204 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80061e4:	f7ff fa2e 	bl	8005644 <_PreparePacket>
 80061e8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	f7ff fb18 	bl	8005824 <_SendPacket>
  RECORD_END();
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f383 8811 	msr	BASEPRI, r3
}
 80061fa:	bf00      	nop
 80061fc:	3710      	adds	r7, #16
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	200142e8 	.word	0x200142e8

08006208 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006212:	f3ef 8311 	mrs	r3, BASEPRI
 8006216:	f04f 0120 	mov.w	r1, #32
 800621a:	f381 8811 	msr	BASEPRI, r1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	4816      	ldr	r0, [pc, #88]	; (800627c <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006222:	f7ff fa0f 	bl	8005644 <_PreparePacket>
 8006226:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	61fb      	str	r3, [r7, #28]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e00b      	b.n	800624e <SEGGER_SYSVIEW_RecordU32+0x46>
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	b2da      	uxtb	r2, r3
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	1c59      	adds	r1, r3, #1
 800623e:	61f9      	str	r1, [r7, #28]
 8006240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006244:	b2d2      	uxtb	r2, r2
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	09db      	lsrs	r3, r3, #7
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b7f      	cmp	r3, #127	; 0x7f
 8006252:	d8f0      	bhi.n	8006236 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	61fa      	str	r2, [r7, #28]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	68f9      	ldr	r1, [r7, #12]
 8006268:	6938      	ldr	r0, [r7, #16]
 800626a:	f7ff fadb 	bl	8005824 <_SendPacket>
  RECORD_END();
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f383 8811 	msr	BASEPRI, r3
}
 8006274:	bf00      	nop
 8006276:	3720      	adds	r7, #32
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	200142e8 	.word	0x200142e8

08006280 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006280:	b580      	push	{r7, lr}
 8006282:	b08c      	sub	sp, #48	; 0x30
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800628c:	f3ef 8311 	mrs	r3, BASEPRI
 8006290:	f04f 0120 	mov.w	r1, #32
 8006294:	f381 8811 	msr	BASEPRI, r1
 8006298:	61fb      	str	r3, [r7, #28]
 800629a:	4825      	ldr	r0, [pc, #148]	; (8006330 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800629c:	f7ff f9d2 	bl	8005644 <_PreparePacket>
 80062a0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80062ae:	e00b      	b.n	80062c8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b6:	1c59      	adds	r1, r3, #1
 80062b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80062ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	701a      	strb	r2, [r3, #0]
 80062c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	2b7f      	cmp	r3, #127	; 0x7f
 80062cc:	d8f0      	bhi.n	80062b0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80062ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
 80062da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062dc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	623b      	str	r3, [r7, #32]
 80062e6:	e00b      	b.n	8006300 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	1c59      	adds	r1, r3, #1
 80062f0:	6279      	str	r1, [r7, #36]	; 0x24
 80062f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062f6:	b2d2      	uxtb	r2, r2
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	09db      	lsrs	r3, r3, #7
 80062fe:	623b      	str	r3, [r7, #32]
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	2b7f      	cmp	r3, #127	; 0x7f
 8006304:	d8f0      	bhi.n	80062e8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	627a      	str	r2, [r7, #36]	; 0x24
 800630c:	6a3a      	ldr	r2, [r7, #32]
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]
 8006312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006314:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	6979      	ldr	r1, [r7, #20]
 800631a:	69b8      	ldr	r0, [r7, #24]
 800631c:	f7ff fa82 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	f383 8811 	msr	BASEPRI, r3
}
 8006326:	bf00      	nop
 8006328:	3730      	adds	r7, #48	; 0x30
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	200142e8 	.word	0x200142e8

08006334 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b08e      	sub	sp, #56	; 0x38
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006342:	f3ef 8311 	mrs	r3, BASEPRI
 8006346:	f04f 0120 	mov.w	r1, #32
 800634a:	f381 8811 	msr	BASEPRI, r1
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	4832      	ldr	r0, [pc, #200]	; (800641c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006352:	f7ff f977 	bl	8005644 <_PreparePacket>
 8006356:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	637b      	str	r3, [r7, #52]	; 0x34
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	633b      	str	r3, [r7, #48]	; 0x30
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	b2da      	uxtb	r2, r3
 800636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	6379      	str	r1, [r7, #52]	; 0x34
 8006370:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	633b      	str	r3, [r7, #48]	; 0x30
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	2b7f      	cmp	r3, #127	; 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	637a      	str	r2, [r7, #52]	; 0x34
 800638a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006392:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	62bb      	str	r3, [r7, #40]	; 0x28
 800639c:	e00b      	b.n	80063b6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80063a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	701a      	strb	r2, [r3, #0]
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	09db      	lsrs	r3, r3, #7
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	2b7f      	cmp	r3, #127	; 0x7f
 80063ba:	d8f0      	bhi.n	800639e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	1c5a      	adds	r2, r3, #1
 80063c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80063c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	623b      	str	r3, [r7, #32]
 80063d4:	e00b      	b.n	80063ee <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	6279      	str	r1, [r7, #36]	; 0x24
 80063e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	09db      	lsrs	r3, r3, #7
 80063ec:	623b      	str	r3, [r7, #32]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	2b7f      	cmp	r3, #127	; 0x7f
 80063f2:	d8f0      	bhi.n	80063d6 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80063f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	627a      	str	r2, [r7, #36]	; 0x24
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	6979      	ldr	r1, [r7, #20]
 8006408:	69b8      	ldr	r0, [r7, #24]
 800640a:	f7ff fa0b 	bl	8005824 <_SendPacket>
  RECORD_END();
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f383 8811 	msr	BASEPRI, r3
}
 8006414:	bf00      	nop
 8006416:	3738      	adds	r7, #56	; 0x38
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	200142e8 	.word	0x200142e8

08006420 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b090      	sub	sp, #64	; 0x40
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
 800642c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800642e:	f3ef 8311 	mrs	r3, BASEPRI
 8006432:	f04f 0120 	mov.w	r1, #32
 8006436:	f381 8811 	msr	BASEPRI, r1
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	4840      	ldr	r0, [pc, #256]	; (8006540 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800643e:	f7ff f901 	bl	8005644 <_PreparePacket>
 8006442:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006450:	e00b      	b.n	800646a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006454:	b2da      	uxtb	r2, r3
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	1c59      	adds	r1, r3, #1
 800645a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800645c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006466:	09db      	lsrs	r3, r3, #7
 8006468:	63bb      	str	r3, [r7, #56]	; 0x38
 800646a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800646c:	2b7f      	cmp	r3, #127	; 0x7f
 800646e:	d8f0      	bhi.n	8006452 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006478:	b2d2      	uxtb	r2, r2
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800647e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	637b      	str	r3, [r7, #52]	; 0x34
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
 8006488:	e00b      	b.n	80064a2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	b2da      	uxtb	r2, r3
 800648e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006490:	1c59      	adds	r1, r3, #1
 8006492:	6379      	str	r1, [r7, #52]	; 0x34
 8006494:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	09db      	lsrs	r3, r3, #7
 80064a0:	633b      	str	r3, [r7, #48]	; 0x30
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	2b7f      	cmp	r3, #127	; 0x7f
 80064a6:	d8f0      	bhi.n	800648a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	637a      	str	r2, [r7, #52]	; 0x34
 80064ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
 80064c0:	e00b      	b.n	80064da <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c8:	1c59      	adds	r1, r3, #1
 80064ca:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064d0:	b2d2      	uxtb	r2, r2
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	09db      	lsrs	r3, r3, #7
 80064d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	2b7f      	cmp	r3, #127	; 0x7f
 80064de:	d8f0      	bhi.n	80064c2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	1c5a      	adds	r2, r3, #1
 80064e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	701a      	strb	r2, [r3, #0]
 80064ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	627b      	str	r3, [r7, #36]	; 0x24
 80064f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f6:	623b      	str	r3, [r7, #32]
 80064f8:	e00b      	b.n	8006512 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80064fa:	6a3b      	ldr	r3, [r7, #32]
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	1c59      	adds	r1, r3, #1
 8006502:	6279      	str	r1, [r7, #36]	; 0x24
 8006504:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	701a      	strb	r2, [r3, #0]
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	09db      	lsrs	r3, r3, #7
 8006510:	623b      	str	r3, [r7, #32]
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	2b7f      	cmp	r3, #127	; 0x7f
 8006516:	d8f0      	bhi.n	80064fa <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	627a      	str	r2, [r7, #36]	; 0x24
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	6979      	ldr	r1, [r7, #20]
 800652c:	69b8      	ldr	r0, [r7, #24]
 800652e:	f7ff f979 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f383 8811 	msr	BASEPRI, r3
}
 8006538:	bf00      	nop
 800653a:	3740      	adds	r7, #64	; 0x40
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	200142e8 	.word	0x200142e8

08006544 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b08c      	sub	sp, #48	; 0x30
 8006548:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800654a:	4b58      	ldr	r3, [pc, #352]	; (80066ac <SEGGER_SYSVIEW_Start+0x168>)
 800654c:	2201      	movs	r2, #1
 800654e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006550:	f3ef 8311 	mrs	r3, BASEPRI
 8006554:	f04f 0120 	mov.w	r1, #32
 8006558:	f381 8811 	msr	BASEPRI, r1
 800655c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800655e:	4b53      	ldr	r3, [pc, #332]	; (80066ac <SEGGER_SYSVIEW_Start+0x168>)
 8006560:	785b      	ldrb	r3, [r3, #1]
 8006562:	220a      	movs	r2, #10
 8006564:	4952      	ldr	r1, [pc, #328]	; (80066b0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 fe4a 	bl	8000200 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006572:	200a      	movs	r0, #10
 8006574:	f7ff fe2a 	bl	80061cc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006578:	f3ef 8311 	mrs	r3, BASEPRI
 800657c:	f04f 0120 	mov.w	r1, #32
 8006580:	f381 8811 	msr	BASEPRI, r1
 8006584:	60bb      	str	r3, [r7, #8]
 8006586:	484b      	ldr	r0, [pc, #300]	; (80066b4 <SEGGER_SYSVIEW_Start+0x170>)
 8006588:	f7ff f85c 	bl	8005644 <_PreparePacket>
 800658c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006596:	4b45      	ldr	r3, [pc, #276]	; (80066ac <SEGGER_SYSVIEW_Start+0x168>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
 800659c:	e00b      	b.n	80065b6 <SEGGER_SYSVIEW_Start+0x72>
 800659e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a0:	b2da      	uxtb	r2, r3
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	1c59      	adds	r1, r3, #1
 80065a6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	09db      	lsrs	r3, r3, #7
 80065b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	2b7f      	cmp	r3, #127	; 0x7f
 80065ba:	d8f0      	bhi.n	800659e <SEGGER_SYSVIEW_Start+0x5a>
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065c4:	b2d2      	uxtb	r2, r2
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24
 80065d0:	4b36      	ldr	r3, [pc, #216]	; (80066ac <SEGGER_SYSVIEW_Start+0x168>)
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	623b      	str	r3, [r7, #32]
 80065d6:	e00b      	b.n	80065f0 <SEGGER_SYSVIEW_Start+0xac>
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	6279      	str	r1, [r7, #36]	; 0x24
 80065e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	09db      	lsrs	r3, r3, #7
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2b7f      	cmp	r3, #127	; 0x7f
 80065f4:	d8f0      	bhi.n	80065d8 <SEGGER_SYSVIEW_Start+0x94>
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	627a      	str	r2, [r7, #36]	; 0x24
 80065fc:	6a3a      	ldr	r2, [r7, #32]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	4b28      	ldr	r3, [pc, #160]	; (80066ac <SEGGER_SYSVIEW_Start+0x168>)
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	e00b      	b.n	800662a <SEGGER_SYSVIEW_Start+0xe6>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	b2da      	uxtb	r2, r3
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	1c59      	adds	r1, r3, #1
 800661a:	61f9      	str	r1, [r7, #28]
 800661c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	701a      	strb	r2, [r3, #0]
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	09db      	lsrs	r3, r3, #7
 8006628:	61bb      	str	r3, [r7, #24]
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	2b7f      	cmp	r3, #127	; 0x7f
 800662e:	d8f0      	bhi.n	8006612 <SEGGER_SYSVIEW_Start+0xce>
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	1c5a      	adds	r2, r3, #1
 8006634:	61fa      	str	r2, [r7, #28]
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	b2d2      	uxtb	r2, r2
 800663a:	701a      	strb	r2, [r3, #0]
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	2300      	movs	r3, #0
 8006646:	613b      	str	r3, [r7, #16]
 8006648:	e00b      	b.n	8006662 <SEGGER_SYSVIEW_Start+0x11e>
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	b2da      	uxtb	r2, r3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	1c59      	adds	r1, r3, #1
 8006652:	6179      	str	r1, [r7, #20]
 8006654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	09db      	lsrs	r3, r3, #7
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2b7f      	cmp	r3, #127	; 0x7f
 8006666:	d8f0      	bhi.n	800664a <SEGGER_SYSVIEW_Start+0x106>
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	617a      	str	r2, [r7, #20]
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006678:	2218      	movs	r2, #24
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7ff f8d1 	bl	8005824 <_SendPacket>
      RECORD_END();
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006688:	4b08      	ldr	r3, [pc, #32]	; (80066ac <SEGGER_SYSVIEW_Start+0x168>)
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006690:	4b06      	ldr	r3, [pc, #24]	; (80066ac <SEGGER_SYSVIEW_Start+0x168>)
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006696:	f000 f9eb 	bl	8006a70 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800669a:	f000 f9b1 	bl	8006a00 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800669e:	f000 fc83 	bl	8006fa8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80066a2:	bf00      	nop
 80066a4:	3730      	adds	r7, #48	; 0x30
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	200142b8 	.word	0x200142b8
 80066b0:	080085c0 	.word	0x080085c0
 80066b4:	200142e8 	.word	0x200142e8

080066b8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066be:	f3ef 8311 	mrs	r3, BASEPRI
 80066c2:	f04f 0120 	mov.w	r1, #32
 80066c6:	f381 8811 	msr	BASEPRI, r1
 80066ca:	607b      	str	r3, [r7, #4]
 80066cc:	480b      	ldr	r0, [pc, #44]	; (80066fc <SEGGER_SYSVIEW_Stop+0x44>)
 80066ce:	f7fe ffb9 	bl	8005644 <_PreparePacket>
 80066d2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80066d4:	4b0a      	ldr	r3, [pc, #40]	; (8006700 <SEGGER_SYSVIEW_Stop+0x48>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80066dc:	220b      	movs	r2, #11
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6838      	ldr	r0, [r7, #0]
 80066e2:	f7ff f89f 	bl	8005824 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80066e6:	4b06      	ldr	r3, [pc, #24]	; (8006700 <SEGGER_SYSVIEW_Stop+0x48>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f383 8811 	msr	BASEPRI, r3
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	200142e8 	.word	0x200142e8
 8006700:	200142b8 	.word	0x200142b8

08006704 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006704:	b580      	push	{r7, lr}
 8006706:	b08c      	sub	sp, #48	; 0x30
 8006708:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800670a:	f3ef 8311 	mrs	r3, BASEPRI
 800670e:	f04f 0120 	mov.w	r1, #32
 8006712:	f381 8811 	msr	BASEPRI, r1
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	4845      	ldr	r0, [pc, #276]	; (8006830 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800671a:	f7fe ff93 	bl	8005644 <_PreparePacket>
 800671e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006728:	4b42      	ldr	r3, [pc, #264]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	62bb      	str	r3, [r7, #40]	; 0x28
 800672e:	e00b      	b.n	8006748 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006732:	b2da      	uxtb	r2, r3
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	62f9      	str	r1, [r7, #44]	; 0x2c
 800673a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	09db      	lsrs	r3, r3, #7
 8006746:	62bb      	str	r3, [r7, #40]	; 0x28
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	2b7f      	cmp	r3, #127	; 0x7f
 800674c:	d8f0      	bhi.n	8006730 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
 8006762:	4b34      	ldr	r3, [pc, #208]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	623b      	str	r3, [r7, #32]
 8006768:	e00b      	b.n	8006782 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	b2da      	uxtb	r2, r3
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	1c59      	adds	r1, r3, #1
 8006772:	6279      	str	r1, [r7, #36]	; 0x24
 8006774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	09db      	lsrs	r3, r3, #7
 8006780:	623b      	str	r3, [r7, #32]
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	2b7f      	cmp	r3, #127	; 0x7f
 8006786:	d8f0      	bhi.n	800676a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	627a      	str	r2, [r7, #36]	; 0x24
 800678e:	6a3a      	ldr	r2, [r7, #32]
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006796:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e00b      	b.n	80067bc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	61f9      	str	r1, [r7, #28]
 80067ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067b2:	b2d2      	uxtb	r2, r2
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	09db      	lsrs	r3, r3, #7
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	2b7f      	cmp	r3, #127	; 0x7f
 80067c0:	d8f0      	bhi.n	80067a4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	1c5a      	adds	r2, r3, #1
 80067c6:	61fa      	str	r2, [r7, #28]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	617b      	str	r3, [r7, #20]
 80067d6:	2300      	movs	r3, #0
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	e00b      	b.n	80067f4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1c59      	adds	r1, r3, #1
 80067e4:	6179      	str	r1, [r7, #20]
 80067e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067ea:	b2d2      	uxtb	r2, r2
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	09db      	lsrs	r3, r3, #7
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	2b7f      	cmp	r3, #127	; 0x7f
 80067f8:	d8f0      	bhi.n	80067dc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	617a      	str	r2, [r7, #20]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800680a:	2218      	movs	r2, #24
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	68b8      	ldr	r0, [r7, #8]
 8006810:	f7ff f808 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800681a:	4b06      	ldr	r3, [pc, #24]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006822:	4b04      	ldr	r3, [pc, #16]	; (8006834 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	4798      	blx	r3
  }
}
 8006828:	bf00      	nop
 800682a:	3730      	adds	r7, #48	; 0x30
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	200142e8 	.word	0x200142e8
 8006834:	200142b8 	.word	0x200142b8

08006838 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b092      	sub	sp, #72	; 0x48
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006840:	f3ef 8311 	mrs	r3, BASEPRI
 8006844:	f04f 0120 	mov.w	r1, #32
 8006848:	f381 8811 	msr	BASEPRI, r1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	486a      	ldr	r0, [pc, #424]	; (80069f8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006850:	f7fe fef8 	bl	8005644 <_PreparePacket>
 8006854:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	647b      	str	r3, [r7, #68]	; 0x44
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	4b66      	ldr	r3, [pc, #408]	; (80069fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
 800686a:	e00b      	b.n	8006884 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800686c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686e:	b2da      	uxtb	r2, r3
 8006870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006872:	1c59      	adds	r1, r3, #1
 8006874:	6479      	str	r1, [r7, #68]	; 0x44
 8006876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006880:	09db      	lsrs	r3, r3, #7
 8006882:	643b      	str	r3, [r7, #64]	; 0x40
 8006884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006886:	2b7f      	cmp	r3, #127	; 0x7f
 8006888:	d8f0      	bhi.n	800686c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800688a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800688c:	1c5a      	adds	r2, r3, #1
 800688e:	647a      	str	r2, [r7, #68]	; 0x44
 8006890:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]
 8006896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006898:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80068a4:	e00b      	b.n	80068be <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80068a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ac:	1c59      	adds	r1, r3, #1
 80068ae:	63f9      	str	r1, [r7, #60]	; 0x3c
 80068b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068b4:	b2d2      	uxtb	r2, r2
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	09db      	lsrs	r3, r3, #7
 80068bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	2b7f      	cmp	r3, #127	; 0x7f
 80068c2:	d8f0      	bhi.n	80068a6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80068ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	4619      	mov	r1, r3
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7fe fe61 	bl	80055a4 <_EncodeStr>
 80068e2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80068e4:	2209      	movs	r2, #9
 80068e6:	68f9      	ldr	r1, [r7, #12]
 80068e8:	6938      	ldr	r0, [r7, #16]
 80068ea:	f7fe ff9b 	bl	8005824 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4b40      	ldr	r3, [pc, #256]	; (80069fc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	633b      	str	r3, [r7, #48]	; 0x30
 8006902:	e00b      	b.n	800691c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006906:	b2da      	uxtb	r2, r3
 8006908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690a:	1c59      	adds	r1, r3, #1
 800690c:	6379      	str	r1, [r7, #52]	; 0x34
 800690e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006912:	b2d2      	uxtb	r2, r2
 8006914:	701a      	strb	r2, [r3, #0]
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	09db      	lsrs	r3, r3, #7
 800691a:	633b      	str	r3, [r7, #48]	; 0x30
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	2b7f      	cmp	r3, #127	; 0x7f
 8006920:	d8f0      	bhi.n	8006904 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	637a      	str	r2, [r7, #52]	; 0x34
 8006928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800692a:	b2d2      	uxtb	r2, r2
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006930:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	62bb      	str	r3, [r7, #40]	; 0x28
 800693c:	e00b      	b.n	8006956 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	b2da      	uxtb	r2, r3
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	1c59      	adds	r1, r3, #1
 8006946:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006948:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	701a      	strb	r2, [r3, #0]
 8006950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006952:	09db      	lsrs	r3, r3, #7
 8006954:	62bb      	str	r3, [r7, #40]	; 0x28
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	2b7f      	cmp	r3, #127	; 0x7f
 800695a:	d8f0      	bhi.n	800693e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006964:	b2d2      	uxtb	r2, r2
 8006966:	701a      	strb	r2, [r3, #0]
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	627b      	str	r3, [r7, #36]	; 0x24
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	e00b      	b.n	8006990 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006978:	6a3b      	ldr	r3, [r7, #32]
 800697a:	b2da      	uxtb	r2, r3
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	1c59      	adds	r1, r3, #1
 8006980:	6279      	str	r1, [r7, #36]	; 0x24
 8006982:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	09db      	lsrs	r3, r3, #7
 800698e:	623b      	str	r3, [r7, #32]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	2b7f      	cmp	r3, #127	; 0x7f
 8006994:	d8f0      	bhi.n	8006978 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	1c5a      	adds	r2, r3, #1
 800699a:	627a      	str	r2, [r7, #36]	; 0x24
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	b2d2      	uxtb	r2, r2
 80069a0:	701a      	strb	r2, [r3, #0]
 80069a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	61fb      	str	r3, [r7, #28]
 80069aa:	2300      	movs	r3, #0
 80069ac:	61bb      	str	r3, [r7, #24]
 80069ae:	e00b      	b.n	80069c8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	1c59      	adds	r1, r3, #1
 80069b8:	61f9      	str	r1, [r7, #28]
 80069ba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	09db      	lsrs	r3, r3, #7
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	2b7f      	cmp	r3, #127	; 0x7f
 80069cc:	d8f0      	bhi.n	80069b0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	1c5a      	adds	r2, r3, #1
 80069d2:	61fa      	str	r2, [r7, #28]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	b2d2      	uxtb	r2, r2
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80069de:	2215      	movs	r2, #21
 80069e0:	68f9      	ldr	r1, [r7, #12]
 80069e2:	6938      	ldr	r0, [r7, #16]
 80069e4:	f7fe ff1e 	bl	8005824 <_SendPacket>
  RECORD_END();
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f383 8811 	msr	BASEPRI, r3
}
 80069ee:	bf00      	nop
 80069f0:	3748      	adds	r7, #72	; 0x48
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	200142e8 	.word	0x200142e8
 80069fc:	200142b8 	.word	0x200142b8

08006a00 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006a04:	4b07      	ldr	r3, [pc, #28]	; (8006a24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d008      	beq.n	8006a1e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006a0c:	4b05      	ldr	r3, [pc, #20]	; (8006a24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006a16:	4b03      	ldr	r3, [pc, #12]	; (8006a24 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	4798      	blx	r3
  }
}
 8006a1e:	bf00      	nop
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200142b8 	.word	0x200142b8

08006a28 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a30:	f3ef 8311 	mrs	r3, BASEPRI
 8006a34:	f04f 0120 	mov.w	r1, #32
 8006a38:	f381 8811 	msr	BASEPRI, r1
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	480b      	ldr	r0, [pc, #44]	; (8006a6c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006a40:	f7fe fe00 	bl	8005644 <_PreparePacket>
 8006a44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a46:	2280      	movs	r2, #128	; 0x80
 8006a48:	6879      	ldr	r1, [r7, #4]
 8006a4a:	6938      	ldr	r0, [r7, #16]
 8006a4c:	f7fe fdaa 	bl	80055a4 <_EncodeStr>
 8006a50:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006a52:	220e      	movs	r2, #14
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	6938      	ldr	r0, [r7, #16]
 8006a58:	f7fe fee4 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f383 8811 	msr	BASEPRI, r3
}
 8006a62:	bf00      	nop
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	200142e8 	.word	0x200142e8

08006a70 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a70:	b590      	push	{r4, r7, lr}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a76:	4b15      	ldr	r3, [pc, #84]	; (8006acc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01a      	beq.n	8006ab4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a7e:	4b13      	ldr	r3, [pc, #76]	; (8006acc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d015      	beq.n	8006ab4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a88:	4b10      	ldr	r3, [pc, #64]	; (8006acc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4798      	blx	r3
 8006a90:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a94:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a9a:	f04f 0200 	mov.w	r2, #0
 8006a9e:	f04f 0300 	mov.w	r3, #0
 8006aa2:	000a      	movs	r2, r1
 8006aa4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006aa6:	4613      	mov	r3, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4621      	mov	r1, r4
 8006aac:	200d      	movs	r0, #13
 8006aae:	f7ff fbe7 	bl	8006280 <SEGGER_SYSVIEW_RecordU32x2>
 8006ab2:	e006      	b.n	8006ac2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	200c      	movs	r0, #12
 8006abc:	f7ff fba4 	bl	8006208 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd90      	pop	{r4, r7, pc}
 8006aca:	bf00      	nop
 8006acc:	200142b8 	.word	0x200142b8
 8006ad0:	e0001004 	.word	0xe0001004

08006ad4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ada:	f3ef 8311 	mrs	r3, BASEPRI
 8006ade:	f04f 0120 	mov.w	r1, #32
 8006ae2:	f381 8811 	msr	BASEPRI, r1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	4819      	ldr	r0, [pc, #100]	; (8006b50 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006aea:	f7fe fdab 	bl	8005644 <_PreparePacket>
 8006aee:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006af4:	4b17      	ldr	r3, [pc, #92]	; (8006b54 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	613b      	str	r3, [r7, #16]
 8006b06:	e00b      	b.n	8006b20 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	1c59      	adds	r1, r3, #1
 8006b10:	6179      	str	r1, [r7, #20]
 8006b12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	09db      	lsrs	r3, r3, #7
 8006b1e:	613b      	str	r3, [r7, #16]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b7f      	cmp	r3, #127	; 0x7f
 8006b24:	d8f0      	bhi.n	8006b08 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	1c5a      	adds	r2, r3, #1
 8006b2a:	617a      	str	r2, [r7, #20]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006b36:	2202      	movs	r2, #2
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	68b8      	ldr	r0, [r7, #8]
 8006b3c:	f7fe fe72 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f383 8811 	msr	BASEPRI, r3
}
 8006b46:	bf00      	nop
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	200142e8 	.word	0x200142e8
 8006b54:	e000ed04 	.word	0xe000ed04

08006b58 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b62:	f04f 0120 	mov.w	r1, #32
 8006b66:	f381 8811 	msr	BASEPRI, r1
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	4807      	ldr	r0, [pc, #28]	; (8006b8c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b6e:	f7fe fd69 	bl	8005644 <_PreparePacket>
 8006b72:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b74:	2203      	movs	r2, #3
 8006b76:	6839      	ldr	r1, [r7, #0]
 8006b78:	6838      	ldr	r0, [r7, #0]
 8006b7a:	f7fe fe53 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f383 8811 	msr	BASEPRI, r3
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	200142e8 	.word	0x200142e8

08006b90 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b96:	f3ef 8311 	mrs	r3, BASEPRI
 8006b9a:	f04f 0120 	mov.w	r1, #32
 8006b9e:	f381 8811 	msr	BASEPRI, r1
 8006ba2:	607b      	str	r3, [r7, #4]
 8006ba4:	4807      	ldr	r0, [pc, #28]	; (8006bc4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006ba6:	f7fe fd4d 	bl	8005644 <_PreparePacket>
 8006baa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006bac:	2212      	movs	r2, #18
 8006bae:	6839      	ldr	r1, [r7, #0]
 8006bb0:	6838      	ldr	r0, [r7, #0]
 8006bb2:	f7fe fe37 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f383 8811 	msr	BASEPRI, r3
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	200142e8 	.word	0x200142e8

08006bc8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006bce:	f3ef 8311 	mrs	r3, BASEPRI
 8006bd2:	f04f 0120 	mov.w	r1, #32
 8006bd6:	f381 8811 	msr	BASEPRI, r1
 8006bda:	607b      	str	r3, [r7, #4]
 8006bdc:	4807      	ldr	r0, [pc, #28]	; (8006bfc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006bde:	f7fe fd31 	bl	8005644 <_PreparePacket>
 8006be2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006be4:	2211      	movs	r2, #17
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	6838      	ldr	r0, [r7, #0]
 8006bea:	f7fe fe1b 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f383 8811 	msr	BASEPRI, r3
}
 8006bf4:	bf00      	nop
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	200142e8 	.word	0x200142e8

08006c00 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c08:	f3ef 8311 	mrs	r3, BASEPRI
 8006c0c:	f04f 0120 	mov.w	r1, #32
 8006c10:	f381 8811 	msr	BASEPRI, r1
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	4819      	ldr	r0, [pc, #100]	; (8006c7c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006c18:	f7fe fd14 	bl	8005644 <_PreparePacket>
 8006c1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	61fb      	str	r3, [r7, #28]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	e00b      	b.n	8006c4e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	1c59      	adds	r1, r3, #1
 8006c3e:	61f9      	str	r1, [r7, #28]
 8006c40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	09db      	lsrs	r3, r3, #7
 8006c4c:	61bb      	str	r3, [r7, #24]
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b7f      	cmp	r3, #127	; 0x7f
 8006c52:	d8f0      	bhi.n	8006c36 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	61fa      	str	r2, [r7, #28]
 8006c5a:	69ba      	ldr	r2, [r7, #24]
 8006c5c:	b2d2      	uxtb	r2, r2
 8006c5e:	701a      	strb	r2, [r3, #0]
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c64:	2208      	movs	r2, #8
 8006c66:	68f9      	ldr	r1, [r7, #12]
 8006c68:	6938      	ldr	r0, [r7, #16]
 8006c6a:	f7fe fddb 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f383 8811 	msr	BASEPRI, r3
}
 8006c74:	bf00      	nop
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	200142e8 	.word	0x200142e8
 8006c80:	200142b8 	.word	0x200142b8

08006c84 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b088      	sub	sp, #32
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c8c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c90:	f04f 0120 	mov.w	r1, #32
 8006c94:	f381 8811 	msr	BASEPRI, r1
 8006c98:	617b      	str	r3, [r7, #20]
 8006c9a:	4819      	ldr	r0, [pc, #100]	; (8006d00 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c9c:	f7fe fcd2 	bl	8005644 <_PreparePacket>
 8006ca0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ca6:	4b17      	ldr	r3, [pc, #92]	; (8006d04 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	61fb      	str	r3, [r7, #28]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e00b      	b.n	8006cd2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	1c59      	adds	r1, r3, #1
 8006cc2:	61f9      	str	r1, [r7, #28]
 8006cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc8:	b2d2      	uxtb	r2, r2
 8006cca:	701a      	strb	r2, [r3, #0]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	09db      	lsrs	r3, r3, #7
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8006cd6:	d8f0      	bhi.n	8006cba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	61fa      	str	r2, [r7, #28]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	b2d2      	uxtb	r2, r2
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ce8:	2204      	movs	r2, #4
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	6938      	ldr	r0, [r7, #16]
 8006cee:	f7fe fd99 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	f383 8811 	msr	BASEPRI, r3
}
 8006cf8:	bf00      	nop
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	200142e8 	.word	0x200142e8
 8006d04:	200142b8 	.word	0x200142b8

08006d08 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006d10:	f3ef 8311 	mrs	r3, BASEPRI
 8006d14:	f04f 0120 	mov.w	r1, #32
 8006d18:	f381 8811 	msr	BASEPRI, r1
 8006d1c:	617b      	str	r3, [r7, #20]
 8006d1e:	4819      	ldr	r0, [pc, #100]	; (8006d84 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006d20:	f7fe fc90 	bl	8005644 <_PreparePacket>
 8006d24:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006d2a:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	61bb      	str	r3, [r7, #24]
 8006d3c:	e00b      	b.n	8006d56 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	61f9      	str	r1, [r7, #28]
 8006d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	09db      	lsrs	r3, r3, #7
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5a:	d8f0      	bhi.n	8006d3e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	61fa      	str	r2, [r7, #28]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d6c:	2206      	movs	r2, #6
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	6938      	ldr	r0, [r7, #16]
 8006d72:	f7fe fd57 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f383 8811 	msr	BASEPRI, r3
}
 8006d7c:	bf00      	nop
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200142e8 	.word	0x200142e8
 8006d88:	200142b8 	.word	0x200142b8

08006d8c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08a      	sub	sp, #40	; 0x28
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d96:	f3ef 8311 	mrs	r3, BASEPRI
 8006d9a:	f04f 0120 	mov.w	r1, #32
 8006d9e:	f381 8811 	msr	BASEPRI, r1
 8006da2:	617b      	str	r3, [r7, #20]
 8006da4:	4827      	ldr	r0, [pc, #156]	; (8006e44 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006da6:	f7fe fc4d 	bl	8005644 <_PreparePacket>
 8006daa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006db0:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	623b      	str	r3, [r7, #32]
 8006dc2:	e00b      	b.n	8006ddc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	b2da      	uxtb	r2, r3
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	1c59      	adds	r1, r3, #1
 8006dcc:	6279      	str	r1, [r7, #36]	; 0x24
 8006dce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd2:	b2d2      	uxtb	r2, r2
 8006dd4:	701a      	strb	r2, [r3, #0]
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	09db      	lsrs	r3, r3, #7
 8006dda:	623b      	str	r3, [r7, #32]
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	2b7f      	cmp	r3, #127	; 0x7f
 8006de0:	d8f0      	bhi.n	8006dc4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	627a      	str	r2, [r7, #36]	; 0x24
 8006de8:	6a3a      	ldr	r2, [r7, #32]
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	61fb      	str	r3, [r7, #28]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	61bb      	str	r3, [r7, #24]
 8006dfa:	e00b      	b.n	8006e14 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	1c59      	adds	r1, r3, #1
 8006e04:	61f9      	str	r1, [r7, #28]
 8006e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	701a      	strb	r2, [r3, #0]
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	09db      	lsrs	r3, r3, #7
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b7f      	cmp	r3, #127	; 0x7f
 8006e18:	d8f0      	bhi.n	8006dfc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	61fa      	str	r2, [r7, #28]
 8006e20:	69ba      	ldr	r2, [r7, #24]
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8006e2a:	2207      	movs	r2, #7
 8006e2c:	68f9      	ldr	r1, [r7, #12]
 8006e2e:	6938      	ldr	r0, [r7, #16]
 8006e30:	f7fe fcf8 	bl	8005824 <_SendPacket>
  RECORD_END();
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f383 8811 	msr	BASEPRI, r3
}
 8006e3a:	bf00      	nop
 8006e3c:	3728      	adds	r7, #40	; 0x28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200142e8 	.word	0x200142e8
 8006e48:	200142b8 	.word	0x200142b8

08006e4c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	1ad3      	subs	r3, r2, r3
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	200142b8 	.word	0x200142b8

08006e6c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b08c      	sub	sp, #48	; 0x30
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	4603      	mov	r3, r0
 8006e74:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006e76:	4b3b      	ldr	r3, [pc, #236]	; (8006f64 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d06d      	beq.n	8006f5a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006e7e:	4b39      	ldr	r3, [pc, #228]	; (8006f64 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006e84:	2300      	movs	r3, #0
 8006e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e88:	e008      	b.n	8006e9c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d007      	beq.n	8006ea6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	3301      	adds	r3, #1
 8006e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d3f2      	bcc.n	8006e8a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006ea4:	e000      	b.n	8006ea8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006ea6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d055      	beq.n	8006f5a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006eae:	f3ef 8311 	mrs	r3, BASEPRI
 8006eb2:	f04f 0120 	mov.w	r1, #32
 8006eb6:	f381 8811 	msr	BASEPRI, r1
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	482a      	ldr	r0, [pc, #168]	; (8006f68 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006ebe:	f7fe fbc1 	bl	8005644 <_PreparePacket>
 8006ec2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	627b      	str	r3, [r7, #36]	; 0x24
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	623b      	str	r3, [r7, #32]
 8006ed0:	e00b      	b.n	8006eea <SEGGER_SYSVIEW_SendModule+0x7e>
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	1c59      	adds	r1, r3, #1
 8006eda:	6279      	str	r1, [r7, #36]	; 0x24
 8006edc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ee0:	b2d2      	uxtb	r2, r2
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	6a3b      	ldr	r3, [r7, #32]
 8006ee6:	09db      	lsrs	r3, r3, #7
 8006ee8:	623b      	str	r3, [r7, #32]
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	2b7f      	cmp	r3, #127	; 0x7f
 8006eee:	d8f0      	bhi.n	8006ed2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	627a      	str	r2, [r7, #36]	; 0x24
 8006ef6:	6a3a      	ldr	r2, [r7, #32]
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	701a      	strb	r2, [r3, #0]
 8006efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	e00b      	b.n	8006f24 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	1c59      	adds	r1, r3, #1
 8006f14:	61f9      	str	r1, [r7, #28]
 8006f16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	09db      	lsrs	r3, r3, #7
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b7f      	cmp	r3, #127	; 0x7f
 8006f28:	d8f0      	bhi.n	8006f0c <SEGGER_SYSVIEW_SendModule+0xa0>
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	61fa      	str	r2, [r7, #28]
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	b2d2      	uxtb	r2, r2
 8006f34:	701a      	strb	r2, [r3, #0]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2280      	movs	r2, #128	; 0x80
 8006f40:	4619      	mov	r1, r3
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f7fe fb2e 	bl	80055a4 <_EncodeStr>
 8006f48:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006f4a:	2216      	movs	r2, #22
 8006f4c:	68f9      	ldr	r1, [r7, #12]
 8006f4e:	6938      	ldr	r0, [r7, #16]
 8006f50:	f7fe fc68 	bl	8005824 <_SendPacket>
      RECORD_END();
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006f5a:	bf00      	nop
 8006f5c:	3730      	adds	r7, #48	; 0x30
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	200142e0 	.word	0x200142e0
 8006f68:	200142e8 	.word	0x200142e8

08006f6c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006f72:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00f      	beq.n	8006f9a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006f7a:	4b0a      	ldr	r3, [pc, #40]	; (8006fa4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d002      	beq.n	8006f8e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f2      	bne.n	8006f80 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006f9a:	bf00      	nop
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	200142e0 	.word	0x200142e0

08006fa8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006fae:	f3ef 8311 	mrs	r3, BASEPRI
 8006fb2:	f04f 0120 	mov.w	r1, #32
 8006fb6:	f381 8811 	msr	BASEPRI, r1
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	4817      	ldr	r0, [pc, #92]	; (800701c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006fbe:	f7fe fb41 	bl	8005644 <_PreparePacket>
 8006fc2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	617b      	str	r3, [r7, #20]
 8006fcc:	4b14      	ldr	r3, [pc, #80]	; (8007020 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	e00b      	b.n	8006fec <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	b2da      	uxtb	r2, r3
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	1c59      	adds	r1, r3, #1
 8006fdc:	6179      	str	r1, [r7, #20]
 8006fde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fe2:	b2d2      	uxtb	r2, r2
 8006fe4:	701a      	strb	r2, [r3, #0]
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	09db      	lsrs	r3, r3, #7
 8006fea:	613b      	str	r3, [r7, #16]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ff0:	d8f0      	bhi.n	8006fd4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	617a      	str	r2, [r7, #20]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007002:	221b      	movs	r2, #27
 8007004:	6879      	ldr	r1, [r7, #4]
 8007006:	68b8      	ldr	r0, [r7, #8]
 8007008:	f7fe fc0c 	bl	8005824 <_SendPacket>
  RECORD_END();
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f383 8811 	msr	BASEPRI, r3
}
 8007012:	bf00      	nop
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	200142e8 	.word	0x200142e8
 8007020:	200142e4 	.word	0x200142e4

08007024 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007024:	b40f      	push	{r0, r1, r2, r3}
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800702c:	f107 0314 	add.w	r3, r7, #20
 8007030:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007032:	1d3b      	adds	r3, r7, #4
 8007034:	461a      	mov	r2, r3
 8007036:	2100      	movs	r1, #0
 8007038:	6938      	ldr	r0, [r7, #16]
 800703a:	f7fe fe7b 	bl	8005d34 <_VPrintTarget>
  va_end(ParamList);
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007048:	b004      	add	sp, #16
 800704a:	4770      	bx	lr

0800704c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007054:	f3ef 8311 	mrs	r3, BASEPRI
 8007058:	f04f 0120 	mov.w	r1, #32
 800705c:	f381 8811 	msr	BASEPRI, r1
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	4827      	ldr	r0, [pc, #156]	; (8007100 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007064:	f7fe faee 	bl	8005644 <_PreparePacket>
 8007068:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800706a:	2280      	movs	r2, #128	; 0x80
 800706c:	6879      	ldr	r1, [r7, #4]
 800706e:	6938      	ldr	r0, [r7, #16]
 8007070:	f7fe fa98 	bl	80055a4 <_EncodeStr>
 8007074:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	627b      	str	r3, [r7, #36]	; 0x24
 800707a:	2301      	movs	r3, #1
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	e00b      	b.n	8007098 <SEGGER_SYSVIEW_Warn+0x4c>
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	b2da      	uxtb	r2, r3
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	1c59      	adds	r1, r3, #1
 8007088:	6279      	str	r1, [r7, #36]	; 0x24
 800708a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	701a      	strb	r2, [r3, #0]
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	09db      	lsrs	r3, r3, #7
 8007096:	623b      	str	r3, [r7, #32]
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	2b7f      	cmp	r3, #127	; 0x7f
 800709c:	d8f0      	bhi.n	8007080 <SEGGER_SYSVIEW_Warn+0x34>
 800709e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	627a      	str	r2, [r7, #36]	; 0x24
 80070a4:	6a3a      	ldr	r2, [r7, #32]
 80070a6:	b2d2      	uxtb	r2, r2
 80070a8:	701a      	strb	r2, [r3, #0]
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	61fb      	str	r3, [r7, #28]
 80070b2:	2300      	movs	r3, #0
 80070b4:	61bb      	str	r3, [r7, #24]
 80070b6:	e00b      	b.n	80070d0 <SEGGER_SYSVIEW_Warn+0x84>
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	1c59      	adds	r1, r3, #1
 80070c0:	61f9      	str	r1, [r7, #28]
 80070c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070c6:	b2d2      	uxtb	r2, r2
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	09db      	lsrs	r3, r3, #7
 80070ce:	61bb      	str	r3, [r7, #24]
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b7f      	cmp	r3, #127	; 0x7f
 80070d4:	d8f0      	bhi.n	80070b8 <SEGGER_SYSVIEW_Warn+0x6c>
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	61fa      	str	r2, [r7, #28]
 80070dc:	69ba      	ldr	r2, [r7, #24]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80070e6:	221a      	movs	r2, #26
 80070e8:	68f9      	ldr	r1, [r7, #12]
 80070ea:	6938      	ldr	r0, [r7, #16]
 80070ec:	f7fe fb9a 	bl	8005824 <_SendPacket>
  RECORD_END();
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f383 8811 	msr	BASEPRI, r3
}
 80070f6:	bf00      	nop
 80070f8:	3728      	adds	r7, #40	; 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	200142e8 	.word	0x200142e8

08007104 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	2000      	movs	r0, #0
 8007118:	f7fe f94e 	bl	80053b8 <SEGGER_RTT_Write>
  return len;
 800711c:	683b      	ldr	r3, [r7, #0]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <__libc_init_array>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	4d0d      	ldr	r5, [pc, #52]	; (8007160 <__libc_init_array+0x38>)
 800712c:	4c0d      	ldr	r4, [pc, #52]	; (8007164 <__libc_init_array+0x3c>)
 800712e:	1b64      	subs	r4, r4, r5
 8007130:	10a4      	asrs	r4, r4, #2
 8007132:	2600      	movs	r6, #0
 8007134:	42a6      	cmp	r6, r4
 8007136:	d109      	bne.n	800714c <__libc_init_array+0x24>
 8007138:	4d0b      	ldr	r5, [pc, #44]	; (8007168 <__libc_init_array+0x40>)
 800713a:	4c0c      	ldr	r4, [pc, #48]	; (800716c <__libc_init_array+0x44>)
 800713c:	f001 f966 	bl	800840c <_init>
 8007140:	1b64      	subs	r4, r4, r5
 8007142:	10a4      	asrs	r4, r4, #2
 8007144:	2600      	movs	r6, #0
 8007146:	42a6      	cmp	r6, r4
 8007148:	d105      	bne.n	8007156 <__libc_init_array+0x2e>
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007150:	4798      	blx	r3
 8007152:	3601      	adds	r6, #1
 8007154:	e7ee      	b.n	8007134 <__libc_init_array+0xc>
 8007156:	f855 3b04 	ldr.w	r3, [r5], #4
 800715a:	4798      	blx	r3
 800715c:	3601      	adds	r6, #1
 800715e:	e7f2      	b.n	8007146 <__libc_init_array+0x1e>
 8007160:	08008674 	.word	0x08008674
 8007164:	08008674 	.word	0x08008674
 8007168:	08008674 	.word	0x08008674
 800716c:	08008678 	.word	0x08008678

08007170 <memcmp>:
 8007170:	b530      	push	{r4, r5, lr}
 8007172:	3901      	subs	r1, #1
 8007174:	2400      	movs	r4, #0
 8007176:	42a2      	cmp	r2, r4
 8007178:	d101      	bne.n	800717e <memcmp+0xe>
 800717a:	2000      	movs	r0, #0
 800717c:	e005      	b.n	800718a <memcmp+0x1a>
 800717e:	5d03      	ldrb	r3, [r0, r4]
 8007180:	3401      	adds	r4, #1
 8007182:	5d0d      	ldrb	r5, [r1, r4]
 8007184:	42ab      	cmp	r3, r5
 8007186:	d0f6      	beq.n	8007176 <memcmp+0x6>
 8007188:	1b58      	subs	r0, r3, r5
 800718a:	bd30      	pop	{r4, r5, pc}

0800718c <memcpy>:
 800718c:	440a      	add	r2, r1
 800718e:	4291      	cmp	r1, r2
 8007190:	f100 33ff 	add.w	r3, r0, #4294967295
 8007194:	d100      	bne.n	8007198 <memcpy+0xc>
 8007196:	4770      	bx	lr
 8007198:	b510      	push	{r4, lr}
 800719a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800719e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a2:	4291      	cmp	r1, r2
 80071a4:	d1f9      	bne.n	800719a <memcpy+0xe>
 80071a6:	bd10      	pop	{r4, pc}

080071a8 <memset>:
 80071a8:	4402      	add	r2, r0
 80071aa:	4603      	mov	r3, r0
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d100      	bne.n	80071b2 <memset+0xa>
 80071b0:	4770      	bx	lr
 80071b2:	f803 1b01 	strb.w	r1, [r3], #1
 80071b6:	e7f9      	b.n	80071ac <memset+0x4>

080071b8 <iprintf>:
 80071b8:	b40f      	push	{r0, r1, r2, r3}
 80071ba:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <iprintf+0x2c>)
 80071bc:	b513      	push	{r0, r1, r4, lr}
 80071be:	681c      	ldr	r4, [r3, #0]
 80071c0:	b124      	cbz	r4, 80071cc <iprintf+0x14>
 80071c2:	69a3      	ldr	r3, [r4, #24]
 80071c4:	b913      	cbnz	r3, 80071cc <iprintf+0x14>
 80071c6:	4620      	mov	r0, r4
 80071c8:	f000 f89a 	bl	8007300 <__sinit>
 80071cc:	ab05      	add	r3, sp, #20
 80071ce:	9a04      	ldr	r2, [sp, #16]
 80071d0:	68a1      	ldr	r1, [r4, #8]
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	4620      	mov	r0, r4
 80071d6:	f000 fb13 	bl	8007800 <_vfiprintf_r>
 80071da:	b002      	add	sp, #8
 80071dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e0:	b004      	add	sp, #16
 80071e2:	4770      	bx	lr
 80071e4:	20000014 	.word	0x20000014

080071e8 <sniprintf>:
 80071e8:	b40c      	push	{r2, r3}
 80071ea:	b530      	push	{r4, r5, lr}
 80071ec:	4b17      	ldr	r3, [pc, #92]	; (800724c <sniprintf+0x64>)
 80071ee:	1e0c      	subs	r4, r1, #0
 80071f0:	681d      	ldr	r5, [r3, #0]
 80071f2:	b09d      	sub	sp, #116	; 0x74
 80071f4:	da08      	bge.n	8007208 <sniprintf+0x20>
 80071f6:	238b      	movs	r3, #139	; 0x8b
 80071f8:	602b      	str	r3, [r5, #0]
 80071fa:	f04f 30ff 	mov.w	r0, #4294967295
 80071fe:	b01d      	add	sp, #116	; 0x74
 8007200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007204:	b002      	add	sp, #8
 8007206:	4770      	bx	lr
 8007208:	f44f 7302 	mov.w	r3, #520	; 0x208
 800720c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007210:	bf14      	ite	ne
 8007212:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007216:	4623      	moveq	r3, r4
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	9307      	str	r3, [sp, #28]
 800721c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007220:	9002      	str	r0, [sp, #8]
 8007222:	9006      	str	r0, [sp, #24]
 8007224:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007228:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800722a:	ab21      	add	r3, sp, #132	; 0x84
 800722c:	a902      	add	r1, sp, #8
 800722e:	4628      	mov	r0, r5
 8007230:	9301      	str	r3, [sp, #4]
 8007232:	f000 f9bb 	bl	80075ac <_svfiprintf_r>
 8007236:	1c43      	adds	r3, r0, #1
 8007238:	bfbc      	itt	lt
 800723a:	238b      	movlt	r3, #139	; 0x8b
 800723c:	602b      	strlt	r3, [r5, #0]
 800723e:	2c00      	cmp	r4, #0
 8007240:	d0dd      	beq.n	80071fe <sniprintf+0x16>
 8007242:	9b02      	ldr	r3, [sp, #8]
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
 8007248:	e7d9      	b.n	80071fe <sniprintf+0x16>
 800724a:	bf00      	nop
 800724c:	20000014 	.word	0x20000014

08007250 <std>:
 8007250:	2300      	movs	r3, #0
 8007252:	b510      	push	{r4, lr}
 8007254:	4604      	mov	r4, r0
 8007256:	e9c0 3300 	strd	r3, r3, [r0]
 800725a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800725e:	6083      	str	r3, [r0, #8]
 8007260:	8181      	strh	r1, [r0, #12]
 8007262:	6643      	str	r3, [r0, #100]	; 0x64
 8007264:	81c2      	strh	r2, [r0, #14]
 8007266:	6183      	str	r3, [r0, #24]
 8007268:	4619      	mov	r1, r3
 800726a:	2208      	movs	r2, #8
 800726c:	305c      	adds	r0, #92	; 0x5c
 800726e:	f7ff ff9b 	bl	80071a8 <memset>
 8007272:	4b05      	ldr	r3, [pc, #20]	; (8007288 <std+0x38>)
 8007274:	6263      	str	r3, [r4, #36]	; 0x24
 8007276:	4b05      	ldr	r3, [pc, #20]	; (800728c <std+0x3c>)
 8007278:	62a3      	str	r3, [r4, #40]	; 0x28
 800727a:	4b05      	ldr	r3, [pc, #20]	; (8007290 <std+0x40>)
 800727c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800727e:	4b05      	ldr	r3, [pc, #20]	; (8007294 <std+0x44>)
 8007280:	6224      	str	r4, [r4, #32]
 8007282:	6323      	str	r3, [r4, #48]	; 0x30
 8007284:	bd10      	pop	{r4, pc}
 8007286:	bf00      	nop
 8007288:	08007da9 	.word	0x08007da9
 800728c:	08007dcb 	.word	0x08007dcb
 8007290:	08007e03 	.word	0x08007e03
 8007294:	08007e27 	.word	0x08007e27

08007298 <_cleanup_r>:
 8007298:	4901      	ldr	r1, [pc, #4]	; (80072a0 <_cleanup_r+0x8>)
 800729a:	f000 b8af 	b.w	80073fc <_fwalk_reent>
 800729e:	bf00      	nop
 80072a0:	080080dd 	.word	0x080080dd

080072a4 <__sfmoreglue>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	1e4a      	subs	r2, r1, #1
 80072a8:	2568      	movs	r5, #104	; 0x68
 80072aa:	4355      	muls	r5, r2
 80072ac:	460e      	mov	r6, r1
 80072ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072b2:	f000 f8c5 	bl	8007440 <_malloc_r>
 80072b6:	4604      	mov	r4, r0
 80072b8:	b140      	cbz	r0, 80072cc <__sfmoreglue+0x28>
 80072ba:	2100      	movs	r1, #0
 80072bc:	e9c0 1600 	strd	r1, r6, [r0]
 80072c0:	300c      	adds	r0, #12
 80072c2:	60a0      	str	r0, [r4, #8]
 80072c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80072c8:	f7ff ff6e 	bl	80071a8 <memset>
 80072cc:	4620      	mov	r0, r4
 80072ce:	bd70      	pop	{r4, r5, r6, pc}

080072d0 <__sfp_lock_acquire>:
 80072d0:	4801      	ldr	r0, [pc, #4]	; (80072d8 <__sfp_lock_acquire+0x8>)
 80072d2:	f000 b8b3 	b.w	800743c <__retarget_lock_acquire_recursive>
 80072d6:	bf00      	nop
 80072d8:	20014518 	.word	0x20014518

080072dc <__sfp_lock_release>:
 80072dc:	4801      	ldr	r0, [pc, #4]	; (80072e4 <__sfp_lock_release+0x8>)
 80072de:	f000 b8ae 	b.w	800743e <__retarget_lock_release_recursive>
 80072e2:	bf00      	nop
 80072e4:	20014518 	.word	0x20014518

080072e8 <__sinit_lock_acquire>:
 80072e8:	4801      	ldr	r0, [pc, #4]	; (80072f0 <__sinit_lock_acquire+0x8>)
 80072ea:	f000 b8a7 	b.w	800743c <__retarget_lock_acquire_recursive>
 80072ee:	bf00      	nop
 80072f0:	20014513 	.word	0x20014513

080072f4 <__sinit_lock_release>:
 80072f4:	4801      	ldr	r0, [pc, #4]	; (80072fc <__sinit_lock_release+0x8>)
 80072f6:	f000 b8a2 	b.w	800743e <__retarget_lock_release_recursive>
 80072fa:	bf00      	nop
 80072fc:	20014513 	.word	0x20014513

08007300 <__sinit>:
 8007300:	b510      	push	{r4, lr}
 8007302:	4604      	mov	r4, r0
 8007304:	f7ff fff0 	bl	80072e8 <__sinit_lock_acquire>
 8007308:	69a3      	ldr	r3, [r4, #24]
 800730a:	b11b      	cbz	r3, 8007314 <__sinit+0x14>
 800730c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007310:	f7ff bff0 	b.w	80072f4 <__sinit_lock_release>
 8007314:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007318:	6523      	str	r3, [r4, #80]	; 0x50
 800731a:	4b13      	ldr	r3, [pc, #76]	; (8007368 <__sinit+0x68>)
 800731c:	4a13      	ldr	r2, [pc, #76]	; (800736c <__sinit+0x6c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	62a2      	str	r2, [r4, #40]	; 0x28
 8007322:	42a3      	cmp	r3, r4
 8007324:	bf04      	itt	eq
 8007326:	2301      	moveq	r3, #1
 8007328:	61a3      	streq	r3, [r4, #24]
 800732a:	4620      	mov	r0, r4
 800732c:	f000 f820 	bl	8007370 <__sfp>
 8007330:	6060      	str	r0, [r4, #4]
 8007332:	4620      	mov	r0, r4
 8007334:	f000 f81c 	bl	8007370 <__sfp>
 8007338:	60a0      	str	r0, [r4, #8]
 800733a:	4620      	mov	r0, r4
 800733c:	f000 f818 	bl	8007370 <__sfp>
 8007340:	2200      	movs	r2, #0
 8007342:	60e0      	str	r0, [r4, #12]
 8007344:	2104      	movs	r1, #4
 8007346:	6860      	ldr	r0, [r4, #4]
 8007348:	f7ff ff82 	bl	8007250 <std>
 800734c:	68a0      	ldr	r0, [r4, #8]
 800734e:	2201      	movs	r2, #1
 8007350:	2109      	movs	r1, #9
 8007352:	f7ff ff7d 	bl	8007250 <std>
 8007356:	68e0      	ldr	r0, [r4, #12]
 8007358:	2202      	movs	r2, #2
 800735a:	2112      	movs	r1, #18
 800735c:	f7ff ff78 	bl	8007250 <std>
 8007360:	2301      	movs	r3, #1
 8007362:	61a3      	str	r3, [r4, #24]
 8007364:	e7d2      	b.n	800730c <__sinit+0xc>
 8007366:	bf00      	nop
 8007368:	080085dc 	.word	0x080085dc
 800736c:	08007299 	.word	0x08007299

08007370 <__sfp>:
 8007370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007372:	4607      	mov	r7, r0
 8007374:	f7ff ffac 	bl	80072d0 <__sfp_lock_acquire>
 8007378:	4b1e      	ldr	r3, [pc, #120]	; (80073f4 <__sfp+0x84>)
 800737a:	681e      	ldr	r6, [r3, #0]
 800737c:	69b3      	ldr	r3, [r6, #24]
 800737e:	b913      	cbnz	r3, 8007386 <__sfp+0x16>
 8007380:	4630      	mov	r0, r6
 8007382:	f7ff ffbd 	bl	8007300 <__sinit>
 8007386:	3648      	adds	r6, #72	; 0x48
 8007388:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800738c:	3b01      	subs	r3, #1
 800738e:	d503      	bpl.n	8007398 <__sfp+0x28>
 8007390:	6833      	ldr	r3, [r6, #0]
 8007392:	b30b      	cbz	r3, 80073d8 <__sfp+0x68>
 8007394:	6836      	ldr	r6, [r6, #0]
 8007396:	e7f7      	b.n	8007388 <__sfp+0x18>
 8007398:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800739c:	b9d5      	cbnz	r5, 80073d4 <__sfp+0x64>
 800739e:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <__sfp+0x88>)
 80073a0:	60e3      	str	r3, [r4, #12]
 80073a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073a6:	6665      	str	r5, [r4, #100]	; 0x64
 80073a8:	f000 f847 	bl	800743a <__retarget_lock_init_recursive>
 80073ac:	f7ff ff96 	bl	80072dc <__sfp_lock_release>
 80073b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073b8:	6025      	str	r5, [r4, #0]
 80073ba:	61a5      	str	r5, [r4, #24]
 80073bc:	2208      	movs	r2, #8
 80073be:	4629      	mov	r1, r5
 80073c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073c4:	f7ff fef0 	bl	80071a8 <memset>
 80073c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80073cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80073d0:	4620      	mov	r0, r4
 80073d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d4:	3468      	adds	r4, #104	; 0x68
 80073d6:	e7d9      	b.n	800738c <__sfp+0x1c>
 80073d8:	2104      	movs	r1, #4
 80073da:	4638      	mov	r0, r7
 80073dc:	f7ff ff62 	bl	80072a4 <__sfmoreglue>
 80073e0:	4604      	mov	r4, r0
 80073e2:	6030      	str	r0, [r6, #0]
 80073e4:	2800      	cmp	r0, #0
 80073e6:	d1d5      	bne.n	8007394 <__sfp+0x24>
 80073e8:	f7ff ff78 	bl	80072dc <__sfp_lock_release>
 80073ec:	230c      	movs	r3, #12
 80073ee:	603b      	str	r3, [r7, #0]
 80073f0:	e7ee      	b.n	80073d0 <__sfp+0x60>
 80073f2:	bf00      	nop
 80073f4:	080085dc 	.word	0x080085dc
 80073f8:	ffff0001 	.word	0xffff0001

080073fc <_fwalk_reent>:
 80073fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007400:	4606      	mov	r6, r0
 8007402:	4688      	mov	r8, r1
 8007404:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007408:	2700      	movs	r7, #0
 800740a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800740e:	f1b9 0901 	subs.w	r9, r9, #1
 8007412:	d505      	bpl.n	8007420 <_fwalk_reent+0x24>
 8007414:	6824      	ldr	r4, [r4, #0]
 8007416:	2c00      	cmp	r4, #0
 8007418:	d1f7      	bne.n	800740a <_fwalk_reent+0xe>
 800741a:	4638      	mov	r0, r7
 800741c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007420:	89ab      	ldrh	r3, [r5, #12]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d907      	bls.n	8007436 <_fwalk_reent+0x3a>
 8007426:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800742a:	3301      	adds	r3, #1
 800742c:	d003      	beq.n	8007436 <_fwalk_reent+0x3a>
 800742e:	4629      	mov	r1, r5
 8007430:	4630      	mov	r0, r6
 8007432:	47c0      	blx	r8
 8007434:	4307      	orrs	r7, r0
 8007436:	3568      	adds	r5, #104	; 0x68
 8007438:	e7e9      	b.n	800740e <_fwalk_reent+0x12>

0800743a <__retarget_lock_init_recursive>:
 800743a:	4770      	bx	lr

0800743c <__retarget_lock_acquire_recursive>:
 800743c:	4770      	bx	lr

0800743e <__retarget_lock_release_recursive>:
 800743e:	4770      	bx	lr

08007440 <_malloc_r>:
 8007440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007442:	1ccd      	adds	r5, r1, #3
 8007444:	f025 0503 	bic.w	r5, r5, #3
 8007448:	3508      	adds	r5, #8
 800744a:	2d0c      	cmp	r5, #12
 800744c:	bf38      	it	cc
 800744e:	250c      	movcc	r5, #12
 8007450:	2d00      	cmp	r5, #0
 8007452:	4606      	mov	r6, r0
 8007454:	db01      	blt.n	800745a <_malloc_r+0x1a>
 8007456:	42a9      	cmp	r1, r5
 8007458:	d903      	bls.n	8007462 <_malloc_r+0x22>
 800745a:	230c      	movs	r3, #12
 800745c:	6033      	str	r3, [r6, #0]
 800745e:	2000      	movs	r0, #0
 8007460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007462:	f000 ff07 	bl	8008274 <__malloc_lock>
 8007466:	4921      	ldr	r1, [pc, #132]	; (80074ec <_malloc_r+0xac>)
 8007468:	680a      	ldr	r2, [r1, #0]
 800746a:	4614      	mov	r4, r2
 800746c:	b99c      	cbnz	r4, 8007496 <_malloc_r+0x56>
 800746e:	4f20      	ldr	r7, [pc, #128]	; (80074f0 <_malloc_r+0xb0>)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	b923      	cbnz	r3, 800747e <_malloc_r+0x3e>
 8007474:	4621      	mov	r1, r4
 8007476:	4630      	mov	r0, r6
 8007478:	f000 fc86 	bl	8007d88 <_sbrk_r>
 800747c:	6038      	str	r0, [r7, #0]
 800747e:	4629      	mov	r1, r5
 8007480:	4630      	mov	r0, r6
 8007482:	f000 fc81 	bl	8007d88 <_sbrk_r>
 8007486:	1c43      	adds	r3, r0, #1
 8007488:	d123      	bne.n	80074d2 <_malloc_r+0x92>
 800748a:	230c      	movs	r3, #12
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	4630      	mov	r0, r6
 8007490:	f000 fef6 	bl	8008280 <__malloc_unlock>
 8007494:	e7e3      	b.n	800745e <_malloc_r+0x1e>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	1b5b      	subs	r3, r3, r5
 800749a:	d417      	bmi.n	80074cc <_malloc_r+0x8c>
 800749c:	2b0b      	cmp	r3, #11
 800749e:	d903      	bls.n	80074a8 <_malloc_r+0x68>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	441c      	add	r4, r3
 80074a4:	6025      	str	r5, [r4, #0]
 80074a6:	e004      	b.n	80074b2 <_malloc_r+0x72>
 80074a8:	6863      	ldr	r3, [r4, #4]
 80074aa:	42a2      	cmp	r2, r4
 80074ac:	bf0c      	ite	eq
 80074ae:	600b      	streq	r3, [r1, #0]
 80074b0:	6053      	strne	r3, [r2, #4]
 80074b2:	4630      	mov	r0, r6
 80074b4:	f000 fee4 	bl	8008280 <__malloc_unlock>
 80074b8:	f104 000b 	add.w	r0, r4, #11
 80074bc:	1d23      	adds	r3, r4, #4
 80074be:	f020 0007 	bic.w	r0, r0, #7
 80074c2:	1ac2      	subs	r2, r0, r3
 80074c4:	d0cc      	beq.n	8007460 <_malloc_r+0x20>
 80074c6:	1a1b      	subs	r3, r3, r0
 80074c8:	50a3      	str	r3, [r4, r2]
 80074ca:	e7c9      	b.n	8007460 <_malloc_r+0x20>
 80074cc:	4622      	mov	r2, r4
 80074ce:	6864      	ldr	r4, [r4, #4]
 80074d0:	e7cc      	b.n	800746c <_malloc_r+0x2c>
 80074d2:	1cc4      	adds	r4, r0, #3
 80074d4:	f024 0403 	bic.w	r4, r4, #3
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d0e3      	beq.n	80074a4 <_malloc_r+0x64>
 80074dc:	1a21      	subs	r1, r4, r0
 80074de:	4630      	mov	r0, r6
 80074e0:	f000 fc52 	bl	8007d88 <_sbrk_r>
 80074e4:	3001      	adds	r0, #1
 80074e6:	d1dd      	bne.n	80074a4 <_malloc_r+0x64>
 80074e8:	e7cf      	b.n	800748a <_malloc_r+0x4a>
 80074ea:	bf00      	nop
 80074ec:	200143cc 	.word	0x200143cc
 80074f0:	200143d0 	.word	0x200143d0

080074f4 <__ssputs_r>:
 80074f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f8:	688e      	ldr	r6, [r1, #8]
 80074fa:	429e      	cmp	r6, r3
 80074fc:	4682      	mov	sl, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	4690      	mov	r8, r2
 8007502:	461f      	mov	r7, r3
 8007504:	d838      	bhi.n	8007578 <__ssputs_r+0x84>
 8007506:	898a      	ldrh	r2, [r1, #12]
 8007508:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800750c:	d032      	beq.n	8007574 <__ssputs_r+0x80>
 800750e:	6825      	ldr	r5, [r4, #0]
 8007510:	6909      	ldr	r1, [r1, #16]
 8007512:	eba5 0901 	sub.w	r9, r5, r1
 8007516:	6965      	ldr	r5, [r4, #20]
 8007518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800751c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007520:	3301      	adds	r3, #1
 8007522:	444b      	add	r3, r9
 8007524:	106d      	asrs	r5, r5, #1
 8007526:	429d      	cmp	r5, r3
 8007528:	bf38      	it	cc
 800752a:	461d      	movcc	r5, r3
 800752c:	0553      	lsls	r3, r2, #21
 800752e:	d531      	bpl.n	8007594 <__ssputs_r+0xa0>
 8007530:	4629      	mov	r1, r5
 8007532:	f7ff ff85 	bl	8007440 <_malloc_r>
 8007536:	4606      	mov	r6, r0
 8007538:	b950      	cbnz	r0, 8007550 <__ssputs_r+0x5c>
 800753a:	230c      	movs	r3, #12
 800753c:	f8ca 3000 	str.w	r3, [sl]
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007546:	81a3      	strh	r3, [r4, #12]
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007550:	6921      	ldr	r1, [r4, #16]
 8007552:	464a      	mov	r2, r9
 8007554:	f7ff fe1a 	bl	800718c <memcpy>
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800755e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007562:	81a3      	strh	r3, [r4, #12]
 8007564:	6126      	str	r6, [r4, #16]
 8007566:	6165      	str	r5, [r4, #20]
 8007568:	444e      	add	r6, r9
 800756a:	eba5 0509 	sub.w	r5, r5, r9
 800756e:	6026      	str	r6, [r4, #0]
 8007570:	60a5      	str	r5, [r4, #8]
 8007572:	463e      	mov	r6, r7
 8007574:	42be      	cmp	r6, r7
 8007576:	d900      	bls.n	800757a <__ssputs_r+0x86>
 8007578:	463e      	mov	r6, r7
 800757a:	4632      	mov	r2, r6
 800757c:	6820      	ldr	r0, [r4, #0]
 800757e:	4641      	mov	r1, r8
 8007580:	f000 fe5e 	bl	8008240 <memmove>
 8007584:	68a3      	ldr	r3, [r4, #8]
 8007586:	6822      	ldr	r2, [r4, #0]
 8007588:	1b9b      	subs	r3, r3, r6
 800758a:	4432      	add	r2, r6
 800758c:	60a3      	str	r3, [r4, #8]
 800758e:	6022      	str	r2, [r4, #0]
 8007590:	2000      	movs	r0, #0
 8007592:	e7db      	b.n	800754c <__ssputs_r+0x58>
 8007594:	462a      	mov	r2, r5
 8007596:	f000 fec9 	bl	800832c <_realloc_r>
 800759a:	4606      	mov	r6, r0
 800759c:	2800      	cmp	r0, #0
 800759e:	d1e1      	bne.n	8007564 <__ssputs_r+0x70>
 80075a0:	6921      	ldr	r1, [r4, #16]
 80075a2:	4650      	mov	r0, sl
 80075a4:	f000 fe72 	bl	800828c <_free_r>
 80075a8:	e7c7      	b.n	800753a <__ssputs_r+0x46>
	...

080075ac <_svfiprintf_r>:
 80075ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b0:	4698      	mov	r8, r3
 80075b2:	898b      	ldrh	r3, [r1, #12]
 80075b4:	061b      	lsls	r3, r3, #24
 80075b6:	b09d      	sub	sp, #116	; 0x74
 80075b8:	4607      	mov	r7, r0
 80075ba:	460d      	mov	r5, r1
 80075bc:	4614      	mov	r4, r2
 80075be:	d50e      	bpl.n	80075de <_svfiprintf_r+0x32>
 80075c0:	690b      	ldr	r3, [r1, #16]
 80075c2:	b963      	cbnz	r3, 80075de <_svfiprintf_r+0x32>
 80075c4:	2140      	movs	r1, #64	; 0x40
 80075c6:	f7ff ff3b 	bl	8007440 <_malloc_r>
 80075ca:	6028      	str	r0, [r5, #0]
 80075cc:	6128      	str	r0, [r5, #16]
 80075ce:	b920      	cbnz	r0, 80075da <_svfiprintf_r+0x2e>
 80075d0:	230c      	movs	r3, #12
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295
 80075d8:	e0d1      	b.n	800777e <_svfiprintf_r+0x1d2>
 80075da:	2340      	movs	r3, #64	; 0x40
 80075dc:	616b      	str	r3, [r5, #20]
 80075de:	2300      	movs	r3, #0
 80075e0:	9309      	str	r3, [sp, #36]	; 0x24
 80075e2:	2320      	movs	r3, #32
 80075e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ec:	2330      	movs	r3, #48	; 0x30
 80075ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007798 <_svfiprintf_r+0x1ec>
 80075f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075f6:	f04f 0901 	mov.w	r9, #1
 80075fa:	4623      	mov	r3, r4
 80075fc:	469a      	mov	sl, r3
 80075fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007602:	b10a      	cbz	r2, 8007608 <_svfiprintf_r+0x5c>
 8007604:	2a25      	cmp	r2, #37	; 0x25
 8007606:	d1f9      	bne.n	80075fc <_svfiprintf_r+0x50>
 8007608:	ebba 0b04 	subs.w	fp, sl, r4
 800760c:	d00b      	beq.n	8007626 <_svfiprintf_r+0x7a>
 800760e:	465b      	mov	r3, fp
 8007610:	4622      	mov	r2, r4
 8007612:	4629      	mov	r1, r5
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff ff6d 	bl	80074f4 <__ssputs_r>
 800761a:	3001      	adds	r0, #1
 800761c:	f000 80aa 	beq.w	8007774 <_svfiprintf_r+0x1c8>
 8007620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007622:	445a      	add	r2, fp
 8007624:	9209      	str	r2, [sp, #36]	; 0x24
 8007626:	f89a 3000 	ldrb.w	r3, [sl]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 80a2 	beq.w	8007774 <_svfiprintf_r+0x1c8>
 8007630:	2300      	movs	r3, #0
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800763a:	f10a 0a01 	add.w	sl, sl, #1
 800763e:	9304      	str	r3, [sp, #16]
 8007640:	9307      	str	r3, [sp, #28]
 8007642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007646:	931a      	str	r3, [sp, #104]	; 0x68
 8007648:	4654      	mov	r4, sl
 800764a:	2205      	movs	r2, #5
 800764c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007650:	4851      	ldr	r0, [pc, #324]	; (8007798 <_svfiprintf_r+0x1ec>)
 8007652:	f7f8 fe25 	bl	80002a0 <memchr>
 8007656:	9a04      	ldr	r2, [sp, #16]
 8007658:	b9d8      	cbnz	r0, 8007692 <_svfiprintf_r+0xe6>
 800765a:	06d0      	lsls	r0, r2, #27
 800765c:	bf44      	itt	mi
 800765e:	2320      	movmi	r3, #32
 8007660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007664:	0711      	lsls	r1, r2, #28
 8007666:	bf44      	itt	mi
 8007668:	232b      	movmi	r3, #43	; 0x2b
 800766a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800766e:	f89a 3000 	ldrb.w	r3, [sl]
 8007672:	2b2a      	cmp	r3, #42	; 0x2a
 8007674:	d015      	beq.n	80076a2 <_svfiprintf_r+0xf6>
 8007676:	9a07      	ldr	r2, [sp, #28]
 8007678:	4654      	mov	r4, sl
 800767a:	2000      	movs	r0, #0
 800767c:	f04f 0c0a 	mov.w	ip, #10
 8007680:	4621      	mov	r1, r4
 8007682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007686:	3b30      	subs	r3, #48	; 0x30
 8007688:	2b09      	cmp	r3, #9
 800768a:	d94e      	bls.n	800772a <_svfiprintf_r+0x17e>
 800768c:	b1b0      	cbz	r0, 80076bc <_svfiprintf_r+0x110>
 800768e:	9207      	str	r2, [sp, #28]
 8007690:	e014      	b.n	80076bc <_svfiprintf_r+0x110>
 8007692:	eba0 0308 	sub.w	r3, r0, r8
 8007696:	fa09 f303 	lsl.w	r3, r9, r3
 800769a:	4313      	orrs	r3, r2
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	46a2      	mov	sl, r4
 80076a0:	e7d2      	b.n	8007648 <_svfiprintf_r+0x9c>
 80076a2:	9b03      	ldr	r3, [sp, #12]
 80076a4:	1d19      	adds	r1, r3, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	9103      	str	r1, [sp, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bfbb      	ittet	lt
 80076ae:	425b      	neglt	r3, r3
 80076b0:	f042 0202 	orrlt.w	r2, r2, #2
 80076b4:	9307      	strge	r3, [sp, #28]
 80076b6:	9307      	strlt	r3, [sp, #28]
 80076b8:	bfb8      	it	lt
 80076ba:	9204      	strlt	r2, [sp, #16]
 80076bc:	7823      	ldrb	r3, [r4, #0]
 80076be:	2b2e      	cmp	r3, #46	; 0x2e
 80076c0:	d10c      	bne.n	80076dc <_svfiprintf_r+0x130>
 80076c2:	7863      	ldrb	r3, [r4, #1]
 80076c4:	2b2a      	cmp	r3, #42	; 0x2a
 80076c6:	d135      	bne.n	8007734 <_svfiprintf_r+0x188>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	1d1a      	adds	r2, r3, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	9203      	str	r2, [sp, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	bfb8      	it	lt
 80076d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80076d8:	3402      	adds	r4, #2
 80076da:	9305      	str	r3, [sp, #20]
 80076dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80077a8 <_svfiprintf_r+0x1fc>
 80076e0:	7821      	ldrb	r1, [r4, #0]
 80076e2:	2203      	movs	r2, #3
 80076e4:	4650      	mov	r0, sl
 80076e6:	f7f8 fddb 	bl	80002a0 <memchr>
 80076ea:	b140      	cbz	r0, 80076fe <_svfiprintf_r+0x152>
 80076ec:	2340      	movs	r3, #64	; 0x40
 80076ee:	eba0 000a 	sub.w	r0, r0, sl
 80076f2:	fa03 f000 	lsl.w	r0, r3, r0
 80076f6:	9b04      	ldr	r3, [sp, #16]
 80076f8:	4303      	orrs	r3, r0
 80076fa:	3401      	adds	r4, #1
 80076fc:	9304      	str	r3, [sp, #16]
 80076fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007702:	4826      	ldr	r0, [pc, #152]	; (800779c <_svfiprintf_r+0x1f0>)
 8007704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007708:	2206      	movs	r2, #6
 800770a:	f7f8 fdc9 	bl	80002a0 <memchr>
 800770e:	2800      	cmp	r0, #0
 8007710:	d038      	beq.n	8007784 <_svfiprintf_r+0x1d8>
 8007712:	4b23      	ldr	r3, [pc, #140]	; (80077a0 <_svfiprintf_r+0x1f4>)
 8007714:	bb1b      	cbnz	r3, 800775e <_svfiprintf_r+0x1b2>
 8007716:	9b03      	ldr	r3, [sp, #12]
 8007718:	3307      	adds	r3, #7
 800771a:	f023 0307 	bic.w	r3, r3, #7
 800771e:	3308      	adds	r3, #8
 8007720:	9303      	str	r3, [sp, #12]
 8007722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007724:	4433      	add	r3, r6
 8007726:	9309      	str	r3, [sp, #36]	; 0x24
 8007728:	e767      	b.n	80075fa <_svfiprintf_r+0x4e>
 800772a:	fb0c 3202 	mla	r2, ip, r2, r3
 800772e:	460c      	mov	r4, r1
 8007730:	2001      	movs	r0, #1
 8007732:	e7a5      	b.n	8007680 <_svfiprintf_r+0xd4>
 8007734:	2300      	movs	r3, #0
 8007736:	3401      	adds	r4, #1
 8007738:	9305      	str	r3, [sp, #20]
 800773a:	4619      	mov	r1, r3
 800773c:	f04f 0c0a 	mov.w	ip, #10
 8007740:	4620      	mov	r0, r4
 8007742:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007746:	3a30      	subs	r2, #48	; 0x30
 8007748:	2a09      	cmp	r2, #9
 800774a:	d903      	bls.n	8007754 <_svfiprintf_r+0x1a8>
 800774c:	2b00      	cmp	r3, #0
 800774e:	d0c5      	beq.n	80076dc <_svfiprintf_r+0x130>
 8007750:	9105      	str	r1, [sp, #20]
 8007752:	e7c3      	b.n	80076dc <_svfiprintf_r+0x130>
 8007754:	fb0c 2101 	mla	r1, ip, r1, r2
 8007758:	4604      	mov	r4, r0
 800775a:	2301      	movs	r3, #1
 800775c:	e7f0      	b.n	8007740 <_svfiprintf_r+0x194>
 800775e:	ab03      	add	r3, sp, #12
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	462a      	mov	r2, r5
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <_svfiprintf_r+0x1f8>)
 8007766:	a904      	add	r1, sp, #16
 8007768:	4638      	mov	r0, r7
 800776a:	f3af 8000 	nop.w
 800776e:	1c42      	adds	r2, r0, #1
 8007770:	4606      	mov	r6, r0
 8007772:	d1d6      	bne.n	8007722 <_svfiprintf_r+0x176>
 8007774:	89ab      	ldrh	r3, [r5, #12]
 8007776:	065b      	lsls	r3, r3, #25
 8007778:	f53f af2c 	bmi.w	80075d4 <_svfiprintf_r+0x28>
 800777c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800777e:	b01d      	add	sp, #116	; 0x74
 8007780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007784:	ab03      	add	r3, sp, #12
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	462a      	mov	r2, r5
 800778a:	4b06      	ldr	r3, [pc, #24]	; (80077a4 <_svfiprintf_r+0x1f8>)
 800778c:	a904      	add	r1, sp, #16
 800778e:	4638      	mov	r0, r7
 8007790:	f000 f9d4 	bl	8007b3c <_printf_i>
 8007794:	e7eb      	b.n	800776e <_svfiprintf_r+0x1c2>
 8007796:	bf00      	nop
 8007798:	08008640 	.word	0x08008640
 800779c:	0800864a 	.word	0x0800864a
 80077a0:	00000000 	.word	0x00000000
 80077a4:	080074f5 	.word	0x080074f5
 80077a8:	08008646 	.word	0x08008646

080077ac <__sfputc_r>:
 80077ac:	6893      	ldr	r3, [r2, #8]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	b410      	push	{r4}
 80077b4:	6093      	str	r3, [r2, #8]
 80077b6:	da08      	bge.n	80077ca <__sfputc_r+0x1e>
 80077b8:	6994      	ldr	r4, [r2, #24]
 80077ba:	42a3      	cmp	r3, r4
 80077bc:	db01      	blt.n	80077c2 <__sfputc_r+0x16>
 80077be:	290a      	cmp	r1, #10
 80077c0:	d103      	bne.n	80077ca <__sfputc_r+0x1e>
 80077c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077c6:	f000 bb33 	b.w	8007e30 <__swbuf_r>
 80077ca:	6813      	ldr	r3, [r2, #0]
 80077cc:	1c58      	adds	r0, r3, #1
 80077ce:	6010      	str	r0, [r2, #0]
 80077d0:	7019      	strb	r1, [r3, #0]
 80077d2:	4608      	mov	r0, r1
 80077d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d8:	4770      	bx	lr

080077da <__sfputs_r>:
 80077da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077dc:	4606      	mov	r6, r0
 80077de:	460f      	mov	r7, r1
 80077e0:	4614      	mov	r4, r2
 80077e2:	18d5      	adds	r5, r2, r3
 80077e4:	42ac      	cmp	r4, r5
 80077e6:	d101      	bne.n	80077ec <__sfputs_r+0x12>
 80077e8:	2000      	movs	r0, #0
 80077ea:	e007      	b.n	80077fc <__sfputs_r+0x22>
 80077ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077f0:	463a      	mov	r2, r7
 80077f2:	4630      	mov	r0, r6
 80077f4:	f7ff ffda 	bl	80077ac <__sfputc_r>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d1f3      	bne.n	80077e4 <__sfputs_r+0xa>
 80077fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007800 <_vfiprintf_r>:
 8007800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007804:	460d      	mov	r5, r1
 8007806:	b09d      	sub	sp, #116	; 0x74
 8007808:	4614      	mov	r4, r2
 800780a:	4698      	mov	r8, r3
 800780c:	4606      	mov	r6, r0
 800780e:	b118      	cbz	r0, 8007818 <_vfiprintf_r+0x18>
 8007810:	6983      	ldr	r3, [r0, #24]
 8007812:	b90b      	cbnz	r3, 8007818 <_vfiprintf_r+0x18>
 8007814:	f7ff fd74 	bl	8007300 <__sinit>
 8007818:	4b89      	ldr	r3, [pc, #548]	; (8007a40 <_vfiprintf_r+0x240>)
 800781a:	429d      	cmp	r5, r3
 800781c:	d11b      	bne.n	8007856 <_vfiprintf_r+0x56>
 800781e:	6875      	ldr	r5, [r6, #4]
 8007820:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007822:	07d9      	lsls	r1, r3, #31
 8007824:	d405      	bmi.n	8007832 <_vfiprintf_r+0x32>
 8007826:	89ab      	ldrh	r3, [r5, #12]
 8007828:	059a      	lsls	r2, r3, #22
 800782a:	d402      	bmi.n	8007832 <_vfiprintf_r+0x32>
 800782c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800782e:	f7ff fe05 	bl	800743c <__retarget_lock_acquire_recursive>
 8007832:	89ab      	ldrh	r3, [r5, #12]
 8007834:	071b      	lsls	r3, r3, #28
 8007836:	d501      	bpl.n	800783c <_vfiprintf_r+0x3c>
 8007838:	692b      	ldr	r3, [r5, #16]
 800783a:	b9eb      	cbnz	r3, 8007878 <_vfiprintf_r+0x78>
 800783c:	4629      	mov	r1, r5
 800783e:	4630      	mov	r0, r6
 8007840:	f000 fb48 	bl	8007ed4 <__swsetup_r>
 8007844:	b1c0      	cbz	r0, 8007878 <_vfiprintf_r+0x78>
 8007846:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007848:	07dc      	lsls	r4, r3, #31
 800784a:	d50e      	bpl.n	800786a <_vfiprintf_r+0x6a>
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	b01d      	add	sp, #116	; 0x74
 8007852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007856:	4b7b      	ldr	r3, [pc, #492]	; (8007a44 <_vfiprintf_r+0x244>)
 8007858:	429d      	cmp	r5, r3
 800785a:	d101      	bne.n	8007860 <_vfiprintf_r+0x60>
 800785c:	68b5      	ldr	r5, [r6, #8]
 800785e:	e7df      	b.n	8007820 <_vfiprintf_r+0x20>
 8007860:	4b79      	ldr	r3, [pc, #484]	; (8007a48 <_vfiprintf_r+0x248>)
 8007862:	429d      	cmp	r5, r3
 8007864:	bf08      	it	eq
 8007866:	68f5      	ldreq	r5, [r6, #12]
 8007868:	e7da      	b.n	8007820 <_vfiprintf_r+0x20>
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	0598      	lsls	r0, r3, #22
 800786e:	d4ed      	bmi.n	800784c <_vfiprintf_r+0x4c>
 8007870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007872:	f7ff fde4 	bl	800743e <__retarget_lock_release_recursive>
 8007876:	e7e9      	b.n	800784c <_vfiprintf_r+0x4c>
 8007878:	2300      	movs	r3, #0
 800787a:	9309      	str	r3, [sp, #36]	; 0x24
 800787c:	2320      	movs	r3, #32
 800787e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007882:	f8cd 800c 	str.w	r8, [sp, #12]
 8007886:	2330      	movs	r3, #48	; 0x30
 8007888:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007a4c <_vfiprintf_r+0x24c>
 800788c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007890:	f04f 0901 	mov.w	r9, #1
 8007894:	4623      	mov	r3, r4
 8007896:	469a      	mov	sl, r3
 8007898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800789c:	b10a      	cbz	r2, 80078a2 <_vfiprintf_r+0xa2>
 800789e:	2a25      	cmp	r2, #37	; 0x25
 80078a0:	d1f9      	bne.n	8007896 <_vfiprintf_r+0x96>
 80078a2:	ebba 0b04 	subs.w	fp, sl, r4
 80078a6:	d00b      	beq.n	80078c0 <_vfiprintf_r+0xc0>
 80078a8:	465b      	mov	r3, fp
 80078aa:	4622      	mov	r2, r4
 80078ac:	4629      	mov	r1, r5
 80078ae:	4630      	mov	r0, r6
 80078b0:	f7ff ff93 	bl	80077da <__sfputs_r>
 80078b4:	3001      	adds	r0, #1
 80078b6:	f000 80aa 	beq.w	8007a0e <_vfiprintf_r+0x20e>
 80078ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078bc:	445a      	add	r2, fp
 80078be:	9209      	str	r2, [sp, #36]	; 0x24
 80078c0:	f89a 3000 	ldrb.w	r3, [sl]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80a2 	beq.w	8007a0e <_vfiprintf_r+0x20e>
 80078ca:	2300      	movs	r3, #0
 80078cc:	f04f 32ff 	mov.w	r2, #4294967295
 80078d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078d4:	f10a 0a01 	add.w	sl, sl, #1
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	9307      	str	r3, [sp, #28]
 80078dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078e0:	931a      	str	r3, [sp, #104]	; 0x68
 80078e2:	4654      	mov	r4, sl
 80078e4:	2205      	movs	r2, #5
 80078e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ea:	4858      	ldr	r0, [pc, #352]	; (8007a4c <_vfiprintf_r+0x24c>)
 80078ec:	f7f8 fcd8 	bl	80002a0 <memchr>
 80078f0:	9a04      	ldr	r2, [sp, #16]
 80078f2:	b9d8      	cbnz	r0, 800792c <_vfiprintf_r+0x12c>
 80078f4:	06d1      	lsls	r1, r2, #27
 80078f6:	bf44      	itt	mi
 80078f8:	2320      	movmi	r3, #32
 80078fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078fe:	0713      	lsls	r3, r2, #28
 8007900:	bf44      	itt	mi
 8007902:	232b      	movmi	r3, #43	; 0x2b
 8007904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007908:	f89a 3000 	ldrb.w	r3, [sl]
 800790c:	2b2a      	cmp	r3, #42	; 0x2a
 800790e:	d015      	beq.n	800793c <_vfiprintf_r+0x13c>
 8007910:	9a07      	ldr	r2, [sp, #28]
 8007912:	4654      	mov	r4, sl
 8007914:	2000      	movs	r0, #0
 8007916:	f04f 0c0a 	mov.w	ip, #10
 800791a:	4621      	mov	r1, r4
 800791c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007920:	3b30      	subs	r3, #48	; 0x30
 8007922:	2b09      	cmp	r3, #9
 8007924:	d94e      	bls.n	80079c4 <_vfiprintf_r+0x1c4>
 8007926:	b1b0      	cbz	r0, 8007956 <_vfiprintf_r+0x156>
 8007928:	9207      	str	r2, [sp, #28]
 800792a:	e014      	b.n	8007956 <_vfiprintf_r+0x156>
 800792c:	eba0 0308 	sub.w	r3, r0, r8
 8007930:	fa09 f303 	lsl.w	r3, r9, r3
 8007934:	4313      	orrs	r3, r2
 8007936:	9304      	str	r3, [sp, #16]
 8007938:	46a2      	mov	sl, r4
 800793a:	e7d2      	b.n	80078e2 <_vfiprintf_r+0xe2>
 800793c:	9b03      	ldr	r3, [sp, #12]
 800793e:	1d19      	adds	r1, r3, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	9103      	str	r1, [sp, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	bfbb      	ittet	lt
 8007948:	425b      	neglt	r3, r3
 800794a:	f042 0202 	orrlt.w	r2, r2, #2
 800794e:	9307      	strge	r3, [sp, #28]
 8007950:	9307      	strlt	r3, [sp, #28]
 8007952:	bfb8      	it	lt
 8007954:	9204      	strlt	r2, [sp, #16]
 8007956:	7823      	ldrb	r3, [r4, #0]
 8007958:	2b2e      	cmp	r3, #46	; 0x2e
 800795a:	d10c      	bne.n	8007976 <_vfiprintf_r+0x176>
 800795c:	7863      	ldrb	r3, [r4, #1]
 800795e:	2b2a      	cmp	r3, #42	; 0x2a
 8007960:	d135      	bne.n	80079ce <_vfiprintf_r+0x1ce>
 8007962:	9b03      	ldr	r3, [sp, #12]
 8007964:	1d1a      	adds	r2, r3, #4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	9203      	str	r2, [sp, #12]
 800796a:	2b00      	cmp	r3, #0
 800796c:	bfb8      	it	lt
 800796e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007972:	3402      	adds	r4, #2
 8007974:	9305      	str	r3, [sp, #20]
 8007976:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007a5c <_vfiprintf_r+0x25c>
 800797a:	7821      	ldrb	r1, [r4, #0]
 800797c:	2203      	movs	r2, #3
 800797e:	4650      	mov	r0, sl
 8007980:	f7f8 fc8e 	bl	80002a0 <memchr>
 8007984:	b140      	cbz	r0, 8007998 <_vfiprintf_r+0x198>
 8007986:	2340      	movs	r3, #64	; 0x40
 8007988:	eba0 000a 	sub.w	r0, r0, sl
 800798c:	fa03 f000 	lsl.w	r0, r3, r0
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	4303      	orrs	r3, r0
 8007994:	3401      	adds	r4, #1
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	f814 1b01 	ldrb.w	r1, [r4], #1
 800799c:	482c      	ldr	r0, [pc, #176]	; (8007a50 <_vfiprintf_r+0x250>)
 800799e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079a2:	2206      	movs	r2, #6
 80079a4:	f7f8 fc7c 	bl	80002a0 <memchr>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	d03f      	beq.n	8007a2c <_vfiprintf_r+0x22c>
 80079ac:	4b29      	ldr	r3, [pc, #164]	; (8007a54 <_vfiprintf_r+0x254>)
 80079ae:	bb1b      	cbnz	r3, 80079f8 <_vfiprintf_r+0x1f8>
 80079b0:	9b03      	ldr	r3, [sp, #12]
 80079b2:	3307      	adds	r3, #7
 80079b4:	f023 0307 	bic.w	r3, r3, #7
 80079b8:	3308      	adds	r3, #8
 80079ba:	9303      	str	r3, [sp, #12]
 80079bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079be:	443b      	add	r3, r7
 80079c0:	9309      	str	r3, [sp, #36]	; 0x24
 80079c2:	e767      	b.n	8007894 <_vfiprintf_r+0x94>
 80079c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80079c8:	460c      	mov	r4, r1
 80079ca:	2001      	movs	r0, #1
 80079cc:	e7a5      	b.n	800791a <_vfiprintf_r+0x11a>
 80079ce:	2300      	movs	r3, #0
 80079d0:	3401      	adds	r4, #1
 80079d2:	9305      	str	r3, [sp, #20]
 80079d4:	4619      	mov	r1, r3
 80079d6:	f04f 0c0a 	mov.w	ip, #10
 80079da:	4620      	mov	r0, r4
 80079dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079e0:	3a30      	subs	r2, #48	; 0x30
 80079e2:	2a09      	cmp	r2, #9
 80079e4:	d903      	bls.n	80079ee <_vfiprintf_r+0x1ee>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0c5      	beq.n	8007976 <_vfiprintf_r+0x176>
 80079ea:	9105      	str	r1, [sp, #20]
 80079ec:	e7c3      	b.n	8007976 <_vfiprintf_r+0x176>
 80079ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80079f2:	4604      	mov	r4, r0
 80079f4:	2301      	movs	r3, #1
 80079f6:	e7f0      	b.n	80079da <_vfiprintf_r+0x1da>
 80079f8:	ab03      	add	r3, sp, #12
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	462a      	mov	r2, r5
 80079fe:	4b16      	ldr	r3, [pc, #88]	; (8007a58 <_vfiprintf_r+0x258>)
 8007a00:	a904      	add	r1, sp, #16
 8007a02:	4630      	mov	r0, r6
 8007a04:	f3af 8000 	nop.w
 8007a08:	4607      	mov	r7, r0
 8007a0a:	1c78      	adds	r0, r7, #1
 8007a0c:	d1d6      	bne.n	80079bc <_vfiprintf_r+0x1bc>
 8007a0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a10:	07d9      	lsls	r1, r3, #31
 8007a12:	d405      	bmi.n	8007a20 <_vfiprintf_r+0x220>
 8007a14:	89ab      	ldrh	r3, [r5, #12]
 8007a16:	059a      	lsls	r2, r3, #22
 8007a18:	d402      	bmi.n	8007a20 <_vfiprintf_r+0x220>
 8007a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a1c:	f7ff fd0f 	bl	800743e <__retarget_lock_release_recursive>
 8007a20:	89ab      	ldrh	r3, [r5, #12]
 8007a22:	065b      	lsls	r3, r3, #25
 8007a24:	f53f af12 	bmi.w	800784c <_vfiprintf_r+0x4c>
 8007a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a2a:	e711      	b.n	8007850 <_vfiprintf_r+0x50>
 8007a2c:	ab03      	add	r3, sp, #12
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	462a      	mov	r2, r5
 8007a32:	4b09      	ldr	r3, [pc, #36]	; (8007a58 <_vfiprintf_r+0x258>)
 8007a34:	a904      	add	r1, sp, #16
 8007a36:	4630      	mov	r0, r6
 8007a38:	f000 f880 	bl	8007b3c <_printf_i>
 8007a3c:	e7e4      	b.n	8007a08 <_vfiprintf_r+0x208>
 8007a3e:	bf00      	nop
 8007a40:	08008600 	.word	0x08008600
 8007a44:	08008620 	.word	0x08008620
 8007a48:	080085e0 	.word	0x080085e0
 8007a4c:	08008640 	.word	0x08008640
 8007a50:	0800864a 	.word	0x0800864a
 8007a54:	00000000 	.word	0x00000000
 8007a58:	080077db 	.word	0x080077db
 8007a5c:	08008646 	.word	0x08008646

08007a60 <_printf_common>:
 8007a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	4616      	mov	r6, r2
 8007a66:	4699      	mov	r9, r3
 8007a68:	688a      	ldr	r2, [r1, #8]
 8007a6a:	690b      	ldr	r3, [r1, #16]
 8007a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bfb8      	it	lt
 8007a74:	4613      	movlt	r3, r2
 8007a76:	6033      	str	r3, [r6, #0]
 8007a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	460c      	mov	r4, r1
 8007a80:	b10a      	cbz	r2, 8007a86 <_printf_common+0x26>
 8007a82:	3301      	adds	r3, #1
 8007a84:	6033      	str	r3, [r6, #0]
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	0699      	lsls	r1, r3, #26
 8007a8a:	bf42      	ittt	mi
 8007a8c:	6833      	ldrmi	r3, [r6, #0]
 8007a8e:	3302      	addmi	r3, #2
 8007a90:	6033      	strmi	r3, [r6, #0]
 8007a92:	6825      	ldr	r5, [r4, #0]
 8007a94:	f015 0506 	ands.w	r5, r5, #6
 8007a98:	d106      	bne.n	8007aa8 <_printf_common+0x48>
 8007a9a:	f104 0a19 	add.w	sl, r4, #25
 8007a9e:	68e3      	ldr	r3, [r4, #12]
 8007aa0:	6832      	ldr	r2, [r6, #0]
 8007aa2:	1a9b      	subs	r3, r3, r2
 8007aa4:	42ab      	cmp	r3, r5
 8007aa6:	dc26      	bgt.n	8007af6 <_printf_common+0x96>
 8007aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007aac:	1e13      	subs	r3, r2, #0
 8007aae:	6822      	ldr	r2, [r4, #0]
 8007ab0:	bf18      	it	ne
 8007ab2:	2301      	movne	r3, #1
 8007ab4:	0692      	lsls	r2, r2, #26
 8007ab6:	d42b      	bmi.n	8007b10 <_printf_common+0xb0>
 8007ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007abc:	4649      	mov	r1, r9
 8007abe:	4638      	mov	r0, r7
 8007ac0:	47c0      	blx	r8
 8007ac2:	3001      	adds	r0, #1
 8007ac4:	d01e      	beq.n	8007b04 <_printf_common+0xa4>
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	68e5      	ldr	r5, [r4, #12]
 8007aca:	6832      	ldr	r2, [r6, #0]
 8007acc:	f003 0306 	and.w	r3, r3, #6
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	bf08      	it	eq
 8007ad4:	1aad      	subeq	r5, r5, r2
 8007ad6:	68a3      	ldr	r3, [r4, #8]
 8007ad8:	6922      	ldr	r2, [r4, #16]
 8007ada:	bf0c      	ite	eq
 8007adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ae0:	2500      	movne	r5, #0
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	bfc4      	itt	gt
 8007ae6:	1a9b      	subgt	r3, r3, r2
 8007ae8:	18ed      	addgt	r5, r5, r3
 8007aea:	2600      	movs	r6, #0
 8007aec:	341a      	adds	r4, #26
 8007aee:	42b5      	cmp	r5, r6
 8007af0:	d11a      	bne.n	8007b28 <_printf_common+0xc8>
 8007af2:	2000      	movs	r0, #0
 8007af4:	e008      	b.n	8007b08 <_printf_common+0xa8>
 8007af6:	2301      	movs	r3, #1
 8007af8:	4652      	mov	r2, sl
 8007afa:	4649      	mov	r1, r9
 8007afc:	4638      	mov	r0, r7
 8007afe:	47c0      	blx	r8
 8007b00:	3001      	adds	r0, #1
 8007b02:	d103      	bne.n	8007b0c <_printf_common+0xac>
 8007b04:	f04f 30ff 	mov.w	r0, #4294967295
 8007b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0c:	3501      	adds	r5, #1
 8007b0e:	e7c6      	b.n	8007a9e <_printf_common+0x3e>
 8007b10:	18e1      	adds	r1, r4, r3
 8007b12:	1c5a      	adds	r2, r3, #1
 8007b14:	2030      	movs	r0, #48	; 0x30
 8007b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b1a:	4422      	add	r2, r4
 8007b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b24:	3302      	adds	r3, #2
 8007b26:	e7c7      	b.n	8007ab8 <_printf_common+0x58>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	4638      	mov	r0, r7
 8007b30:	47c0      	blx	r8
 8007b32:	3001      	adds	r0, #1
 8007b34:	d0e6      	beq.n	8007b04 <_printf_common+0xa4>
 8007b36:	3601      	adds	r6, #1
 8007b38:	e7d9      	b.n	8007aee <_printf_common+0x8e>
	...

08007b3c <_printf_i>:
 8007b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b40:	460c      	mov	r4, r1
 8007b42:	4691      	mov	r9, r2
 8007b44:	7e27      	ldrb	r7, [r4, #24]
 8007b46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b48:	2f78      	cmp	r7, #120	; 0x78
 8007b4a:	4680      	mov	r8, r0
 8007b4c:	469a      	mov	sl, r3
 8007b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b52:	d807      	bhi.n	8007b64 <_printf_i+0x28>
 8007b54:	2f62      	cmp	r7, #98	; 0x62
 8007b56:	d80a      	bhi.n	8007b6e <_printf_i+0x32>
 8007b58:	2f00      	cmp	r7, #0
 8007b5a:	f000 80d8 	beq.w	8007d0e <_printf_i+0x1d2>
 8007b5e:	2f58      	cmp	r7, #88	; 0x58
 8007b60:	f000 80a3 	beq.w	8007caa <_printf_i+0x16e>
 8007b64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b6c:	e03a      	b.n	8007be4 <_printf_i+0xa8>
 8007b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b72:	2b15      	cmp	r3, #21
 8007b74:	d8f6      	bhi.n	8007b64 <_printf_i+0x28>
 8007b76:	a001      	add	r0, pc, #4	; (adr r0, 8007b7c <_printf_i+0x40>)
 8007b78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b7c:	08007bd5 	.word	0x08007bd5
 8007b80:	08007be9 	.word	0x08007be9
 8007b84:	08007b65 	.word	0x08007b65
 8007b88:	08007b65 	.word	0x08007b65
 8007b8c:	08007b65 	.word	0x08007b65
 8007b90:	08007b65 	.word	0x08007b65
 8007b94:	08007be9 	.word	0x08007be9
 8007b98:	08007b65 	.word	0x08007b65
 8007b9c:	08007b65 	.word	0x08007b65
 8007ba0:	08007b65 	.word	0x08007b65
 8007ba4:	08007b65 	.word	0x08007b65
 8007ba8:	08007cf5 	.word	0x08007cf5
 8007bac:	08007c19 	.word	0x08007c19
 8007bb0:	08007cd7 	.word	0x08007cd7
 8007bb4:	08007b65 	.word	0x08007b65
 8007bb8:	08007b65 	.word	0x08007b65
 8007bbc:	08007d17 	.word	0x08007d17
 8007bc0:	08007b65 	.word	0x08007b65
 8007bc4:	08007c19 	.word	0x08007c19
 8007bc8:	08007b65 	.word	0x08007b65
 8007bcc:	08007b65 	.word	0x08007b65
 8007bd0:	08007cdf 	.word	0x08007cdf
 8007bd4:	680b      	ldr	r3, [r1, #0]
 8007bd6:	1d1a      	adds	r2, r3, #4
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	600a      	str	r2, [r1, #0]
 8007bdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007be4:	2301      	movs	r3, #1
 8007be6:	e0a3      	b.n	8007d30 <_printf_i+0x1f4>
 8007be8:	6825      	ldr	r5, [r4, #0]
 8007bea:	6808      	ldr	r0, [r1, #0]
 8007bec:	062e      	lsls	r6, r5, #24
 8007bee:	f100 0304 	add.w	r3, r0, #4
 8007bf2:	d50a      	bpl.n	8007c0a <_printf_i+0xce>
 8007bf4:	6805      	ldr	r5, [r0, #0]
 8007bf6:	600b      	str	r3, [r1, #0]
 8007bf8:	2d00      	cmp	r5, #0
 8007bfa:	da03      	bge.n	8007c04 <_printf_i+0xc8>
 8007bfc:	232d      	movs	r3, #45	; 0x2d
 8007bfe:	426d      	negs	r5, r5
 8007c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c04:	485e      	ldr	r0, [pc, #376]	; (8007d80 <_printf_i+0x244>)
 8007c06:	230a      	movs	r3, #10
 8007c08:	e019      	b.n	8007c3e <_printf_i+0x102>
 8007c0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c0e:	6805      	ldr	r5, [r0, #0]
 8007c10:	600b      	str	r3, [r1, #0]
 8007c12:	bf18      	it	ne
 8007c14:	b22d      	sxthne	r5, r5
 8007c16:	e7ef      	b.n	8007bf8 <_printf_i+0xbc>
 8007c18:	680b      	ldr	r3, [r1, #0]
 8007c1a:	6825      	ldr	r5, [r4, #0]
 8007c1c:	1d18      	adds	r0, r3, #4
 8007c1e:	6008      	str	r0, [r1, #0]
 8007c20:	0628      	lsls	r0, r5, #24
 8007c22:	d501      	bpl.n	8007c28 <_printf_i+0xec>
 8007c24:	681d      	ldr	r5, [r3, #0]
 8007c26:	e002      	b.n	8007c2e <_printf_i+0xf2>
 8007c28:	0669      	lsls	r1, r5, #25
 8007c2a:	d5fb      	bpl.n	8007c24 <_printf_i+0xe8>
 8007c2c:	881d      	ldrh	r5, [r3, #0]
 8007c2e:	4854      	ldr	r0, [pc, #336]	; (8007d80 <_printf_i+0x244>)
 8007c30:	2f6f      	cmp	r7, #111	; 0x6f
 8007c32:	bf0c      	ite	eq
 8007c34:	2308      	moveq	r3, #8
 8007c36:	230a      	movne	r3, #10
 8007c38:	2100      	movs	r1, #0
 8007c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c3e:	6866      	ldr	r6, [r4, #4]
 8007c40:	60a6      	str	r6, [r4, #8]
 8007c42:	2e00      	cmp	r6, #0
 8007c44:	bfa2      	ittt	ge
 8007c46:	6821      	ldrge	r1, [r4, #0]
 8007c48:	f021 0104 	bicge.w	r1, r1, #4
 8007c4c:	6021      	strge	r1, [r4, #0]
 8007c4e:	b90d      	cbnz	r5, 8007c54 <_printf_i+0x118>
 8007c50:	2e00      	cmp	r6, #0
 8007c52:	d04d      	beq.n	8007cf0 <_printf_i+0x1b4>
 8007c54:	4616      	mov	r6, r2
 8007c56:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c5a:	fb03 5711 	mls	r7, r3, r1, r5
 8007c5e:	5dc7      	ldrb	r7, [r0, r7]
 8007c60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c64:	462f      	mov	r7, r5
 8007c66:	42bb      	cmp	r3, r7
 8007c68:	460d      	mov	r5, r1
 8007c6a:	d9f4      	bls.n	8007c56 <_printf_i+0x11a>
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d10b      	bne.n	8007c88 <_printf_i+0x14c>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	07df      	lsls	r7, r3, #31
 8007c74:	d508      	bpl.n	8007c88 <_printf_i+0x14c>
 8007c76:	6923      	ldr	r3, [r4, #16]
 8007c78:	6861      	ldr	r1, [r4, #4]
 8007c7a:	4299      	cmp	r1, r3
 8007c7c:	bfde      	ittt	le
 8007c7e:	2330      	movle	r3, #48	; 0x30
 8007c80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c88:	1b92      	subs	r2, r2, r6
 8007c8a:	6122      	str	r2, [r4, #16]
 8007c8c:	f8cd a000 	str.w	sl, [sp]
 8007c90:	464b      	mov	r3, r9
 8007c92:	aa03      	add	r2, sp, #12
 8007c94:	4621      	mov	r1, r4
 8007c96:	4640      	mov	r0, r8
 8007c98:	f7ff fee2 	bl	8007a60 <_printf_common>
 8007c9c:	3001      	adds	r0, #1
 8007c9e:	d14c      	bne.n	8007d3a <_printf_i+0x1fe>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca4:	b004      	add	sp, #16
 8007ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007caa:	4835      	ldr	r0, [pc, #212]	; (8007d80 <_printf_i+0x244>)
 8007cac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	680e      	ldr	r6, [r1, #0]
 8007cb4:	061f      	lsls	r7, r3, #24
 8007cb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cba:	600e      	str	r6, [r1, #0]
 8007cbc:	d514      	bpl.n	8007ce8 <_printf_i+0x1ac>
 8007cbe:	07d9      	lsls	r1, r3, #31
 8007cc0:	bf44      	itt	mi
 8007cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8007cc6:	6023      	strmi	r3, [r4, #0]
 8007cc8:	b91d      	cbnz	r5, 8007cd2 <_printf_i+0x196>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	f023 0320 	bic.w	r3, r3, #32
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	2310      	movs	r3, #16
 8007cd4:	e7b0      	b.n	8007c38 <_printf_i+0xfc>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	f043 0320 	orr.w	r3, r3, #32
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	2378      	movs	r3, #120	; 0x78
 8007ce0:	4828      	ldr	r0, [pc, #160]	; (8007d84 <_printf_i+0x248>)
 8007ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ce6:	e7e3      	b.n	8007cb0 <_printf_i+0x174>
 8007ce8:	065e      	lsls	r6, r3, #25
 8007cea:	bf48      	it	mi
 8007cec:	b2ad      	uxthmi	r5, r5
 8007cee:	e7e6      	b.n	8007cbe <_printf_i+0x182>
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	e7bb      	b.n	8007c6c <_printf_i+0x130>
 8007cf4:	680b      	ldr	r3, [r1, #0]
 8007cf6:	6826      	ldr	r6, [r4, #0]
 8007cf8:	6960      	ldr	r0, [r4, #20]
 8007cfa:	1d1d      	adds	r5, r3, #4
 8007cfc:	600d      	str	r5, [r1, #0]
 8007cfe:	0635      	lsls	r5, r6, #24
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	d501      	bpl.n	8007d08 <_printf_i+0x1cc>
 8007d04:	6018      	str	r0, [r3, #0]
 8007d06:	e002      	b.n	8007d0e <_printf_i+0x1d2>
 8007d08:	0671      	lsls	r1, r6, #25
 8007d0a:	d5fb      	bpl.n	8007d04 <_printf_i+0x1c8>
 8007d0c:	8018      	strh	r0, [r3, #0]
 8007d0e:	2300      	movs	r3, #0
 8007d10:	6123      	str	r3, [r4, #16]
 8007d12:	4616      	mov	r6, r2
 8007d14:	e7ba      	b.n	8007c8c <_printf_i+0x150>
 8007d16:	680b      	ldr	r3, [r1, #0]
 8007d18:	1d1a      	adds	r2, r3, #4
 8007d1a:	600a      	str	r2, [r1, #0]
 8007d1c:	681e      	ldr	r6, [r3, #0]
 8007d1e:	6862      	ldr	r2, [r4, #4]
 8007d20:	2100      	movs	r1, #0
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7f8 fabc 	bl	80002a0 <memchr>
 8007d28:	b108      	cbz	r0, 8007d2e <_printf_i+0x1f2>
 8007d2a:	1b80      	subs	r0, r0, r6
 8007d2c:	6060      	str	r0, [r4, #4]
 8007d2e:	6863      	ldr	r3, [r4, #4]
 8007d30:	6123      	str	r3, [r4, #16]
 8007d32:	2300      	movs	r3, #0
 8007d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d38:	e7a8      	b.n	8007c8c <_printf_i+0x150>
 8007d3a:	6923      	ldr	r3, [r4, #16]
 8007d3c:	4632      	mov	r2, r6
 8007d3e:	4649      	mov	r1, r9
 8007d40:	4640      	mov	r0, r8
 8007d42:	47d0      	blx	sl
 8007d44:	3001      	adds	r0, #1
 8007d46:	d0ab      	beq.n	8007ca0 <_printf_i+0x164>
 8007d48:	6823      	ldr	r3, [r4, #0]
 8007d4a:	079b      	lsls	r3, r3, #30
 8007d4c:	d413      	bmi.n	8007d76 <_printf_i+0x23a>
 8007d4e:	68e0      	ldr	r0, [r4, #12]
 8007d50:	9b03      	ldr	r3, [sp, #12]
 8007d52:	4298      	cmp	r0, r3
 8007d54:	bfb8      	it	lt
 8007d56:	4618      	movlt	r0, r3
 8007d58:	e7a4      	b.n	8007ca4 <_printf_i+0x168>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4649      	mov	r1, r9
 8007d60:	4640      	mov	r0, r8
 8007d62:	47d0      	blx	sl
 8007d64:	3001      	adds	r0, #1
 8007d66:	d09b      	beq.n	8007ca0 <_printf_i+0x164>
 8007d68:	3501      	adds	r5, #1
 8007d6a:	68e3      	ldr	r3, [r4, #12]
 8007d6c:	9903      	ldr	r1, [sp, #12]
 8007d6e:	1a5b      	subs	r3, r3, r1
 8007d70:	42ab      	cmp	r3, r5
 8007d72:	dcf2      	bgt.n	8007d5a <_printf_i+0x21e>
 8007d74:	e7eb      	b.n	8007d4e <_printf_i+0x212>
 8007d76:	2500      	movs	r5, #0
 8007d78:	f104 0619 	add.w	r6, r4, #25
 8007d7c:	e7f5      	b.n	8007d6a <_printf_i+0x22e>
 8007d7e:	bf00      	nop
 8007d80:	08008651 	.word	0x08008651
 8007d84:	08008662 	.word	0x08008662

08007d88 <_sbrk_r>:
 8007d88:	b538      	push	{r3, r4, r5, lr}
 8007d8a:	4d06      	ldr	r5, [pc, #24]	; (8007da4 <_sbrk_r+0x1c>)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	4608      	mov	r0, r1
 8007d92:	602b      	str	r3, [r5, #0]
 8007d94:	f000 fb2c 	bl	80083f0 <_sbrk>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	d102      	bne.n	8007da2 <_sbrk_r+0x1a>
 8007d9c:	682b      	ldr	r3, [r5, #0]
 8007d9e:	b103      	cbz	r3, 8007da2 <_sbrk_r+0x1a>
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	bd38      	pop	{r3, r4, r5, pc}
 8007da4:	2001451c 	.word	0x2001451c

08007da8 <__sread>:
 8007da8:	b510      	push	{r4, lr}
 8007daa:	460c      	mov	r4, r1
 8007dac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007db0:	f000 fae2 	bl	8008378 <_read_r>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	bfab      	itete	ge
 8007db8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dba:	89a3      	ldrhlt	r3, [r4, #12]
 8007dbc:	181b      	addge	r3, r3, r0
 8007dbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007dc2:	bfac      	ite	ge
 8007dc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dc6:	81a3      	strhlt	r3, [r4, #12]
 8007dc8:	bd10      	pop	{r4, pc}

08007dca <__swrite>:
 8007dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dce:	461f      	mov	r7, r3
 8007dd0:	898b      	ldrh	r3, [r1, #12]
 8007dd2:	05db      	lsls	r3, r3, #23
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	4616      	mov	r6, r2
 8007dda:	d505      	bpl.n	8007de8 <__swrite+0x1e>
 8007ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de0:	2302      	movs	r3, #2
 8007de2:	2200      	movs	r2, #0
 8007de4:	f000 f9b6 	bl	8008154 <_lseek_r>
 8007de8:	89a3      	ldrh	r3, [r4, #12]
 8007dea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	4632      	mov	r2, r6
 8007df6:	463b      	mov	r3, r7
 8007df8:	4628      	mov	r0, r5
 8007dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfe:	f7ff b981 	b.w	8007104 <_write_r>

08007e02 <__sseek>:
 8007e02:	b510      	push	{r4, lr}
 8007e04:	460c      	mov	r4, r1
 8007e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e0a:	f000 f9a3 	bl	8008154 <_lseek_r>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	bf15      	itete	ne
 8007e14:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e1e:	81a3      	strheq	r3, [r4, #12]
 8007e20:	bf18      	it	ne
 8007e22:	81a3      	strhne	r3, [r4, #12]
 8007e24:	bd10      	pop	{r4, pc}

08007e26 <__sclose>:
 8007e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2a:	f000 b8c1 	b.w	8007fb0 <_close_r>
	...

08007e30 <__swbuf_r>:
 8007e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e32:	460e      	mov	r6, r1
 8007e34:	4614      	mov	r4, r2
 8007e36:	4605      	mov	r5, r0
 8007e38:	b118      	cbz	r0, 8007e42 <__swbuf_r+0x12>
 8007e3a:	6983      	ldr	r3, [r0, #24]
 8007e3c:	b90b      	cbnz	r3, 8007e42 <__swbuf_r+0x12>
 8007e3e:	f7ff fa5f 	bl	8007300 <__sinit>
 8007e42:	4b21      	ldr	r3, [pc, #132]	; (8007ec8 <__swbuf_r+0x98>)
 8007e44:	429c      	cmp	r4, r3
 8007e46:	d12b      	bne.n	8007ea0 <__swbuf_r+0x70>
 8007e48:	686c      	ldr	r4, [r5, #4]
 8007e4a:	69a3      	ldr	r3, [r4, #24]
 8007e4c:	60a3      	str	r3, [r4, #8]
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	071a      	lsls	r2, r3, #28
 8007e52:	d52f      	bpl.n	8007eb4 <__swbuf_r+0x84>
 8007e54:	6923      	ldr	r3, [r4, #16]
 8007e56:	b36b      	cbz	r3, 8007eb4 <__swbuf_r+0x84>
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	6820      	ldr	r0, [r4, #0]
 8007e5c:	1ac0      	subs	r0, r0, r3
 8007e5e:	6963      	ldr	r3, [r4, #20]
 8007e60:	b2f6      	uxtb	r6, r6
 8007e62:	4283      	cmp	r3, r0
 8007e64:	4637      	mov	r7, r6
 8007e66:	dc04      	bgt.n	8007e72 <__swbuf_r+0x42>
 8007e68:	4621      	mov	r1, r4
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	f000 f936 	bl	80080dc <_fflush_r>
 8007e70:	bb30      	cbnz	r0, 8007ec0 <__swbuf_r+0x90>
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	60a3      	str	r3, [r4, #8]
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	1c5a      	adds	r2, r3, #1
 8007e7c:	6022      	str	r2, [r4, #0]
 8007e7e:	701e      	strb	r6, [r3, #0]
 8007e80:	6963      	ldr	r3, [r4, #20]
 8007e82:	3001      	adds	r0, #1
 8007e84:	4283      	cmp	r3, r0
 8007e86:	d004      	beq.n	8007e92 <__swbuf_r+0x62>
 8007e88:	89a3      	ldrh	r3, [r4, #12]
 8007e8a:	07db      	lsls	r3, r3, #31
 8007e8c:	d506      	bpl.n	8007e9c <__swbuf_r+0x6c>
 8007e8e:	2e0a      	cmp	r6, #10
 8007e90:	d104      	bne.n	8007e9c <__swbuf_r+0x6c>
 8007e92:	4621      	mov	r1, r4
 8007e94:	4628      	mov	r0, r5
 8007e96:	f000 f921 	bl	80080dc <_fflush_r>
 8007e9a:	b988      	cbnz	r0, 8007ec0 <__swbuf_r+0x90>
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	; (8007ecc <__swbuf_r+0x9c>)
 8007ea2:	429c      	cmp	r4, r3
 8007ea4:	d101      	bne.n	8007eaa <__swbuf_r+0x7a>
 8007ea6:	68ac      	ldr	r4, [r5, #8]
 8007ea8:	e7cf      	b.n	8007e4a <__swbuf_r+0x1a>
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <__swbuf_r+0xa0>)
 8007eac:	429c      	cmp	r4, r3
 8007eae:	bf08      	it	eq
 8007eb0:	68ec      	ldreq	r4, [r5, #12]
 8007eb2:	e7ca      	b.n	8007e4a <__swbuf_r+0x1a>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f000 f80c 	bl	8007ed4 <__swsetup_r>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	d0cb      	beq.n	8007e58 <__swbuf_r+0x28>
 8007ec0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ec4:	e7ea      	b.n	8007e9c <__swbuf_r+0x6c>
 8007ec6:	bf00      	nop
 8007ec8:	08008600 	.word	0x08008600
 8007ecc:	08008620 	.word	0x08008620
 8007ed0:	080085e0 	.word	0x080085e0

08007ed4 <__swsetup_r>:
 8007ed4:	4b32      	ldr	r3, [pc, #200]	; (8007fa0 <__swsetup_r+0xcc>)
 8007ed6:	b570      	push	{r4, r5, r6, lr}
 8007ed8:	681d      	ldr	r5, [r3, #0]
 8007eda:	4606      	mov	r6, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	b125      	cbz	r5, 8007eea <__swsetup_r+0x16>
 8007ee0:	69ab      	ldr	r3, [r5, #24]
 8007ee2:	b913      	cbnz	r3, 8007eea <__swsetup_r+0x16>
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f7ff fa0b 	bl	8007300 <__sinit>
 8007eea:	4b2e      	ldr	r3, [pc, #184]	; (8007fa4 <__swsetup_r+0xd0>)
 8007eec:	429c      	cmp	r4, r3
 8007eee:	d10f      	bne.n	8007f10 <__swsetup_r+0x3c>
 8007ef0:	686c      	ldr	r4, [r5, #4]
 8007ef2:	89a3      	ldrh	r3, [r4, #12]
 8007ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ef8:	0719      	lsls	r1, r3, #28
 8007efa:	d42c      	bmi.n	8007f56 <__swsetup_r+0x82>
 8007efc:	06dd      	lsls	r5, r3, #27
 8007efe:	d411      	bmi.n	8007f24 <__swsetup_r+0x50>
 8007f00:	2309      	movs	r3, #9
 8007f02:	6033      	str	r3, [r6, #0]
 8007f04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	e03e      	b.n	8007f8e <__swsetup_r+0xba>
 8007f10:	4b25      	ldr	r3, [pc, #148]	; (8007fa8 <__swsetup_r+0xd4>)
 8007f12:	429c      	cmp	r4, r3
 8007f14:	d101      	bne.n	8007f1a <__swsetup_r+0x46>
 8007f16:	68ac      	ldr	r4, [r5, #8]
 8007f18:	e7eb      	b.n	8007ef2 <__swsetup_r+0x1e>
 8007f1a:	4b24      	ldr	r3, [pc, #144]	; (8007fac <__swsetup_r+0xd8>)
 8007f1c:	429c      	cmp	r4, r3
 8007f1e:	bf08      	it	eq
 8007f20:	68ec      	ldreq	r4, [r5, #12]
 8007f22:	e7e6      	b.n	8007ef2 <__swsetup_r+0x1e>
 8007f24:	0758      	lsls	r0, r3, #29
 8007f26:	d512      	bpl.n	8007f4e <__swsetup_r+0x7a>
 8007f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f2a:	b141      	cbz	r1, 8007f3e <__swsetup_r+0x6a>
 8007f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f30:	4299      	cmp	r1, r3
 8007f32:	d002      	beq.n	8007f3a <__swsetup_r+0x66>
 8007f34:	4630      	mov	r0, r6
 8007f36:	f000 f9a9 	bl	800828c <_free_r>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f44:	81a3      	strh	r3, [r4, #12]
 8007f46:	2300      	movs	r3, #0
 8007f48:	6063      	str	r3, [r4, #4]
 8007f4a:	6923      	ldr	r3, [r4, #16]
 8007f4c:	6023      	str	r3, [r4, #0]
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	f043 0308 	orr.w	r3, r3, #8
 8007f54:	81a3      	strh	r3, [r4, #12]
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	b94b      	cbnz	r3, 8007f6e <__swsetup_r+0x9a>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f64:	d003      	beq.n	8007f6e <__swsetup_r+0x9a>
 8007f66:	4621      	mov	r1, r4
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f000 f929 	bl	80081c0 <__smakebuf_r>
 8007f6e:	89a0      	ldrh	r0, [r4, #12]
 8007f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f74:	f010 0301 	ands.w	r3, r0, #1
 8007f78:	d00a      	beq.n	8007f90 <__swsetup_r+0xbc>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60a3      	str	r3, [r4, #8]
 8007f7e:	6963      	ldr	r3, [r4, #20]
 8007f80:	425b      	negs	r3, r3
 8007f82:	61a3      	str	r3, [r4, #24]
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	b943      	cbnz	r3, 8007f9a <__swsetup_r+0xc6>
 8007f88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f8c:	d1ba      	bne.n	8007f04 <__swsetup_r+0x30>
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	0781      	lsls	r1, r0, #30
 8007f92:	bf58      	it	pl
 8007f94:	6963      	ldrpl	r3, [r4, #20]
 8007f96:	60a3      	str	r3, [r4, #8]
 8007f98:	e7f4      	b.n	8007f84 <__swsetup_r+0xb0>
 8007f9a:	2000      	movs	r0, #0
 8007f9c:	e7f7      	b.n	8007f8e <__swsetup_r+0xba>
 8007f9e:	bf00      	nop
 8007fa0:	20000014 	.word	0x20000014
 8007fa4:	08008600 	.word	0x08008600
 8007fa8:	08008620 	.word	0x08008620
 8007fac:	080085e0 	.word	0x080085e0

08007fb0 <_close_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d06      	ldr	r5, [pc, #24]	; (8007fcc <_close_r+0x1c>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7f8 fc37 	bl	800082e <_close>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_close_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_close_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	2001451c 	.word	0x2001451c

08007fd0 <__sflush_r>:
 8007fd0:	898a      	ldrh	r2, [r1, #12]
 8007fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd6:	4605      	mov	r5, r0
 8007fd8:	0710      	lsls	r0, r2, #28
 8007fda:	460c      	mov	r4, r1
 8007fdc:	d458      	bmi.n	8008090 <__sflush_r+0xc0>
 8007fde:	684b      	ldr	r3, [r1, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	dc05      	bgt.n	8007ff0 <__sflush_r+0x20>
 8007fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dc02      	bgt.n	8007ff0 <__sflush_r+0x20>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ff2:	2e00      	cmp	r6, #0
 8007ff4:	d0f9      	beq.n	8007fea <__sflush_r+0x1a>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ffc:	682f      	ldr	r7, [r5, #0]
 8007ffe:	602b      	str	r3, [r5, #0]
 8008000:	d032      	beq.n	8008068 <__sflush_r+0x98>
 8008002:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	075a      	lsls	r2, r3, #29
 8008008:	d505      	bpl.n	8008016 <__sflush_r+0x46>
 800800a:	6863      	ldr	r3, [r4, #4]
 800800c:	1ac0      	subs	r0, r0, r3
 800800e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008010:	b10b      	cbz	r3, 8008016 <__sflush_r+0x46>
 8008012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008014:	1ac0      	subs	r0, r0, r3
 8008016:	2300      	movs	r3, #0
 8008018:	4602      	mov	r2, r0
 800801a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800801c:	6a21      	ldr	r1, [r4, #32]
 800801e:	4628      	mov	r0, r5
 8008020:	47b0      	blx	r6
 8008022:	1c43      	adds	r3, r0, #1
 8008024:	89a3      	ldrh	r3, [r4, #12]
 8008026:	d106      	bne.n	8008036 <__sflush_r+0x66>
 8008028:	6829      	ldr	r1, [r5, #0]
 800802a:	291d      	cmp	r1, #29
 800802c:	d82c      	bhi.n	8008088 <__sflush_r+0xb8>
 800802e:	4a2a      	ldr	r2, [pc, #168]	; (80080d8 <__sflush_r+0x108>)
 8008030:	40ca      	lsrs	r2, r1
 8008032:	07d6      	lsls	r6, r2, #31
 8008034:	d528      	bpl.n	8008088 <__sflush_r+0xb8>
 8008036:	2200      	movs	r2, #0
 8008038:	6062      	str	r2, [r4, #4]
 800803a:	04d9      	lsls	r1, r3, #19
 800803c:	6922      	ldr	r2, [r4, #16]
 800803e:	6022      	str	r2, [r4, #0]
 8008040:	d504      	bpl.n	800804c <__sflush_r+0x7c>
 8008042:	1c42      	adds	r2, r0, #1
 8008044:	d101      	bne.n	800804a <__sflush_r+0x7a>
 8008046:	682b      	ldr	r3, [r5, #0]
 8008048:	b903      	cbnz	r3, 800804c <__sflush_r+0x7c>
 800804a:	6560      	str	r0, [r4, #84]	; 0x54
 800804c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804e:	602f      	str	r7, [r5, #0]
 8008050:	2900      	cmp	r1, #0
 8008052:	d0ca      	beq.n	8007fea <__sflush_r+0x1a>
 8008054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008058:	4299      	cmp	r1, r3
 800805a:	d002      	beq.n	8008062 <__sflush_r+0x92>
 800805c:	4628      	mov	r0, r5
 800805e:	f000 f915 	bl	800828c <_free_r>
 8008062:	2000      	movs	r0, #0
 8008064:	6360      	str	r0, [r4, #52]	; 0x34
 8008066:	e7c1      	b.n	8007fec <__sflush_r+0x1c>
 8008068:	6a21      	ldr	r1, [r4, #32]
 800806a:	2301      	movs	r3, #1
 800806c:	4628      	mov	r0, r5
 800806e:	47b0      	blx	r6
 8008070:	1c41      	adds	r1, r0, #1
 8008072:	d1c7      	bne.n	8008004 <__sflush_r+0x34>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0c4      	beq.n	8008004 <__sflush_r+0x34>
 800807a:	2b1d      	cmp	r3, #29
 800807c:	d001      	beq.n	8008082 <__sflush_r+0xb2>
 800807e:	2b16      	cmp	r3, #22
 8008080:	d101      	bne.n	8008086 <__sflush_r+0xb6>
 8008082:	602f      	str	r7, [r5, #0]
 8008084:	e7b1      	b.n	8007fea <__sflush_r+0x1a>
 8008086:	89a3      	ldrh	r3, [r4, #12]
 8008088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	e7ad      	b.n	8007fec <__sflush_r+0x1c>
 8008090:	690f      	ldr	r7, [r1, #16]
 8008092:	2f00      	cmp	r7, #0
 8008094:	d0a9      	beq.n	8007fea <__sflush_r+0x1a>
 8008096:	0793      	lsls	r3, r2, #30
 8008098:	680e      	ldr	r6, [r1, #0]
 800809a:	bf08      	it	eq
 800809c:	694b      	ldreq	r3, [r1, #20]
 800809e:	600f      	str	r7, [r1, #0]
 80080a0:	bf18      	it	ne
 80080a2:	2300      	movne	r3, #0
 80080a4:	eba6 0807 	sub.w	r8, r6, r7
 80080a8:	608b      	str	r3, [r1, #8]
 80080aa:	f1b8 0f00 	cmp.w	r8, #0
 80080ae:	dd9c      	ble.n	8007fea <__sflush_r+0x1a>
 80080b0:	6a21      	ldr	r1, [r4, #32]
 80080b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80080b4:	4643      	mov	r3, r8
 80080b6:	463a      	mov	r2, r7
 80080b8:	4628      	mov	r0, r5
 80080ba:	47b0      	blx	r6
 80080bc:	2800      	cmp	r0, #0
 80080be:	dc06      	bgt.n	80080ce <__sflush_r+0xfe>
 80080c0:	89a3      	ldrh	r3, [r4, #12]
 80080c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080c6:	81a3      	strh	r3, [r4, #12]
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295
 80080cc:	e78e      	b.n	8007fec <__sflush_r+0x1c>
 80080ce:	4407      	add	r7, r0
 80080d0:	eba8 0800 	sub.w	r8, r8, r0
 80080d4:	e7e9      	b.n	80080aa <__sflush_r+0xda>
 80080d6:	bf00      	nop
 80080d8:	20400001 	.word	0x20400001

080080dc <_fflush_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	690b      	ldr	r3, [r1, #16]
 80080e0:	4605      	mov	r5, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	b913      	cbnz	r3, 80080ec <_fflush_r+0x10>
 80080e6:	2500      	movs	r5, #0
 80080e8:	4628      	mov	r0, r5
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	b118      	cbz	r0, 80080f6 <_fflush_r+0x1a>
 80080ee:	6983      	ldr	r3, [r0, #24]
 80080f0:	b90b      	cbnz	r3, 80080f6 <_fflush_r+0x1a>
 80080f2:	f7ff f905 	bl	8007300 <__sinit>
 80080f6:	4b14      	ldr	r3, [pc, #80]	; (8008148 <_fflush_r+0x6c>)
 80080f8:	429c      	cmp	r4, r3
 80080fa:	d11b      	bne.n	8008134 <_fflush_r+0x58>
 80080fc:	686c      	ldr	r4, [r5, #4]
 80080fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0ef      	beq.n	80080e6 <_fflush_r+0xa>
 8008106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008108:	07d0      	lsls	r0, r2, #31
 800810a:	d404      	bmi.n	8008116 <_fflush_r+0x3a>
 800810c:	0599      	lsls	r1, r3, #22
 800810e:	d402      	bmi.n	8008116 <_fflush_r+0x3a>
 8008110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008112:	f7ff f993 	bl	800743c <__retarget_lock_acquire_recursive>
 8008116:	4628      	mov	r0, r5
 8008118:	4621      	mov	r1, r4
 800811a:	f7ff ff59 	bl	8007fd0 <__sflush_r>
 800811e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008120:	07da      	lsls	r2, r3, #31
 8008122:	4605      	mov	r5, r0
 8008124:	d4e0      	bmi.n	80080e8 <_fflush_r+0xc>
 8008126:	89a3      	ldrh	r3, [r4, #12]
 8008128:	059b      	lsls	r3, r3, #22
 800812a:	d4dd      	bmi.n	80080e8 <_fflush_r+0xc>
 800812c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800812e:	f7ff f986 	bl	800743e <__retarget_lock_release_recursive>
 8008132:	e7d9      	b.n	80080e8 <_fflush_r+0xc>
 8008134:	4b05      	ldr	r3, [pc, #20]	; (800814c <_fflush_r+0x70>)
 8008136:	429c      	cmp	r4, r3
 8008138:	d101      	bne.n	800813e <_fflush_r+0x62>
 800813a:	68ac      	ldr	r4, [r5, #8]
 800813c:	e7df      	b.n	80080fe <_fflush_r+0x22>
 800813e:	4b04      	ldr	r3, [pc, #16]	; (8008150 <_fflush_r+0x74>)
 8008140:	429c      	cmp	r4, r3
 8008142:	bf08      	it	eq
 8008144:	68ec      	ldreq	r4, [r5, #12]
 8008146:	e7da      	b.n	80080fe <_fflush_r+0x22>
 8008148:	08008600 	.word	0x08008600
 800814c:	08008620 	.word	0x08008620
 8008150:	080085e0 	.word	0x080085e0

08008154 <_lseek_r>:
 8008154:	b538      	push	{r3, r4, r5, lr}
 8008156:	4d07      	ldr	r5, [pc, #28]	; (8008174 <_lseek_r+0x20>)
 8008158:	4604      	mov	r4, r0
 800815a:	4608      	mov	r0, r1
 800815c:	4611      	mov	r1, r2
 800815e:	2200      	movs	r2, #0
 8008160:	602a      	str	r2, [r5, #0]
 8008162:	461a      	mov	r2, r3
 8008164:	f7f8 fb8a 	bl	800087c <_lseek>
 8008168:	1c43      	adds	r3, r0, #1
 800816a:	d102      	bne.n	8008172 <_lseek_r+0x1e>
 800816c:	682b      	ldr	r3, [r5, #0]
 800816e:	b103      	cbz	r3, 8008172 <_lseek_r+0x1e>
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	bd38      	pop	{r3, r4, r5, pc}
 8008174:	2001451c 	.word	0x2001451c

08008178 <__swhatbuf_r>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	460e      	mov	r6, r1
 800817c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008180:	2900      	cmp	r1, #0
 8008182:	b096      	sub	sp, #88	; 0x58
 8008184:	4614      	mov	r4, r2
 8008186:	461d      	mov	r5, r3
 8008188:	da07      	bge.n	800819a <__swhatbuf_r+0x22>
 800818a:	2300      	movs	r3, #0
 800818c:	602b      	str	r3, [r5, #0]
 800818e:	89b3      	ldrh	r3, [r6, #12]
 8008190:	061a      	lsls	r2, r3, #24
 8008192:	d410      	bmi.n	80081b6 <__swhatbuf_r+0x3e>
 8008194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008198:	e00e      	b.n	80081b8 <__swhatbuf_r+0x40>
 800819a:	466a      	mov	r2, sp
 800819c:	f000 f8fe 	bl	800839c <_fstat_r>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	dbf2      	blt.n	800818a <__swhatbuf_r+0x12>
 80081a4:	9a01      	ldr	r2, [sp, #4]
 80081a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081ae:	425a      	negs	r2, r3
 80081b0:	415a      	adcs	r2, r3
 80081b2:	602a      	str	r2, [r5, #0]
 80081b4:	e7ee      	b.n	8008194 <__swhatbuf_r+0x1c>
 80081b6:	2340      	movs	r3, #64	; 0x40
 80081b8:	2000      	movs	r0, #0
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	b016      	add	sp, #88	; 0x58
 80081be:	bd70      	pop	{r4, r5, r6, pc}

080081c0 <__smakebuf_r>:
 80081c0:	898b      	ldrh	r3, [r1, #12]
 80081c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081c4:	079d      	lsls	r5, r3, #30
 80081c6:	4606      	mov	r6, r0
 80081c8:	460c      	mov	r4, r1
 80081ca:	d507      	bpl.n	80081dc <__smakebuf_r+0x1c>
 80081cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	2301      	movs	r3, #1
 80081d6:	6163      	str	r3, [r4, #20]
 80081d8:	b002      	add	sp, #8
 80081da:	bd70      	pop	{r4, r5, r6, pc}
 80081dc:	ab01      	add	r3, sp, #4
 80081de:	466a      	mov	r2, sp
 80081e0:	f7ff ffca 	bl	8008178 <__swhatbuf_r>
 80081e4:	9900      	ldr	r1, [sp, #0]
 80081e6:	4605      	mov	r5, r0
 80081e8:	4630      	mov	r0, r6
 80081ea:	f7ff f929 	bl	8007440 <_malloc_r>
 80081ee:	b948      	cbnz	r0, 8008204 <__smakebuf_r+0x44>
 80081f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f4:	059a      	lsls	r2, r3, #22
 80081f6:	d4ef      	bmi.n	80081d8 <__smakebuf_r+0x18>
 80081f8:	f023 0303 	bic.w	r3, r3, #3
 80081fc:	f043 0302 	orr.w	r3, r3, #2
 8008200:	81a3      	strh	r3, [r4, #12]
 8008202:	e7e3      	b.n	80081cc <__smakebuf_r+0xc>
 8008204:	4b0d      	ldr	r3, [pc, #52]	; (800823c <__smakebuf_r+0x7c>)
 8008206:	62b3      	str	r3, [r6, #40]	; 0x28
 8008208:	89a3      	ldrh	r3, [r4, #12]
 800820a:	6020      	str	r0, [r4, #0]
 800820c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008210:	81a3      	strh	r3, [r4, #12]
 8008212:	9b00      	ldr	r3, [sp, #0]
 8008214:	6163      	str	r3, [r4, #20]
 8008216:	9b01      	ldr	r3, [sp, #4]
 8008218:	6120      	str	r0, [r4, #16]
 800821a:	b15b      	cbz	r3, 8008234 <__smakebuf_r+0x74>
 800821c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008220:	4630      	mov	r0, r6
 8008222:	f000 f8cd 	bl	80083c0 <_isatty_r>
 8008226:	b128      	cbz	r0, 8008234 <__smakebuf_r+0x74>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f023 0303 	bic.w	r3, r3, #3
 800822e:	f043 0301 	orr.w	r3, r3, #1
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	89a0      	ldrh	r0, [r4, #12]
 8008236:	4305      	orrs	r5, r0
 8008238:	81a5      	strh	r5, [r4, #12]
 800823a:	e7cd      	b.n	80081d8 <__smakebuf_r+0x18>
 800823c:	08007299 	.word	0x08007299

08008240 <memmove>:
 8008240:	4288      	cmp	r0, r1
 8008242:	b510      	push	{r4, lr}
 8008244:	eb01 0402 	add.w	r4, r1, r2
 8008248:	d902      	bls.n	8008250 <memmove+0x10>
 800824a:	4284      	cmp	r4, r0
 800824c:	4623      	mov	r3, r4
 800824e:	d807      	bhi.n	8008260 <memmove+0x20>
 8008250:	1e43      	subs	r3, r0, #1
 8008252:	42a1      	cmp	r1, r4
 8008254:	d008      	beq.n	8008268 <memmove+0x28>
 8008256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800825a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800825e:	e7f8      	b.n	8008252 <memmove+0x12>
 8008260:	4402      	add	r2, r0
 8008262:	4601      	mov	r1, r0
 8008264:	428a      	cmp	r2, r1
 8008266:	d100      	bne.n	800826a <memmove+0x2a>
 8008268:	bd10      	pop	{r4, pc}
 800826a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800826e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008272:	e7f7      	b.n	8008264 <memmove+0x24>

08008274 <__malloc_lock>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__malloc_lock+0x8>)
 8008276:	f7ff b8e1 	b.w	800743c <__retarget_lock_acquire_recursive>
 800827a:	bf00      	nop
 800827c:	20014514 	.word	0x20014514

08008280 <__malloc_unlock>:
 8008280:	4801      	ldr	r0, [pc, #4]	; (8008288 <__malloc_unlock+0x8>)
 8008282:	f7ff b8dc 	b.w	800743e <__retarget_lock_release_recursive>
 8008286:	bf00      	nop
 8008288:	20014514 	.word	0x20014514

0800828c <_free_r>:
 800828c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800828e:	2900      	cmp	r1, #0
 8008290:	d048      	beq.n	8008324 <_free_r+0x98>
 8008292:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008296:	9001      	str	r0, [sp, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	f1a1 0404 	sub.w	r4, r1, #4
 800829e:	bfb8      	it	lt
 80082a0:	18e4      	addlt	r4, r4, r3
 80082a2:	f7ff ffe7 	bl	8008274 <__malloc_lock>
 80082a6:	4a20      	ldr	r2, [pc, #128]	; (8008328 <_free_r+0x9c>)
 80082a8:	9801      	ldr	r0, [sp, #4]
 80082aa:	6813      	ldr	r3, [r2, #0]
 80082ac:	4615      	mov	r5, r2
 80082ae:	b933      	cbnz	r3, 80082be <_free_r+0x32>
 80082b0:	6063      	str	r3, [r4, #4]
 80082b2:	6014      	str	r4, [r2, #0]
 80082b4:	b003      	add	sp, #12
 80082b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082ba:	f7ff bfe1 	b.w	8008280 <__malloc_unlock>
 80082be:	42a3      	cmp	r3, r4
 80082c0:	d90b      	bls.n	80082da <_free_r+0x4e>
 80082c2:	6821      	ldr	r1, [r4, #0]
 80082c4:	1862      	adds	r2, r4, r1
 80082c6:	4293      	cmp	r3, r2
 80082c8:	bf04      	itt	eq
 80082ca:	681a      	ldreq	r2, [r3, #0]
 80082cc:	685b      	ldreq	r3, [r3, #4]
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	bf04      	itt	eq
 80082d2:	1852      	addeq	r2, r2, r1
 80082d4:	6022      	streq	r2, [r4, #0]
 80082d6:	602c      	str	r4, [r5, #0]
 80082d8:	e7ec      	b.n	80082b4 <_free_r+0x28>
 80082da:	461a      	mov	r2, r3
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	b10b      	cbz	r3, 80082e4 <_free_r+0x58>
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d9fa      	bls.n	80082da <_free_r+0x4e>
 80082e4:	6811      	ldr	r1, [r2, #0]
 80082e6:	1855      	adds	r5, r2, r1
 80082e8:	42a5      	cmp	r5, r4
 80082ea:	d10b      	bne.n	8008304 <_free_r+0x78>
 80082ec:	6824      	ldr	r4, [r4, #0]
 80082ee:	4421      	add	r1, r4
 80082f0:	1854      	adds	r4, r2, r1
 80082f2:	42a3      	cmp	r3, r4
 80082f4:	6011      	str	r1, [r2, #0]
 80082f6:	d1dd      	bne.n	80082b4 <_free_r+0x28>
 80082f8:	681c      	ldr	r4, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	6053      	str	r3, [r2, #4]
 80082fe:	4421      	add	r1, r4
 8008300:	6011      	str	r1, [r2, #0]
 8008302:	e7d7      	b.n	80082b4 <_free_r+0x28>
 8008304:	d902      	bls.n	800830c <_free_r+0x80>
 8008306:	230c      	movs	r3, #12
 8008308:	6003      	str	r3, [r0, #0]
 800830a:	e7d3      	b.n	80082b4 <_free_r+0x28>
 800830c:	6825      	ldr	r5, [r4, #0]
 800830e:	1961      	adds	r1, r4, r5
 8008310:	428b      	cmp	r3, r1
 8008312:	bf04      	itt	eq
 8008314:	6819      	ldreq	r1, [r3, #0]
 8008316:	685b      	ldreq	r3, [r3, #4]
 8008318:	6063      	str	r3, [r4, #4]
 800831a:	bf04      	itt	eq
 800831c:	1949      	addeq	r1, r1, r5
 800831e:	6021      	streq	r1, [r4, #0]
 8008320:	6054      	str	r4, [r2, #4]
 8008322:	e7c7      	b.n	80082b4 <_free_r+0x28>
 8008324:	b003      	add	sp, #12
 8008326:	bd30      	pop	{r4, r5, pc}
 8008328:	200143cc 	.word	0x200143cc

0800832c <_realloc_r>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	4607      	mov	r7, r0
 8008330:	4614      	mov	r4, r2
 8008332:	460e      	mov	r6, r1
 8008334:	b921      	cbnz	r1, 8008340 <_realloc_r+0x14>
 8008336:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800833a:	4611      	mov	r1, r2
 800833c:	f7ff b880 	b.w	8007440 <_malloc_r>
 8008340:	b922      	cbnz	r2, 800834c <_realloc_r+0x20>
 8008342:	f7ff ffa3 	bl	800828c <_free_r>
 8008346:	4625      	mov	r5, r4
 8008348:	4628      	mov	r0, r5
 800834a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800834c:	f000 f848 	bl	80083e0 <_malloc_usable_size_r>
 8008350:	42a0      	cmp	r0, r4
 8008352:	d20f      	bcs.n	8008374 <_realloc_r+0x48>
 8008354:	4621      	mov	r1, r4
 8008356:	4638      	mov	r0, r7
 8008358:	f7ff f872 	bl	8007440 <_malloc_r>
 800835c:	4605      	mov	r5, r0
 800835e:	2800      	cmp	r0, #0
 8008360:	d0f2      	beq.n	8008348 <_realloc_r+0x1c>
 8008362:	4631      	mov	r1, r6
 8008364:	4622      	mov	r2, r4
 8008366:	f7fe ff11 	bl	800718c <memcpy>
 800836a:	4631      	mov	r1, r6
 800836c:	4638      	mov	r0, r7
 800836e:	f7ff ff8d 	bl	800828c <_free_r>
 8008372:	e7e9      	b.n	8008348 <_realloc_r+0x1c>
 8008374:	4635      	mov	r5, r6
 8008376:	e7e7      	b.n	8008348 <_realloc_r+0x1c>

08008378 <_read_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4d07      	ldr	r5, [pc, #28]	; (8008398 <_read_r+0x20>)
 800837c:	4604      	mov	r4, r0
 800837e:	4608      	mov	r0, r1
 8008380:	4611      	mov	r1, r2
 8008382:	2200      	movs	r2, #0
 8008384:	602a      	str	r2, [r5, #0]
 8008386:	461a      	mov	r2, r3
 8008388:	f7f8 fa34 	bl	80007f4 <_read>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_read_r+0x1e>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_read_r+0x1e>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	2001451c 	.word	0x2001451c

0800839c <_fstat_r>:
 800839c:	b538      	push	{r3, r4, r5, lr}
 800839e:	4d07      	ldr	r5, [pc, #28]	; (80083bc <_fstat_r+0x20>)
 80083a0:	2300      	movs	r3, #0
 80083a2:	4604      	mov	r4, r0
 80083a4:	4608      	mov	r0, r1
 80083a6:	4611      	mov	r1, r2
 80083a8:	602b      	str	r3, [r5, #0]
 80083aa:	f7f8 fa4c 	bl	8000846 <_fstat>
 80083ae:	1c43      	adds	r3, r0, #1
 80083b0:	d102      	bne.n	80083b8 <_fstat_r+0x1c>
 80083b2:	682b      	ldr	r3, [r5, #0]
 80083b4:	b103      	cbz	r3, 80083b8 <_fstat_r+0x1c>
 80083b6:	6023      	str	r3, [r4, #0]
 80083b8:	bd38      	pop	{r3, r4, r5, pc}
 80083ba:	bf00      	nop
 80083bc:	2001451c 	.word	0x2001451c

080083c0 <_isatty_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4d06      	ldr	r5, [pc, #24]	; (80083dc <_isatty_r+0x1c>)
 80083c4:	2300      	movs	r3, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	602b      	str	r3, [r5, #0]
 80083cc:	f7f8 fa4b 	bl	8000866 <_isatty>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_isatty_r+0x1a>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_isatty_r+0x1a>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	2001451c 	.word	0x2001451c

080083e0 <_malloc_usable_size_r>:
 80083e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e4:	1f18      	subs	r0, r3, #4
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bfbc      	itt	lt
 80083ea:	580b      	ldrlt	r3, [r1, r0]
 80083ec:	18c0      	addlt	r0, r0, r3
 80083ee:	4770      	bx	lr

080083f0 <_sbrk>:
 80083f0:	4b04      	ldr	r3, [pc, #16]	; (8008404 <_sbrk+0x14>)
 80083f2:	6819      	ldr	r1, [r3, #0]
 80083f4:	4602      	mov	r2, r0
 80083f6:	b909      	cbnz	r1, 80083fc <_sbrk+0xc>
 80083f8:	4903      	ldr	r1, [pc, #12]	; (8008408 <_sbrk+0x18>)
 80083fa:	6019      	str	r1, [r3, #0]
 80083fc:	6818      	ldr	r0, [r3, #0]
 80083fe:	4402      	add	r2, r0
 8008400:	601a      	str	r2, [r3, #0]
 8008402:	4770      	bx	lr
 8008404:	200143d4 	.word	0x200143d4
 8008408:	20014520 	.word	0x20014520

0800840c <_init>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr

08008418 <_fini>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr
